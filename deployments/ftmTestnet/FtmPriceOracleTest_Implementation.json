{
  "address": "0x25276F97f70c2E3bC907f6B5A955a76248ae9945",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        }
      ],
      "name": "getAssetsPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "decimalsArray",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getSourceOfAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "sources",
          "type": "address[]"
        }
      ],
      "name": "setAssetSources",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xedf327e08ea070f0b09116b1b7397ec19ab185d6225c8db1e9464251f6b91fda",
  "receipt": {
    "to": null,
    "from": "0xd91Fbc9b431464D737E1BC4e76900D43405a639b",
    "contractAddress": "0x25276F97f70c2E3bC907f6B5A955a76248ae9945",
    "transactionIndex": 0,
    "gasUsed": "771196",
    "logsBloom": "0x
    "blockHash": "0x00002bcc000009703a64de3e22d18060dd090abf1a15a02599c4b3290a2c4bc5",
    "transactionHash": "0xedf327e08ea070f0b09116b1b7397ec19ab185d6225c8db1e9464251f6b91fda",
    "logs": [],
    "blockNumber": 10277689,
    "cumulativeGasUsed": "771196",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "88c5ae54797f57c2378a41f884fd5600",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"getAssetsPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"decimalsArray\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getSourceOfAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"}],\"name\":\"setAssetSources\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAssetPrice(address)\":{\"params\":{\"asset\":\"The asset address\"},\"returns\":{\"price\":\"The prices of the given assets\"}},\"getAssetsPrices(address[])\":{\"params\":{\"assets\":\"The list of assets addresses\"},\"returns\":{\"prices\":\"The prices of the given assets\"}},\"getSourceOfAsset(address)\":{\"params\":{\"asset\":\"The address of the asset\"},\"returns\":{\"_0\":\"The address of the source\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAssetSources(address[],address[])\":{\"params\":{\"assets\":\"The addresses of the assets\",\"sources\":\"The addresses of the price sources\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAssetPrice(address)\":{\"notice\":\"Returns a list of prices from a list of assets addresses\"},\"getAssetsPrices(address[])\":{\"notice\":\"Returns a list of prices from a list of assets addresses\"},\"getSourceOfAsset(address)\":{\"notice\":\"Returns the address of the source for an asset address\"},\"setAssetSources(address[],address[])\":{\"notice\":\"Sets or replaces price sources of assets\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bni/priceOracle/FtmPriceOracleTest.sol\":\"FtmPriceOracleTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/bni/constant/FtmConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary FtmConstantTest {\\n    uint internal constant CHAINID = 4002;\\n\\n    address internal constant USDC = 0x147abEE959A578F2ae5F9bC996dcf6259EBd3a89;\\n    address internal constant USDT = 0xb02068AE04Bf5d184EFDe3583e09f2185a30da0e;\\n    address internal constant WFTM = 0xf1277d1Ed8AD466beddF92ef448A132661956621;\\n}\\n\",\"keccak256\":\"0xf3f23ac114bd1500bd38c3095382b9459f8f4750b59c96bee4e44bb0187bb906\",\"license\":\"MIT\"},\"contracts/bni/priceOracle/FtmPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract FtmPriceOracle is PriceOracle {\\n}\\n\",\"keccak256\":\"0xbe964a9ce6eb1c70cf7e134f872d3beeee31ac48352018ea1299c8930cbd7e02\",\"license\":\"MIT\"},\"contracts/bni/priceOracle/FtmPriceOracleTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nimport \\\"./FtmPriceOracle.sol\\\";\\nimport \\\"../constant/FtmConstantTest.sol\\\";\\nimport \\\"../../../libs/Const.sol\\\";\\n\\ncontract FtmPriceOracleTest is FtmPriceOracle {\\n\\n    function initialize() public override initializer {\\n        super.initialize();\\n\\n        address[] memory assets = new address[](2);\\n        assets[0] = FtmConstantTest.USDT;\\n        assets[1] = FtmConstantTest.WFTM;\\n        address[] memory sources = new address[](2);\\n        sources[0] = 0x9BB8A6dcD83E36726Cc230a97F1AF8a84ae5F128;\\n        sources[1] = 0xe04676B9A9A2973BCb0D1478b5E1E9098BBB7f3D;\\n\\n        setAssetSources(assets, sources);\\n    }\\n\\n    function getAssetPrice(address asset) public override view returns (uint price, uint8 decimals) {\\n        if (asset == Const.NATIVE_ASSET) {\\n            asset = FtmConstantTest.WFTM;\\n        }\\n        return super.getAssetPrice(asset);\\n    }\\n}\\n\",\"keccak256\":\"0x68b22c505c2304c8ecd6b5992649d67c30873ca66f165160fbe8c8ebef0ae659\",\"license\":\"MIT\"},\"contracts/bni/priceOracle/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity  0.8.9;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n\\r\\n    /**\\r\\n     * @notice Sets or replaces price sources of assets\\r\\n     * @param assets The addresses of the assets\\r\\n     * @param sources The addresses of the price sources\\r\\n     */\\r\\n    function setAssetSources(address[] memory assets, address[] memory sources) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the source for an asset address\\r\\n     * @param asset The address of the asset\\r\\n     * @return The address of the source\\r\\n     */\\r\\n    function getSourceOfAsset(address asset) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param assets The list of assets addresses\\r\\n     * @return prices The prices of the given assets\\r\\n     */\\r\\n    function getAssetsPrices(address[] memory assets) external view returns (uint[] memory prices, uint8[] memory decimalsArray);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param asset The asset address\\r\\n     * @return price The prices of the given assets\\r\\n     */\\r\\n    function getAssetPrice(address asset) external view returns (uint price, uint8 decimals);\\r\\n}\",\"keccak256\":\"0xaf07db77a02bf0cdc1cbd5f7c33cebd04e3e961c517adc53664eca0fc6dccdfe\",\"license\":\"MIT\"},\"contracts/bni/priceOracle/PriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./IPriceOracle.sol\\\";\\n\\ninterface IChainlinkAggregator {\\n    function decimals() external view returns (uint8);\\n    function description() external view returns (string memory);\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId) external view returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n    function latestRoundData() external view returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n    function latestAnswer() external view returns (int256);\\n}\\n\\ncontract PriceOracle is IPriceOracle, OwnableUpgradeable {\\n    \\n    // Map of asset price sources (asset => priceSource)\\n    mapping(address => IChainlinkAggregator) internal assetsSources;\\n\\n    function initialize() public virtual initializer {\\n        __Ownable_init();\\n    }\\n\\n    function setAssetSources(address[] memory assets, address[] memory sources) public override onlyOwner {\\n        uint count = assets.length;\\n        require(count == sources.length, \\\"Not match array length\\\");\\n        for (uint i = 0; i < count; i ++) {\\n            assetsSources[assets[i]] = IChainlinkAggregator(sources[i]);\\n        }\\n    }\\n\\n    function getSourceOfAsset(address asset) public override view returns (address) {\\n        return address(assetsSources[asset]);\\n    }\\n\\n    function getAssetsPrices(address[] memory assets) public override view returns (uint[] memory prices, uint8[] memory decimalsArray) {\\n        uint count = assets.length;\\n        prices = new uint[](count);\\n        decimalsArray = new uint8[](count);\\n        for (uint i = 0; i < count; i ++) {\\n            (uint price, uint8 decimals) = getAssetPrice(assets[i]);\\n            prices[i] = price;\\n            decimalsArray[i] = decimals;\\n        }\\n    }\\n\\n    function getAssetPrice(address asset) public virtual override view returns (uint price, uint8 decimals) {\\n        IChainlinkAggregator source = assetsSources[asset];\\n        if (address(source) != address(0)) {\\n            int256 _price = source.latestAnswer();\\n            if (_price > 0) {\\n                price = uint(_price);\\n            }\\n            decimals = source.decimals();\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x04b7949167dba5b29a110764ec4d9e801898b48455592f403081756a57edb4b1\",\"license\":\"MIT\"},\"libs/Const.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Const {\\r\\n\\r\\n    uint internal constant DENOMINATOR = 10000;\\r\\n\\r\\n    uint internal constant APR_SCALE = 1e18;\\r\\n    \\r\\n    uint internal constant YEAR_IN_SEC = 365 days;\\r\\n\\r\\n    address internal constant NATIVE_ASSET = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n\\r\\n    enum TokenID { USDT, USDC }\\r\\n}\\r\\n\",\"keccak256\":\"0xecdadc52a09a3242feae68d278fd152ab66e18c81c6aeca076ee1bb7d29a3fd7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610cfd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639d23d9f21161005b5780639d23d9f2146100f5578063abfd531014610116578063b3596f0714610129578063f2fde38b1461015357600080fd5b8063715018a61461008d5780638129fc1c146100975780638da5cb5b1461009f57806392bf2be0146100c9575b600080fd5b610095610166565b005b6100956101a5565b6033546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100ac6100d7366004610985565b6001600160a01b039081166000908152606560205260409020541690565b610108610103366004610a5f565b610383565b6040516100c0929190610a9c565b610095610124366004610b1a565b6104aa565b61013c610137366004610985565b6105bf565b6040805192835260ff9091166020830152016100c0565b610095610161366004610985565b610611565b6033546001600160a01b031633146101995760405162461bcd60e51b815260040161019090610b7e565b60405180910390fd5b6101a360006106a5565b565b60006101b160016106f7565b905080156101c9576000805461ff0019166101001790555b6101d1610784565b60408051600280825260608201835260009260208301908036833701905050905073b02068ae04bf5d184efde3583e09f2185a30da0e8160008151811061021a5761021a610bb3565b60200260200101906001600160a01b031690816001600160a01b03168152505073f1277d1ed8ad466beddf92ef448a1326619566218160018151811061026257610262610bb3565b6001600160a01b03929092166020928302919091018201526040805160028082526060820183526000939192909183019080368337019050509050739bb8a6dcd83e36726cc230a97f1af8a84ae5f128816000815181106102c5576102c5610bb3565b60200260200101906001600160a01b031690816001600160a01b03168152505073e04676b9a9a2973bcb0d1478b5e1e9098bbb7f3d8160018151811061030d5761030d610bb3565b60200260200101906001600160a01b031690816001600160a01b03168152505061033782826104aa565b50508015610380576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b50565b805160609081908067ffffffffffffffff8111156103a3576103a36109a7565b6040519080825280602002602001820160405280156103cc578160200160208202803683370190505b5092508067ffffffffffffffff8111156103e8576103e86109a7565b604051908082528060200260200182016040528015610411578160200160208202803683370190505b50915060005b818110156104a35760008061044487848151811061043757610437610bb3565b60200260200101516105bf565b915091508186848151811061045b5761045b610bb3565b6020026020010181815250508085848151811061047a5761047a610bb3565b602002602001019060ff16908160ff16815250505050808061049b90610bc9565b915050610417565b5050915091565b6033546001600160a01b031633146104d45760405162461bcd60e51b815260040161019090610b7e565b81518151811461051f5760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b6044820152606401610190565b60005b818110156105b95782818151811061053c5761053c610bb3565b60200260200101516065600086848151811061055a5761055a610bb3565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080806105b190610bc9565b915050610522565b50505050565b6000806001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156105ff5773f1277d1ed8ad466beddf92ef448a13266195662192505b610608836107f2565b91509150915091565b6033546001600160a01b0316331461063b5760405162461bcd60e51b815260040161019090610b7e565b6001600160a01b0381166106a05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610190565b610380815b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff161561073e578160ff16600114801561071a5750303b155b6107365760405162461bcd60e51b815260040161019090610bf2565b506000919050565b60005460ff8084169116106107655760405162461bcd60e51b815260040161019090610bf2565b506000805460ff191660ff92909216919091179055600190565b919050565b600061079060016106f7565b905080156107a8576000805461ff0019166101001790555b6107b0610914565b8015610380576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610377565b6001600160a01b038082166000908152606560205260408120549091829116801561090e576000816001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561085257600080fd5b505afa158015610866573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088a9190610c40565b90506000811315610899578093505b816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156108d257600080fd5b505afa1580156108e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090a9190610c59565b9250505b50915091565b600054610100900460ff1661093b5760405162461bcd60e51b815260040161019090610c7c565b6101a3600054610100900460ff166109655760405162461bcd60e51b815260040161019090610c7c565b6101a3336106a5565b80356001600160a01b038116811461077f57600080fd5b60006020828403121561099757600080fd5b6109a08261096e565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126109ce57600080fd5b8135602067ffffffffffffffff808311156109eb576109eb6109a7565b8260051b604051601f19603f83011681018181108482111715610a1057610a106109a7565b604052938452858101830193838101925087851115610a2e57600080fd5b83870191505b84821015610a5457610a458261096e565b83529183019190830190610a34565b979650505050505050565b600060208284031215610a7157600080fd5b813567ffffffffffffffff811115610a8857600080fd5b610a94848285016109bd565b949350505050565b604080825283519082018190526000906020906060840190828701845b82811015610ad557815184529284019290840190600101610ab9565b5050508381038285015284518082528583019183019060005b81811015610b0d57835160ff1683529284019291840191600101610aee565b5090979650505050505050565b60008060408385031215610b2d57600080fd5b823567ffffffffffffffff80821115610b4557600080fd5b610b51868387016109bd565b93506020850135915080821115610b6757600080fd5b50610b74858286016109bd565b9150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415610beb57634e487b7160e01b600052601160045260246000fd5b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208284031215610c5257600080fd5b5051919050565b600060208284031215610c6b57600080fd5b815160ff811681146109a057600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220b7d0cbd02d26ba4b7b225ad0cf4374c667041b0832c6e7d50c2594071d13a06764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80639d23d9f21161005b5780639d23d9f2146100f5578063abfd531014610116578063b3596f0714610129578063f2fde38b1461015357600080fd5b8063715018a61461008d5780638129fc1c146100975780638da5cb5b1461009f57806392bf2be0146100c9575b600080fd5b610095610166565b005b6100956101a5565b6033546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100ac6100d7366004610985565b6001600160a01b039081166000908152606560205260409020541690565b610108610103366004610a5f565b610383565b6040516100c0929190610a9c565b610095610124366004610b1a565b6104aa565b61013c610137366004610985565b6105bf565b6040805192835260ff9091166020830152016100c0565b610095610161366004610985565b610611565b6033546001600160a01b031633146101995760405162461bcd60e51b815260040161019090610b7e565b60405180910390fd5b6101a360006106a5565b565b60006101b160016106f7565b905080156101c9576000805461ff0019166101001790555b6101d1610784565b60408051600280825260608201835260009260208301908036833701905050905073b02068ae04bf5d184efde3583e09f2185a30da0e8160008151811061021a5761021a610bb3565b60200260200101906001600160a01b031690816001600160a01b03168152505073f1277d1ed8ad466beddf92ef448a1326619566218160018151811061026257610262610bb3565b6001600160a01b03929092166020928302919091018201526040805160028082526060820183526000939192909183019080368337019050509050739bb8a6dcd83e36726cc230a97f1af8a84ae5f128816000815181106102c5576102c5610bb3565b60200260200101906001600160a01b031690816001600160a01b03168152505073e04676b9a9a2973bcb0d1478b5e1e9098bbb7f3d8160018151811061030d5761030d610bb3565b60200260200101906001600160a01b031690816001600160a01b03168152505061033782826104aa565b50508015610380576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b50565b805160609081908067ffffffffffffffff8111156103a3576103a36109a7565b6040519080825280602002602001820160405280156103cc578160200160208202803683370190505b5092508067ffffffffffffffff8111156103e8576103e86109a7565b604051908082528060200260200182016040528015610411578160200160208202803683370190505b50915060005b818110156104a35760008061044487848151811061043757610437610bb3565b60200260200101516105bf565b915091508186848151811061045b5761045b610bb3565b6020026020010181815250508085848151811061047a5761047a610bb3565b602002602001019060ff16908160ff16815250505050808061049b90610bc9565b915050610417565b5050915091565b6033546001600160a01b031633146104d45760405162461bcd60e51b815260040161019090610b7e565b81518151811461051f5760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b6044820152606401610190565b60005b818110156105b95782818151811061053c5761053c610bb3565b60200260200101516065600086848151811061055a5761055a610bb3565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080806105b190610bc9565b915050610522565b50505050565b6000806001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156105ff5773f1277d1ed8ad466beddf92ef448a13266195662192505b610608836107f2565b91509150915091565b6033546001600160a01b0316331461063b5760405162461bcd60e51b815260040161019090610b7e565b6001600160a01b0381166106a05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610190565b610380815b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff161561073e578160ff16600114801561071a5750303b155b6107365760405162461bcd60e51b815260040161019090610bf2565b506000919050565b60005460ff8084169116106107655760405162461bcd60e51b815260040161019090610bf2565b506000805460ff191660ff92909216919091179055600190565b919050565b600061079060016106f7565b905080156107a8576000805461ff0019166101001790555b6107b0610914565b8015610380576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610377565b6001600160a01b038082166000908152606560205260408120549091829116801561090e576000816001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561085257600080fd5b505afa158015610866573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088a9190610c40565b90506000811315610899578093505b816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156108d257600080fd5b505afa1580156108e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090a9190610c59565b9250505b50915091565b600054610100900460ff1661093b5760405162461bcd60e51b815260040161019090610c7c565b6101a3600054610100900460ff166109655760405162461bcd60e51b815260040161019090610c7c565b6101a3336106a5565b80356001600160a01b038116811461077f57600080fd5b60006020828403121561099757600080fd5b6109a08261096e565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126109ce57600080fd5b8135602067ffffffffffffffff808311156109eb576109eb6109a7565b8260051b604051601f19603f83011681018181108482111715610a1057610a106109a7565b604052938452858101830193838101925087851115610a2e57600080fd5b83870191505b84821015610a5457610a458261096e565b83529183019190830190610a34565b979650505050505050565b600060208284031215610a7157600080fd5b813567ffffffffffffffff811115610a8857600080fd5b610a94848285016109bd565b949350505050565b604080825283519082018190526000906020906060840190828701845b82811015610ad557815184529284019290840190600101610ab9565b5050508381038285015284518082528583019183019060005b81811015610b0d57835160ff1683529284019291840191600101610aee565b5090979650505050505050565b60008060408385031215610b2d57600080fd5b823567ffffffffffffffff80821115610b4557600080fd5b610b51868387016109bd565b93506020850135915080821115610b6757600080fd5b50610b74858286016109bd565b9150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415610beb57634e487b7160e01b600052601160045260246000fd5b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208284031215610c5257600080fd5b5051919050565b600060208284031215610c6b57600080fd5b815160ff811681146109a057600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220b7d0cbd02d26ba4b7b225ad0cf4374c667041b0832c6e7d50c2594071d13a06764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAssetPrice(address)": {
        "params": {
          "asset": "The asset address"
        },
        "returns": {
          "price": "The prices of the given assets"
        }
      },
      "getAssetsPrices(address[])": {
        "params": {
          "assets": "The list of assets addresses"
        },
        "returns": {
          "prices": "The prices of the given assets"
        }
      },
      "getSourceOfAsset(address)": {
        "params": {
          "asset": "The address of the asset"
        },
        "returns": {
          "_0": "The address of the source"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAssetSources(address[],address[])": {
        "params": {
          "assets": "The addresses of the assets",
          "sources": "The addresses of the price sources"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAssetPrice(address)": {
        "notice": "Returns a list of prices from a list of assets addresses"
      },
      "getAssetsPrices(address[])": {
        "notice": "Returns a list of prices from a list of assets addresses"
      },
      "getSourceOfAsset(address)": {
        "notice": "Returns the address of the source for an asset address"
      },
      "setAssetSources(address[],address[])": {
        "notice": "Sets or replaces price sources of assets"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 713,
        "contract": "contracts/bni/priceOracle/FtmPriceOracleTest.sol:FtmPriceOracleTest",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 716,
        "contract": "contracts/bni/priceOracle/FtmPriceOracleTest.sol:FtmPriceOracleTest",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3292,
        "contract": "contracts/bni/priceOracle/FtmPriceOracleTest.sol:FtmPriceOracleTest",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 593,
        "contract": "contracts/bni/priceOracle/FtmPriceOracleTest.sol:FtmPriceOracleTest",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 705,
        "contract": "contracts/bni/priceOracle/FtmPriceOracleTest.sol:FtmPriceOracleTest",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12451,
        "contract": "contracts/bni/priceOracle/FtmPriceOracleTest.sol:FtmPriceOracleTest",
        "label": "assetsSources",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_contract(IChainlinkAggregator)12442)"
      },
      {
        "astId": 12653,
        "contract": "contracts/bni/priceOracle/FtmPriceOracleTest.sol:FtmPriceOracleTest",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IChainlinkAggregator)12442": {
        "encoding": "inplace",
        "label": "contract IChainlinkAggregator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(IChainlinkAggregator)12442)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IChainlinkAggregator)",
        "numberOfBytes": "32",
        "value": "t_contract(IChainlinkAggregator)12442"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}