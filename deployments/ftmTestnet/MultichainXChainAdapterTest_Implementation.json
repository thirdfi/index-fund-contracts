{
  "address": "0x744e24ACa66e6E02964C4bE248fD727585a8BDe4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLIENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "anyExecute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "anycallExecutor",
      "outputs": [
        {
          "internalType": "contract IAnycallExecutor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "anycallRouterTest",
      "outputs": [
        {
          "internalType": "contract IAnycallV6Proxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "anyswapMap",
      "outputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "anyToken",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "underlyingDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "anyTokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minimumSwap",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_targetContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_targetCallValue",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_targetCallData",
          "type": "bytes"
        }
      ],
      "name": "calcCallFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calcTransferFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_targetContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_targetCallValue",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_targetCallData",
          "type": "bytes"
        }
      ],
      "name": "call",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initAnycallProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_toChainId",
          "type": "uint256"
        }
      ],
      "name": "minTransfer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_unterlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_anyToken",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_underlyingDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_anyTokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_minimumSwap",
          "type": "uint256"
        }
      ],
      "name": "setAnyswapEntry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_chainIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_peers",
          "type": "address[]"
        }
      ],
      "name": "setPeers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_toChainIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_toAddresses",
          "type": "address[]"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x66bed639cca2f2adb51a7010316f87db9a3832b0173a98ee5e69ed584c830ba0",
  "receipt": {
    "to": null,
    "from": "0xd91Fbc9b431464D737E1BC4e76900D43405a639b",
    "contractAddress": "0x744e24ACa66e6E02964C4bE248fD727585a8BDe4",
    "transactionIndex": 0,
    "gasUsed": "2339482",
    "logsBloom": "0x
    "blockHash": "0x00002c56000001a7b7a8e9ff94521539a355ddc0f7100f2d54c4ab689ddb420c",
    "transactionHash": "0x66bed639cca2f2adb51a7010316f87db9a3832b0173a98ee5e69ed584c830ba0",
    "logs": [],
    "blockNumber": 10324532,
    "cumulativeGasUsed": "2339482",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "8664de0f911ef7794e267c0f68606d13",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLIENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"anyExecute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anycallExecutor\",\"outputs\":[{\"internalType\":\"contract IAnycallExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anycallRouterTest\",\"outputs\":[{\"internalType\":\"contract IAnycallV6Proxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"anyswapMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"anyToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"anyTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minimumSwap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_targetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetCallValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_targetCallData\",\"type\":\"bytes\"}],\"name\":\"calcCallFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_targetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetCallValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_targetCallData\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initAnycallProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toChainId\",\"type\":\"uint256\"}],\"name\":\"minTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_unterlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_anyToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_underlyingDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_anyTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_minimumSwap\",\"type\":\"uint256\"}],\"name\":\"setAnyswapEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_peers\",\"type\":\"address[]\"}],\"name\":\"setPeers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_toChainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_toAddresses\",\"type\":\"address[]\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"anyExecute(bytes)\":{\"details\":\"The function to receive message from anycall router. The syntax must not be changed.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/xchain/multichain/MultichainXChainAdapterTest.sol\":\"MultichainXChainAdapterTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1976ce0aadaa551a0fecab9930a7f4956252fa40594c8d165f682020f0e826c0\",\"license\":\"MIT\"},\"contracts/bni/constant/AuroraConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AuroraConstant {\\n    uint internal constant CHAINID = 1313161554;\\n\\n    address internal constant BSTN = 0x9f1F933C660a1DC856F0E0Fe058435879c5CCEf0;\\n    address internal constant META = 0xc21Ff01229e982d7c8b8691163B0A3Cb8F357453;\\n    address internal constant stNEAR = 0x07F9F7f963C5cD2BBFFd30CcfB964Be114332E30;\\n    address internal constant USDC = 0xB12BFcA5A55806AaF64E99521918A4bf0fC40802;\\n    address internal constant USDT = 0x4988a896b1227218e4A686fdE5EabdcAbd91571f;\\n    address internal constant WETH = 0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB;\\n    address internal constant WNEAR = 0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d;\\n}\\n\",\"keccak256\":\"0xb4c50615e5b8672de4e3918c881272987794a28f3cc00f680f04bdfddc21dba8\",\"license\":\"MIT\"},\"contracts/bni/constant/AuroraConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AuroraConstantTest {\\n    uint internal constant CHAINID = 1313161555;\\n\\n    address internal constant BSTN = 0x9f1F933C660a1DC856F0E0Fe058435879c5CCEf0; // Should be replaced with testnet address\\n    address internal constant META = 0xc21Ff01229e982d7c8b8691163B0A3Cb8F357453; // Should be replaced with testnet address\\n    address internal constant stNEAR = 0x2137df2e54abd6bF1c1a8c1739f2EA6A8C15F144;\\n    address internal constant USDC = 0xCcECA5C4A3355F8e7a0B7d2a7251eec012Be7c58;\\n    address internal constant USDT = 0xF9C249974c1Acf96a59e5757Cc9ba7035cE489B1;\\n    address internal constant WETH = 0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB; // Should be replaced with testnet address\\n    address internal constant WNEAR = 0x4861825E75ab14553E5aF711EbbE6873d369d146;\\n}\\n\",\"keccak256\":\"0x2c142ce864cd38aa02fa7e50f069b88c73a06d913be71355858f34396c30c048\",\"license\":\"MIT\"},\"contracts/bni/constant/AvaxConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AvaxConstant {\\n    uint internal constant CHAINID = 43114;\\n\\n    address internal constant USDC = 0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664;\\n    address internal constant USDT = 0xc7198437980c041c805A1EDcbA50c1Ce5db95118;\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    address internal constant aAVAXb = 0x6C6f910A79639dcC94b4feEF59Ff507c2E843929;\\n}\\n\",\"keccak256\":\"0x53216c58dd6d77a9fa18b7ea121a2a8aa8c3ae6577577e8c332747bd0d74fde2\",\"license\":\"MIT\"},\"contracts/bni/constant/AvaxConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AvaxConstantTest {\\n    uint internal constant CHAINID = 43113;\\n\\n    address internal constant USDC = 0x7aCdaba7Ee51c1c3F7C6D605CC26b1c9aAB0495A;\\n    address internal constant USDT = 0x78ae2880bd1672b49a33cF796CF53FE6db0aB01D;\\n    address internal constant WAVAX = 0xd00ae08403B9bbb9124bB305C09058E32C39A48c;\\n\\n    address internal constant aAVAXb = 0xBd97c29aa3E83C523C9714edCA8DB8881841a593;\\n}\\n\",\"keccak256\":\"0x11c2007f9c851ef591ac5f7d8b2540bfbcde5091044f5bc2a02645fc13230c3e\",\"license\":\"MIT\"},\"contracts/bni/constant/BscConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary BscConstant {\\n    uint internal constant CHAINID = 56;\\n\\n    address internal constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address internal constant CAKE = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82;\\n    address internal constant USDC = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\\n    address internal constant USDT = 0x55d398326f99059fF775485246999027B3197955;\\n    address internal constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    address internal constant aBNBb = 0xBb1Aa6e59E5163D8722a122cd66EBA614b59df0d;\\n}\\n\",\"keccak256\":\"0xd0c4c785ade0a75733c82781329443ec20ba40754d99575689064ac9e7196adf\",\"license\":\"MIT\"},\"contracts/bni/constant/BscConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary BscConstantTest {\\n    uint internal constant CHAINID = 97;\\n\\n    address internal constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // Should be replaced with testnet address\\n    address internal constant CAKE = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82; // Should be replaced with testnet address\\n    address internal constant USDC = 0xda14d11D2C7d79F167b6057DE3D9cc25C2c488d5;\\n    address internal constant USDT = 0x1F326a8CA5399418a76eA0efa0403Cbb00790C67;\\n    address internal constant WBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd;\\n\\n    address internal constant aBNBb = 0xaB56897fE4e9f0757e02B54C27E81B9ddd6A30AE;\\n}\\n\",\"keccak256\":\"0x9ca5b6fb202a1748ffa97c55a155bd7e1fd5bb4bde9fb276bb0a5c42d2539e0b\",\"license\":\"MIT\"},\"contracts/bni/constant/EthConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary EthConstant {\\n    uint internal constant CHAINID = 1;\\n\\n    address internal constant MATIC = 0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0;\\n    address internal constant stETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\n    address internal constant stMATIC = 0x9ee91F9f426fA633d227f7a9b000E28b9dfd8599;\\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n}\\n\",\"keccak256\":\"0x7d278bbafd2c0dae080f4aea2c853ec12ea88f767de21cdaa1ddd4be393143e1\",\"license\":\"MIT\"},\"contracts/bni/constant/EthConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary EthConstantTest {\\n    uint internal constant CHAINID = 4;\\n\\n    address internal constant MATIC = 0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0; // Should be replaced with testnet address\\n    address internal constant stETH = 0xF4242f9d78DB7218Ad72Ee3aE14469DBDE8731eD;\\n    address internal constant stMATIC = 0x9ee91F9f426fA633d227f7a9b000E28b9dfd8599; // Should be replaced with testnet address\\n    address internal constant USDC = 0xDf5324ebe6F6b852Ff5cBf73627eE137e9075276;\\n    address internal constant USDT = 0x21e48034753E490ff04f2f75f7CAEdF081B320d5;\\n    address internal constant WETH = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\\n}\\n\",\"keccak256\":\"0x2711954dbd697694829429f6b66d704bb80b214e8f5077f8c79554c2af901a38\",\"license\":\"MIT\"},\"contracts/bni/constant/FtmConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary FtmConstantTest {\\n    uint internal constant CHAINID = 4002;\\n\\n    address internal constant USDC = 0x147abEE959A578F2ae5F9bC996dcf6259EBd3a89;\\n    address internal constant USDT = 0xb02068AE04Bf5d184EFDe3583e09f2185a30da0e;\\n    address internal constant WFTM = 0xf1277d1Ed8AD466beddF92ef448A132661956621;\\n}\\n\",\"keccak256\":\"0xf3f23ac114bd1500bd38c3095382b9459f8f4750b59c96bee4e44bb0187bb906\",\"license\":\"MIT\"},\"contracts/bni/constant/MaticConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary MaticConstant {\\n    uint internal constant CHAINID = 137;\\n\\n    address internal constant USDC = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n    address internal constant USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\\n    address internal constant WMATIC = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\\n}\\n\",\"keccak256\":\"0x0503964316f40535769a8e59b212628df2799c1bbde38dae6f0fce5f250f0ba2\",\"license\":\"MIT\"},\"contracts/bni/constant/MaticConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary MaticConstantTest {\\n    uint internal constant CHAINID = 80001;\\n\\n    address internal constant USDC = 0x6600BeC324CCDd12c70297311AEfB37fafB1D689;\\n    address internal constant USDT = 0x7e4C234B1d634DB790592d1550816b19E862F744;\\n    address internal constant WMATIC = 0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889;\\n}\\n\",\"keccak256\":\"0x454ef5183082f4cbadd6166b4b5f56ad6b1b3406c0c39132e12177229cb66b48\",\"license\":\"MIT\"},\"contracts/xchain/BasicXChainAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../../libs/Const.sol\\\";\\nimport \\\"./IXChainAdapter.sol\\\";\\n\\ncontract BasicXChainAdapter is IXChainAdapter,\\n    AccessControlEnumerableUpgradeable,\\n    OwnableUpgradeable\\n{\\n    bytes32 public constant CLIENT_ROLE = keccak256(\\\"CLIENT_ROLE\\\");\\n\\n    // Map of message peers (chainId => peer). Because anyone can send messages, it needs to verify the sender.\\n    mapping(uint => address) public peers;\\n\\n    function initialize() public virtual initializer {\\n        __Ownable_init_unchained();\\n        _setupRole(DEFAULT_ADMIN_ROLE, owner());\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _revokeRole(DEFAULT_ADMIN_ROLE, owner());\\n        super.transferOwnership(newOwner);\\n        _setupRole(DEFAULT_ADMIN_ROLE, newOwner);\\n    }\\n\\n    function setPeers(uint[] memory _chainIds, address[] memory _peers) external onlyOwner {\\n        uint length = _chainIds.length;\\n        for (uint i = 0; i < length; i++) {\\n            uint chainId = _chainIds[i];\\n            require(chainId != 0, \\\"Invalid chainID\\\");\\n            peers[chainId] = _peers[i];\\n        }\\n    }\\n\\n    function transfer(\\n        address, // _token\\n        uint[] memory, // _amounts\\n        uint[] memory, // _toChainIds\\n        address[] memory // _toAddresses\\n    ) external payable virtual onlyRole(CLIENT_ROLE) {\\n    }\\n\\n    function call(\\n        uint, // _toChainId\\n        address, // _targetContract\\n        uint, // _targetCallValue\\n        bytes memory // _targetCallData\\n    ) external payable virtual onlyRole(CLIENT_ROLE) {\\n    }\\n\\n    function calcTransferFee() public view virtual returns (uint) {\\n        return 0;\\n    }\\n\\n    function calcCallFee(\\n        uint, // _toChainId\\n        address, // _targetContract,\\n        uint, // _targetCallValue\\n        bytes memory // _targetCallData\\n    ) public view virtual returns (uint) {\\n        return 0;\\n    }\\n\\n    function minTransfer(\\n        address, // _token\\n        uint // _toChainId\\n    ) public view virtual returns (uint) {\\n        return 0;\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xcca094ee0af527217f63517e127960010edf9e4fa70f789c88c60dca9dca1173\",\"license\":\"MIT\"},\"contracts/xchain/IXChainAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface IXChainAdapter {\\r\\n\\r\\n    function transfer(\\r\\n        address _token,\\r\\n        uint[] memory _amounts,\\r\\n        uint[] memory _toChainIds,\\r\\n        address[] memory _toAddresses\\r\\n    ) external payable;\\r\\n\\r\\n    function call(\\r\\n        uint _toChainId,\\r\\n        address _targetContract,\\r\\n        uint _targetCallValue,\\r\\n        bytes memory _targetCallData\\r\\n    ) external payable;\\r\\n\\r\\n    function calcTransferFee() external view returns (uint);\\r\\n\\r\\n    function calcCallFee(\\r\\n        uint _toChainId,\\r\\n        address _targetContract,\\r\\n        uint _targetCallValue,\\r\\n        bytes memory _targetCallData\\r\\n    ) external view returns (uint);\\r\\n\\r\\n    function minTransfer(\\r\\n        address _token,\\r\\n        uint _toChainId\\r\\n    ) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xf87ca9e6b3c6e22a9e7598c78ff93faed68496683c248f800b8c58516f86537a\",\"license\":\"MIT\"},\"contracts/xchain/multichain/AnyswapMap.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nimport \\\"../../../libs/Const.sol\\\";\\nimport \\\"../../../libs/Token.sol\\\";\\nimport \\\"../../bni/constant/AvaxConstant.sol\\\";\\nimport \\\"../../bni/constant/BscConstant.sol\\\";\\nimport \\\"../../bni/constant/EthConstant.sol\\\";\\nimport \\\"../../bni/constant/MaticConstant.sol\\\";\\n\\n// https://bridgeapi.anyswap.exchange/v3/serverinfoV3?chainId=all&version=STABLEV3\\nlibrary AnyswapMap {\\n\\n    struct Entry{\\n        address router;\\n        address underlying;\\n        address anyToken;\\n        uint8 underlyingDecimals;\\n        uint8 anyTokenDecimals;\\n        uint minimumSwap;\\n    }\\n\\n    function initMap(mapping(address => mapping(uint => AnyswapMap.Entry)) storage _map) internal {\\n        address USDT = Token.getTokenAddress(Const.TokenID.USDT);\\n        _map[USDT][AvaxConstant.CHAINID] = Entry({\\n            router: 0xB0731d50C681C45856BFc3f7539D5f61d4bE81D8,\\n            underlying: AvaxConstant.USDT,\\n            anyToken: 0x94977c9888F3D2FAfae290d33fAB4a5a598AD764,\\n            underlyingDecimals: 6,\\n            anyTokenDecimals: 6,\\n            minimumSwap: 12\\n        });\\n        _map[USDT][BscConstant.CHAINID] = Entry({\\n            router: 0xd1C5966f9F5Ee6881Ff6b261BBeDa45972B1B5f3,\\n            underlying: BscConstant.USDT,\\n            anyToken: 0xEDF0c420bc3b92B961C6eC411cc810CA81F5F21a,\\n            underlyingDecimals: 18,\\n            anyTokenDecimals: 18,\\n            minimumSwap: 12\\n        });\\n        _map[USDT][EthConstant.CHAINID] = Entry({\\n            router: 0x6b7a87899490EcE95443e979cA9485CBE7E71522,\\n            underlying: EthConstant.USDT,\\n            anyToken: 0x22648C12acD87912EA1710357B1302c6a4154Ebc,\\n            underlyingDecimals: 6,\\n            anyTokenDecimals: 6,\\n            minimumSwap: 45\\n        });\\n        _map[USDT][MaticConstant.CHAINID] = Entry({\\n            router: 0x4f3Aff3A747fCADe12598081e80c6605A8be192F,\\n            underlying: MaticConstant.USDT,\\n            anyToken: 0xE3eeDa11f06a656FcAee19de663E84C7e61d3Cac,\\n            underlyingDecimals: 6,\\n            anyTokenDecimals: 6,\\n            minimumSwap: 12\\n        });\\n\\n        address USDC = Token.getTokenAddress(Const.TokenID.USDC);\\n        _map[USDC][AvaxConstant.CHAINID] = Entry({\\n            router: 0xB0731d50C681C45856BFc3f7539D5f61d4bE81D8,\\n            underlying: AvaxConstant.USDC,\\n            anyToken: 0xcc9b1F919282c255eB9AD2C0757E8036165e0cAd,\\n            underlyingDecimals: 6,\\n            anyTokenDecimals: 6,\\n            minimumSwap: 12\\n        });\\n        _map[USDC][BscConstant.CHAINID] = Entry({\\n            router: 0xd1C5966f9F5Ee6881Ff6b261BBeDa45972B1B5f3,\\n            underlying: BscConstant.USDC,\\n            anyToken: 0x8965349fb649A33a30cbFDa057D8eC2C48AbE2A2,\\n            underlyingDecimals: 18,\\n            anyTokenDecimals: 18,\\n            minimumSwap: 12\\n        });\\n        _map[USDC][EthConstant.CHAINID] = Entry({\\n            router: 0x6b7a87899490EcE95443e979cA9485CBE7E71522,\\n            underlying: EthConstant.USDC,\\n            anyToken: 0x7EA2be2df7BA6E54B1A9C70676f668455E329d29,\\n            underlyingDecimals: 6,\\n            anyTokenDecimals: 6,\\n            minimumSwap: 45\\n        });\\n        _map[USDC][MaticConstant.CHAINID] = Entry({\\n            router: 0x4f3Aff3A747fCADe12598081e80c6605A8be192F,\\n            underlying: MaticConstant.USDC,\\n            anyToken: 0xd69b31c3225728CC57ddaf9be532a4ee1620Be51,\\n            underlyingDecimals: 6,\\n            anyTokenDecimals: 6,\\n            minimumSwap: 12\\n        });\\n    }\\n}\\n\",\"keccak256\":\"0x0be728c7d1c83dedc18c05ab8747d387bbd6fcd7e7b43ed0817b67765fbbfab9\",\"license\":\"MIT\"},\"contracts/xchain/multichain/IAnycallV6Proxy.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\n// https://github.com/anyswap/anyswap-v1-core/blob/master/contracts/AnyswapV6CallProxy.sol\\n\\ninterface IAnycallExecutor {\\n    function context() external returns (address from, uint256 fromChainID, uint256 nonce);\\n\\n    function execute(\\n        address _to,\\n        bytes calldata _data,\\n        address _from,\\n        uint256 _fromChainID,\\n        uint256 _nonce,\\n        bool _isFallBack\\n    ) external returns (bool success, bytes memory result);\\n}\\n\\ninterface IAnycallV6Proxy {\\n    function executor() external view returns (address);\\n\\n    function anyCall(\\n        address _to,\\n        bytes calldata _data,\\n        address _fallback,\\n        uint _toChainID,\\n        uint _flags\\n    ) external payable;\\n\\n    function calcSrcFees(\\n        string calldata _appID,\\n        uint _toChainID,\\n        uint _dataLength\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x02e22067dac960914592efc654a201cc603d3b116747f027f05bfcf17c4c88ce\",\"license\":\"MIT\"},\"contracts/xchain/multichain/IAnyswapV6Router.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\n// https://github.com/anyswap/anyswap-v1-core/blob/d5f40f9a29212f597149f3cee9f8d9df1b108a22/contracts/AnyswapV6Router.sol\\ninterface IAnyswapV6Router {\\n    function anySwapOut(address token, address to, uint amount, uint toChainID) external;\\n    function anySwapOutUnderlying(address token, address to, uint amount, uint toChainID) external;\\n    function anySwapOutNative(address token, address to, uint toChainID) external payable;\\n    function anySwapOut(address[] calldata tokens, address[] calldata to, uint[] calldata amounts, uint[] calldata toChainIDs) external;\\n    function anySwapOut(address token, string memory to, uint amount, uint toChainID) external;\\n    function anySwapOutUnderlying(address token, string memory to, uint amount, uint toChainID) external;\\n    function depositNative(address token, address to) external payable returns (uint);\\n    function withdrawNative(address token, uint amount, address to) external returns (uint);\\n\\n    function anySwapOutExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline,\\n        uint toChainID\\n    ) external;\\n\\n    function anySwapOutExactTokensForTokensUnderlying(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline,\\n        uint toChainID\\n    ) external;\\n\\n    function anySwapOutExactTokensForNative(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline,\\n        uint toChainID\\n    ) external;\\n\\n    function anySwapOutExactTokensForNativeUnderlying(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline,\\n        uint toChainID\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcf5df9dfdafb80677fc89b6cf325ab4f584f9e1b89a402a387761b1f7017a0fa\",\"license\":\"MIT\"},\"contracts/xchain/multichain/MultichainXChainAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../../../interfaces/IERC20UpgradeableExt.sol\\\";\\nimport \\\"../../../libs/Const.sol\\\";\\nimport \\\"../../../libs/Token.sol\\\";\\nimport \\\"../BasicXChainAdapter.sol\\\";\\nimport \\\"./AnyswapMap.sol\\\";\\nimport \\\"./IAnycallV6Proxy.sol\\\";\\nimport \\\"./IAnyswapV6Router.sol\\\";\\n\\ncontract MultichainXChainAdapter is BasicXChainAdapter {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    IAnycallV6Proxy constant anycallRouter = IAnycallV6Proxy(0xC10Ef9F491C9B59f936957026020C321651ac078);\\n    uint constant FLAG_PAY_FEE_ON_SRC = 0x1 << 1;\\n\\n    // Map of anyswap entries (address => chainId => entry)\\n    mapping(address => mapping(uint => AnyswapMap.Entry)) public anyswapMap;\\n\\n    IAnycallExecutor public anycallExecutor;\\n\\n    event Transfer(address from, address indexed token, uint indexed amount, uint indexed toChainId, address to);\\n\\n    function initialize() public virtual override initializer {\\n        super.initialize();\\n\\n        AnyswapMap.initMap(anyswapMap);\\n\\n        uint chainId = Token.getChainID();\\n        address USDT = Token.getTokenAddress(Const.TokenID.USDT);\\n        IERC20Upgradeable(USDT).safeApprove(anyswapMap[USDT][chainId].router, type(uint).max);\\n        address USDC = Token.getTokenAddress(Const.TokenID.USDC);\\n        IERC20Upgradeable(USDC).safeApprove(anyswapMap[USDC][chainId].router, type(uint).max);\\n\\n        anycallExecutor = IAnycallExecutor(anycallRouter.executor());\\n    }\\n\\n    function setAnyswapEntry(\\n        address _token, uint _chainId,\\n        address _router, address _unterlying, address _anyToken,\\n        uint8 _underlyingDecimals, uint8 _anyTokenDecimals, uint _minimumSwap\\n    ) external onlyOwner {\\n        address oldRouter = anyswapMap[_token][_chainId].router;\\n        if (oldRouter != address(0)) {\\n            IERC20Upgradeable(_token).safeApprove(oldRouter, 0);\\n        }\\n\\n        anyswapMap[_token][_chainId] = AnyswapMap.Entry({\\n            router: _router,\\n            underlying: _unterlying,\\n            anyToken: _anyToken,\\n            underlyingDecimals: _underlyingDecimals,\\n            anyTokenDecimals: _anyTokenDecimals,\\n            minimumSwap: _minimumSwap\\n        });\\n        if (IERC20Upgradeable(_unterlying).allowance(address(this), address(_router)) == 0) {\\n            IERC20Upgradeable(_unterlying).safeApprove(_router, type(uint).max);\\n        }\\n    }\\n\\n    ///@dev The function to receive message from anycall router. The syntax must not be changed.\\n    function anyExecute(bytes calldata data) external returns (bool success, bytes memory result) {\\n        (address from, uint fromChainId,) = anycallExecutor.context();\\n        require(peers[fromChainId] == from, \\\"Wrong context\\\");\\n\\n        (address targetContract, uint targetCallValue, bytes memory targetCallData)\\n            = abi.decode(data, (address, uint, bytes));\\n        (success, result) = targetContract.call{value: targetCallValue}(targetCallData);\\n    }\\n\\n    function transfer(\\n        address _token,\\n        uint[] memory _amounts,\\n        uint[] memory _toChainIds,\\n        address[] memory _toAddresses\\n    ) external payable override onlyRole(CLIENT_ROLE) {\\n        require(msg.value == 0, \\\"No fee needed\\\");\\n        uint count = _amounts.length;\\n        uint chainId = Token.getChainID();\\n        address from = _msgSender();\\n\\n        uint amount;\\n        for (uint i = 0; i < count; i++) {\\n            amount += _amounts[i];\\n        }\\n        IERC20Upgradeable(anyswapMap[_token][chainId].underlying).safeTransferFrom(from, address(this), amount);\\n\\n        for (uint i = 0; i < count; i++) {\\n            _transfer(_token, _amounts[i], chainId, _toChainIds[i], _toAddresses[i]);\\n        }\\n    }\\n\\n    function _transfer(\\n        address _token,\\n        uint _amount,\\n        uint _chainId,\\n        uint _toChainId,\\n        address _to\\n    ) internal {\\n        require(_amount >= minTransfer(_token, _toChainId), \\\"Too small amount\\\");\\n\\n        AnyswapMap.Entry memory entry = anyswapMap[_token][_chainId];\\n        IAnyswapV6Router(entry.router).anySwapOutUnderlying(entry.anyToken, _to, _amount, _toChainId);\\n        emit Transfer(msg.sender, entry.underlying, _amount, _toChainId, _to);\\n    }\\n\\n    function call(\\n        uint _toChainId,\\n        address _targetContract,\\n        uint _targetCallValue,\\n        bytes memory _targetCallData\\n    ) external payable virtual override onlyRole(CLIENT_ROLE) {\\n        address peer = peers[_toChainId];\\n        require(peer != address(0), \\\"No peer\\\");\\n\\n        bytes memory message = abi.encode(_targetContract, _targetCallValue, _targetCallData);\\n        anycallRouter.anyCall{value: msg.value}(peer, message, address(0), _toChainId, FLAG_PAY_FEE_ON_SRC);\\n    }\\n\\n    function calcCallFee(\\n        uint _toChainId,\\n        address _targetContract,\\n        uint _targetCallValue,\\n        bytes memory _targetCallData\\n    ) public view virtual override returns (uint) {\\n        bytes memory message = abi.encode(_targetContract, _targetCallValue, _targetCallData);\\n        return anycallRouter.calcSrcFees(\\\"\\\", _toChainId, message.length);\\n    }\\n\\n    function minTransfer(\\n        address _token,\\n        uint _toChainId\\n    ) public view override returns (uint) {\\n        uint8 decimals = IERC20UpgradeableExt(_token).decimals();\\n        return anyswapMap[_token][_toChainId].minimumSwap * (10 ** decimals);\\n    }\\n}\\n\",\"keccak256\":\"0x2fa6deba92c2d1b2fb09e924b4398fa6f6fd4857691e0ab137fa9bfcac2864ed\",\"license\":\"MIT\"},\"contracts/xchain/multichain/MultichainXChainAdapterTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nimport \\\"../../../libs/Token.sol\\\";\\nimport \\\"../../bni/constant/EthConstantTest.sol\\\";\\nimport \\\"../../bni/constant/FtmConstantTest.sol\\\";\\nimport \\\"../BasicXChainAdapter.sol\\\";\\nimport \\\"./MultichainXChainAdapter.sol\\\";\\n\\ncontract MultichainXChainAdapterTest is MultichainXChainAdapter {\\n\\n    IAnycallV6Proxy public anycallRouterTest;\\n\\n    function initialize() public override initializer {\\n        BasicXChainAdapter.initialize();\\n        initAnycallProxy();\\n    }\\n\\n    function initAnycallProxy() public onlyOwner {\\n        uint chainId = Token.getChainID();\\n        if (chainId == EthConstantTest.CHAINID) {\\n            anycallRouterTest = IAnycallV6Proxy(0x273a4fFcEb31B8473D51051Ad2a2EdbB7Ac8Ce02);\\n        } else if (chainId == FtmConstantTest.CHAINID) {\\n            anycallRouterTest = IAnycallV6Proxy(0xD7c295E399CA928A3a14b01D760E794f1AdF8990);\\n        } else {\\n            return;\\n        }\\n\\n        anycallExecutor = IAnycallExecutor(anycallRouterTest.executor());\\n    }\\n\\n    function call(\\n        uint _toChainId,\\n        address _targetContract,\\n        uint _targetCallValue,\\n        bytes memory _targetCallData\\n    ) external payable override onlyRole(CLIENT_ROLE) {\\n        if (address(anycallRouterTest) == address(0)) return;\\n        address peer = peers[_toChainId];\\n        require(peer != address(0), \\\"No peer\\\");\\n\\n        bytes memory message = abi.encode(_targetContract, _targetCallValue, _targetCallData);\\n        anycallRouterTest.anyCall{value: msg.value}(peer, message, address(0), _toChainId, FLAG_PAY_FEE_ON_SRC);\\n    }\\n\\n    function calcCallFee(\\n        uint _toChainId,\\n        address _targetContract,\\n        uint _targetCallValue,\\n        bytes memory _targetCallData\\n    ) public view override returns (uint) {\\n        if (address(anycallRouterTest) == address(0)) return 0;\\n\\n        bytes memory message = abi.encode(_targetContract, _targetCallValue, _targetCallData);\\n        return anycallRouterTest.calcSrcFees(\\\"\\\", _toChainId, message.length);\\n    }\\n}\\n\",\"keccak256\":\"0xf7143ce316724c4093887a7efac6d65168ccdecd648359e0074c71fd5ac0685b\",\"license\":\"MIT\"},\"interfaces/IERC20UpgradeableExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IERC20UpgradeableExt is IERC20Upgradeable {\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x06f547094243d372a789dbb9207b12091bfebb770fb1f1de0a103bd100e1a9e2\",\"license\":\"MIT\"},\"libs/Const.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Const {\\r\\n\\r\\n    uint internal constant DENOMINATOR = 10000;\\r\\n\\r\\n    uint internal constant APR_SCALE = 1e18;\\r\\n    \\r\\n    uint internal constant YEAR_IN_SEC = 365 days;\\r\\n\\r\\n    address internal constant NATIVE_ASSET = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n\\r\\n    enum TokenID { USDT, USDC }\\r\\n}\\r\\n\",\"keccak256\":\"0xecdadc52a09a3242feae68d278fd152ab66e18c81c6aeca076ee1bb7d29a3fd7\",\"license\":\"MIT\"},\"libs/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../contracts/bni/constant/AuroraConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/AuroraConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/AvaxConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/AvaxConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/BscConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/BscConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/EthConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/EthConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/FtmConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/MaticConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/MaticConstantTest.sol\\\";\\r\\nimport \\\"./Const.sol\\\";\\r\\n\\r\\nlibrary Token {\\r\\n    function changeDecimals(uint amount, uint curDecimals, uint newDecimals) internal pure returns(uint) {\\r\\n        if (curDecimals == newDecimals) {\\r\\n            return amount;\\r\\n        } else if (curDecimals < newDecimals) {\\r\\n            return amount * (10 ** (newDecimals - curDecimals));\\r\\n        } else {\\r\\n            return amount / (10 ** (curDecimals - newDecimals));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, \\\"ETH transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function getChainID() internal view returns (uint256 id) {\\r\\n        assembly {\\r\\n            id := chainid()\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bytesToAddress(bytes memory bys) internal pure returns (address addr) {\\r\\n        assembly {\\r\\n            addr := mload(add(bys, 20))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTokenAddress(Const.TokenID _tokenId) internal view returns (address) {\\r\\n        uint chainId = getChainID();\\r\\n        if (chainId == AuroraConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AuroraConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AuroraConstant.USDT;\\r\\n        } else if (chainId == AvaxConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AvaxConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AvaxConstant.USDT;\\r\\n        } else if (chainId == BscConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return BscConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return BscConstant.USDT;\\r\\n        } else if (chainId == EthConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return EthConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return EthConstant.USDT;\\r\\n        } else if (chainId == MaticConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return MaticConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return MaticConstant.USDT;\\r\\n        }\\r\\n        return address(0);\\r\\n    }\\r\\n\\r\\n    function getTestTokenAddress(Const.TokenID _tokenId) internal view returns (address) {\\r\\n        uint chainId = getChainID();\\r\\n        if (chainId == AuroraConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AuroraConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AuroraConstantTest.USDT;\\r\\n        } else if (chainId == AvaxConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AvaxConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AvaxConstantTest.USDT;\\r\\n        } else if (chainId == BscConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return BscConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return BscConstantTest.USDT;\\r\\n        } else if (chainId == EthConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return EthConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return EthConstantTest.USDT;\\r\\n        } else if (chainId == FtmConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return FtmConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return FtmConstantTest.USDT;\\r\\n        } else if (chainId == MaticConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return MaticConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return MaticConstantTest.USDT;\\r\\n        }\\r\\n        return address(0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0f1b9bf679aa442dbda325b11ab40f935af4c3aa99787fb0c5e1ef4b3077a6ed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061295e806100206000396000f3fe6080604052600436106101a05760003560e01c80638da5cb5b116100ec578063c3f9db531161008a578063d547741f11610064578063d547741f1461054d578063eae6f6521461056d578063f2fde38b146105a1578063f5382b75146105c157600080fd5b8063c3f9db53146104ec578063ca15c8731461050c578063d2c7dfcc1461052c57600080fd5b80639abaf479116100c65780639abaf47914610453578063a217fddf14610481578063be4f3e8f14610496578063bebc4f71146104cc57600080fd5b80638da5cb5b146103f55780639010d07c1461041357806391d148541461043357600080fd5b806336568abe1161015957806357b730321161013357806357b7303214610398578063715018a6146103b857806377cae758146103cd5780638129fc1c146103e057600080fd5b806336568abe146102ad5780633b11ca51146102cd57806351f727df146102e157600080fd5b806301ffc9a7146101ac57806303cf3a5d146101e1578063219d5ca51461021a578063248a9ca31461022f5780632de2c8ad1461026d5780632f2ff15d1461028d57600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101cc6101c7366004611f5b565b6105d6565b60405190151581526020015b60405180910390f35b3480156101ed57600080fd5b5061012f54610202906001600160a01b031681565b6040516001600160a01b0390911681526020016101d8565b61022d6102283660046120d4565b610601565b005b34801561023b57600080fd5b5061025f61024a36600461216f565b60009081526065602052604090206001015490565b6040519081526020016101d8565b34801561027957600080fd5b5061022d610288366004612188565b61076f565b34801561029957600080fd5b5061022d6102a83660046121ec565b610869565b3480156102b957600080fd5b5061022d6102c83660046121ec565b610893565b3480156102d957600080fd5b50600061025f565b3480156102ed57600080fd5b506103546102fc36600461221c565b61012d60209081526000928352604080842090915290825290208054600182015460028301546003909301546001600160a01b03928316939183169282169160ff600160a01b8204811692600160a81b909204169086565b604080516001600160a01b0397881681529587166020870152939095169284019290925260ff908116606084015216608082015260a081019190915260c0016101d8565b3480156103a457600080fd5b5061025f6103b336600461221c565b610911565b3480156103c457600080fd5b5061022d6109cc565b61022d6103db3660046122b8565b610a02565b3480156103ec57600080fd5b5061022d610b30565b34801561040157600080fd5b5060c9546001600160a01b0316610202565b34801561041f57600080fd5b5061020261042e36600461230f565b610bad565b34801561043f57600080fd5b506101cc61044e3660046121ec565b610bcc565b34801561045f57600080fd5b5061047361046e366004612331565b610bf7565b6040516101d89291906123fb565b34801561048d57600080fd5b5061025f600081565b3480156104a257600080fd5b506102026104b136600461216f565b60fb602052600090815260409020546001600160a01b031681565b3480156104d857600080fd5b5061025f6104e73660046122b8565b610d68565b3480156104f857600080fd5b5061022d610507366004612425565b610e46565b34801561051857600080fd5b5061025f61052736600461216f565b6110c5565b34801561053857600080fd5b5061012e54610202906001600160a01b031681565b34801561055957600080fd5b5061022d6105683660046121ec565b6110dc565b34801561057957600080fd5b5061025f7fa5ff3ec7a96cdbba4d2d5172d66bbc73c6db3885f29b21be5da9fa7a7c02523281565b3480156105ad57600080fd5b5061022d6105bc3660046124bc565b611101565b3480156105cd57600080fd5b5061022d61115b565b60006001600160e01b03198216635a05180f60e01b14806105fb57506105fb82611298565b92915050565b7fa5ff3ec7a96cdbba4d2d5172d66bbc73c6db3885f29b21be5da9fa7a7c02523261062b816112cd565b341561066e5760405162461bcd60e51b815260206004820152600d60248201526c139bc8199959481b9959591959609a1b60448201526064015b60405180910390fd5b835146336000805b848110156106b757888181518110610690576106906124d9565b6020026020010151826106a39190612505565b9150806106af8161251d565b915050610676565b506001600160a01b03808a16600090815261012d602090815260408083208784529091529020600101546106ee91168330846112d7565b60005b84811015610763576107518a8a838151811061070f5761070f6124d9565b6020026020010151868b858151811061072a5761072a6124d9565b60200260200101518b8681518110610744576107446124d9565b6020026020010151611342565b8061075b8161251d565b9150506106f1565b50505050505050505050565b60c9546001600160a01b031633146107995760405162461bcd60e51b815260040161066590612538565b815160005b818110156108635760008482815181106107ba576107ba6124d9565b6020026020010151905080600014156108075760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9251608a1b6044820152606401610665565b838281518110610819576108196124d9565b602090810291909101810151600092835260fb909152604090912080546001600160a01b0319166001600160a01b039092169190911790558061085b8161251d565b91505061079e565b50505050565b600082815260656020526040902060010154610884816112cd565b61088e83836114d7565b505050565b6001600160a01b03811633146109035760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610665565b61090d82826114f9565b5050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561094d57600080fd5b505afa158015610961573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610985919061256d565b905061099281600a61266e565b6001600160a01b038516600090815261012d602090815260408083208784529091529020600301546109c4919061267d565b949350505050565b60c9546001600160a01b031633146109f65760405162461bcd60e51b815260040161066590612538565b610a00600061151b565b565b7fa5ff3ec7a96cdbba4d2d5172d66bbc73c6db3885f29b21be5da9fa7a7c025232610a2c816112cd565b61012f546001600160a01b0316610a4257610b29565b600085815260fb60205260409020546001600160a01b031680610a915760405162461bcd60e51b81526020600482015260076024820152662737903832b2b960c91b6044820152606401610665565b6000858585604051602001610aa89392919061269c565b60408051601f198184030181529082905261012f5463bd45c4e760e01b83529092506001600160a01b03169063bd45c4e7903490610af490869086906000908e906002906004016126cc565b6000604051808303818588803b158015610b0d57600080fd5b505af1158015610b21573d6000803e3d6000fd5b505050505050505b5050505050565b6000610b3c600161156d565b90508015610b54576000805461ff0019166101001790555b610b5c6115f5565b610b6461115b565b8015610baa576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6000828152609760205260408120610bc5908361163d565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000606060008061012e60009054906101000a90046001600160a01b03166001600160a01b031663d0496d6a6040518163ffffffff1660e01b8152600401606060405180830381600087803b158015610c4f57600080fd5b505af1158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c87919061270a565b50600081815260fb602052604090205491935091506001600160a01b03808416911614610ce65760405162461bcd60e51b815260206004820152600d60248201526c15dc9bdb99c818dbdb9d195e1d609a1b6044820152606401610665565b60008080610cf6888a018a612741565b925092509250826001600160a01b03168282604051610d15919061279a565b60006040518083038185875af1925050503d8060008114610d52576040519150601f19603f3d011682016040523d82523d6000602084013e610d57565b606091505b50909a909950975050505050505050565b61012f546000906001600160a01b0316610d84575060006109c4565b6000848484604051602001610d9b9392919061269c565b60408051808303601f190181529082905261012f5481516366c96b3760e01b84526060600485015260006064850152602484018a905260448401529092506001600160a01b0316906366c96b379060840160206040518083038186803b158015610e0457600080fd5b505afa158015610e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3c91906127b6565b9695505050505050565b60c9546001600160a01b03163314610e705760405162461bcd60e51b815260040161066590612538565b6001600160a01b03808916600090815261012d602090815260408083208b8452909152902054168015610eb257610eb26001600160a01b038a16826000611649565b6040518060c00160405280886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b031681526020018560ff1681526020018460ff1681526020018381525061012d60008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160146101000a81548160ff021916908360ff16021790555060808201518160020160156101000a81548160ff021916908360ff16021790555060a08201518160030155905050856001600160a01b031663dd62ed3e30896040518363ffffffff1660e01b81526004016110509291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b15801561106857600080fd5b505afa15801561107c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a091906127b6565b6110ba576110ba6001600160a01b03871688600019611649565b505050505050505050565b60008181526097602052604081206105fb9061176d565b6000828152606560205260409020600101546110f7816112cd565b61088e83836114f9565b60c9546001600160a01b0316331461112b5760405162461bcd60e51b815260040161066590612538565b611147600061114260c9546001600160a01b031690565b6114f9565b61115081611777565b610baa60008261180f565b60c9546001600160a01b031633146111855760405162461bcd60e51b815260040161066590612538565b4660048114156111bb5761012f80546001600160a01b03191673273a4ffceb31b8473d51051ad2a2edbb7ac8ce021790556111ed565b610fa2811415610baa5761012f80546001600160a01b03191673d7c295e399ca928a3a14b01d760e794f1adf89901790555b61012f60009054906101000a90046001600160a01b03166001600160a01b031663c34c08e56040518163ffffffff1660e01b815260040160206040518083038186803b15801561123c57600080fd5b505afa158015611250573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127491906127cf565b61012e80546001600160a01b0319166001600160a01b039290921691909117905550565b60006001600160e01b03198216637965db0b60e01b14806105fb57506301ffc9a760e01b6001600160e01b03198316146105fb565b610baa8133611819565b6040516001600160a01b03808516602483015283166044820152606481018290526108639085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261187d565b61134c8583610911565b84101561138e5760405162461bcd60e51b815260206004820152601060248201526f151bdbc81cdb585b1b08185b5bdd5b9d60821b6044820152606401610665565b6001600160a01b03858116600090815261012d60209081526040808320878452825291829020825160c081018452815485168082526001830154861693820193909352600282015480861682860181905260ff600160a01b830481166060850152600160a81b909204909116608083015260039092015460a082015292516376defaf160e11b8152600481019190915292841660248401526044830187905260648301859052909163edbdf5e290608401600060405180830381600087803b15801561145957600080fd5b505af115801561146d573d6000803e3d6000fd5b50505050828582602001516001600160a01b03167f3a92e15f876cc81488721650bc1ba6d625ea349cff7bff2502b86ac0d24e88b833866040516114c79291906001600160a01b0392831681529116602082015260400190565b60405180910390a4505050505050565b6114e1828261194f565b600082815260976020526040902061088e90826119d5565b61150382826119ea565b600082815260976020526040902061088e9082611a51565b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff16156115b4578160ff1660011480156115905750303b155b6115ac5760405162461bcd60e51b8152600401610665906127ec565b506000919050565b60005460ff8084169116106115db5760405162461bcd60e51b8152600401610665906127ec565b506000805460ff191660ff92909216919091179055600190565b6000611601600161156d565b90508015611619576000805461ff0019166101001790555b611621611a66565b610b64600061163860c9546001600160a01b031690565b61180f565b6000610bc58383611ada565b8015806116d25750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561169857600080fd5b505afa1580156116ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d091906127b6565b155b61173d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610665565b6040516001600160a01b03831660248201526044810182905261088e90849063095ea7b360e01b9060640161130b565b60006105fb825490565b60c9546001600160a01b031633146117a15760405162461bcd60e51b815260040161066590612538565b6001600160a01b0381166118065760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610665565b610baa8161151b565b61090d82826114d7565b6118238282610bcc565b61090d5761183b816001600160a01b03166014611b04565b611846836020611b04565b60405160200161185792919061283a565b60408051601f198184030181529082905262461bcd60e51b8252610665916004016128af565b60006118d2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ca09092919063ffffffff16565b80519091501561088e57808060200190518101906118f091906128c2565b61088e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610665565b6119598282610bcc565b61090d5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119913390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610bc5836001600160a01b038416611caf565b6119f48282610bcc565b1561090d5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610bc5836001600160a01b038416611cfe565b600054610100900460ff16611ad15760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610665565b610a003361151b565b6000826000018281548110611af157611af16124d9565b9060005260206000200154905092915050565b60606000611b1383600261267d565b611b1e906002612505565b67ffffffffffffffff811115611b3657611b36611f9a565b6040519080825280601f01601f191660200182016040528015611b60576020820181803683370190505b509050600360fc1b81600081518110611b7b57611b7b6124d9565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611baa57611baa6124d9565b60200101906001600160f81b031916908160001a9053506000611bce84600261267d565b611bd9906001612505565b90505b6001811115611c51576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611c0d57611c0d6124d9565b1a60f81b828281518110611c2357611c236124d9565b60200101906001600160f81b031916908160001a90535060049490941c93611c4a816128e4565b9050611bdc565b508315610bc55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610665565b60606109c48484600085611df1565b6000818152600183016020526040812054611cf6575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105fb565b5060006105fb565b60008181526001830160205260408120548015611de7576000611d226001836128fb565b8554909150600090611d36906001906128fb565b9050818114611d9b576000866000018281548110611d5657611d566124d9565b9060005260206000200154905080876000018481548110611d7957611d796124d9565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611dac57611dac612912565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105fb565b60009150506105fb565b606082471015611e525760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610665565b6001600160a01b0385163b611ea95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610665565b600080866001600160a01b03168587604051611ec5919061279a565b60006040518083038185875af1925050503d8060008114611f02576040519150601f19603f3d011682016040523d82523d6000602084013e611f07565b606091505b5091509150611f17828286611f22565b979650505050505050565b60608315611f31575081610bc5565b825115611f415782518084602001fd5b8160405162461bcd60e51b815260040161066591906128af565b600060208284031215611f6d57600080fd5b81356001600160e01b031981168114610bc557600080fd5b6001600160a01b0381168114610baa57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611fd957611fd9611f9a565b604052919050565b600067ffffffffffffffff821115611ffb57611ffb611f9a565b5060051b60200190565b600082601f83011261201657600080fd5b8135602061202b61202683611fe1565b611fb0565b82815260059290921b8401810191818101908684111561204a57600080fd5b8286015b84811015612065578035835291830191830161204e565b509695505050505050565b600082601f83011261208157600080fd5b8135602061209161202683611fe1565b82815260059290921b840181019181810190868411156120b057600080fd5b8286015b848110156120655780356120c781611f85565b83529183019183016120b4565b600080600080608085870312156120ea57600080fd5b84356120f581611f85565b9350602085013567ffffffffffffffff8082111561211257600080fd5b61211e88838901612005565b9450604087013591508082111561213457600080fd5b61214088838901612005565b9350606087013591508082111561215657600080fd5b5061216387828801612070565b91505092959194509250565b60006020828403121561218157600080fd5b5035919050565b6000806040838503121561219b57600080fd5b823567ffffffffffffffff808211156121b357600080fd5b6121bf86838701612005565b935060208501359150808211156121d557600080fd5b506121e285828601612070565b9150509250929050565b600080604083850312156121ff57600080fd5b82359150602083013561221181611f85565b809150509250929050565b6000806040838503121561222f57600080fd5b823561223a81611f85565b946020939093013593505050565b600082601f83011261225957600080fd5b813567ffffffffffffffff81111561227357612273611f9a565b612286601f8201601f1916602001611fb0565b81815284602083860101111561229b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156122ce57600080fd5b8435935060208501356122e081611f85565b925060408501359150606085013567ffffffffffffffff81111561230357600080fd5b61216387828801612248565b6000806040838503121561232257600080fd5b50508035926020909101359150565b6000806020838503121561234457600080fd5b823567ffffffffffffffff8082111561235c57600080fd5b818501915085601f83011261237057600080fd5b81358181111561237f57600080fd5b86602082850101111561239157600080fd5b60209290920196919550909350505050565b60005b838110156123be5781810151838201526020016123a6565b838111156108635750506000910152565b600081518084526123e78160208601602086016123a3565b601f01601f19169290920160200192915050565b82151581526040602082015260006109c460408301846123cf565b60ff81168114610baa57600080fd5b600080600080600080600080610100898b03121561244257600080fd5b883561244d81611f85565b975060208901359650604089013561246481611f85565b9550606089013561247481611f85565b9450608089013561248481611f85565b935060a089013561249481612416565b925060c08901356124a481612416565b8092505060e089013590509295985092959890939650565b6000602082840312156124ce57600080fd5b8135610bc581611f85565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115612518576125186124ef565b500190565b6000600019821415612531576125316124ef565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561257f57600080fd5b8151610bc581612416565b600181815b808511156125c55781600019048211156125ab576125ab6124ef565b808516156125b857918102915b93841c939080029061258f565b509250929050565b6000826125dc575060016105fb565b816125e9575060006105fb565b81600181146125ff576002811461260957612625565b60019150506105fb565b60ff84111561261a5761261a6124ef565b50506001821b6105fb565b5060208310610133831016604e8410600b8410161715612648575081810a6105fb565b612652838361258a565b8060001904821115612666576126666124ef565b029392505050565b6000610bc560ff8416836125cd565b6000816000190483118215151615612697576126976124ef565b500290565b60018060a01b03841681528260208201526060604082015260006126c360608301846123cf565b95945050505050565b600060018060a01b03808816835260a060208401526126ee60a08401886123cf565b9516604083015250606081019290925260809091015292915050565b60008060006060848603121561271f57600080fd5b835161272a81611f85565b602085015160409095015190969495509392505050565b60008060006060848603121561275657600080fd5b833561276181611f85565b925060208401359150604084013567ffffffffffffffff81111561278457600080fd5b61279086828701612248565b9150509250925092565b600082516127ac8184602087016123a3565b9190910192915050565b6000602082840312156127c857600080fd5b5051919050565b6000602082840312156127e157600080fd5b8151610bc581611f85565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516128728160178501602088016123a3565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516128a38160288401602088016123a3565b01602801949350505050565b602081526000610bc560208301846123cf565b6000602082840312156128d457600080fd5b81518015158114610bc557600080fd5b6000816128f3576128f36124ef565b506000190190565b60008282101561290d5761290d6124ef565b500390565b634e487b7160e01b600052603160045260246000fdfea264697066735822122018f1db98213d43adff21ff4787cf0c471cced78c0e68f6006366cb8d2d54efd364736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101a05760003560e01c80638da5cb5b116100ec578063c3f9db531161008a578063d547741f11610064578063d547741f1461054d578063eae6f6521461056d578063f2fde38b146105a1578063f5382b75146105c157600080fd5b8063c3f9db53146104ec578063ca15c8731461050c578063d2c7dfcc1461052c57600080fd5b80639abaf479116100c65780639abaf47914610453578063a217fddf14610481578063be4f3e8f14610496578063bebc4f71146104cc57600080fd5b80638da5cb5b146103f55780639010d07c1461041357806391d148541461043357600080fd5b806336568abe1161015957806357b730321161013357806357b7303214610398578063715018a6146103b857806377cae758146103cd5780638129fc1c146103e057600080fd5b806336568abe146102ad5780633b11ca51146102cd57806351f727df146102e157600080fd5b806301ffc9a7146101ac57806303cf3a5d146101e1578063219d5ca51461021a578063248a9ca31461022f5780632de2c8ad1461026d5780632f2ff15d1461028d57600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101cc6101c7366004611f5b565b6105d6565b60405190151581526020015b60405180910390f35b3480156101ed57600080fd5b5061012f54610202906001600160a01b031681565b6040516001600160a01b0390911681526020016101d8565b61022d6102283660046120d4565b610601565b005b34801561023b57600080fd5b5061025f61024a36600461216f565b60009081526065602052604090206001015490565b6040519081526020016101d8565b34801561027957600080fd5b5061022d610288366004612188565b61076f565b34801561029957600080fd5b5061022d6102a83660046121ec565b610869565b3480156102b957600080fd5b5061022d6102c83660046121ec565b610893565b3480156102d957600080fd5b50600061025f565b3480156102ed57600080fd5b506103546102fc36600461221c565b61012d60209081526000928352604080842090915290825290208054600182015460028301546003909301546001600160a01b03928316939183169282169160ff600160a01b8204811692600160a81b909204169086565b604080516001600160a01b0397881681529587166020870152939095169284019290925260ff908116606084015216608082015260a081019190915260c0016101d8565b3480156103a457600080fd5b5061025f6103b336600461221c565b610911565b3480156103c457600080fd5b5061022d6109cc565b61022d6103db3660046122b8565b610a02565b3480156103ec57600080fd5b5061022d610b30565b34801561040157600080fd5b5060c9546001600160a01b0316610202565b34801561041f57600080fd5b5061020261042e36600461230f565b610bad565b34801561043f57600080fd5b506101cc61044e3660046121ec565b610bcc565b34801561045f57600080fd5b5061047361046e366004612331565b610bf7565b6040516101d89291906123fb565b34801561048d57600080fd5b5061025f600081565b3480156104a257600080fd5b506102026104b136600461216f565b60fb602052600090815260409020546001600160a01b031681565b3480156104d857600080fd5b5061025f6104e73660046122b8565b610d68565b3480156104f857600080fd5b5061022d610507366004612425565b610e46565b34801561051857600080fd5b5061025f61052736600461216f565b6110c5565b34801561053857600080fd5b5061012e54610202906001600160a01b031681565b34801561055957600080fd5b5061022d6105683660046121ec565b6110dc565b34801561057957600080fd5b5061025f7fa5ff3ec7a96cdbba4d2d5172d66bbc73c6db3885f29b21be5da9fa7a7c02523281565b3480156105ad57600080fd5b5061022d6105bc3660046124bc565b611101565b3480156105cd57600080fd5b5061022d61115b565b60006001600160e01b03198216635a05180f60e01b14806105fb57506105fb82611298565b92915050565b7fa5ff3ec7a96cdbba4d2d5172d66bbc73c6db3885f29b21be5da9fa7a7c02523261062b816112cd565b341561066e5760405162461bcd60e51b815260206004820152600d60248201526c139bc8199959481b9959591959609a1b60448201526064015b60405180910390fd5b835146336000805b848110156106b757888181518110610690576106906124d9565b6020026020010151826106a39190612505565b9150806106af8161251d565b915050610676565b506001600160a01b03808a16600090815261012d602090815260408083208784529091529020600101546106ee91168330846112d7565b60005b84811015610763576107518a8a838151811061070f5761070f6124d9565b6020026020010151868b858151811061072a5761072a6124d9565b60200260200101518b8681518110610744576107446124d9565b6020026020010151611342565b8061075b8161251d565b9150506106f1565b50505050505050505050565b60c9546001600160a01b031633146107995760405162461bcd60e51b815260040161066590612538565b815160005b818110156108635760008482815181106107ba576107ba6124d9565b6020026020010151905080600014156108075760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9251608a1b6044820152606401610665565b838281518110610819576108196124d9565b602090810291909101810151600092835260fb909152604090912080546001600160a01b0319166001600160a01b039092169190911790558061085b8161251d565b91505061079e565b50505050565b600082815260656020526040902060010154610884816112cd565b61088e83836114d7565b505050565b6001600160a01b03811633146109035760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610665565b61090d82826114f9565b5050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561094d57600080fd5b505afa158015610961573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610985919061256d565b905061099281600a61266e565b6001600160a01b038516600090815261012d602090815260408083208784529091529020600301546109c4919061267d565b949350505050565b60c9546001600160a01b031633146109f65760405162461bcd60e51b815260040161066590612538565b610a00600061151b565b565b7fa5ff3ec7a96cdbba4d2d5172d66bbc73c6db3885f29b21be5da9fa7a7c025232610a2c816112cd565b61012f546001600160a01b0316610a4257610b29565b600085815260fb60205260409020546001600160a01b031680610a915760405162461bcd60e51b81526020600482015260076024820152662737903832b2b960c91b6044820152606401610665565b6000858585604051602001610aa89392919061269c565b60408051601f198184030181529082905261012f5463bd45c4e760e01b83529092506001600160a01b03169063bd45c4e7903490610af490869086906000908e906002906004016126cc565b6000604051808303818588803b158015610b0d57600080fd5b505af1158015610b21573d6000803e3d6000fd5b505050505050505b5050505050565b6000610b3c600161156d565b90508015610b54576000805461ff0019166101001790555b610b5c6115f5565b610b6461115b565b8015610baa576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6000828152609760205260408120610bc5908361163d565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000606060008061012e60009054906101000a90046001600160a01b03166001600160a01b031663d0496d6a6040518163ffffffff1660e01b8152600401606060405180830381600087803b158015610c4f57600080fd5b505af1158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c87919061270a565b50600081815260fb602052604090205491935091506001600160a01b03808416911614610ce65760405162461bcd60e51b815260206004820152600d60248201526c15dc9bdb99c818dbdb9d195e1d609a1b6044820152606401610665565b60008080610cf6888a018a612741565b925092509250826001600160a01b03168282604051610d15919061279a565b60006040518083038185875af1925050503d8060008114610d52576040519150601f19603f3d011682016040523d82523d6000602084013e610d57565b606091505b50909a909950975050505050505050565b61012f546000906001600160a01b0316610d84575060006109c4565b6000848484604051602001610d9b9392919061269c565b60408051808303601f190181529082905261012f5481516366c96b3760e01b84526060600485015260006064850152602484018a905260448401529092506001600160a01b0316906366c96b379060840160206040518083038186803b158015610e0457600080fd5b505afa158015610e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3c91906127b6565b9695505050505050565b60c9546001600160a01b03163314610e705760405162461bcd60e51b815260040161066590612538565b6001600160a01b03808916600090815261012d602090815260408083208b8452909152902054168015610eb257610eb26001600160a01b038a16826000611649565b6040518060c00160405280886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b031681526020018560ff1681526020018460ff1681526020018381525061012d60008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160146101000a81548160ff021916908360ff16021790555060808201518160020160156101000a81548160ff021916908360ff16021790555060a08201518160030155905050856001600160a01b031663dd62ed3e30896040518363ffffffff1660e01b81526004016110509291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b15801561106857600080fd5b505afa15801561107c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a091906127b6565b6110ba576110ba6001600160a01b03871688600019611649565b505050505050505050565b60008181526097602052604081206105fb9061176d565b6000828152606560205260409020600101546110f7816112cd565b61088e83836114f9565b60c9546001600160a01b0316331461112b5760405162461bcd60e51b815260040161066590612538565b611147600061114260c9546001600160a01b031690565b6114f9565b61115081611777565b610baa60008261180f565b60c9546001600160a01b031633146111855760405162461bcd60e51b815260040161066590612538565b4660048114156111bb5761012f80546001600160a01b03191673273a4ffceb31b8473d51051ad2a2edbb7ac8ce021790556111ed565b610fa2811415610baa5761012f80546001600160a01b03191673d7c295e399ca928a3a14b01d760e794f1adf89901790555b61012f60009054906101000a90046001600160a01b03166001600160a01b031663c34c08e56040518163ffffffff1660e01b815260040160206040518083038186803b15801561123c57600080fd5b505afa158015611250573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127491906127cf565b61012e80546001600160a01b0319166001600160a01b039290921691909117905550565b60006001600160e01b03198216637965db0b60e01b14806105fb57506301ffc9a760e01b6001600160e01b03198316146105fb565b610baa8133611819565b6040516001600160a01b03808516602483015283166044820152606481018290526108639085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261187d565b61134c8583610911565b84101561138e5760405162461bcd60e51b815260206004820152601060248201526f151bdbc81cdb585b1b08185b5bdd5b9d60821b6044820152606401610665565b6001600160a01b03858116600090815261012d60209081526040808320878452825291829020825160c081018452815485168082526001830154861693820193909352600282015480861682860181905260ff600160a01b830481166060850152600160a81b909204909116608083015260039092015460a082015292516376defaf160e11b8152600481019190915292841660248401526044830187905260648301859052909163edbdf5e290608401600060405180830381600087803b15801561145957600080fd5b505af115801561146d573d6000803e3d6000fd5b50505050828582602001516001600160a01b03167f3a92e15f876cc81488721650bc1ba6d625ea349cff7bff2502b86ac0d24e88b833866040516114c79291906001600160a01b0392831681529116602082015260400190565b60405180910390a4505050505050565b6114e1828261194f565b600082815260976020526040902061088e90826119d5565b61150382826119ea565b600082815260976020526040902061088e9082611a51565b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff16156115b4578160ff1660011480156115905750303b155b6115ac5760405162461bcd60e51b8152600401610665906127ec565b506000919050565b60005460ff8084169116106115db5760405162461bcd60e51b8152600401610665906127ec565b506000805460ff191660ff92909216919091179055600190565b6000611601600161156d565b90508015611619576000805461ff0019166101001790555b611621611a66565b610b64600061163860c9546001600160a01b031690565b61180f565b6000610bc58383611ada565b8015806116d25750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561169857600080fd5b505afa1580156116ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d091906127b6565b155b61173d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610665565b6040516001600160a01b03831660248201526044810182905261088e90849063095ea7b360e01b9060640161130b565b60006105fb825490565b60c9546001600160a01b031633146117a15760405162461bcd60e51b815260040161066590612538565b6001600160a01b0381166118065760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610665565b610baa8161151b565b61090d82826114d7565b6118238282610bcc565b61090d5761183b816001600160a01b03166014611b04565b611846836020611b04565b60405160200161185792919061283a565b60408051601f198184030181529082905262461bcd60e51b8252610665916004016128af565b60006118d2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ca09092919063ffffffff16565b80519091501561088e57808060200190518101906118f091906128c2565b61088e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610665565b6119598282610bcc565b61090d5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119913390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610bc5836001600160a01b038416611caf565b6119f48282610bcc565b1561090d5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610bc5836001600160a01b038416611cfe565b600054610100900460ff16611ad15760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610665565b610a003361151b565b6000826000018281548110611af157611af16124d9565b9060005260206000200154905092915050565b60606000611b1383600261267d565b611b1e906002612505565b67ffffffffffffffff811115611b3657611b36611f9a565b6040519080825280601f01601f191660200182016040528015611b60576020820181803683370190505b509050600360fc1b81600081518110611b7b57611b7b6124d9565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611baa57611baa6124d9565b60200101906001600160f81b031916908160001a9053506000611bce84600261267d565b611bd9906001612505565b90505b6001811115611c51576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611c0d57611c0d6124d9565b1a60f81b828281518110611c2357611c236124d9565b60200101906001600160f81b031916908160001a90535060049490941c93611c4a816128e4565b9050611bdc565b508315610bc55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610665565b60606109c48484600085611df1565b6000818152600183016020526040812054611cf6575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105fb565b5060006105fb565b60008181526001830160205260408120548015611de7576000611d226001836128fb565b8554909150600090611d36906001906128fb565b9050818114611d9b576000866000018281548110611d5657611d566124d9565b9060005260206000200154905080876000018481548110611d7957611d796124d9565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611dac57611dac612912565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105fb565b60009150506105fb565b606082471015611e525760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610665565b6001600160a01b0385163b611ea95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610665565b600080866001600160a01b03168587604051611ec5919061279a565b60006040518083038185875af1925050503d8060008114611f02576040519150601f19603f3d011682016040523d82523d6000602084013e611f07565b606091505b5091509150611f17828286611f22565b979650505050505050565b60608315611f31575081610bc5565b825115611f415782518084602001fd5b8160405162461bcd60e51b815260040161066591906128af565b600060208284031215611f6d57600080fd5b81356001600160e01b031981168114610bc557600080fd5b6001600160a01b0381168114610baa57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611fd957611fd9611f9a565b604052919050565b600067ffffffffffffffff821115611ffb57611ffb611f9a565b5060051b60200190565b600082601f83011261201657600080fd5b8135602061202b61202683611fe1565b611fb0565b82815260059290921b8401810191818101908684111561204a57600080fd5b8286015b84811015612065578035835291830191830161204e565b509695505050505050565b600082601f83011261208157600080fd5b8135602061209161202683611fe1565b82815260059290921b840181019181810190868411156120b057600080fd5b8286015b848110156120655780356120c781611f85565b83529183019183016120b4565b600080600080608085870312156120ea57600080fd5b84356120f581611f85565b9350602085013567ffffffffffffffff8082111561211257600080fd5b61211e88838901612005565b9450604087013591508082111561213457600080fd5b61214088838901612005565b9350606087013591508082111561215657600080fd5b5061216387828801612070565b91505092959194509250565b60006020828403121561218157600080fd5b5035919050565b6000806040838503121561219b57600080fd5b823567ffffffffffffffff808211156121b357600080fd5b6121bf86838701612005565b935060208501359150808211156121d557600080fd5b506121e285828601612070565b9150509250929050565b600080604083850312156121ff57600080fd5b82359150602083013561221181611f85565b809150509250929050565b6000806040838503121561222f57600080fd5b823561223a81611f85565b946020939093013593505050565b600082601f83011261225957600080fd5b813567ffffffffffffffff81111561227357612273611f9a565b612286601f8201601f1916602001611fb0565b81815284602083860101111561229b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156122ce57600080fd5b8435935060208501356122e081611f85565b925060408501359150606085013567ffffffffffffffff81111561230357600080fd5b61216387828801612248565b6000806040838503121561232257600080fd5b50508035926020909101359150565b6000806020838503121561234457600080fd5b823567ffffffffffffffff8082111561235c57600080fd5b818501915085601f83011261237057600080fd5b81358181111561237f57600080fd5b86602082850101111561239157600080fd5b60209290920196919550909350505050565b60005b838110156123be5781810151838201526020016123a6565b838111156108635750506000910152565b600081518084526123e78160208601602086016123a3565b601f01601f19169290920160200192915050565b82151581526040602082015260006109c460408301846123cf565b60ff81168114610baa57600080fd5b600080600080600080600080610100898b03121561244257600080fd5b883561244d81611f85565b975060208901359650604089013561246481611f85565b9550606089013561247481611f85565b9450608089013561248481611f85565b935060a089013561249481612416565b925060c08901356124a481612416565b8092505060e089013590509295985092959890939650565b6000602082840312156124ce57600080fd5b8135610bc581611f85565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115612518576125186124ef565b500190565b6000600019821415612531576125316124ef565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561257f57600080fd5b8151610bc581612416565b600181815b808511156125c55781600019048211156125ab576125ab6124ef565b808516156125b857918102915b93841c939080029061258f565b509250929050565b6000826125dc575060016105fb565b816125e9575060006105fb565b81600181146125ff576002811461260957612625565b60019150506105fb565b60ff84111561261a5761261a6124ef565b50506001821b6105fb565b5060208310610133831016604e8410600b8410161715612648575081810a6105fb565b612652838361258a565b8060001904821115612666576126666124ef565b029392505050565b6000610bc560ff8416836125cd565b6000816000190483118215151615612697576126976124ef565b500290565b60018060a01b03841681528260208201526060604082015260006126c360608301846123cf565b95945050505050565b600060018060a01b03808816835260a060208401526126ee60a08401886123cf565b9516604083015250606081019290925260809091015292915050565b60008060006060848603121561271f57600080fd5b835161272a81611f85565b602085015160409095015190969495509392505050565b60008060006060848603121561275657600080fd5b833561276181611f85565b925060208401359150604084013567ffffffffffffffff81111561278457600080fd5b61279086828701612248565b9150509250925092565b600082516127ac8184602087016123a3565b9190910192915050565b6000602082840312156127c857600080fd5b5051919050565b6000602082840312156127e157600080fd5b8151610bc581611f85565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516128728160178501602088016123a3565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516128a38160288401602088016123a3565b01602801949350505050565b602081526000610bc560208301846123cf565b6000602082840312156128d457600080fd5b81518015158114610bc557600080fd5b6000816128f3576128f36124ef565b506000190190565b60008282101561290d5761290d6124ef565b500390565b634e487b7160e01b600052603160045260246000fdfea264697066735822122018f1db98213d43adff21ff4787cf0c471cced78c0e68f6006366cb8d2d54efd364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "anyExecute(bytes)": {
        "details": "The function to receive message from anycall router. The syntax must not be changed."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 713,
        "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 716,
        "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3292,
        "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3946,
        "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 483,
        "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33,
        "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4359_storage)"
      },
      {
        "astId": 143,
        "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 593,
        "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
        "label": "_owner",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 705,
        "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 56141,
        "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
        "label": "peers",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 56310,
        "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 66938,
        "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
        "label": "anyswapMap",
        "offset": 0,
        "slot": "301",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Entry)66521_storage))"
      },
      {
        "astId": 66941,
        "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
        "label": "anycallExecutor",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IAnycallExecutor)66718"
      },
      {
        "astId": 67483,
        "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
        "label": "anycallRouterTest",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IAnycallV6Proxy)66748"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAnycallExecutor)66718": {
        "encoding": "inplace",
        "label": "contract IAnycallExecutor",
        "numberOfBytes": "20"
      },
      "t_contract(IAnycallV6Proxy)66748": {
        "encoding": "inplace",
        "label": "contract IAnycallV6Proxy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Entry)66521_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct AnyswapMap.Entry))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Entry)66521_storage)"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4359_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4359_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Entry)66521_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AnyswapMap.Entry)",
        "numberOfBytes": "32",
        "value": "t_struct(Entry)66521_storage"
      },
      "t_struct(AddressSet)4359_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 4358,
            "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4058_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Entry)66521_storage": {
        "encoding": "inplace",
        "label": "struct AnyswapMap.Entry",
        "members": [
          {
            "astId": 66510,
            "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
            "label": "router",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 66512,
            "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
            "label": "underlying",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 66514,
            "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
            "label": "anyToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 66516,
            "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
            "label": "underlyingDecimals",
            "offset": 20,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 66518,
            "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
            "label": "anyTokenDecimals",
            "offset": 21,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 66520,
            "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
            "label": "minimumSwap",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4058_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 4053,
            "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4057,
            "contract": "contracts/xchain/multichain/MultichainXChainAdapterTest.sol:MultichainXChainAdapterTest",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}