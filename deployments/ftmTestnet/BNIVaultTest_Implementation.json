{
  "address": "0xD0A69A60AC58b17BEEc463DA9Faea4A663d4dC87",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currentWatermark",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lastWatermark",
          "type": "uint256"
        }
      ],
      "name": "AdjustWatermark",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currentWatermark",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lastWatermark",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "CollectProfitAndUpdateWatermark",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amtDeposit",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenDeposit",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TransferredOutFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amtWithdraw",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenWithdraw",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20UpgradeableExt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectProfitAndUpdateWatermark",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_USDT6Amts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "depositByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_USDT6Amts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "depositByAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "firstOperationNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "getAllPoolInUSDAtNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentCompositionPerc",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEachPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "chainIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "pools",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUSDTPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDT",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_biconomy",
          "type": "address"
        }
      ],
      "name": "initialize2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastOperationNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "operationAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolAtNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "poolInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitFeePerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_perc",
          "type": "uint256[]"
        }
      ],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_biconomy",
          "type": "address"
        }
      ],
      "name": "setBiconomy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_profitFeePerc",
          "type": "uint256"
        }
      ],
      "name": "setProfitFeePerc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryWallet",
          "type": "address"
        }
      ],
      "name": "setTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAgent",
          "type": "address"
        }
      ],
      "name": "setUserAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLastOperationNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "watermark",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "withdrawPercByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "withdrawPercByAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x93a45d75ff131a0b4337763845102c00c011f336fb77963a797099ed1bc8813e",
  "receipt": {
    "to": null,
    "from": "0xd91Fbc9b431464D737E1BC4e76900D43405a639b",
    "contractAddress": "0xD0A69A60AC58b17BEEc463DA9Faea4A663d4dC87",
    "transactionIndex": 1,
    "gasUsed": "3362933",
    "logsBloom": "0x
    "blockHash": "0x00002bcc00000f6a7c7021806fe719faf5edb4b56a05aaec1bb66da9881329f0",
    "transactionHash": "0x93a45d75ff131a0b4337763845102c00c011f336fb77963a797099ed1bc8813e",
    "logs": [],
    "blockNumber": 10277851,
    "cumulativeGasUsed": "3438802",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "88c5ae54797f57c2378a41f884fd5600",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentWatermark\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lastWatermark\",\"type\":\"uint256\"}],\"name\":\"AdjustWatermark\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentWatermark\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lastWatermark\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"CollectProfitAndUpdateWatermark\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amtDeposit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenDeposit\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TransferredOutFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amtWithdraw\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenWithdraw\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20UpgradeableExt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectProfitAndUpdateWatermark\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_USDT6Amts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"depositByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_USDT6Amts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"depositByAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstOperationNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getAllPoolInUSDAtNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentCompositionPerc\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEachPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"chainIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pools\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_biconomy\",\"type\":\"address\"}],\"name\":\"initialize2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastOperationNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operationAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolAtNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFeePerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_perc\",\"type\":\"uint256[]\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_biconomy\",\"type\":\"address\"}],\"name\":\"setBiconomy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitFeePerc\",\"type\":\"uint256\"}],\"name\":\"setProfitFeePerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAgent\",\"type\":\"address\"}],\"name\":\"setUserAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastOperationNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"watermark\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"withdrawPercByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"withdrawPercByAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositByAdmin(address,address[],uint256[],uint256)\":{\"params\":{\"_USDT6Amts\":\"amounts of USDT should be deposited to each pools. It's 6 decimals\"}},\"getUSDTPriceInUSD()\":{\"returns\":{\"_0\":\"the price of USDT in USD.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawPercByAdmin(address,uint256,uint256)\":{\"params\":{\"_sharePerc\":\"percentage of assets which should be withdrawn. It's 18 decimals\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositByAdmin(address,address[],uint256[],uint256)\":{\"notice\":\"The length of array is based on token count. And the lengths should be same on the arraies.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bni/BNIVaultTest.sol\":\"BNIVaultTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/bni/BNIVault.sol\":{\"content\":\" // SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./priceOracle/IPriceOracle.sol\\\";\\nimport \\\"../../interfaces/IERC20UpgradeableExt.sol\\\";\\nimport \\\"../../libs/Const.sol\\\";\\nimport \\\"../../libs/Token.sol\\\";\\nimport \\\"./IBNIVault.sol\\\";\\n\\ninterface IStrategy {\\n    function invest(address[] memory tokens, uint[] memory USDTAmts) external;\\n    function withdrawPerc(uint sharePerc) external;\\n    function withdrawFromPool(uint pid, uint sharePerc) external returns (uint);\\n    function emergencyWithdraw() external;\\n    function getEachPoolInUSD() external view returns (address[] memory tokens, uint[] memory pools);\\n    function getAllPoolInUSD() external view returns (uint);\\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages);\\n    function getAPR() external view returns (uint);\\n}\\n\\ncontract BNIVault is\\n    IBNIVault,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    OwnableUpgradeable\\n{\\n    using SafeERC20Upgradeable for IERC20UpgradeableExt;\\n\\n    struct PoolSnapshot {\\n        uint poolInUSD;\\n        uint ts;\\n    }\\n\\n    IERC20UpgradeableExt public USDT;\\n    uint8 usdtDecimals;\\n\\n    address public admin;\\n    IStrategy public strategy;\\n    IPriceOracle public priceOracle;\\n\\n    uint public profitFeePerc;\\n    address public treasuryWallet;\\n    uint public watermark; // In USD (18 decimals)\\n    uint public fees; // In USD (18 decimals)\\n\\n    address public trustedForwarder;\\n\\n    uint public firstOperationNonce;\\n    uint public lastOperationNonce;\\n    mapping(uint => PoolSnapshot) public poolAtNonce;\\n    mapping(address => uint) public userLastOperationNonce;\\n    mapping(uint => uint) public operationAmounts; // value in USD scaled by 10^18\\n\\n    uint public version;\\n    address public userAgent;\\n\\n    event Deposit(address indexed account, address from, uint indexed amtDeposit, address indexed tokenDeposit);\\n    event Withdraw(address indexed account, address to, uint indexed amtWithdraw, address indexed tokenWithdraw, uint sharePerc);\\n    event Rebalance(uint indexed pid, uint sharePerc, uint indexed amount, address indexed target);\\n    event Reinvest(uint indexed amount);\\n    event CollectProfitAndUpdateWatermark(uint indexed currentWatermark, uint indexed lastWatermark, uint indexed fee);\\n    event AdjustWatermark(uint indexed currentWatermark, uint indexed lastWatermark);\\n    event TransferredOutFees(uint indexed fees, address indexed token);\\n    \\n    modifier onlyOwnerOrAdmin {\\n        require(msg.sender == owner() || msg.sender == address(admin), \\\"Only owner or admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyAgent {\\n        require(msg.sender == address(userAgent), \\\"Only agent\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _treasuryWallet, address _admin,\\n        address _strategy, address _priceOracle,\\n        address _USDT\\n    ) external initializer {\\n        __Ownable_init();\\n\\n        treasuryWallet = _treasuryWallet;\\n        admin = _admin;\\n        strategy = IStrategy(_strategy);\\n        priceOracle = IPriceOracle(_priceOracle);\\n\\n        profitFeePerc = 2000;\\n\\n        USDT = IERC20UpgradeableExt(_USDT);\\n        usdtDecimals = USDT.decimals();\\n        require(6 <= usdtDecimals, \\\"USDT decimals must >= 6\\\");\\n\\n        USDT.safeApprove(address(strategy), type(uint).max);\\n    }\\n\\n    function initialize2(address _userAgent, address _biconomy) external onlyOwner {\\n        require(version < 2, \\\"Already called\\\");\\n        version = 2;\\n\\n        userAgent = _userAgent;\\n        trustedForwarder = _biconomy;\\n    }\\n\\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\\n    /// @param _USDT6Amts amounts of USDT should be deposited to each pools. It's 6 decimals\\n    function depositByAdmin(\\n        address _account, address[] memory _tokens, uint[] memory _USDT6Amts, uint _nonce\\n    ) external onlyOwnerOrAdmin nonReentrant whenNotPaused {\\n        _deposit(_account, _account, _tokens, _USDT6Amts, _nonce);\\n    }\\n\\n    function depositByAgent(\\n        address _account, address[] memory _tokens, uint[] memory _USDT6Amts, uint _nonce\\n    ) external onlyAgent nonReentrant whenNotPaused {\\n        _deposit(_account, _msgSender(), _tokens, _USDT6Amts, _nonce);\\n    }\\n\\n    function _deposit(\\n        address _account, address _from, address[] memory _tokens, uint[] memory _USDT6Amts, uint _nonce\\n    ) private {\\n        require(_account != address(0), \\\"Invalid account\\\");\\n        uint poolCnt = _tokens.length;\\n        require(poolCnt == _USDT6Amts.length, \\\"Not match array length\\\");\\n\\n        uint k = 10 ** (usdtDecimals - 6);\\n        uint USDTAmt;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            _USDT6Amts[i] = _USDT6Amts[i] * k;\\n            USDTAmt += _USDT6Amts[i];\\n        }\\n        require(0 < USDTAmt, \\\"Amounts must > 0\\\");\\n\\n        require(userLastOperationNonce[_account] < _nonce, \\\"Nonce is behind\\\");\\n        userLastOperationNonce[_account] = _nonce;\\n        operationAmounts[_nonce] = getValueInUSD(address(USDT), USDTAmt);\\n        _snapshotPool(_nonce, getAllPoolInUSD());\\n\\n        USDT.safeTransferFrom(_from, address(this), USDTAmt);\\n\\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n        uint amtDeposit = USDTAmt * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\\n\\n        if (watermark > 0) _collectProfitAndUpdateWatermark();\\n        (uint newUSDTAmt, uint[] memory newUSDTAmts) = _transferOutFees(USDTAmt, _USDT6Amts);\\n        if (newUSDTAmt > 0) {\\n            strategy.invest(_tokens, newUSDTAmts);\\n        }\\n        adjustWatermark(amtDeposit, true);\\n\\n        emit Deposit(_account, _from, USDTAmt, address(USDT));\\n    }\\n\\n    /// @param _sharePerc percentage of assets which should be withdrawn. It's 18 decimals\\n    function withdrawPercByAdmin(\\n        address _account, uint _sharePerc, uint _nonce\\n    ) external onlyOwnerOrAdmin nonReentrant {\\n        _withdraw(_account, _account, _sharePerc, _nonce);\\n    }\\n\\n    function withdrawPercByAgent(\\n        address _account, uint _sharePerc, uint _nonce\\n    ) external onlyAgent nonReentrant {\\n        _withdraw(_account, _msgSender(), _sharePerc, _nonce);\\n    }\\n\\n    function _withdraw(\\n        address _account, address _to, uint _sharePerc, uint _nonce\\n    ) private {\\n        require(_sharePerc > 0, \\\"SharePerc must > 0\\\");\\n        require(_sharePerc <= 1e18, \\\"Over 100%\\\");\\n\\n        uint pool = getAllPoolInUSD();\\n        uint withdrawAmt = pool * _sharePerc / 1e18;\\n\\n        require(userLastOperationNonce[_account] < _nonce, \\\"Nonce is behind\\\");\\n        userLastOperationNonce[_account] = _nonce;\\n        operationAmounts[_nonce] = withdrawAmt;\\n        _snapshotPool(_nonce, pool);\\n\\n        // calculate sharePerc to withdraw from strategy\\n        uint sharePerc = withdrawAmt * 1e18 / (pool + fees);\\n        uint USDTAmt;\\n        if (!paused()) {\\n            strategy.withdrawPerc(sharePerc);\\n            USDTAmt = USDT.balanceOf(address(this));\\n            adjustWatermark(withdrawAmt, false);\\n        } else {\\n            USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\\n        }\\n        USDT.safeTransfer(_to, USDTAmt);\\n        emit Withdraw(_account, _to, withdrawAmt, address(USDT), _sharePerc);\\n    }\\n\\n    function _snapshotPool(uint _nonce, uint _pool) internal {\\n        poolAtNonce[_nonce] = PoolSnapshot({\\n            poolInUSD: _pool,\\n            ts: block.timestamp\\n        });\\n\\n        if (firstOperationNonce == 0) {\\n            firstOperationNonce = _nonce;\\n        }\\n        if (lastOperationNonce < _nonce) {\\n            lastOperationNonce = _nonce;\\n        }\\n    }\\n\\n    function rebalance(uint _pid, uint _sharePerc, address _target) external onlyOwnerOrAdmin {\\n        uint USDTAmt = strategy.withdrawFromPool(_pid, _sharePerc);\\n        if (0 < USDTAmt) {\\n            address[] memory targets = new address[](1);\\n            targets[0] = _target;\\n            uint[] memory USDTAmts = new uint[](1);\\n            USDTAmts[0] = USDTAmt;\\n            strategy.invest(targets, USDTAmts);\\n            emit Rebalance(_pid, _sharePerc, USDTAmt, _target);\\n        }\\n    }\\n\\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\\n        _pause();\\n        strategy.emergencyWithdraw();\\n        watermark = 0;\\n    }\\n\\n    function reinvest(address[] memory _tokens, uint[] memory _perc) external onlyOwnerOrAdmin whenPaused {\\n        uint poolCnt = _tokens.length;\\n        require(poolCnt == _perc.length, \\\"Not match array length\\\");\\n\\n        _unpause();\\n        uint USDTAmt = USDT.balanceOf(address(this));\\n        if (0 < USDTAmt) {\\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n            uint amtDeposit = USDTAmt * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\\n            uint totalPerc;\\n            for (uint i = 0; i < poolCnt; i ++) {\\n                totalPerc = _perc[i];\\n            }\\n\\n            uint[] memory USMTAmts = new uint[](poolCnt);\\n            for (uint i = 0; i < poolCnt; i ++) {\\n                USMTAmts[i] = _perc[i] * USDTAmt / totalPerc;\\n            }\\n\\n            strategy.invest(_tokens, USMTAmts);\\n            adjustWatermark(amtDeposit, true);\\n            emit Reinvest(USDTAmt);\\n        }\\n    }\\n\\n    function collectProfitAndUpdateWatermark() external onlyOwnerOrAdmin whenNotPaused {\\n        _collectProfitAndUpdateWatermark();\\n    }\\n    function _collectProfitAndUpdateWatermark() private {\\n        uint currentWatermark = strategy.getAllPoolInUSD();\\n        uint lastWatermark = watermark;\\n        uint fee;\\n        if (currentWatermark > lastWatermark) {\\n            uint profit = currentWatermark - lastWatermark;\\n            fee = profit * profitFeePerc / Const.DENOMINATOR;\\n            fees += fee;\\n            watermark = currentWatermark;\\n        }\\n        emit CollectProfitAndUpdateWatermark(currentWatermark, lastWatermark, fee);\\n    }\\n\\n    /// @param signs True for positive, false for negative\\n    function adjustWatermark(uint amount, bool signs) private {\\n        uint lastWatermark = watermark;\\n        watermark = signs == true\\n                    ? watermark + amount\\n                    : (watermark > amount) ? watermark - amount : 0;\\n        emit AdjustWatermark(watermark, lastWatermark);\\n    }\\n\\n    function withdrawFees() external onlyOwnerOrAdmin {\\n        if (!paused()) {\\n            uint pool = strategy.getAllPoolInUSD();\\n            uint _fees = fees;\\n            uint sharePerc = _fees < pool ? _fees * 1e18 / pool : 1e18;\\n            strategy.withdrawPerc(sharePerc);\\n        }\\n        _transferOutFees(USDT.balanceOf(address(this)), new uint[](0));\\n    }\\n\\n    function _transferOutFees(uint _USDTAmt, uint[] memory _USDTAmts) private returns (uint, uint[] memory) {\\n        uint _fees = fees;\\n        if (_fees != 0) {\\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n            uint FeeAmt = _fees * (10 ** USDTPriceDecimals) / ((10 ** (18-usdtDecimals)) * USDTPriceInUSD);\\n\\n            uint prevUSDTAmt = _USDTAmt;\\n            uint poolCnt = _USDTAmts.length;\\n            if (FeeAmt < _USDTAmt) {\\n                _fees = 0;\\n                _USDTAmt -= FeeAmt;\\n            } else {\\n                _fees -= (_USDTAmt * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals));\\n                FeeAmt = _USDTAmt;\\n                _USDTAmt = 0;\\n            }\\n            fees = _fees;\\n\\n            for (uint i = 0; i < poolCnt; i ++) {\\n                _USDTAmts[i] = _USDTAmts[i] * _USDTAmt / prevUSDTAmt;\\n            }\\n\\n            USDT.safeTransfer(treasuryWallet, FeeAmt);\\n            emit TransferredOutFees(FeeAmt, address(USDT)); // Decimal follow _token\\n        }\\n        return (_USDTAmt, _USDTAmts);\\n    }\\n\\n    function setStrategy(address _strategy) external onlyOwner {\\n        strategy = IStrategy(_strategy);\\n\\n        if (USDT.allowance(address(this), address(strategy)) == 0) {\\n            USDT.safeApprove(address(strategy), type(uint).max);\\n        }\\n    }\\n\\n    function setProfitFeePerc(uint _profitFeePerc) external onlyOwner {\\n        require(profitFeePerc < 3001, \\\"Profit fee cannot > 30%\\\");\\n        profitFeePerc = _profitFeePerc;\\n    }\\n\\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\\n        treasuryWallet = _treasuryWallet;\\n    }\\n\\n    function setAdmin(address _admin) external onlyOwner {\\n        admin = _admin;\\n    }\\n\\n    function setUserAgent(address _userAgent) external onlyOwner {\\n        userAgent = _userAgent;\\n    }\\n\\n    function setBiconomy(address _biconomy) external onlyOwner {\\n        trustedForwarder = _biconomy;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns(bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    function _msgSender() internal override(ContextUpgradeable) view returns (address ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function versionRecipient() external pure returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    /// @return the price of USDT in USD.\\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\\n        return priceOracle.getAssetPrice(address(USDT));\\n    }\\n\\n    ///@return the value in USD. it's scaled by 1e18;\\n    function getValueInUSD(address _asset, uint _amount) internal view returns (uint) {\\n        (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(_asset);\\n        uint8 _decimals = IERC20UpgradeableExt(_asset).decimals();\\n        return Token.changeDecimals(_amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\\n    }\\n\\n    function getEachPoolInUSD() public view returns (uint[] memory chainIDs, address[] memory tokens, uint[] memory pools) {\\n        (tokens, pools) = strategy.getEachPoolInUSD();\\n        uint poolCnt = pools.length;\\n        uint chainID = Token.getChainID();\\n        chainIDs = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            chainIDs[i] = chainID;\\n        }\\n\\n        uint USDTAmt = USDT.balanceOf(address(this));\\n        if(USDTAmt > 0 && poolCnt > 0) {\\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n            uint _pool = USDT.balanceOf(address(this)) * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\\n            pools[0] += _pool;\\n        }\\n        return (chainIDs, tokens, pools);\\n    }\\n\\n    function getAllPoolInUSD() public view returns (uint) {\\n        uint pool;\\n        if (paused()) {\\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n            pool = USDT.balanceOf(address(this)) * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\\n        } else {\\n            pool = strategy.getAllPoolInUSD();\\n        }\\n        return (pool > fees ? pool - fees : 0);\\n    }\\n\\n    function getAllPoolInUSDAtNonce(uint _nonce) public view returns (uint) {\\n        if (firstOperationNonce != 0) {\\n            if (_nonce < firstOperationNonce) {\\n                return 0;\\n            }\\n            if (_nonce <= lastOperationNonce) {\\n                for (uint i = _nonce; i >= firstOperationNonce; i --) {\\n                    PoolSnapshot memory snapshot = poolAtNonce[i];\\n                    if (snapshot.ts > 0) {\\n                        return snapshot.poolInUSD;\\n                    }\\n                }\\n            }\\n        }\\n        return getAllPoolInUSD();\\n    }\\n\\n    function getCurrentCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\\n        return strategy.getCurrentTokenCompositionPerc();\\n    }\\n\\n    function getAPR() external view returns (uint) {\\n        return strategy.getAPR();\\n    }\\n}\\n\",\"keccak256\":\"0x0a952ac07b859e78bbfcaa103a2cd4a26fac44d46821c0869942d1892f26e488\",\"license\":\"MIT\"},\"contracts/bni/BNIVaultTest.sol\":{\"content\":\" // SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./priceOracle/IPriceOracle.sol\\\";\\nimport \\\"./BNIVault.sol\\\";\\n\\ncontract BNIVaultTest is BNIVault {\\n\\n    function setPriceOracle(address _priceOracle) external onlyOwner {\\n        priceOracle = IPriceOracle(_priceOracle);\\n    }\\n}\\n\",\"keccak256\":\"0xdbc0bacf2ce2fbcde678e222aff02af30f45f82c3dcd43d357e2d7843b41f271\",\"license\":\"MIT\"},\"contracts/bni/IBNIVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IBNIVault {\\n    function depositByAdmin(address _account, address[] memory _tokens, uint[] memory _USDTAmts, uint _nonce) external;\\n    function depositByAgent(address _account, address[] memory _tokens, uint[] memory _USDTAmts, uint _nonce) external;\\n    function withdrawPercByAdmin(address _account, uint _sharePerc, uint _nonce) external;\\n    function withdrawPercByAgent(address _account, uint _sharePerc, uint _nonce) external;\\n}\",\"keccak256\":\"0x8b5c17cefd6c61189d4160362d97134c0bdd6d2a90843b33de58081527735a3a\",\"license\":\"MIT\"},\"contracts/bni/constant/AuroraConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AuroraConstant {\\n    uint internal constant CHAINID = 1313161554;\\n\\n    address internal constant BSTN = 0x9f1F933C660a1DC856F0E0Fe058435879c5CCEf0;\\n    address internal constant META = 0xc21Ff01229e982d7c8b8691163B0A3Cb8F357453;\\n    address internal constant stNEAR = 0x07F9F7f963C5cD2BBFFd30CcfB964Be114332E30;\\n    address internal constant USDC = 0xB12BFcA5A55806AaF64E99521918A4bf0fC40802;\\n    address internal constant USDT = 0x4988a896b1227218e4A686fdE5EabdcAbd91571f;\\n    address internal constant WETH = 0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB;\\n    address internal constant WNEAR = 0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d;\\n}\\n\",\"keccak256\":\"0xb4c50615e5b8672de4e3918c881272987794a28f3cc00f680f04bdfddc21dba8\",\"license\":\"MIT\"},\"contracts/bni/constant/AuroraConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AuroraConstantTest {\\n    uint internal constant CHAINID = 1313161555;\\n\\n    address internal constant BSTN = 0x9f1F933C660a1DC856F0E0Fe058435879c5CCEf0; // Should be replaced with testnet address\\n    address internal constant META = 0xc21Ff01229e982d7c8b8691163B0A3Cb8F357453; // Should be replaced with testnet address\\n    address internal constant stNEAR = 0x2137df2e54abd6bF1c1a8c1739f2EA6A8C15F144;\\n    address internal constant USDC = 0xCcECA5C4A3355F8e7a0B7d2a7251eec012Be7c58;\\n    address internal constant USDT = 0xF9C249974c1Acf96a59e5757Cc9ba7035cE489B1;\\n    address internal constant WETH = 0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB; // Should be replaced with testnet address\\n    address internal constant WNEAR = 0x4861825E75ab14553E5aF711EbbE6873d369d146;\\n}\\n\",\"keccak256\":\"0x2c142ce864cd38aa02fa7e50f069b88c73a06d913be71355858f34396c30c048\",\"license\":\"MIT\"},\"contracts/bni/constant/AvaxConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AvaxConstant {\\n    uint internal constant CHAINID = 43114;\\n\\n    address internal constant USDC = 0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664;\\n    address internal constant USDT = 0xc7198437980c041c805A1EDcbA50c1Ce5db95118;\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    address internal constant aAVAXb = 0x6C6f910A79639dcC94b4feEF59Ff507c2E843929;\\n}\\n\",\"keccak256\":\"0x53216c58dd6d77a9fa18b7ea121a2a8aa8c3ae6577577e8c332747bd0d74fde2\",\"license\":\"MIT\"},\"contracts/bni/constant/AvaxConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AvaxConstantTest {\\n    uint internal constant CHAINID = 43113;\\n\\n    address internal constant USDC = 0x7aCdaba7Ee51c1c3F7C6D605CC26b1c9aAB0495A;\\n    address internal constant USDT = 0x78ae2880bd1672b49a33cF796CF53FE6db0aB01D;\\n    address internal constant WAVAX = 0xd00ae08403B9bbb9124bB305C09058E32C39A48c;\\n\\n    address internal constant aAVAXb = 0xBd97c29aa3E83C523C9714edCA8DB8881841a593;\\n}\\n\",\"keccak256\":\"0x11c2007f9c851ef591ac5f7d8b2540bfbcde5091044f5bc2a02645fc13230c3e\",\"license\":\"MIT\"},\"contracts/bni/constant/BscConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary BscConstant {\\n    uint internal constant CHAINID = 56;\\n\\n    address internal constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address internal constant CAKE = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82;\\n    address internal constant USDC = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\\n    address internal constant USDT = 0x55d398326f99059fF775485246999027B3197955;\\n    address internal constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    address internal constant aBNBb = 0xBb1Aa6e59E5163D8722a122cd66EBA614b59df0d;\\n}\\n\",\"keccak256\":\"0xd0c4c785ade0a75733c82781329443ec20ba40754d99575689064ac9e7196adf\",\"license\":\"MIT\"},\"contracts/bni/constant/BscConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary BscConstantTest {\\n    uint internal constant CHAINID = 97;\\n\\n    address internal constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // Should be replaced with testnet address\\n    address internal constant CAKE = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82; // Should be replaced with testnet address\\n    address internal constant USDC = 0xda14d11D2C7d79F167b6057DE3D9cc25C2c488d5;\\n    address internal constant USDT = 0x1F326a8CA5399418a76eA0efa0403Cbb00790C67;\\n    address internal constant WBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd;\\n\\n    address internal constant aBNBb = 0xaB56897fE4e9f0757e02B54C27E81B9ddd6A30AE;\\n}\\n\",\"keccak256\":\"0x9ca5b6fb202a1748ffa97c55a155bd7e1fd5bb4bde9fb276bb0a5c42d2539e0b\",\"license\":\"MIT\"},\"contracts/bni/constant/EthConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary EthConstant {\\n    uint internal constant CHAINID = 1;\\n\\n    address internal constant MATIC = 0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0;\\n    address internal constant stETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\n    address internal constant stMATIC = 0x9ee91F9f426fA633d227f7a9b000E28b9dfd8599;\\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n}\\n\",\"keccak256\":\"0x7d278bbafd2c0dae080f4aea2c853ec12ea88f767de21cdaa1ddd4be393143e1\",\"license\":\"MIT\"},\"contracts/bni/constant/EthConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary EthConstantTest {\\n    uint internal constant CHAINID = 4;\\n\\n    address internal constant MATIC = 0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0; // Should be replaced with testnet address\\n    address internal constant stETH = 0xF4242f9d78DB7218Ad72Ee3aE14469DBDE8731eD;\\n    address internal constant stMATIC = 0x9ee91F9f426fA633d227f7a9b000E28b9dfd8599; // Should be replaced with testnet address\\n    address internal constant USDC = 0xDf5324ebe6F6b852Ff5cBf73627eE137e9075276;\\n    address internal constant USDT = 0x21e48034753E490ff04f2f75f7CAEdF081B320d5;\\n    address internal constant WETH = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\\n}\\n\",\"keccak256\":\"0x2711954dbd697694829429f6b66d704bb80b214e8f5077f8c79554c2af901a38\",\"license\":\"MIT\"},\"contracts/bni/constant/MaticConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary MaticConstant {\\n    uint internal constant CHAINID = 137;\\n\\n    address internal constant USDC = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n    address internal constant USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\\n    address internal constant WMATIC = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\\n}\\n\",\"keccak256\":\"0x0503964316f40535769a8e59b212628df2799c1bbde38dae6f0fce5f250f0ba2\",\"license\":\"MIT\"},\"contracts/bni/constant/MaticConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary MaticConstantTest {\\n    uint internal constant CHAINID = 80001;\\n\\n    address internal constant USDC = 0x6600BeC324CCDd12c70297311AEfB37fafB1D689;\\n    address internal constant USDT = 0x7e4C234B1d634DB790592d1550816b19E862F744;\\n    address internal constant WMATIC = 0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889;\\n}\\n\",\"keccak256\":\"0x454ef5183082f4cbadd6166b4b5f56ad6b1b3406c0c39132e12177229cb66b48\",\"license\":\"MIT\"},\"contracts/bni/priceOracle/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity  0.8.9;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n\\r\\n    /**\\r\\n     * @notice Sets or replaces price sources of assets\\r\\n     * @param assets The addresses of the assets\\r\\n     * @param sources The addresses of the price sources\\r\\n     */\\r\\n    function setAssetSources(address[] memory assets, address[] memory sources) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the source for an asset address\\r\\n     * @param asset The address of the asset\\r\\n     * @return The address of the source\\r\\n     */\\r\\n    function getSourceOfAsset(address asset) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param assets The list of assets addresses\\r\\n     * @return prices The prices of the given assets\\r\\n     */\\r\\n    function getAssetsPrices(address[] memory assets) external view returns (uint[] memory prices, uint8[] memory decimalsArray);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param asset The asset address\\r\\n     * @return price The prices of the given assets\\r\\n     */\\r\\n    function getAssetPrice(address asset) external view returns (uint price, uint8 decimals);\\r\\n}\",\"keccak256\":\"0xaf07db77a02bf0cdc1cbd5f7c33cebd04e3e961c517adc53664eca0fc6dccdfe\",\"license\":\"MIT\"},\"interfaces/IERC20UpgradeableExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IERC20UpgradeableExt is IERC20Upgradeable {\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x06f547094243d372a789dbb9207b12091bfebb770fb1f1de0a103bd100e1a9e2\",\"license\":\"MIT\"},\"libs/Const.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Const {\\r\\n\\r\\n    uint internal constant DENOMINATOR = 10000;\\r\\n\\r\\n    uint internal constant APR_SCALE = 1e18;\\r\\n    \\r\\n    uint internal constant YEAR_IN_SEC = 365 days;\\r\\n\\r\\n    address internal constant NATIVE_ASSET = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n\\r\\n    enum TokenID { USDT, USDC }\\r\\n}\\r\\n\",\"keccak256\":\"0xecdadc52a09a3242feae68d278fd152ab66e18c81c6aeca076ee1bb7d29a3fd7\",\"license\":\"MIT\"},\"libs/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../contracts/bni/constant/AuroraConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/AuroraConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/AvaxConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/AvaxConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/BscConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/BscConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/EthConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/EthConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/MaticConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/MaticConstantTest.sol\\\";\\r\\nimport \\\"./Const.sol\\\";\\r\\n\\r\\nlibrary Token {\\r\\n    function changeDecimals(uint amount, uint curDecimals, uint newDecimals) internal pure returns(uint) {\\r\\n        if (curDecimals == newDecimals) {\\r\\n            return amount;\\r\\n        } else if (curDecimals < newDecimals) {\\r\\n            return amount * (10 ** (newDecimals - curDecimals));\\r\\n        } else {\\r\\n            return amount / (10 ** (curDecimals - newDecimals));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, \\\"ETH transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function getChainID() internal view returns (uint256 id) {\\r\\n        assembly {\\r\\n            id := chainid()\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bytesToAddress(bytes memory bys) internal pure returns (address addr) {\\r\\n        assembly {\\r\\n            addr := mload(add(bys, 20))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTokenAddress(Const.TokenID _tokenId) internal view returns (address) {\\r\\n        uint chainId = getChainID();\\r\\n        if (chainId == AuroraConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AuroraConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AuroraConstant.USDT;\\r\\n        } else if (chainId == AvaxConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AvaxConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AvaxConstant.USDT;\\r\\n        } else if (chainId == BscConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return BscConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return BscConstant.USDT;\\r\\n        } else if (chainId == EthConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return EthConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return EthConstant.USDT;\\r\\n        } else if (chainId == MaticConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return MaticConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return MaticConstant.USDT;\\r\\n        }\\r\\n        return address(0);\\r\\n    }\\r\\n\\r\\n    function getTestTokenAddress(Const.TokenID _tokenId) internal view returns (address) {\\r\\n        uint chainId = getChainID();\\r\\n        if (chainId == AuroraConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AuroraConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AuroraConstantTest.USDT;\\r\\n        } else if (chainId == AvaxConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AvaxConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AvaxConstantTest.USDT;\\r\\n        } else if (chainId == BscConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return BscConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return BscConstantTest.USDT;\\r\\n        } else if (chainId == EthConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return EthConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return EthConstantTest.USDT;\\r\\n        } else if (chainId == MaticConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return MaticConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return MaticConstantTest.USDT;\\r\\n        }\\r\\n        return address(0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8e74cf52d93d604a8f059c78bda6c4c59d4340f94c0c4590b30279a7cb3ef3e1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613bdd806100206000396000f3fe608060405234801561001057600080fd5b506004361061028a5760003560e01c80638da5cb5b1161015c578063bdf1c4a1116100ce578063e9e81a6a11610087578063e9e81a6a146105cf578063efca0d07146105e2578063f13dc2e2146105eb578063f2fde38b146105f4578063f851a44014610607578063ffec4eb11461061a57600080fd5b8063bdf1c4a11461054a578063c54e44eb1461055d578063c89d5b8b14610570578063db2e21bc14610578578063e5e1977614610580578063e63cfa3b1461059357600080fd5b8063a8c62e7611610120578063a8c62e76146104d0578063a9d98f59146104e3578063aae09236146104f6578063ac25f6891461050d578063b47c6a2714610523578063bd244af41461054257600080fd5b80638da5cb5b1461047d5780639434b9891461048e5780639af1d35a146104a15780639b860882146104aa578063a8602fea146104bd57600080fd5b8063486ff0cd116102005780636628f945116101b95780636628f945146104205780636d2b3d7b14610433578063704b6c0214610446578063715018a6146104595780637da0a877146104615780638855c91a1461047457600080fd5b8063486ff0cd14610391578063530e784f146103b457806354fd4d50146103c7578063572b6c05146103d0578063582712b1146104025780635c975abb1461041557600080fd5b80632630c12f116102525780632630c12f1461031d57806333a100ca1461034857806345d207ec1461035b5780634626402b1461036e578063470343d814610381578063476343ee1461038957600080fd5b8063057feb991461028f5780630b47b7ff146102c25780630d8b76a8146102d75780631459457a146102ea57806319dac5af146102fd575b600080fd5b6102af61029d3660046131dd565b60d66020526000908152604090205481565b6040519081526020015b60405180910390f35b6102d56102d03660046131dd565b610623565b005b6102d56102e536600461320b565b6106cd565b6102d56102f8366004613228565b610738565b6102af61030b36600461320b565b60d56020526000908152604090205481565b60cc54610330906001600160a01b031681565b6040516001600160a01b0390911681526020016102b9565b6102d561035636600461320b565b61090c565b6102d5610369366004613299565b610a15565b60ce54610330906001600160a01b031681565b6102d5610a91565b6102d5610afd565b60408051808201825260018152603160f81b602082015290516102b991906132fa565b6102d56103c236600461320b565b610cf5565b6102af60d75481565b6103f26103de36600461320b565b60d1546001600160a01b0391821691161490565b60405190151581526020016102b9565b6102d5610410366004613467565b610d60565b60655460ff166103f2565b6102d561042e36600461320b565b610e10565b6102d56104413660046134e5565b610e7b565b6102d561045436600461320b565b61108c565b6102d56110f7565b60d154610330906001600160a01b031681565b6102af60d35481565b6097546001600160a01b0316610330565b6102d561049c36600461351e565b61114a565b6102af60d05481565b6102d56104b8366004613557565b611209565b6102d56104cb36600461320b565b61155d565b60cb54610330906001600160a01b031681565b6102af6104f13660046131dd565b6115c8565b6104fe611652565b6040516102b99392919061362f565b610515611911565b6040516102b9929190613668565b61052b6119a6565b6040805192835260ff9091166020830152016102b9565b6102af611a28565b60d854610330906001600160a01b031681565b60c954610330906001600160a01b031681565b6102af611bca565b6102d5611c4c565b6102d561058e366004613467565b611d25565b6105ba6105a13660046131dd565b60d4602052600090815260409020805460019091015482565b604080519283526020830191909152016102b9565b6102d56105dd366004613299565b611dbc565b6102af60cd5481565b6102af60cf5481565b6102d561060236600461320b565b611e3e565b60ca54610330906001600160a01b031681565b6102af60d25481565b61062b611ef5565b6001600160a01b03166106466097546001600160a01b031690565b6001600160a01b0316146106755760405162461bcd60e51b815260040161066c90613696565b60405180910390fd5b610bb960cd54106106c85760405162461bcd60e51b815260206004820152601760248201527f50726f666974206665652063616e6e6f74203e20333025000000000000000000604482015260640161066c565b60cd55565b6106d5611ef5565b6001600160a01b03166106f06097546001600160a01b031690565b6001600160a01b0316146107165760405162461bcd60e51b815260040161066c90613696565b60d180546001600160a01b0319166001600160a01b0392909216919091179055565b60006107446001611f29565b9050801561075c576000805461ff0019166101001790555b610764611fb6565b60ce80546001600160a01b038089166001600160a01b03199283161790925560ca805488841690831617905560cb805487841690831617905560cc80548684169083161790556107d060cd5560c9805492851692909116821790556040805163313ce56760e01b8152905163313ce56791600481810192602092909190829003018186803b1580156107f557600080fd5b505afa158015610809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082d91906136dc565b60c9805460ff60a01b1916600160a01b60ff938416810291909117918290559004166006111561089f5760405162461bcd60e51b815260206004820152601760248201527f5553445420646563696d616c73206d757374203e3d2036000000000000000000604482015260640161066c565b60cb5460c9546108be916001600160a01b039182169116600019611fe5565b8015610904576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b610914611ef5565b6001600160a01b031661092f6097546001600160a01b031690565b6001600160a01b0316146109555760405162461bcd60e51b815260040161066c90613696565b60cb80546001600160a01b0319166001600160a01b0383811691821790925560c954604051636eb1769f60e11b815230600482015260248101929092529091169063dd62ed3e9060440160206040518083038186803b1580156109b757600080fd5b505afa1580156109cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ef91906136f7565b610a125760cb5460c954610a12916001600160a01b039182169116600019611fe5565b50565b6097546001600160a01b0316331480610a38575060ca546001600160a01b031633145b610a545760405162461bcd60e51b815260040161066c90613710565b60026001541415610a775760405162461bcd60e51b815260040161066c9061373d565b6002600155610a8883808484612141565b50506001805550565b6097546001600160a01b0316331480610ab4575060ca546001600160a01b031633145b610ad05760405162461bcd60e51b815260040161066c90613710565b60655460ff1615610af35760405162461bcd60e51b815260040161066c90613774565b610afb6124c0565b565b6097546001600160a01b0316331480610b20575060ca546001600160a01b031633145b610b3c5760405162461bcd60e51b815260040161066c90613710565b60655460ff16610c605760cb5460408051632f4912bd60e21b815290516000926001600160a01b03169163bd244af4916004808301926020929190829003018186803b158015610b8b57600080fd5b505afa158015610b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc391906136f7565b60d0549091506000828210610be057670de0b6b3a7640000610bfd565b82610bf383670de0b6b3a76400006137b4565b610bfd91906137d3565b60cb5460405163ed47d90960e01b8152600481018390529192506001600160a01b03169063ed47d90990602401600060405180830381600087803b158015610c4457600080fd5b505af1158015610c58573d6000803e3d6000fd5b505050505050505b60c9546040516370a0823160e01b8152306004820152610cf1916001600160a01b0316906370a082319060240160206040518083038186803b158015610ca557600080fd5b505afa158015610cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdd91906136f7565b6040805160008152602081019091526125ca565b5050565b610cfd611ef5565b6001600160a01b0316610d186097546001600160a01b031690565b6001600160a01b031614610d3e5760405162461bcd60e51b815260040161066c90613696565b60cc80546001600160a01b0319166001600160a01b0392909216919091179055565b60d8546001600160a01b03163314610da75760405162461bcd60e51b815260206004820152600a60248201526913db9b1e481859d95b9d60b21b604482015260640161066c565b60026001541415610dca5760405162461bcd60e51b815260040161066c9061373d565b600260015560655460ff1615610df25760405162461bcd60e51b815260040161066c90613774565b610e0684610dfe611ef5565b858585612795565b5050600180555050565b610e18611ef5565b6001600160a01b0316610e336097546001600160a01b031690565b6001600160a01b031614610e595760405162461bcd60e51b815260040161066c90613696565b60d880546001600160a01b0319166001600160a01b0392909216919091179055565b6097546001600160a01b0316331480610e9e575060ca546001600160a01b031633145b610eba5760405162461bcd60e51b815260040161066c90613710565b60cb5460405163778d98b360e11b815260048101859052602481018490526000916001600160a01b03169063ef1b316690604401602060405180830381600087803b158015610f0857600080fd5b505af1158015610f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4091906136f7565b9050801561108657604080516001808252818301909252600091602080830190803683370190505090508281600081518110610f7e57610f7e6137f5565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508281600081518110610fcf57610fcf6137f5565b602090810291909101015260cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b719061100c9085908590600401613668565b600060405180830381600087803b15801561102657600080fd5b505af115801561103a573d6000803e3d6000fd5b50505050836001600160a01b031683877f2be1fd30870a31378112c815f24e8611c8a87ed036bce5cf5670a8e34dbf210a8860405161107b91815260200190565b60405180910390a450505b50505050565b611094611ef5565b6001600160a01b03166110af6097546001600160a01b031690565b6001600160a01b0316146110d55760405162461bcd60e51b815260040161066c90613696565b60ca80546001600160a01b0319166001600160a01b0392909216919091179055565b6110ff611ef5565b6001600160a01b031661111a6097546001600160a01b031690565b6001600160a01b0316146111405760405162461bcd60e51b815260040161066c90613696565b610afb6000612b52565b611152611ef5565b6001600160a01b031661116d6097546001600160a01b031690565b6001600160a01b0316146111935760405162461bcd60e51b815260040161066c90613696565b600260d754106111d65760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e4818d85b1b195960921b604482015260640161066c565b600260d75560d880546001600160a01b039384166001600160a01b03199182161790915560d18054929093169116179055565b6097546001600160a01b031633148061122c575060ca546001600160a01b031633145b6112485760405162461bcd60e51b815260040161066c90613710565b60655460ff166112915760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161066c565b8151815181146112dc5760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b604482015260640161066c565b6112e4612ba4565b60c9546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561132857600080fd5b505afa15801561133c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136091906136f7565b90508015611086576000806113736119a6565b9092509050600061138582600a6138ef565b60c954849061139f90600160a01b900460ff1660126138fe565b6113aa90600a6138ef565b6113b490876137b4565b6113be91906137b4565b6113c891906137d3565b90506000805b86811015611405578781815181106113e8576113e86137f5565b6020026020010151915080806113fd90613921565b9150506113ce565b5060008667ffffffffffffffff8111156114215761142161332d565b60405190808252806020026020018201604052801561144a578160200160208202803683370190505b50905060005b878110156114b75782878a838151811061146c5761146c6137f5565b602002602001015161147e91906137b4565b61148891906137d3565b82828151811061149a5761149a6137f5565b6020908102919091010152806114af81613921565b915050611450565b5060cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b71906114ea908c908590600401613668565b600060405180830381600087803b15801561150457600080fd5b505af1158015611518573d6000803e3d6000fd5b50505050611527836001612c3d565b60405186907fc13e24d2b0a3bacd5d1a7c514125a1e27323abf7c86f6d36597f8752bbd7eed790600090a2505050505050505050565b611565611ef5565b6001600160a01b03166115806097546001600160a01b031690565b6001600160a01b0316146115a65760405162461bcd60e51b815260040161066c90613696565b60ce80546001600160a01b0319166001600160a01b0392909216919091179055565b600060d2546000146116445760d2548210156115e657506000919050565b60d354821161164457815b60d254811061164257600081815260d46020908152604091829020825180840190935280548352600101549082018190521561162f57519392505050565b508061163a8161393c565b9150506115f1565b505b61164c611a28565b92915050565b606080606060cb60009054906101000a90046001600160a01b03166001600160a01b031663aae092366040518163ffffffff1660e01b815260040160006040518083038186803b1580156116a557600080fd5b505afa1580156116b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116e191908101906139ae565b80519193509150468167ffffffffffffffff8111156117025761170261332d565b60405190808252806020026020018201604052801561172b578160200160208202803683370190505b50945060005b82811015611769578186828151811061174c5761174c6137f5565b60209081029190910101528061176181613921565b915050611731565b5060c9546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156117ae57600080fd5b505afa1580156117c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e691906136f7565b90506000811180156117f85750600083115b15611909576000806118086119a6565b9092509050600061181a82600a6138ef565b60c954849061183490600160a01b900460ff1660126138fe565b61183f90600a6138ef565b60c9546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561188257600080fd5b505afa158015611896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ba91906136f7565b6118c491906137b4565b6118ce91906137b4565b6118d891906137d3565b905080876000815181106118ee576118ee6137f5565b602002602001018181516119029190613a69565b9052505050505b505050909192565b60608060cb60009054906101000a90046001600160a01b03166001600160a01b0316634631b2466040518163ffffffff1660e01b815260040160006040518083038186803b15801561196257600080fd5b505afa158015611976573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261199e91908101906139ae565b915091509091565b60cc5460c95460405163b3596f0760e01b81526001600160a01b0391821660048201526000928392169063b3596f0790602401604080518083038186803b1580156119f057600080fd5b505afa158015611a04573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199e9190613a81565b600080611a3760655460ff1690565b15611b1e57600080611a476119a6565b9092509050611a5781600a6138ef565b60c9548390611a7190600160a01b900460ff1660126138fe565b611a7c90600a6138ef565b60c9546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611abf57600080fd5b505afa158015611ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af791906136f7565b611b0191906137b4565b611b0b91906137b4565b611b1591906137d3565b92505050611ba7565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b158015611b6c57600080fd5b505afa158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba491906136f7565b90505b60d0548111611bb7576000611bc4565b60d054611bc49082613aad565b91505090565b60cb546040805163c89d5b8b60e01b815290516000926001600160a01b03169163c89d5b8b916004808301926020929190829003018186803b158015611c0f57600080fd5b505afa158015611c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4791906136f7565b905090565b6097546001600160a01b0316331480611c6f575060ca546001600160a01b031633145b611c8b5760405162461bcd60e51b815260040161066c90613710565b60655460ff1615611cae5760405162461bcd60e51b815260040161066c90613774565b611cb6612cb1565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663db2e21bc6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611d0657600080fd5b505af1158015611d1a573d6000803e3d6000fd5b5050600060cf555050565b6097546001600160a01b0316331480611d48575060ca546001600160a01b031633145b611d645760405162461bcd60e51b815260040161066c90613710565b60026001541415611d875760405162461bcd60e51b815260040161066c9061373d565b600260015560655460ff1615611daf5760405162461bcd60e51b815260040161066c90613774565b610e068485858585612795565b60d8546001600160a01b03163314611e035760405162461bcd60e51b815260206004820152600a60248201526913db9b1e481859d95b9d60b21b604482015260640161066c565b60026001541415611e265760405162461bcd60e51b815260040161066c9061373d565b6002600155610a8883611e37611ef5565b8484612141565b611e46611ef5565b6001600160a01b0316611e616097546001600160a01b031690565b6001600160a01b031614611e875760405162461bcd60e51b815260040161066c90613696565b6001600160a01b038116611eec5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161066c565b610a1281612b52565b600060183610801590611f12575060d1546001600160a01b031633145b15611f24575060131936013560601c90565b503390565b60008054610100900460ff1615611f70578160ff166001148015611f4c5750303b155b611f685760405162461bcd60e51b815260040161066c90613ac4565b506000919050565b60005460ff808416911610611f975760405162461bcd60e51b815260040161066c90613ac4565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16611fdd5760405162461bcd60e51b815260040161066c90613b12565b610afb612d0a565b80158061206e5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561203457600080fd5b505afa158015612048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206c91906136f7565b155b6120d95760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161066c565b6040516001600160a01b03831660248201526044810182905261213c90849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612d41565b505050565b600082116121865760405162461bcd60e51b81526020600482015260126024820152710536861726550657263206d757374203e20360741b604482015260640161066c565b670de0b6b3a76400008211156121ca5760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b604482015260640161066c565b60006121d4611a28565b90506000670de0b6b3a76400006121eb85846137b4565b6121f591906137d3565b6001600160a01b038716600090815260d5602052604090205490915083116122515760405162461bcd60e51b815260206004820152600f60248201526e139bdb98d9481a5cc818995a1a5b99608a1b604482015260640161066c565b6001600160a01b038616600090815260d56020908152604080832086905585835260d690915290208190556122868383612e13565b600060d054836122969190613a69565b6122a883670de0b6b3a76400006137b4565b6122b291906137d3565b905060006122c260655460ff1690565b6123b15760cb5460405163ed47d90960e01b8152600481018490526001600160a01b039091169063ed47d90990602401600060405180830381600087803b15801561230c57600080fd5b505af1158015612320573d6000803e3d6000fd5b505060c9546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a08231915060240160206040518083038186803b15801561236757600080fd5b505afa15801561237b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239f91906136f7565b90506123ac836000612c3d565b61244f565b60c9546040516370a0823160e01b8152306004820152670de0b6b3a76400009184916001600160a01b03909116906370a082319060240160206040518083038186803b15801561240057600080fd5b505afa158015612414573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243891906136f7565b61244291906137b4565b61244c91906137d3565b90505b60c954612466906001600160a01b03168883612e5f565b60c954604080516001600160a01b038a81168252602082018a9052928316928692908c16917f919fc3589577d8ba8023ca13d0b64eaeb6af31c331b4b81c0d42d66423603077910160405180910390a45050505050505050565b60cb5460408051632f4912bd60e21b815290516000926001600160a01b03169163bd244af4916004808301926020929190829003018186803b15801561250557600080fd5b505afa158015612519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253d91906136f7565b60cf549091506000818311156125965760006125598385613aad565b905061271060cd548261256c91906137b4565b61257691906137d3565b91508160d0600082825461258a9190613a69565b90915550505060cf8390555b8082847fa3e3c8c92ed1e364d04865f99cd96c3ae8f5a7d800f4a1d8148a58c6de6f1b7160405160405180910390a4505050565b60d054600090606090801561278c576000806125e46119a6565b60c9549193509150600090839061260690600160a01b900460ff1660126138fe565b61261190600a6138ef565b61261b91906137b4565b61262683600a6138ef565b61263090866137b4565b61263a91906137d3565b875190915088908183101561265e5760009550612657838b613aad565b99506126bf565b61266984600a6138ef565b60c954869061268390600160a01b900460ff1660126138fe565b61268e90600a6138ef565b612698908d6137b4565b6126a291906137b4565b6126ac91906137d3565b6126b69087613aad565b60009a90965092505b60d086905560005b8181101561272e57828b8b83815181106126e3576126e36137f5565b60200260200101516126f591906137b4565b6126ff91906137d3565b8a8281518110612711576127116137f5565b60209081029190910101528061272681613921565b9150506126c7565b5060ce5460c95461274c916001600160a01b03918216911685612e5f565b60c9546040516001600160a01b039091169084907f6e027f1905abd7233c51c9483e29a545074ed10d39db528c9791a246b26741ff90600090a350505050505b50929391925050565b6001600160a01b0385166127dd5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081858d8dbdd5b9d608a1b604482015260640161066c565b8251825181146128285760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b604482015260640161066c565b60c95460009061284490600690600160a01b900460ff166138fe565b61284f90600a6138ef565b90506000805b838110156128d95782868281518110612870576128706137f5565b602002602001015161288291906137b4565b868281518110612894576128946137f5565b6020026020010181815250508581815181106128b2576128b26137f5565b6020026020010151826128c59190613a69565b9150806128d181613921565b915050612855565b508060001061291d5760405162461bcd60e51b815260206004820152601060248201526f0416d6f756e7473206d757374203e20360841b604482015260640161066c565b6001600160a01b038816600090815260d5602052604090205484116129765760405162461bcd60e51b815260206004820152600f60248201526e139bdb98d9481a5cc818995a1a5b99608a1b604482015260640161066c565b6001600160a01b03808916600090815260d56020526040902085905560c9546129a0911682612e8f565b600085815260d660205260409020556129c0846129bb611a28565b612e13565b60c9546129d8906001600160a01b0316883084612fc4565b6000806129e36119a6565b909250905060006129f582600a6138ef565b60c9548490612a0f90600160a01b900460ff1660126138fe565b612a1a90600a6138ef565b612a2490876137b4565b612a2e91906137b4565b612a3891906137d3565b60cf5490915015612a4b57612a4b6124c0565b600080612a58868b6125ca565b90925090508115612ac85760cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b7190612a95908e908590600401613668565b600060405180830381600087803b158015612aaf57600080fd5b505af1158015612ac3573d6000803e3d6000fd5b505050505b612ad3836001612c3d565b60c960009054906101000a90046001600160a01b03166001600160a01b0316868e6001600160a01b03167f364bb76a44233df8584c690de6da7810626a5e77192f3ebc942c35bcb1add24f8f604051612b3b91906001600160a01b0391909116815260200190565b60405180910390a450505050505050505050505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff16612bed5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161066c565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612c20611ef5565b6040516001600160a01b03909116815260200160405180910390a1565b60cf54600182151514612c6d578260cf5411612c5a576000612c7b565b8260cf54612c689190613aad565b612c7b565b8260cf54612c7b9190613a69565b60cf8190556040518291907f07b7fa586c4fdef11992d9448b97ba78814c23ddec7e1d4bf195fda6716e472690600090a3505050565b60655460ff1615612cd45760405162461bcd60e51b815260040161066c90613774565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612c20611ef5565b600054610100900460ff16612d315760405162461bcd60e51b815260040161066c90613b12565b610afb612d3c611ef5565b612b52565b6000612d96826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ffc9092919063ffffffff16565b80519091501561213c5780806020019051810190612db49190613b5d565b61213c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161066c565b604080518082018252828152426020808301918252600086815260d49091529290922090518155905160019091015560d254612e4f5760d28290555b8160d3541015610cf1575060d355565b6040516001600160a01b03831660248201526044810182905261213c90849063a9059cbb60e01b90606401612105565b60cc5460405163b3596f0760e01b81526001600160a01b038481166004830152600092839283929091169063b3596f0790602401604080518083038186803b158015612eda57600080fd5b505afa158015612eee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f129190613a81565b915091506000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612f5157600080fd5b505afa158015612f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8991906136dc565b9050612f9682600a6138ef565b83612fa6878460ff166012613015565b612fb091906137b4565b612fba91906137d3565b9695505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526110869085906323b872dd60e01b90608401612105565b606061300b8484600085613073565b90505b9392505050565b60008183141561302657508261300e565b81831015613054576130388383613aad565b61304390600a613b7f565b61304d90856137b4565b905061300e565b61305e8284613aad565b61306990600a613b7f565b61304d90856137d3565b6060824710156130d45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161066c565b6001600160a01b0385163b61312b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161066c565b600080866001600160a01b031685876040516131479190613b8b565b60006040518083038185875af1925050503d8060008114613184576040519150601f19603f3d011682016040523d82523d6000602084013e613189565b606091505b50915091506131998282866131a4565b979650505050505050565b606083156131b357508161300e565b8251156131c35782518084602001fd5b8160405162461bcd60e51b815260040161066c91906132fa565b6000602082840312156131ef57600080fd5b5035919050565b6001600160a01b0381168114610a1257600080fd5b60006020828403121561321d57600080fd5b813561300e816131f6565b600080600080600060a0868803121561324057600080fd5b853561324b816131f6565b9450602086013561325b816131f6565b9350604086013561326b816131f6565b9250606086013561327b816131f6565b9150608086013561328b816131f6565b809150509295509295909350565b6000806000606084860312156132ae57600080fd5b83356132b9816131f6565b95602085013595506040909401359392505050565b60005b838110156132e95781810151838201526020016132d1565b838111156110865750506000910152565b60208152600082518060208401526133198160408501602087016132ce565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561336c5761336c61332d565b604052919050565b600067ffffffffffffffff82111561338e5761338e61332d565b5060051b60200190565b600082601f8301126133a957600080fd5b813560206133be6133b983613374565b613343565b82815260059290921b840181019181810190868411156133dd57600080fd5b8286015b848110156134015780356133f4816131f6565b83529183019183016133e1565b509695505050505050565b600082601f83011261341d57600080fd5b8135602061342d6133b983613374565b82815260059290921b8401810191818101908684111561344c57600080fd5b8286015b848110156134015780358352918301918301613450565b6000806000806080858703121561347d57600080fd5b8435613488816131f6565b9350602085013567ffffffffffffffff808211156134a557600080fd5b6134b188838901613398565b945060408701359150808211156134c757600080fd5b506134d48782880161340c565b949793965093946060013593505050565b6000806000606084860312156134fa57600080fd5b83359250602084013591506040840135613513816131f6565b809150509250925092565b6000806040838503121561353157600080fd5b823561353c816131f6565b9150602083013561354c816131f6565b809150509250929050565b6000806040838503121561356a57600080fd5b823567ffffffffffffffff8082111561358257600080fd5b61358e86838701613398565b935060208501359150808211156135a457600080fd5b506135b18582860161340c565b9150509250929050565b600081518084526020808501945080840160005b838110156135eb578151875295820195908201906001016135cf565b509495945050505050565b600081518084526020808501945080840160005b838110156135eb5781516001600160a01b03168752958201959082019060010161360a565b60608152600061364260608301866135bb565b828103602084015261365481866135f6565b90508281036040840152612fba81856135bb565b60408152600061367b60408301856135f6565b828103602084015261368d81856135bb565b95945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b805160ff81168114611fb157600080fd5b6000602082840312156136ee57600080fd5b61300e826136cb565b60006020828403121561370957600080fd5b5051919050565b60208082526013908201527227b7363c9037bbb732b91037b91030b236b4b760691b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156137ce576137ce61379e565b500290565b6000826137f057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600181815b8085111561384657816000190482111561382c5761382c61379e565b8085161561383957918102915b93841c9390800290613810565b509250929050565b60008261385d5750600161164c565b8161386a5750600061164c565b8160018114613880576002811461388a576138a6565b600191505061164c565b60ff84111561389b5761389b61379e565b50506001821b61164c565b5060208310610133831016604e8410600b84101617156138c9575081810a61164c565b6138d3838361380b565b80600019048211156138e7576138e761379e565b029392505050565b600061300e60ff84168361384e565b600060ff821660ff8416808210156139185761391861379e565b90039392505050565b60006000198214156139355761393561379e565b5060010190565b60008161394b5761394b61379e565b506000190190565b600082601f83011261396457600080fd5b815160206139746133b983613374565b82815260059290921b8401810191818101908684111561399357600080fd5b8286015b848110156134015780518352918301918301613997565b600080604083850312156139c157600080fd5b825167ffffffffffffffff808211156139d957600080fd5b818501915085601f8301126139ed57600080fd5b815160206139fd6133b983613374565b82815260059290921b84018101918181019089841115613a1c57600080fd5b948201945b83861015613a43578551613a34816131f6565b82529482019490820190613a21565b91880151919650909350505080821115613a5c57600080fd5b506135b185828601613953565b60008219821115613a7c57613a7c61379e565b500190565b60008060408385031215613a9457600080fd5b82519150613aa4602084016136cb565b90509250929050565b600082821015613abf57613abf61379e565b500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215613b6f57600080fd5b8151801515811461300e57600080fd5b600061300e838361384e565b60008251613b9d8184602087016132ce565b919091019291505056fea2646970667358221220cb4fa001cebf5c90b87f93a7cb660665dc18d1874eee57a113910a78e757524f64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061028a5760003560e01c80638da5cb5b1161015c578063bdf1c4a1116100ce578063e9e81a6a11610087578063e9e81a6a146105cf578063efca0d07146105e2578063f13dc2e2146105eb578063f2fde38b146105f4578063f851a44014610607578063ffec4eb11461061a57600080fd5b8063bdf1c4a11461054a578063c54e44eb1461055d578063c89d5b8b14610570578063db2e21bc14610578578063e5e1977614610580578063e63cfa3b1461059357600080fd5b8063a8c62e7611610120578063a8c62e76146104d0578063a9d98f59146104e3578063aae09236146104f6578063ac25f6891461050d578063b47c6a2714610523578063bd244af41461054257600080fd5b80638da5cb5b1461047d5780639434b9891461048e5780639af1d35a146104a15780639b860882146104aa578063a8602fea146104bd57600080fd5b8063486ff0cd116102005780636628f945116101b95780636628f945146104205780636d2b3d7b14610433578063704b6c0214610446578063715018a6146104595780637da0a877146104615780638855c91a1461047457600080fd5b8063486ff0cd14610391578063530e784f146103b457806354fd4d50146103c7578063572b6c05146103d0578063582712b1146104025780635c975abb1461041557600080fd5b80632630c12f116102525780632630c12f1461031d57806333a100ca1461034857806345d207ec1461035b5780634626402b1461036e578063470343d814610381578063476343ee1461038957600080fd5b8063057feb991461028f5780630b47b7ff146102c25780630d8b76a8146102d75780631459457a146102ea57806319dac5af146102fd575b600080fd5b6102af61029d3660046131dd565b60d66020526000908152604090205481565b6040519081526020015b60405180910390f35b6102d56102d03660046131dd565b610623565b005b6102d56102e536600461320b565b6106cd565b6102d56102f8366004613228565b610738565b6102af61030b36600461320b565b60d56020526000908152604090205481565b60cc54610330906001600160a01b031681565b6040516001600160a01b0390911681526020016102b9565b6102d561035636600461320b565b61090c565b6102d5610369366004613299565b610a15565b60ce54610330906001600160a01b031681565b6102d5610a91565b6102d5610afd565b60408051808201825260018152603160f81b602082015290516102b991906132fa565b6102d56103c236600461320b565b610cf5565b6102af60d75481565b6103f26103de36600461320b565b60d1546001600160a01b0391821691161490565b60405190151581526020016102b9565b6102d5610410366004613467565b610d60565b60655460ff166103f2565b6102d561042e36600461320b565b610e10565b6102d56104413660046134e5565b610e7b565b6102d561045436600461320b565b61108c565b6102d56110f7565b60d154610330906001600160a01b031681565b6102af60d35481565b6097546001600160a01b0316610330565b6102d561049c36600461351e565b61114a565b6102af60d05481565b6102d56104b8366004613557565b611209565b6102d56104cb36600461320b565b61155d565b60cb54610330906001600160a01b031681565b6102af6104f13660046131dd565b6115c8565b6104fe611652565b6040516102b99392919061362f565b610515611911565b6040516102b9929190613668565b61052b6119a6565b6040805192835260ff9091166020830152016102b9565b6102af611a28565b60d854610330906001600160a01b031681565b60c954610330906001600160a01b031681565b6102af611bca565b6102d5611c4c565b6102d561058e366004613467565b611d25565b6105ba6105a13660046131dd565b60d4602052600090815260409020805460019091015482565b604080519283526020830191909152016102b9565b6102d56105dd366004613299565b611dbc565b6102af60cd5481565b6102af60cf5481565b6102d561060236600461320b565b611e3e565b60ca54610330906001600160a01b031681565b6102af60d25481565b61062b611ef5565b6001600160a01b03166106466097546001600160a01b031690565b6001600160a01b0316146106755760405162461bcd60e51b815260040161066c90613696565b60405180910390fd5b610bb960cd54106106c85760405162461bcd60e51b815260206004820152601760248201527f50726f666974206665652063616e6e6f74203e20333025000000000000000000604482015260640161066c565b60cd55565b6106d5611ef5565b6001600160a01b03166106f06097546001600160a01b031690565b6001600160a01b0316146107165760405162461bcd60e51b815260040161066c90613696565b60d180546001600160a01b0319166001600160a01b0392909216919091179055565b60006107446001611f29565b9050801561075c576000805461ff0019166101001790555b610764611fb6565b60ce80546001600160a01b038089166001600160a01b03199283161790925560ca805488841690831617905560cb805487841690831617905560cc80548684169083161790556107d060cd5560c9805492851692909116821790556040805163313ce56760e01b8152905163313ce56791600481810192602092909190829003018186803b1580156107f557600080fd5b505afa158015610809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082d91906136dc565b60c9805460ff60a01b1916600160a01b60ff938416810291909117918290559004166006111561089f5760405162461bcd60e51b815260206004820152601760248201527f5553445420646563696d616c73206d757374203e3d2036000000000000000000604482015260640161066c565b60cb5460c9546108be916001600160a01b039182169116600019611fe5565b8015610904576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b610914611ef5565b6001600160a01b031661092f6097546001600160a01b031690565b6001600160a01b0316146109555760405162461bcd60e51b815260040161066c90613696565b60cb80546001600160a01b0319166001600160a01b0383811691821790925560c954604051636eb1769f60e11b815230600482015260248101929092529091169063dd62ed3e9060440160206040518083038186803b1580156109b757600080fd5b505afa1580156109cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ef91906136f7565b610a125760cb5460c954610a12916001600160a01b039182169116600019611fe5565b50565b6097546001600160a01b0316331480610a38575060ca546001600160a01b031633145b610a545760405162461bcd60e51b815260040161066c90613710565b60026001541415610a775760405162461bcd60e51b815260040161066c9061373d565b6002600155610a8883808484612141565b50506001805550565b6097546001600160a01b0316331480610ab4575060ca546001600160a01b031633145b610ad05760405162461bcd60e51b815260040161066c90613710565b60655460ff1615610af35760405162461bcd60e51b815260040161066c90613774565b610afb6124c0565b565b6097546001600160a01b0316331480610b20575060ca546001600160a01b031633145b610b3c5760405162461bcd60e51b815260040161066c90613710565b60655460ff16610c605760cb5460408051632f4912bd60e21b815290516000926001600160a01b03169163bd244af4916004808301926020929190829003018186803b158015610b8b57600080fd5b505afa158015610b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc391906136f7565b60d0549091506000828210610be057670de0b6b3a7640000610bfd565b82610bf383670de0b6b3a76400006137b4565b610bfd91906137d3565b60cb5460405163ed47d90960e01b8152600481018390529192506001600160a01b03169063ed47d90990602401600060405180830381600087803b158015610c4457600080fd5b505af1158015610c58573d6000803e3d6000fd5b505050505050505b60c9546040516370a0823160e01b8152306004820152610cf1916001600160a01b0316906370a082319060240160206040518083038186803b158015610ca557600080fd5b505afa158015610cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdd91906136f7565b6040805160008152602081019091526125ca565b5050565b610cfd611ef5565b6001600160a01b0316610d186097546001600160a01b031690565b6001600160a01b031614610d3e5760405162461bcd60e51b815260040161066c90613696565b60cc80546001600160a01b0319166001600160a01b0392909216919091179055565b60d8546001600160a01b03163314610da75760405162461bcd60e51b815260206004820152600a60248201526913db9b1e481859d95b9d60b21b604482015260640161066c565b60026001541415610dca5760405162461bcd60e51b815260040161066c9061373d565b600260015560655460ff1615610df25760405162461bcd60e51b815260040161066c90613774565b610e0684610dfe611ef5565b858585612795565b5050600180555050565b610e18611ef5565b6001600160a01b0316610e336097546001600160a01b031690565b6001600160a01b031614610e595760405162461bcd60e51b815260040161066c90613696565b60d880546001600160a01b0319166001600160a01b0392909216919091179055565b6097546001600160a01b0316331480610e9e575060ca546001600160a01b031633145b610eba5760405162461bcd60e51b815260040161066c90613710565b60cb5460405163778d98b360e11b815260048101859052602481018490526000916001600160a01b03169063ef1b316690604401602060405180830381600087803b158015610f0857600080fd5b505af1158015610f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4091906136f7565b9050801561108657604080516001808252818301909252600091602080830190803683370190505090508281600081518110610f7e57610f7e6137f5565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508281600081518110610fcf57610fcf6137f5565b602090810291909101015260cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b719061100c9085908590600401613668565b600060405180830381600087803b15801561102657600080fd5b505af115801561103a573d6000803e3d6000fd5b50505050836001600160a01b031683877f2be1fd30870a31378112c815f24e8611c8a87ed036bce5cf5670a8e34dbf210a8860405161107b91815260200190565b60405180910390a450505b50505050565b611094611ef5565b6001600160a01b03166110af6097546001600160a01b031690565b6001600160a01b0316146110d55760405162461bcd60e51b815260040161066c90613696565b60ca80546001600160a01b0319166001600160a01b0392909216919091179055565b6110ff611ef5565b6001600160a01b031661111a6097546001600160a01b031690565b6001600160a01b0316146111405760405162461bcd60e51b815260040161066c90613696565b610afb6000612b52565b611152611ef5565b6001600160a01b031661116d6097546001600160a01b031690565b6001600160a01b0316146111935760405162461bcd60e51b815260040161066c90613696565b600260d754106111d65760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e4818d85b1b195960921b604482015260640161066c565b600260d75560d880546001600160a01b039384166001600160a01b03199182161790915560d18054929093169116179055565b6097546001600160a01b031633148061122c575060ca546001600160a01b031633145b6112485760405162461bcd60e51b815260040161066c90613710565b60655460ff166112915760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161066c565b8151815181146112dc5760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b604482015260640161066c565b6112e4612ba4565b60c9546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561132857600080fd5b505afa15801561133c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136091906136f7565b90508015611086576000806113736119a6565b9092509050600061138582600a6138ef565b60c954849061139f90600160a01b900460ff1660126138fe565b6113aa90600a6138ef565b6113b490876137b4565b6113be91906137b4565b6113c891906137d3565b90506000805b86811015611405578781815181106113e8576113e86137f5565b6020026020010151915080806113fd90613921565b9150506113ce565b5060008667ffffffffffffffff8111156114215761142161332d565b60405190808252806020026020018201604052801561144a578160200160208202803683370190505b50905060005b878110156114b75782878a838151811061146c5761146c6137f5565b602002602001015161147e91906137b4565b61148891906137d3565b82828151811061149a5761149a6137f5565b6020908102919091010152806114af81613921565b915050611450565b5060cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b71906114ea908c908590600401613668565b600060405180830381600087803b15801561150457600080fd5b505af1158015611518573d6000803e3d6000fd5b50505050611527836001612c3d565b60405186907fc13e24d2b0a3bacd5d1a7c514125a1e27323abf7c86f6d36597f8752bbd7eed790600090a2505050505050505050565b611565611ef5565b6001600160a01b03166115806097546001600160a01b031690565b6001600160a01b0316146115a65760405162461bcd60e51b815260040161066c90613696565b60ce80546001600160a01b0319166001600160a01b0392909216919091179055565b600060d2546000146116445760d2548210156115e657506000919050565b60d354821161164457815b60d254811061164257600081815260d46020908152604091829020825180840190935280548352600101549082018190521561162f57519392505050565b508061163a8161393c565b9150506115f1565b505b61164c611a28565b92915050565b606080606060cb60009054906101000a90046001600160a01b03166001600160a01b031663aae092366040518163ffffffff1660e01b815260040160006040518083038186803b1580156116a557600080fd5b505afa1580156116b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116e191908101906139ae565b80519193509150468167ffffffffffffffff8111156117025761170261332d565b60405190808252806020026020018201604052801561172b578160200160208202803683370190505b50945060005b82811015611769578186828151811061174c5761174c6137f5565b60209081029190910101528061176181613921565b915050611731565b5060c9546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156117ae57600080fd5b505afa1580156117c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e691906136f7565b90506000811180156117f85750600083115b15611909576000806118086119a6565b9092509050600061181a82600a6138ef565b60c954849061183490600160a01b900460ff1660126138fe565b61183f90600a6138ef565b60c9546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561188257600080fd5b505afa158015611896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ba91906136f7565b6118c491906137b4565b6118ce91906137b4565b6118d891906137d3565b905080876000815181106118ee576118ee6137f5565b602002602001018181516119029190613a69565b9052505050505b505050909192565b60608060cb60009054906101000a90046001600160a01b03166001600160a01b0316634631b2466040518163ffffffff1660e01b815260040160006040518083038186803b15801561196257600080fd5b505afa158015611976573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261199e91908101906139ae565b915091509091565b60cc5460c95460405163b3596f0760e01b81526001600160a01b0391821660048201526000928392169063b3596f0790602401604080518083038186803b1580156119f057600080fd5b505afa158015611a04573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199e9190613a81565b600080611a3760655460ff1690565b15611b1e57600080611a476119a6565b9092509050611a5781600a6138ef565b60c9548390611a7190600160a01b900460ff1660126138fe565b611a7c90600a6138ef565b60c9546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611abf57600080fd5b505afa158015611ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af791906136f7565b611b0191906137b4565b611b0b91906137b4565b611b1591906137d3565b92505050611ba7565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b158015611b6c57600080fd5b505afa158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba491906136f7565b90505b60d0548111611bb7576000611bc4565b60d054611bc49082613aad565b91505090565b60cb546040805163c89d5b8b60e01b815290516000926001600160a01b03169163c89d5b8b916004808301926020929190829003018186803b158015611c0f57600080fd5b505afa158015611c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4791906136f7565b905090565b6097546001600160a01b0316331480611c6f575060ca546001600160a01b031633145b611c8b5760405162461bcd60e51b815260040161066c90613710565b60655460ff1615611cae5760405162461bcd60e51b815260040161066c90613774565b611cb6612cb1565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663db2e21bc6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611d0657600080fd5b505af1158015611d1a573d6000803e3d6000fd5b5050600060cf555050565b6097546001600160a01b0316331480611d48575060ca546001600160a01b031633145b611d645760405162461bcd60e51b815260040161066c90613710565b60026001541415611d875760405162461bcd60e51b815260040161066c9061373d565b600260015560655460ff1615611daf5760405162461bcd60e51b815260040161066c90613774565b610e068485858585612795565b60d8546001600160a01b03163314611e035760405162461bcd60e51b815260206004820152600a60248201526913db9b1e481859d95b9d60b21b604482015260640161066c565b60026001541415611e265760405162461bcd60e51b815260040161066c9061373d565b6002600155610a8883611e37611ef5565b8484612141565b611e46611ef5565b6001600160a01b0316611e616097546001600160a01b031690565b6001600160a01b031614611e875760405162461bcd60e51b815260040161066c90613696565b6001600160a01b038116611eec5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161066c565b610a1281612b52565b600060183610801590611f12575060d1546001600160a01b031633145b15611f24575060131936013560601c90565b503390565b60008054610100900460ff1615611f70578160ff166001148015611f4c5750303b155b611f685760405162461bcd60e51b815260040161066c90613ac4565b506000919050565b60005460ff808416911610611f975760405162461bcd60e51b815260040161066c90613ac4565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16611fdd5760405162461bcd60e51b815260040161066c90613b12565b610afb612d0a565b80158061206e5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561203457600080fd5b505afa158015612048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206c91906136f7565b155b6120d95760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161066c565b6040516001600160a01b03831660248201526044810182905261213c90849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612d41565b505050565b600082116121865760405162461bcd60e51b81526020600482015260126024820152710536861726550657263206d757374203e20360741b604482015260640161066c565b670de0b6b3a76400008211156121ca5760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b604482015260640161066c565b60006121d4611a28565b90506000670de0b6b3a76400006121eb85846137b4565b6121f591906137d3565b6001600160a01b038716600090815260d5602052604090205490915083116122515760405162461bcd60e51b815260206004820152600f60248201526e139bdb98d9481a5cc818995a1a5b99608a1b604482015260640161066c565b6001600160a01b038616600090815260d56020908152604080832086905585835260d690915290208190556122868383612e13565b600060d054836122969190613a69565b6122a883670de0b6b3a76400006137b4565b6122b291906137d3565b905060006122c260655460ff1690565b6123b15760cb5460405163ed47d90960e01b8152600481018490526001600160a01b039091169063ed47d90990602401600060405180830381600087803b15801561230c57600080fd5b505af1158015612320573d6000803e3d6000fd5b505060c9546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a08231915060240160206040518083038186803b15801561236757600080fd5b505afa15801561237b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239f91906136f7565b90506123ac836000612c3d565b61244f565b60c9546040516370a0823160e01b8152306004820152670de0b6b3a76400009184916001600160a01b03909116906370a082319060240160206040518083038186803b15801561240057600080fd5b505afa158015612414573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243891906136f7565b61244291906137b4565b61244c91906137d3565b90505b60c954612466906001600160a01b03168883612e5f565b60c954604080516001600160a01b038a81168252602082018a9052928316928692908c16917f919fc3589577d8ba8023ca13d0b64eaeb6af31c331b4b81c0d42d66423603077910160405180910390a45050505050505050565b60cb5460408051632f4912bd60e21b815290516000926001600160a01b03169163bd244af4916004808301926020929190829003018186803b15801561250557600080fd5b505afa158015612519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253d91906136f7565b60cf549091506000818311156125965760006125598385613aad565b905061271060cd548261256c91906137b4565b61257691906137d3565b91508160d0600082825461258a9190613a69565b90915550505060cf8390555b8082847fa3e3c8c92ed1e364d04865f99cd96c3ae8f5a7d800f4a1d8148a58c6de6f1b7160405160405180910390a4505050565b60d054600090606090801561278c576000806125e46119a6565b60c9549193509150600090839061260690600160a01b900460ff1660126138fe565b61261190600a6138ef565b61261b91906137b4565b61262683600a6138ef565b61263090866137b4565b61263a91906137d3565b875190915088908183101561265e5760009550612657838b613aad565b99506126bf565b61266984600a6138ef565b60c954869061268390600160a01b900460ff1660126138fe565b61268e90600a6138ef565b612698908d6137b4565b6126a291906137b4565b6126ac91906137d3565b6126b69087613aad565b60009a90965092505b60d086905560005b8181101561272e57828b8b83815181106126e3576126e36137f5565b60200260200101516126f591906137b4565b6126ff91906137d3565b8a8281518110612711576127116137f5565b60209081029190910101528061272681613921565b9150506126c7565b5060ce5460c95461274c916001600160a01b03918216911685612e5f565b60c9546040516001600160a01b039091169084907f6e027f1905abd7233c51c9483e29a545074ed10d39db528c9791a246b26741ff90600090a350505050505b50929391925050565b6001600160a01b0385166127dd5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081858d8dbdd5b9d608a1b604482015260640161066c565b8251825181146128285760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b604482015260640161066c565b60c95460009061284490600690600160a01b900460ff166138fe565b61284f90600a6138ef565b90506000805b838110156128d95782868281518110612870576128706137f5565b602002602001015161288291906137b4565b868281518110612894576128946137f5565b6020026020010181815250508581815181106128b2576128b26137f5565b6020026020010151826128c59190613a69565b9150806128d181613921565b915050612855565b508060001061291d5760405162461bcd60e51b815260206004820152601060248201526f0416d6f756e7473206d757374203e20360841b604482015260640161066c565b6001600160a01b038816600090815260d5602052604090205484116129765760405162461bcd60e51b815260206004820152600f60248201526e139bdb98d9481a5cc818995a1a5b99608a1b604482015260640161066c565b6001600160a01b03808916600090815260d56020526040902085905560c9546129a0911682612e8f565b600085815260d660205260409020556129c0846129bb611a28565b612e13565b60c9546129d8906001600160a01b0316883084612fc4565b6000806129e36119a6565b909250905060006129f582600a6138ef565b60c9548490612a0f90600160a01b900460ff1660126138fe565b612a1a90600a6138ef565b612a2490876137b4565b612a2e91906137b4565b612a3891906137d3565b60cf5490915015612a4b57612a4b6124c0565b600080612a58868b6125ca565b90925090508115612ac85760cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b7190612a95908e908590600401613668565b600060405180830381600087803b158015612aaf57600080fd5b505af1158015612ac3573d6000803e3d6000fd5b505050505b612ad3836001612c3d565b60c960009054906101000a90046001600160a01b03166001600160a01b0316868e6001600160a01b03167f364bb76a44233df8584c690de6da7810626a5e77192f3ebc942c35bcb1add24f8f604051612b3b91906001600160a01b0391909116815260200190565b60405180910390a450505050505050505050505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff16612bed5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161066c565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612c20611ef5565b6040516001600160a01b03909116815260200160405180910390a1565b60cf54600182151514612c6d578260cf5411612c5a576000612c7b565b8260cf54612c689190613aad565b612c7b565b8260cf54612c7b9190613a69565b60cf8190556040518291907f07b7fa586c4fdef11992d9448b97ba78814c23ddec7e1d4bf195fda6716e472690600090a3505050565b60655460ff1615612cd45760405162461bcd60e51b815260040161066c90613774565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612c20611ef5565b600054610100900460ff16612d315760405162461bcd60e51b815260040161066c90613b12565b610afb612d3c611ef5565b612b52565b6000612d96826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ffc9092919063ffffffff16565b80519091501561213c5780806020019051810190612db49190613b5d565b61213c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161066c565b604080518082018252828152426020808301918252600086815260d49091529290922090518155905160019091015560d254612e4f5760d28290555b8160d3541015610cf1575060d355565b6040516001600160a01b03831660248201526044810182905261213c90849063a9059cbb60e01b90606401612105565b60cc5460405163b3596f0760e01b81526001600160a01b038481166004830152600092839283929091169063b3596f0790602401604080518083038186803b158015612eda57600080fd5b505afa158015612eee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f129190613a81565b915091506000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612f5157600080fd5b505afa158015612f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8991906136dc565b9050612f9682600a6138ef565b83612fa6878460ff166012613015565b612fb091906137b4565b612fba91906137d3565b9695505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526110869085906323b872dd60e01b90608401612105565b606061300b8484600085613073565b90505b9392505050565b60008183141561302657508261300e565b81831015613054576130388383613aad565b61304390600a613b7f565b61304d90856137b4565b905061300e565b61305e8284613aad565b61306990600a613b7f565b61304d90856137d3565b6060824710156130d45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161066c565b6001600160a01b0385163b61312b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161066c565b600080866001600160a01b031685876040516131479190613b8b565b60006040518083038185875af1925050503d8060008114613184576040519150601f19603f3d011682016040523d82523d6000602084013e613189565b606091505b50915091506131998282866131a4565b979650505050505050565b606083156131b357508161300e565b8251156131c35782518084602001fd5b8160405162461bcd60e51b815260040161066c91906132fa565b6000602082840312156131ef57600080fd5b5035919050565b6001600160a01b0381168114610a1257600080fd5b60006020828403121561321d57600080fd5b813561300e816131f6565b600080600080600060a0868803121561324057600080fd5b853561324b816131f6565b9450602086013561325b816131f6565b9350604086013561326b816131f6565b9250606086013561327b816131f6565b9150608086013561328b816131f6565b809150509295509295909350565b6000806000606084860312156132ae57600080fd5b83356132b9816131f6565b95602085013595506040909401359392505050565b60005b838110156132e95781810151838201526020016132d1565b838111156110865750506000910152565b60208152600082518060208401526133198160408501602087016132ce565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561336c5761336c61332d565b604052919050565b600067ffffffffffffffff82111561338e5761338e61332d565b5060051b60200190565b600082601f8301126133a957600080fd5b813560206133be6133b983613374565b613343565b82815260059290921b840181019181810190868411156133dd57600080fd5b8286015b848110156134015780356133f4816131f6565b83529183019183016133e1565b509695505050505050565b600082601f83011261341d57600080fd5b8135602061342d6133b983613374565b82815260059290921b8401810191818101908684111561344c57600080fd5b8286015b848110156134015780358352918301918301613450565b6000806000806080858703121561347d57600080fd5b8435613488816131f6565b9350602085013567ffffffffffffffff808211156134a557600080fd5b6134b188838901613398565b945060408701359150808211156134c757600080fd5b506134d48782880161340c565b949793965093946060013593505050565b6000806000606084860312156134fa57600080fd5b83359250602084013591506040840135613513816131f6565b809150509250925092565b6000806040838503121561353157600080fd5b823561353c816131f6565b9150602083013561354c816131f6565b809150509250929050565b6000806040838503121561356a57600080fd5b823567ffffffffffffffff8082111561358257600080fd5b61358e86838701613398565b935060208501359150808211156135a457600080fd5b506135b18582860161340c565b9150509250929050565b600081518084526020808501945080840160005b838110156135eb578151875295820195908201906001016135cf565b509495945050505050565b600081518084526020808501945080840160005b838110156135eb5781516001600160a01b03168752958201959082019060010161360a565b60608152600061364260608301866135bb565b828103602084015261365481866135f6565b90508281036040840152612fba81856135bb565b60408152600061367b60408301856135f6565b828103602084015261368d81856135bb565b95945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b805160ff81168114611fb157600080fd5b6000602082840312156136ee57600080fd5b61300e826136cb565b60006020828403121561370957600080fd5b5051919050565b60208082526013908201527227b7363c9037bbb732b91037b91030b236b4b760691b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156137ce576137ce61379e565b500290565b6000826137f057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600181815b8085111561384657816000190482111561382c5761382c61379e565b8085161561383957918102915b93841c9390800290613810565b509250929050565b60008261385d5750600161164c565b8161386a5750600061164c565b8160018114613880576002811461388a576138a6565b600191505061164c565b60ff84111561389b5761389b61379e565b50506001821b61164c565b5060208310610133831016604e8410600b84101617156138c9575081810a61164c565b6138d3838361380b565b80600019048211156138e7576138e761379e565b029392505050565b600061300e60ff84168361384e565b600060ff821660ff8416808210156139185761391861379e565b90039392505050565b60006000198214156139355761393561379e565b5060010190565b60008161394b5761394b61379e565b506000190190565b600082601f83011261396457600080fd5b815160206139746133b983613374565b82815260059290921b8401810191818101908684111561399357600080fd5b8286015b848110156134015780518352918301918301613997565b600080604083850312156139c157600080fd5b825167ffffffffffffffff808211156139d957600080fd5b818501915085601f8301126139ed57600080fd5b815160206139fd6133b983613374565b82815260059290921b84018101918181019089841115613a1c57600080fd5b948201945b83861015613a43578551613a34816131f6565b82529482019490820190613a21565b91880151919650909350505080821115613a5c57600080fd5b506135b185828601613953565b60008219821115613a7c57613a7c61379e565b500190565b60008060408385031215613a9457600080fd5b82519150613aa4602084016136cb565b90509250929050565b600082821015613abf57613abf61379e565b500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215613b6f57600080fd5b8151801515811461300e57600080fd5b600061300e838361384e565b60008251613b9d8184602087016132ce565b919091019291505056fea2646970667358221220cb4fa001cebf5c90b87f93a7cb660665dc18d1874eee57a113910a78e757524f64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositByAdmin(address,address[],uint256[],uint256)": {
        "params": {
          "_USDT6Amts": "amounts of USDT should be deposited to each pools. It's 6 decimals"
        }
      },
      "getUSDTPriceInUSD()": {
        "returns": {
          "_0": "the price of USDT in USD."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawPercByAdmin(address,uint256,uint256)": {
        "params": {
          "_sharePerc": "percentage of assets which should be withdrawn. It's 18 decimals"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositByAdmin(address,address[],uint256[],uint256)": {
        "notice": "The length of array is based on token count. And the lengths should be same on the arraies."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 713,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 716,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 973,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1017,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3292,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 869,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 958,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 593,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 705,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8556,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "USDT",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IERC20UpgradeableExt)67387"
      },
      {
        "astId": 8558,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "usdtDecimals",
        "offset": 20,
        "slot": "201",
        "type": "t_uint8"
      },
      {
        "astId": 8560,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "admin",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 8563,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "strategy",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IStrategy)8536"
      },
      {
        "astId": 8566,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "priceOracle",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(IPriceOracle)12040"
      },
      {
        "astId": 8568,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "profitFeePerc",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 8570,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "treasuryWallet",
        "offset": 0,
        "slot": "206",
        "type": "t_address"
      },
      {
        "astId": 8572,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "watermark",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 8574,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "fees",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 8576,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 8578,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "firstOperationNonce",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 8580,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "lastOperationNonce",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 8585,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "poolAtNonce",
        "offset": 0,
        "slot": "212",
        "type": "t_mapping(t_uint256,t_struct(PoolSnapshot)8553_storage)"
      },
      {
        "astId": 8589,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "userLastOperationNonce",
        "offset": 0,
        "slot": "213",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8593,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "operationAmounts",
        "offset": 0,
        "slot": "214",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8595,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "version",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 8597,
        "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
        "label": "userAgent",
        "offset": 0,
        "slot": "216",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20UpgradeableExt)67387": {
        "encoding": "inplace",
        "label": "contract IERC20UpgradeableExt",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)12040": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IStrategy)8536": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(PoolSnapshot)8553_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BNIVault.PoolSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolSnapshot)8553_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PoolSnapshot)8553_storage": {
        "encoding": "inplace",
        "label": "struct BNIVault.PoolSnapshot",
        "members": [
          {
            "astId": 8550,
            "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
            "label": "poolInUSD",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8552,
            "contract": "contracts/bni/BNIVaultTest.sol:BNIVaultTest",
            "label": "ts",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}