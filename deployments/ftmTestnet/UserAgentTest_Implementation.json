{
  "address": "0xCEf177B916140958f382e214BaBB5e318DAdcA77",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTestValue",
          "type": "uint256"
        }
      ],
      "name": "TestCall",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromChainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum BasicUserAgentBase.AdapterType",
          "name": "adapterType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADAPTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bniMinter",
      "outputs": [
        {
          "internalType": "contract IBNIMinter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bniVault",
      "outputs": [
        {
          "internalType": "contract IBNIVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_share",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_feeAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_share",
          "type": "uint256"
        }
      ],
      "name": "burnByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "callAdapterTypes",
      "outputs": [
        {
          "internalType": "enum BasicUserAgentBase.AdapterType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cbridgeAdapter",
      "outputs": [
        {
          "internalType": "contract IXChainAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cbridgeSenders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainIdOnLP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_toChainIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_USDTAmts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_minterNonce",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_feeAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_USDTAmts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_minterNonce",
          "type": "uint256"
        }
      ],
      "name": "depositByAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gatheredAmount",
          "type": "uint256"
        }
      ],
      "name": "exitWithdrawal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_feeAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "exitWithdrawalByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "gasAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gasCosts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_fromChainIds",
          "type": "uint256[]"
        },
        {
          "internalType": "enum BasicUserAgentBase.AdapterType[]",
          "name": "_adapterTypes",
          "type": "uint8[]"
        }
      ],
      "name": "gather",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_feeAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_toChainId",
          "type": "uint256"
        },
        {
          "internalType": "enum BasicUserAgentBase.AdapterType",
          "name": "_adapterType",
          "type": "uint8"
        }
      ],
      "name": "gatherByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "getMessageHashForSafe",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_USDT6Amt",
          "type": "uint256"
        }
      ],
      "name": "initDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_feeAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_USDT6Amt",
          "type": "uint256"
        }
      ],
      "name": "initDepositByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "contract ISwap",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "contract IXChainAdapter",
          "name": "_multichainAdapter",
          "type": "address"
        },
        {
          "internalType": "contract IXChainAdapter",
          "name": "_cbridgeAdapter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subImpl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "contract ISwap",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "contract IXChainAdapter",
          "name": "_multichainAdapter",
          "type": "address"
        },
        {
          "internalType": "contract IXChainAdapter",
          "name": "_cbridgeAdapter",
          "type": "address"
        },
        {
          "internalType": "contract IBNIMinter",
          "name": "_bniMinter",
          "type": "address"
        },
        {
          "internalType": "contract IBNIVault",
          "name": "_bniVault",
          "type": "address"
        }
      ],
      "name": "initialize1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLPChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_USDT6Amt",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_feeAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_USDT6Amt",
          "type": "uint256"
        }
      ],
      "name": "mintByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multichainAdapter",
      "outputs": [
        {
          "internalType": "contract IXChainAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cbridgeNonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "onRefunded",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBNIMinter",
          "name": "_bniMinter",
          "type": "address"
        }
      ],
      "name": "setBNIMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBNIVault",
          "name": "_bniVault",
          "type": "address"
        }
      ],
      "name": "setBNIVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_biconomy",
          "type": "address"
        }
      ],
      "name": "setBiconomy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IXChainAdapter",
          "name": "_cbridgeAdapter",
          "type": "address"
        }
      ],
      "name": "setCBridgeAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_chainIds",
          "type": "uint256[]"
        },
        {
          "internalType": "enum BasicUserAgentBase.AdapterType[]",
          "name": "_adapterTypes",
          "type": "uint8[]"
        }
      ],
      "name": "setCallAdapterTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4[]",
          "name": "_selectors",
          "type": "bytes4[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "setGasAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_chainIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_costs",
          "type": "uint256[]"
        }
      ],
      "name": "setGasCosts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IXChainAdapter",
          "name": "_multichainAdapter",
          "type": "address"
        }
      ],
      "name": "setMultichainAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subImpl",
          "type": "address"
        }
      ],
      "name": "setSubImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "_swap",
          "type": "address"
        }
      ],
      "name": "setSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "setTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_chainIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_userAgents",
          "type": "address[]"
        }
      ],
      "name": "setUserAgents",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subImpl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gatheredAmount",
          "type": "uint256"
        }
      ],
      "name": "takeOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "testCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_feeAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "testCallByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_toChainIds",
          "type": "uint256[]"
        },
        {
          "internalType": "enum BasicUserAgentBase.AdapterType[]",
          "name": "_adapterTypes",
          "type": "uint8[]"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_feeAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usdcBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usdtBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userAgents",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_chainIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minterNonce",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_feeAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minterNonce",
          "type": "uint256"
        }
      ],
      "name": "withdrawPercByAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1135c472e03e52df36a910d1e346c67ae844c96932253698eb85c5260eaab295",
  "receipt": {
    "to": null,
    "from": "0xd91Fbc9b431464D737E1BC4e76900D43405a639b",
    "contractAddress": "0xCEf177B916140958f382e214BaBB5e318DAdcA77",
    "transactionIndex": 0,
    "gasUsed": "4572038",
    "logsBloom": "0x
    "blockHash": "0x00002d150000051d2654c0586108a625a7e103892a734ff3004a22aa35923a31",
    "transactionHash": "0x1135c472e03e52df36a910d1e346c67ae844c96932253698eb85c5260eaab295",
    "logs": [],
    "blockNumber": 10400834,
    "cumulativeGasUsed": "4572038",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 14,
  "solcInputHash": "60a6728e6c94fe17669b6b3988b0be47",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTestValue\",\"type\":\"uint256\"}],\"name\":\"TestCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum BasicUserAgentBase.AdapterType\",\"name\":\"adapterType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADAPTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bniMinter\",\"outputs\":[{\"internalType\":\"contract IBNIMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bniVault\",\"outputs\":[{\"internalType\":\"contract IBNIVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"burnByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"callAdapterTypes\",\"outputs\":[{\"internalType\":\"enum BasicUserAgentBase.AdapterType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cbridgeAdapter\",\"outputs\":[{\"internalType\":\"contract IXChainAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cbridgeSenders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainIdOnLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_toChainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_USDTAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_minterNonce\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_USDTAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_minterNonce\",\"type\":\"uint256\"}],\"name\":\"depositByAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gatheredAmount\",\"type\":\"uint256\"}],\"name\":\"exitWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"exitWithdrawalByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"gasAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gasCosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_fromChainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum BasicUserAgentBase.AdapterType[]\",\"name\":\"_adapterTypes\",\"type\":\"uint8[]\"}],\"name\":\"gather\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toChainId\",\"type\":\"uint256\"},{\"internalType\":\"enum BasicUserAgentBase.AdapterType\",\"name\":\"_adapterType\",\"type\":\"uint8\"}],\"name\":\"gatherByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"getMessageHashForSafe\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_USDT6Amt\",\"type\":\"uint256\"}],\"name\":\"initDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_USDT6Amt\",\"type\":\"uint256\"}],\"name\":\"initDepositByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"contract ISwap\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"contract IXChainAdapter\",\"name\":\"_multichainAdapter\",\"type\":\"address\"},{\"internalType\":\"contract IXChainAdapter\",\"name\":\"_cbridgeAdapter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"contract ISwap\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"contract IXChainAdapter\",\"name\":\"_multichainAdapter\",\"type\":\"address\"},{\"internalType\":\"contract IXChainAdapter\",\"name\":\"_cbridgeAdapter\",\"type\":\"address\"},{\"internalType\":\"contract IBNIMinter\",\"name\":\"_bniMinter\",\"type\":\"address\"},{\"internalType\":\"contract IBNIVault\",\"name\":\"_bniVault\",\"type\":\"address\"}],\"name\":\"initialize1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLPChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_USDT6Amt\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_USDT6Amt\",\"type\":\"uint256\"}],\"name\":\"mintByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multichainAdapter\",\"outputs\":[{\"internalType\":\"contract IXChainAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cbridgeNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"onRefunded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBNIMinter\",\"name\":\"_bniMinter\",\"type\":\"address\"}],\"name\":\"setBNIMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBNIVault\",\"name\":\"_bniVault\",\"type\":\"address\"}],\"name\":\"setBNIVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_biconomy\",\"type\":\"address\"}],\"name\":\"setBiconomy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IXChainAdapter\",\"name\":\"_cbridgeAdapter\",\"type\":\"address\"}],\"name\":\"setCBridgeAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum BasicUserAgentBase.AdapterType[]\",\"name\":\"_adapterTypes\",\"type\":\"uint8[]\"}],\"name\":\"setCallAdapterTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"_selectors\",\"type\":\"bytes4[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setGasAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_costs\",\"type\":\"uint256[]\"}],\"name\":\"setGasCosts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IXChainAdapter\",\"name\":\"_multichainAdapter\",\"type\":\"address\"}],\"name\":\"setMultichainAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subImpl\",\"type\":\"address\"}],\"name\":\"setSubImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"_swap\",\"type\":\"address\"}],\"name\":\"setSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_userAgents\",\"type\":\"address[]\"}],\"name\":\"setUserAgents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gatheredAmount\",\"type\":\"uint256\"}],\"name\":\"takeOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"testCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"testCallByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_toChainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum BasicUserAgentBase.AdapterType[]\",\"name\":\"_adapterTypes\",\"type\":\"uint8[]\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usdcBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usdtBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAgents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minterNonce\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minterNonce\",\"type\":\"uint256\"}],\"name\":\"withdrawPercByAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(uint256,uint256)\":{\"details\":\"It calls burnByAdmin of BNIMinter.\",\"params\":{\"_pool\":\"total pool in USD\",\"_share\":\"amount of shares\"}},\"deposit(uint256[],address[],uint256[],uint256)\":{\"details\":\"It calls depositByAdmin of BNIVaults.\"},\"exitWithdrawal(uint256)\":{\"details\":\"It calls exitWithdrawalByAdmin of BNIMinter.\",\"params\":{\"_gatheredAmount\":\"is the amount of token that is gathered.\"}},\"gather(uint256[],uint8[])\":{\"details\":\"It gathers withdrawn tokens of the user from user agents.\"},\"getMessageHashForSafe(bytes)\":{\"details\":\"Returns hash of a message that can be signed by owners.\",\"params\":{\"message\":\"Message that should be hashed\"},\"returns\":{\"_0\":\"Message hash.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initDeposit(uint256,uint256)\":{\"details\":\"It calls initDepositByAdmin of BNIMinter.\",\"params\":{\"_USDT6Amt\":\"USDT with 6 decimals to be deposited\",\"_pool\":\"total pool in USD\"}},\"mint(uint256)\":{\"details\":\"It calls mintByAdmin of BNIMinter.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setSubImpl(address)\":{\"details\":\"Delegate to sub contract\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"takeOut(uint256)\":{\"details\":\"It takes out tokens from this agent.\",\"params\":{\"_gatheredAmount\":\"is the amount of token that is gathered.\"}},\"transfer(uint256[],uint256[],uint8[])\":{\"details\":\"It transfers tokens to user agents\"},\"withdraw(uint256[],uint256,uint256)\":{\"details\":\"It calls withdrawPercByAdmin of BNIVaults.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exitWithdrawal(uint256)\":{\"notice\":\"_gatheredAmount doesn't include the balance which is withdrawan in this agent.\"},\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"},\"onRefunded(uint256,address,uint256,uint256,address)\":{\"notice\":\"Never revert in this function. If not, cbridgeAdapter.executeMessageWithTransferRefund will be failed.\"},\"takeOut(uint256)\":{\"notice\":\"_gatheredAmount doesn't include the balance which is withdrawan in this agent.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/xchain/agent/test/UserAgentTest.sol\":\"UserAgentTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1976ce0aadaa551a0fecab9930a7f4956252fa40594c8d165f682020f0e826c0\",\"license\":\"MIT\"},\"contracts/bni/IBNIMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IBNIMinter {\\n    function initDepositByAdmin(address _account, uint _pool, uint _USDT6Amt) external;\\n    function mintByAdmin(address _account, uint _USDT6Amt) external;\\n    function burnByAdmin(address _account, uint _pool, uint _share) external;\\n    function exitWithdrawalByAdmin(address _account) external;\\n}\",\"keccak256\":\"0x8b61fe1ce134c6bd6261984e8be3c3e7a0340a86b13227f35c0a6f26aa5d745c\",\"license\":\"MIT\"},\"contracts/bni/IBNIVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IBNIVault {\\n    function depositByAdmin(address _account, address[] memory _tokens, uint[] memory _USDTAmts, uint _nonce) external;\\n    function depositByAgent(address _account, address[] memory _tokens, uint[] memory _USDTAmts, uint _nonce) external;\\n    function withdrawPercByAdmin(address _account, uint _sharePerc, uint _nonce) external;\\n    function withdrawPercByAgent(address _account, uint _sharePerc, uint _nonce) external;\\n}\",\"keccak256\":\"0x8b5c17cefd6c61189d4160362d97134c0bdd6d2a90843b33de58081527735a3a\",\"license\":\"MIT\"},\"contracts/bni/constant/AuroraConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AuroraConstant {\\n    uint internal constant CHAINID = 1313161554;\\n\\n    address internal constant BSTN = 0x9f1F933C660a1DC856F0E0Fe058435879c5CCEf0;\\n    address internal constant META = 0xc21Ff01229e982d7c8b8691163B0A3Cb8F357453;\\n    address internal constant stNEAR = 0x07F9F7f963C5cD2BBFFd30CcfB964Be114332E30;\\n    address internal constant USDC = 0xB12BFcA5A55806AaF64E99521918A4bf0fC40802;\\n    address internal constant USDT = 0x4988a896b1227218e4A686fdE5EabdcAbd91571f;\\n    address internal constant WETH = 0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB;\\n    address internal constant WNEAR = 0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d;\\n}\\n\",\"keccak256\":\"0xb4c50615e5b8672de4e3918c881272987794a28f3cc00f680f04bdfddc21dba8\",\"license\":\"MIT\"},\"contracts/bni/constant/AuroraConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AuroraConstantTest {\\n    uint internal constant CHAINID = 1313161555;\\n\\n    address internal constant BSTN = 0x9f1F933C660a1DC856F0E0Fe058435879c5CCEf0; // Should be replaced with testnet address\\n    address internal constant META = 0xc21Ff01229e982d7c8b8691163B0A3Cb8F357453; // Should be replaced with testnet address\\n    address internal constant stNEAR = 0x2137df2e54abd6bF1c1a8c1739f2EA6A8C15F144;\\n    address internal constant USDC = 0xCcECA5C4A3355F8e7a0B7d2a7251eec012Be7c58;\\n    address internal constant USDT = 0xF9C249974c1Acf96a59e5757Cc9ba7035cE489B1;\\n    address internal constant WETH = 0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB; // Should be replaced with testnet address\\n    address internal constant WNEAR = 0x4861825E75ab14553E5aF711EbbE6873d369d146;\\n}\\n\",\"keccak256\":\"0x2c142ce864cd38aa02fa7e50f069b88c73a06d913be71355858f34396c30c048\",\"license\":\"MIT\"},\"contracts/bni/constant/AvaxConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AvaxConstant {\\n    uint internal constant CHAINID = 43114;\\n\\n    address internal constant USDC = 0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664;\\n    address internal constant USDT = 0xc7198437980c041c805A1EDcbA50c1Ce5db95118;\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    address internal constant aAVAXb = 0x6C6f910A79639dcC94b4feEF59Ff507c2E843929;\\n}\\n\",\"keccak256\":\"0x53216c58dd6d77a9fa18b7ea121a2a8aa8c3ae6577577e8c332747bd0d74fde2\",\"license\":\"MIT\"},\"contracts/bni/constant/AvaxConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AvaxConstantTest {\\n    uint internal constant CHAINID = 43113;\\n\\n    address internal constant USDC = 0x7aCdaba7Ee51c1c3F7C6D605CC26b1c9aAB0495A;\\n    address internal constant USDT = 0x78ae2880bd1672b49a33cF796CF53FE6db0aB01D;\\n    address internal constant WAVAX = 0xd00ae08403B9bbb9124bB305C09058E32C39A48c;\\n\\n    address internal constant aAVAXb = 0xBd97c29aa3E83C523C9714edCA8DB8881841a593;\\n}\\n\",\"keccak256\":\"0x11c2007f9c851ef591ac5f7d8b2540bfbcde5091044f5bc2a02645fc13230c3e\",\"license\":\"MIT\"},\"contracts/bni/constant/BscConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary BscConstant {\\n    uint internal constant CHAINID = 56;\\n\\n    address internal constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address internal constant CAKE = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82;\\n    address internal constant USDC = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\\n    address internal constant USDT = 0x55d398326f99059fF775485246999027B3197955;\\n    address internal constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    address internal constant aBNBb = 0xBb1Aa6e59E5163D8722a122cd66EBA614b59df0d;\\n}\\n\",\"keccak256\":\"0xd0c4c785ade0a75733c82781329443ec20ba40754d99575689064ac9e7196adf\",\"license\":\"MIT\"},\"contracts/bni/constant/BscConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary BscConstantTest {\\n    uint internal constant CHAINID = 97;\\n\\n    address internal constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // Should be replaced with testnet address\\n    address internal constant CAKE = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82; // Should be replaced with testnet address\\n    address internal constant USDC = 0xda14d11D2C7d79F167b6057DE3D9cc25C2c488d5;\\n    address internal constant USDT = 0x1F326a8CA5399418a76eA0efa0403Cbb00790C67;\\n    address internal constant WBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd;\\n\\n    address internal constant aBNBb = 0xaB56897fE4e9f0757e02B54C27E81B9ddd6A30AE;\\n}\\n\",\"keccak256\":\"0x9ca5b6fb202a1748ffa97c55a155bd7e1fd5bb4bde9fb276bb0a5c42d2539e0b\",\"license\":\"MIT\"},\"contracts/bni/constant/EthConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary EthConstant {\\n    uint internal constant CHAINID = 1;\\n\\n    address internal constant MATIC = 0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0;\\n    address internal constant stETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\n    address internal constant stMATIC = 0x9ee91F9f426fA633d227f7a9b000E28b9dfd8599;\\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n}\\n\",\"keccak256\":\"0x7d278bbafd2c0dae080f4aea2c853ec12ea88f767de21cdaa1ddd4be393143e1\",\"license\":\"MIT\"},\"contracts/bni/constant/EthConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary EthConstantTest {\\n    uint internal constant CHAINID = 4;\\n\\n    address internal constant MATIC = 0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0; // Should be replaced with testnet address\\n    address internal constant stETH = 0xF4242f9d78DB7218Ad72Ee3aE14469DBDE8731eD;\\n    address internal constant stMATIC = 0x9ee91F9f426fA633d227f7a9b000E28b9dfd8599; // Should be replaced with testnet address\\n    address internal constant USDC = 0xDf5324ebe6F6b852Ff5cBf73627eE137e9075276;\\n    address internal constant USDT = 0x21e48034753E490ff04f2f75f7CAEdF081B320d5;\\n    address internal constant WETH = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\\n}\\n\",\"keccak256\":\"0x2711954dbd697694829429f6b66d704bb80b214e8f5077f8c79554c2af901a38\",\"license\":\"MIT\"},\"contracts/bni/constant/FtmConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary FtmConstantTest {\\n    uint internal constant CHAINID = 4002;\\n\\n    address internal constant USDC = 0x147abEE959A578F2ae5F9bC996dcf6259EBd3a89;\\n    address internal constant USDT = 0xb02068AE04Bf5d184EFDe3583e09f2185a30da0e;\\n    address internal constant WFTM = 0xf1277d1Ed8AD466beddF92ef448A132661956621;\\n}\\n\",\"keccak256\":\"0xf3f23ac114bd1500bd38c3095382b9459f8f4750b59c96bee4e44bb0187bb906\",\"license\":\"MIT\"},\"contracts/bni/constant/MaticConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary MaticConstant {\\n    uint internal constant CHAINID = 137;\\n\\n    address internal constant USDC = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n    address internal constant USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\\n    address internal constant WMATIC = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\\n}\\n\",\"keccak256\":\"0x0503964316f40535769a8e59b212628df2799c1bbde38dae6f0fce5f250f0ba2\",\"license\":\"MIT\"},\"contracts/bni/constant/MaticConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary MaticConstantTest {\\n    uint internal constant CHAINID = 80001;\\n\\n    address internal constant USDC = 0x6600BeC324CCDd12c70297311AEfB37fafB1D689;\\n    address internal constant USDT = 0x7e4C234B1d634DB790592d1550816b19E862F744;\\n    address internal constant WMATIC = 0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889;\\n}\\n\",\"keccak256\":\"0x454ef5183082f4cbadd6166b4b5f56ad6b1b3406c0c39132e12177229cb66b48\",\"license\":\"MIT\"},\"contracts/swap/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ISwap {\\n    function swapExactTokensForTokens(address _tokenA, address _tokenB, uint _amt, uint _minAmount) external returns (uint);\\n    function swapExactTokensForTokens2(address _tokenA, address _tokenB, uint _amt, uint _minAmount) external returns (uint);\\n\\n    function swapExactETHForTokens(address _tokenB, uint _amt, uint _minAmount) external payable returns (uint);\\n    function swapTokensForExactETH(address _tokenA, uint _amountInMax, uint _amountOut) external returns (uint _spentTokenAmount);\\n    function swapExactTokensForETH(address _tokenA, uint _amt, uint _minAmount) external returns (uint);\\n\\n    function getAmountsInForETH(address _tokenA, uint _amountOut) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x16e7326d5c1bdcbdb610ea20071fe4fc17b3772214b2210392fe5168ff40df5b\",\"license\":\"MIT\"},\"contracts/xchain/IXChainAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface IXChainAdapter {\\r\\n\\r\\n    function transfer(\\r\\n        address _token,\\r\\n        uint[] memory _amounts,\\r\\n        uint[] memory _toChainIds,\\r\\n        address[] memory _toAddresses\\r\\n    ) external payable;\\r\\n\\r\\n    function call(\\r\\n        uint _toChainId,\\r\\n        address _targetContract,\\r\\n        uint _targetCallValue,\\r\\n        bytes memory _targetCallData\\r\\n    ) external payable;\\r\\n\\r\\n    function calcTransferFee() external view returns (uint);\\r\\n\\r\\n    function calcCallFee(\\r\\n        uint _toChainId,\\r\\n        address _targetContract,\\r\\n        uint _targetCallValue,\\r\\n        bytes memory _targetCallData\\r\\n    ) external view returns (uint);\\r\\n\\r\\n    function minTransfer(\\r\\n        address _token,\\r\\n        uint _toChainId\\r\\n    ) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xf87ca9e6b3c6e22a9e7598c78ff93faed68496683c248f800b8c58516f86537a\",\"license\":\"MIT\"},\"contracts/xchain/agent/BNIUserAgentBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nimport \\\"../../bni/IBNIMinter.sol\\\";\\nimport \\\"../../bni/IBNIVault.sol\\\";\\nimport \\\"./BasicUserAgentBase.sol\\\";\\n\\ncontract BNIUserAgentBase is BasicUserAgentBase {\\n\\n    uint public chainIdOnLP;\\n    bool public isLPChain;\\n\\n    IBNIMinter public bniMinter;\\n    IBNIVault public bniVault;\\n\\n    // Address of sub-implementation contract\\n    address public subImpl;\\n}\\n\",\"keccak256\":\"0x4d063b0fbda963b8a9293931f7d139684278bd0f121925e5677e2d759dbbb3a9\",\"license\":\"MIT\"},\"contracts/xchain/agent/BasicUserAgent.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"sgn-v2-contracts/contracts/message/interfaces/IMessageReceiverApp.sol\\\";\\nimport \\\"../../../libs/BaseRelayRecipient.sol\\\";\\nimport \\\"../../../libs/Const.sol\\\";\\nimport \\\"../../../libs/Token.sol\\\";\\nimport \\\"../../swap/ISwap.sol\\\";\\nimport \\\"../IXChainAdapter.sol\\\";\\nimport \\\"./BasicUserAgentBase.sol\\\";\\nimport \\\"./IUserAgent.sol\\\";\\n\\ncontract BasicUserAgent is IUserAgent, BasicUserAgentBase {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    modifier onlyCBridgeAdapter {\\n        require(msg.sender == address(cbridgeAdapter), \\\"Only cBridge\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _treasury, address _admin,\\n        ISwap _swap,\\n        IXChainAdapter _multichainAdapter, IXChainAdapter _cbridgeAdapter\\n    ) public virtual initializer {\\n        require(_treasury != address(0), \\\"treasury invalid\\\");\\n\\n        __Ownable_init_unchained();\\n        _setupRole(DEFAULT_ADMIN_ROLE, owner());\\n        __GnosisSafe_init();\\n\\n        USDC = IERC20Upgradeable(Token.getTokenAddress(Const.TokenID.USDC));\\n        USDT = IERC20Upgradeable(Token.getTokenAddress(Const.TokenID.USDT));\\n\\n        treasuryWallet = _treasury;\\n        admin = _admin;\\n        setSwapper(_swap);\\n        setMultichainAdapter(_multichainAdapter);\\n        setCBridgeAdapter(_cbridgeAdapter);\\n\\n        gasAmounts[IMessageReceiverApp.executeMessageWithTransferRefund.selector] = 164615; // It's the gas amount of refund transaction on cBridge\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _revokeRole(DEFAULT_ADMIN_ROLE, owner());\\n        super.transferOwnership(newOwner);\\n        _setupRole(DEFAULT_ADMIN_ROLE, newOwner);\\n    }\\n\\n    function pause() external virtual onlyOwner whenNotPaused {\\n        _pause();\\n        USDT.safeApprove(address(multichainAdapter), 0);\\n        USDC.safeApprove(address(multichainAdapter), 0);\\n        USDT.safeApprove(address(cbridgeAdapter), 0);\\n        USDC.safeApprove(address(cbridgeAdapter), 0);\\n    }\\n\\n    function unpause() external virtual onlyOwner whenPaused {\\n        _unpause();\\n        if (USDT.allowance(address(this), address(multichainAdapter)) == 0) {\\n            USDT.safeApprove(address(multichainAdapter), type(uint).max);\\n        }\\n        if (USDC.allowance(address(this), address(multichainAdapter)) == 0) {\\n            USDC.safeApprove(address(multichainAdapter), type(uint).max);\\n        }\\n        if (USDT.allowance(address(this), address(cbridgeAdapter)) == 0) {\\n            USDT.safeApprove(address(cbridgeAdapter), type(uint).max);\\n        }\\n        if (USDC.allowance(address(this), address(cbridgeAdapter)) == 0) {\\n            USDC.safeApprove(address(cbridgeAdapter), type(uint).max);\\n        }\\n    }\\n\\n    function setTreasuryWallet(address _wallet) external onlyOwner {\\n        require(_wallet != address(0), \\\"wallet invalid\\\");\\n        treasuryWallet = _wallet;\\n    }\\n\\n    function setAdmin(address _admin) external onlyOwner {\\n        admin = _admin;\\n    }\\n\\n    function setBiconomy(address _biconomy) external onlyOwner {\\n        trustedForwarder = _biconomy;\\n    }\\n\\n    function setMultichainAdapter(IXChainAdapter _multichainAdapter) public onlyOwner {\\n        onChangeAdapter(address(multichainAdapter), address(_multichainAdapter));\\n        multichainAdapter = _multichainAdapter;\\n    }\\n\\n    function setCBridgeAdapter(IXChainAdapter _cbridgeAdapter) public onlyOwner {\\n        onChangeAdapter(address(cbridgeAdapter), address(_cbridgeAdapter));\\n        cbridgeAdapter = _cbridgeAdapter;\\n    }\\n\\n    function onChangeAdapter(address oldAdapter, address newAdapter) internal {\\n        if (oldAdapter == newAdapter) return;\\n\\n        if (oldAdapter != address(0)) {\\n            _revokeRole(ADAPTER_ROLE, oldAdapter);\\n            USDT.safeApprove(oldAdapter, 0);\\n            USDC.safeApprove(oldAdapter, 0);\\n        }\\n        if (newAdapter != address(0)) {\\n            _setupRole(ADAPTER_ROLE, newAdapter);\\n            USDC.safeApprove(newAdapter, type(uint).max);\\n            USDT.safeApprove(newAdapter, type(uint).max);\\n        }\\n    }\\n\\n    function setSwapper(ISwap _swap) public onlyOwner {\\n        onChangeTokenSpender(address(swap), address(_swap));\\n        swap = _swap;\\n    }\\n\\n    function onChangeTokenSpender(address oldSpender, address newSpender) internal {\\n        if (oldSpender == newSpender) return;\\n\\n        if (oldSpender != address(0)) {\\n            USDT.safeApprove(oldSpender, 0);\\n            USDC.safeApprove(oldSpender, 0);\\n        }\\n        if (newSpender != address(0)) {\\n            USDC.safeApprove(newSpender, type(uint).max);\\n            USDT.safeApprove(newSpender, type(uint).max);\\n        }\\n    }\\n\\n    function setUserAgents(uint[] memory _chainIds, address[] memory _userAgents) external onlyOwner {\\n        uint length = _chainIds.length;\\n        for (uint i = 0; i < length; i++) {\\n            uint chainId = _chainIds[i];\\n            require(chainId != 0, \\\"Invalid chainID\\\");\\n            userAgents[chainId] = _userAgents[i];\\n        }\\n    }\\n\\n    function setCallAdapterTypes(uint[] memory _chainIds, AdapterType[] memory _adapterTypes) external onlyOwner {\\n        uint length = _chainIds.length;\\n        for (uint i = 0; i < length; i++) {\\n            uint chainId = _chainIds[i];\\n            require(chainId != 0, \\\"Invalid chainID\\\");\\n            callAdapterTypes[chainId] = _adapterTypes[i];\\n        }\\n    }\\n\\n    function setGasAmounts(bytes4[] memory _selectors, uint[] memory _amounts) external onlyOwner {\\n        for (uint i = 0; i < _selectors.length; i++) {\\n            bytes4 selector = _selectors[i];\\n            gasAmounts[selector] = _amounts[i];\\n        }\\n    }\\n\\n    function setGasCosts(uint[] memory _chainIds, uint[] memory _costs) external onlyOwner {\\n        for (uint i = 0; i < _chainIds.length; i++) {\\n            uint chainId = _chainIds[i];\\n            gasCosts[chainId] = _costs[i];\\n        }\\n    }\\n\\n    function withdrawFee() external onlyOwner {\\n        Token.safeTransferETH(treasuryWallet, address(this).balance);\\n    }\\n\\n    ///@notice Never revert in this function. If not, cbridgeAdapter.executeMessageWithTransferRefund will be failed.\\n    function onRefunded(\\n        uint _cbridgeNonce,\\n        address _token,\\n        uint amount,\\n        uint, // _toChainId\\n        address // _to\\n    ) external onlyCBridgeAdapter {\\n        address sender = cbridgeSenders[_cbridgeNonce];\\n        if (_token == address(USDT)) usdtBalances[sender] += amount;\\n        else if (_token == address(USDC)) usdcBalances[sender] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0xdb3f0e9be4eb9a914b312b67f1b5825467972795f50d430e499083641d585d88\",\"license\":\"MIT\"},\"contracts/xchain/agent/BasicUserAgentBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"sgn-v2-contracts/contracts/message/interfaces/IMessageReceiverApp.sol\\\";\\nimport \\\"../../../libs/multiSig/GnosisSafeUpgradeable.sol\\\";\\nimport \\\"../../../libs/BaseRelayRecipient.sol\\\";\\nimport \\\"../../../libs/Const.sol\\\";\\nimport \\\"../../swap/ISwap.sol\\\";\\nimport \\\"../IXChainAdapter.sol\\\";\\n\\ninterface ICBridgeAdapter is IXChainAdapter {\\n    function nonce() external view returns (uint);\\n}\\n\\ncontract BasicUserAgentBase is\\n    BaseRelayRecipient,\\n    GnosisSafeUpgradeable,\\n    AccessControlEnumerableUpgradeable,\\n    PausableUpgradeable,\\n    OwnableUpgradeable\\n{\\n    enum AdapterType {\\n        Multichain, // Default adapter\\n        CBridge\\n    }\\n\\n    struct TransfersPerAdapter {\\n        uint[] mchainAmounts;\\n        uint[] mchainToChainIds;\\n        address[] mchainToAddresses;\\n        uint[] cbridgeAmounts;\\n        uint[] cbridgeToChainIds;\\n        address[] cbridgeToAddresses;\\n    }\\n\\n    bytes32 public constant ADAPTER_ROLE = keccak256(\\\"ADAPTER_ROLE\\\");\\n\\n    address public admin;\\n    mapping(address => uint) public nonces;\\n\\n    ISwap swap;\\n    IERC20Upgradeable public USDC;\\n    IERC20Upgradeable public USDT;\\n    // These stores the balance that is deposited directly, not cross-transferred.\\n    // And these also store the refunded amount.\\n    mapping(address => uint) public usdcBalances;\\n    mapping(address => uint) public usdtBalances;\\n\\n    IXChainAdapter public multichainAdapter;\\n    IXChainAdapter public cbridgeAdapter;\\n    // Map of transfer addresses (cbridgeAdapter's nonce => sender)\\n    mapping(uint => address) public cbridgeSenders;\\n\\n    // Map of user agents (chainId => userAgent).\\n    mapping(uint => address) public userAgents;\\n\\n    // Map of adapter types for calling (chainId => AdapterType).\\n    // AdapterType.CBridge is the default adapter because it is 0.\\n    mapping(uint => AdapterType) public callAdapterTypes;\\n\\n    // Map of gas amounts (function signature => gas amount).\\n    mapping(bytes4 => uint) public gasAmounts;\\n    // Map of gas prices (chainId => gas cost in the native token of the current chain).\\n    mapping(uint => uint) public gasCosts;\\n\\n    address public treasuryWallet;\\n\\n    event Transfer(\\n        address indexed from,\\n        address token,\\n        uint indexed amount,\\n        uint fromChainId,\\n        uint indexed toChainId,\\n        address to,\\n        AdapterType adapterType,\\n        uint nonce\\n    );\\n\\n    function _msgSender() internal override(ContextUpgradeable, BaseRelayRecipient) view returns (address) {\\n        return BaseRelayRecipient._msgSender();\\n    }\\n\\n    function versionRecipient() external pure override returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    function checkSignature(bytes32 data, bytes calldata _signature) view internal {\\n        require(isValidSignature(admin, abi.encodePacked(data), _signature), \\\"Invalid signature\\\");\\n    }\\n\\n    function _transfer(\\n        address _from,\\n        address _token,\\n        uint[] memory _amounts,\\n        uint[] memory _toChainIds,\\n        address[] memory _toAddresses,\\n        AdapterType[] memory _adapterTypes,\\n        uint _length,\\n        uint _suppliedFee,\\n        bool _skim // It's a flag to calculate fee without execution\\n    ) internal returns (uint _feeAmt, uint _leftFee) {\\n        _leftFee = _suppliedFee;\\n        TransfersPerAdapter memory transfers = splitTranfersPerAdapter(_amounts, _toChainIds, _toAddresses, _adapterTypes, _length);\\n\\n        if (_skim == false && transfers.mchainAmounts.length > 0) {\\n            transferThroughMultichain(_from, _token, transfers);\\n        }\\n        if (transfers.cbridgeAmounts.length > 0) {\\n            (_feeAmt, _leftFee) = transferThroughCBridge(_from, _token, transfers, _leftFee, _skim);\\n        }\\n    }\\n\\n    function transferThroughMultichain (\\n        address _from,\\n        address _token,\\n        TransfersPerAdapter memory _transfers\\n    ) private {\\n        uint mchainReqCount = _transfers.mchainAmounts.length;\\n        multichainAdapter.transfer(_token, _transfers.mchainAmounts, _transfers.mchainToChainIds, _transfers.mchainToAddresses);\\n\\n        uint chainId = Token.getChainID();\\n        for (uint i = 0; i < mchainReqCount; i ++) {\\n            emit Transfer(_from, _token, _transfers.mchainAmounts[i], chainId, _transfers.mchainToChainIds[i], _transfers.mchainToAddresses[i], AdapterType.Multichain, 0);\\n        }\\n    }\\n\\n    function transferThroughCBridge (\\n        address _from,\\n        address _token,\\n        TransfersPerAdapter memory _transfers,\\n        uint _suppliedFee,\\n        bool _skim // It's a flag to calculate fee without execution\\n    ) private returns (uint _feeAmt, uint _leftFee) {\\n        _leftFee = _suppliedFee;\\n        uint cbridgeReqCount = _transfers.cbridgeAmounts.length;\\n        uint protocolFee = cbridgeAdapter.calcTransferFee() * cbridgeReqCount;\\n        _feeAmt = protocolFee + (gasAmounts[IMessageReceiverApp.executeMessageWithTransferRefund.selector] * gasCosts[Token.getChainID()] * cbridgeReqCount);\\n\\n        if (_skim == false && _leftFee >= _feeAmt) {\\n            _leftFee -= _feeAmt;\\n            _transferThroughCBridge(_from, _token, _transfers, protocolFee);\\n        }\\n    }\\n\\n    function _transferThroughCBridge (\\n        address _from,\\n        address _token,\\n        TransfersPerAdapter memory _transfers,\\n        uint _protocolFee\\n    ) private {\\n        uint cbridgeNonce = ICBridgeAdapter(address(cbridgeAdapter)).nonce();\\n        cbridgeAdapter.transfer{value: _protocolFee}(_token, _transfers.cbridgeAmounts, _transfers.cbridgeToChainIds, _transfers.cbridgeToAddresses);\\n\\n        uint chainId = Token.getChainID();\\n        for (uint i = 0; i < _transfers.cbridgeAmounts.length; i ++) {\\n            uint nonce = cbridgeNonce + i;\\n            cbridgeSenders[nonce] = _from;\\n            emit Transfer(_from, _token, _transfers.cbridgeAmounts[i], chainId, _transfers.cbridgeToChainIds[i], _transfers.cbridgeToAddresses[i], AdapterType.CBridge, nonce);\\n        }\\n    }\\n\\n    function splitTranfersPerAdapter (\\n        uint[] memory _amounts,\\n        uint[] memory _toChainIds,\\n        address[] memory _toAddresses,\\n        AdapterType[] memory _adapterTypes,\\n        uint length\\n    ) private pure returns (TransfersPerAdapter memory _transfers) {\\n        uint mchainReqCount;\\n        uint cbridgeReqCount;\\n        for (uint i = 0; i < length; i ++) {\\n            if (_adapterTypes[i] == AdapterType.Multichain) mchainReqCount ++;\\n            else if (_adapterTypes[i] == AdapterType.CBridge) cbridgeReqCount ++;\\n        }\\n\\n        _transfers = TransfersPerAdapter({\\n            mchainAmounts: new uint[](mchainReqCount),\\n            mchainToChainIds: new uint[](mchainReqCount),\\n            mchainToAddresses: new address[](mchainReqCount),\\n            cbridgeAmounts: new uint[](cbridgeReqCount),\\n            cbridgeToChainIds: new uint[](cbridgeReqCount),\\n            cbridgeToAddresses: new address[](cbridgeReqCount)\\n        });\\n\\n        mchainReqCount = 0;\\n        cbridgeReqCount = 0;\\n        for (uint i = 0; i < length; i ++) {\\n            if (_adapterTypes[i] == AdapterType.Multichain) {\\n                _transfers.mchainAmounts[mchainReqCount] = _amounts[i];\\n                _transfers.mchainToChainIds[mchainReqCount] = _toChainIds[i];\\n                _transfers.mchainToAddresses[mchainReqCount] = _toAddresses[i];\\n                mchainReqCount ++;\\n            } else if (_adapterTypes[i] == AdapterType.CBridge) {\\n                _transfers.cbridgeAmounts[cbridgeReqCount] = _amounts[i];\\n                _transfers.cbridgeToChainIds[cbridgeReqCount] = _toChainIds[i];\\n                _transfers.cbridgeToAddresses[cbridgeReqCount] = _toAddresses[i];\\n                cbridgeReqCount ++;\\n            } else {\\n                revert(\\\"Invalid adapter type\\\");\\n            }\\n        }\\n    }\\n\\n    function _call(\\n        uint _toChainId,\\n        address _targetContract,\\n        uint _targetCallValue,\\n        bytes memory _targetCallData,\\n        bytes4 _targetFuncSelector,\\n        uint _suppliedFee,\\n        bool _skim // It's a flag to calculate fee without execution\\n    ) internal returns (uint _feeAmt, uint _leftFee) {\\n        _leftFee = _suppliedFee;\\n        require(_targetContract != address(0), \\\"Invalid targetContract\\\");\\n        IXChainAdapter adapter = (callAdapterTypes[_toChainId] == AdapterType.Multichain) ? multichainAdapter : cbridgeAdapter;\\n\\n        uint protocolFee = adapter.calcCallFee(_toChainId, _targetContract, _targetCallValue, _targetCallData);\\n        _feeAmt = protocolFee;\\n        if (adapter == cbridgeAdapter) {\\n            _feeAmt += (gasAmounts[_targetFuncSelector] * gasCosts[_toChainId]);\\n        }\\n\\n        if (_skim == false && _leftFee >= _feeAmt) {\\n            _leftFee -= _feeAmt;\\n            adapter.call{value: protocolFee}(_toChainId, _targetContract, _targetCallValue, _targetCallData);\\n        }\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[36] private __gap; // NOTE Change it with one more amount when it is deployed on testnet\\n}\\n\",\"keccak256\":\"0x2da070e2452a418d54076881de2ee2f09e388b2a97da081ee221392371dce8a0\",\"license\":\"MIT\"},\"contracts/xchain/agent/IUserAgent.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\ninterface IUserAgent {\\n    function onRefunded(uint _nonce, address _token, uint amount, uint _toChainId, address _to) external;\\n}\\n\",\"keccak256\":\"0xa79a92777f4e340ae6b68cf071003374c23c75d548781289ff8550f1848c5131\",\"license\":\"MIT\"},\"contracts/xchain/agent/test/UserAgentTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"sgn-v2-contracts/contracts/message/interfaces/IMessageReceiverApp.sol\\\";\\nimport \\\"../../../../libs/Const.sol\\\";\\nimport \\\"../../../../libs/Token.sol\\\";\\nimport \\\"../../../bni/constant/AuroraConstantTest.sol\\\";\\nimport \\\"../../../bni/constant/AvaxConstantTest.sol\\\";\\nimport \\\"../../../bni/IBNIMinter.sol\\\";\\nimport \\\"../../../bni/IBNIVault.sol\\\";\\nimport \\\"../../../swap/ISwap.sol\\\";\\nimport \\\"../BasicUserAgent.sol\\\";\\nimport \\\"../BNIUserAgentBase.sol\\\";\\nimport \\\"../../../bni/constant/AuroraConstantTest.sol\\\";\\nimport \\\"../../../bni/constant/AvaxConstantTest.sol\\\";\\nimport \\\"../../../bni/constant/BscConstantTest.sol\\\";\\nimport \\\"../../../bni/constant/EthConstantTest.sol\\\";\\nimport \\\"../../../bni/constant/FtmConstantTest.sol\\\";\\nimport \\\"../../../bni/constant/MaticConstantTest.sol\\\";\\n\\ninterface IUserAgentSubTest {\\n    function gatherByAdmin(address _account, uint _toChainId, BasicUserAgentBase.AdapterType _adapterType) external;\\n}\\n\\ncontract UserAgentTest is BNIUserAgentBase, BasicUserAgent {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    uint public testValue;\\n\\n    event TestCall(uint newTestValue);\\n\\n    function initialize1(\\n        address _subImpl,\\n        address _treasury,\\n        address _admin,\\n        ISwap _swap,\\n        IXChainAdapter _multichainAdapter, IXChainAdapter _cbridgeAdapter,\\n        IBNIMinter _bniMinter, IBNIVault _bniVault\\n    ) external virtual initializer {\\n        __Ownable_init_unchained();\\n        _setupRole(DEFAULT_ADMIN_ROLE, owner());\\n        __GnosisSafe_init();\\n\\n        USDC = IERC20Upgradeable(Token.getTestTokenAddress(Const.TokenID.USDC));\\n        USDT = IERC20Upgradeable(getTestTokenAddress());\\n\\n        treasuryWallet = _treasury;\\n        admin = _admin;\\n        setSwapper(_swap);\\n        setMultichainAdapter(_multichainAdapter);\\n        setCBridgeAdapter(_cbridgeAdapter);\\n\\n        subImpl = _subImpl;\\n        chainIdOnLP = AvaxConstantTest.CHAINID;\\n        isLPChain = (chainIdOnLP == Token.getChainID());\\n        callAdapterTypes[AuroraConstantTest.CHAINID] = AdapterType.CBridge; // Multichain is not supported on Aurora\\n\\n        bniMinter = _bniMinter;\\n        setBNIVault(_bniVault);\\n\\n        gasAmounts[IBNIMinter.initDepositByAdmin.selector] = 133213;\\n        gasAmounts[IBNIMinter.mintByAdmin.selector] = 168205;\\n        gasAmounts[IBNIMinter.burnByAdmin.selector] = 153743;\\n        gasAmounts[IBNIMinter.exitWithdrawalByAdmin.selector] = 69845;\\n        gasAmounts[IBNIVault.depositByAdmin.selector] = 580678;\\n        gasAmounts[IBNIVault.withdrawPercByAdmin.selector] = 716679;\\n        gasAmounts[IUserAgentSubTest.gatherByAdmin.selector] = 428753;\\n        gasAmounts[IMessageReceiverApp.executeMessageWithTransferRefund.selector] = 164615; // It's the gas amount of refund transaction on cBridge\\n    }\\n\\n    function getTestTokenAddress() internal view returns (address) {\\n        uint chainId = Token.getChainID();\\n        if (chainId == AuroraConstantTest.CHAINID) {\\n            return AuroraConstantTest.USDT;\\n        } else if (chainId == AvaxConstantTest.CHAINID) {\\n            return AvaxConstantTest.USDT;\\n        } else if (chainId == BscConstantTest.CHAINID) {\\n            return 0x7d43AABC515C356145049227CeE54B608342c0ad; // It' used in cBridge\\n        } else if (chainId == EthConstantTest.CHAINID) {\\n            return EthConstantTest.USDT;\\n        } else if (chainId == FtmConstantTest.CHAINID) {\\n            return 0x7d43AABC515C356145049227CeE54B608342c0ad; // It's used in cBridge.\\n        } else if (chainId == MaticConstantTest.CHAINID) {\\n            return MaticConstantTest.USDT;\\n        }\\n        return address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual override(BasicUserAgent, OwnableUpgradeable) onlyOwner {\\n        BasicUserAgent.transferOwnership(newOwner);\\n    }\\n\\n    function setBNIMinter(IBNIMinter _bniMinter) external onlyOwner {\\n        bniMinter = _bniMinter;\\n    }\\n\\n    function setBNIVault(IBNIVault _bniVault) public onlyOwner {\\n        address oldVault = address(bniVault);\\n        if (oldVault != address(0)) {\\n            USDT.safeApprove(oldVault, 0);\\n        }\\n\\n        bniVault = _bniVault;\\n        if (address(_bniVault) != address(0) && USDT.allowance(address(this), address(_bniVault)) == 0) {\\n            USDT.safeApprove(address(_bniVault), type(uint).max);\\n        }\\n    }\\n\\n    function testCall(uint _toChainId, uint _value) external payable virtual onlyOwner returns (uint _feeAmt) {\\n        address account = _msgSender();\\n        uint leftFee = msg.value;\\n        if (!isLPChain) {\\n            bytes memory _targetCallData = abi.encodeWithSelector(\\n                UserAgentTest.testCallByAdmin.selector,\\n                _value\\n            );\\n            (_feeAmt, leftFee) = _call(_toChainId, userAgents[_toChainId], 0, _targetCallData,\\n                                        UserAgentTest.testCallByAdmin.selector, leftFee, false);\\n        }\\n        if (leftFee > 0) Token.safeTransferETH(account, leftFee);\\n    }\\n\\n    function testCallByAdmin(uint _value) external onlyRole(ADAPTER_ROLE) {\\n        testValue = _value;\\n        emit TestCall(_value);\\n    }\\n\\n    /// @dev It calls initDepositByAdmin of BNIMinter.\\n    /// @param _pool total pool in USD\\n    /// @param _USDT6Amt USDT with 6 decimals to be deposited\\n    function initDeposit(uint _pool, uint _USDT6Amt) external payable virtual whenNotPaused onlyOwner returns (uint _feeAmt) {\\n        address account = _msgSender();\\n        uint leftFee = msg.value;\\n\\n        if (isLPChain) {\\n            bniMinter.initDepositByAdmin(account, _pool, _USDT6Amt);\\n        } else {\\n            bytes memory _targetCallData = abi.encodeWithSelector(\\n                UserAgentTest.initDepositByAdmin.selector,\\n                account, _pool, _USDT6Amt\\n            );\\n            (_feeAmt, leftFee) = _call(chainIdOnLP, userAgents[chainIdOnLP], 0, _targetCallData,\\n                                        IBNIMinter.initDepositByAdmin.selector, leftFee, false);\\n        }\\n        if (leftFee > 0) Token.safeTransferETH(account, leftFee);\\n    }\\n\\n    function initDepositByAdmin(address _account, uint _pool, uint _USDT6Amt) external onlyRole(ADAPTER_ROLE) {\\n        bniMinter.initDepositByAdmin(_account, _pool, _USDT6Amt);\\n    }\\n\\n    /// @dev It transfers tokens to user agents\\n    function transfer(\\n        uint[] memory _amounts,\\n        uint[] memory _toChainIds,\\n        AdapterType[] memory _adapterTypes\\n    ) external payable returns (uint _feeAmt) {\\n        _amounts;\\n        _toChainIds;\\n        _adapterTypes;\\n        _feeAmt;\\n        delegateAndReturn();\\n    }\\n\\n    /// @dev It calls depositByAdmin of BNIVaults.\\n    function deposit(\\n        uint[] memory _toChainIds,\\n        address[] memory _tokens,\\n        uint[] memory _USDTAmts,\\n        uint _minterNonce\\n    ) external payable returns (uint _feeAmt) {\\n        _toChainIds;\\n        _tokens;\\n        _USDTAmts;\\n        _minterNonce;\\n        _feeAmt;\\n        delegateAndReturn();\\n    }\\n\\n    function depositByAgent(\\n        address _account,\\n        address[] memory _tokens,\\n        uint[] memory _USDTAmts,\\n        uint _minterNonce\\n    ) external {\\n        _account;\\n        _tokens;\\n        _USDTAmts;\\n        _minterNonce;\\n        delegateAndReturn();\\n    }\\n\\n    /// @dev It calls mintByAdmin of BNIMinter.\\n    function mint(uint _USDT6Amt) external payable returns (uint _feeAmt) {\\n        _USDT6Amt;\\n        _feeAmt;\\n        delegateAndReturn();\\n    }\\n\\n    function mintByAdmin(address _account, uint _USDT6Amt) external {\\n        _account;\\n        _USDT6Amt;\\n        delegateAndReturn();\\n    }\\n\\n    /// @dev It calls burnByAdmin of BNIMinter.\\n    /// @param _pool total pool in USD\\n    /// @param _share amount of shares\\n    function burn(uint _pool, uint _share) external payable returns (uint _feeAmt) {\\n        _pool;\\n        _share;\\n        _feeAmt;\\n        delegateAndReturn();\\n    }\\n\\n    function burnByAdmin(address _account, uint _pool, uint _share) external {\\n        _account;\\n        _pool;\\n        _share;\\n        delegateAndReturn();\\n    }\\n\\n    /// @dev It calls withdrawPercByAdmin of BNIVaults.\\n    function withdraw(\\n        uint[] memory _chainIds, uint _sharePerc, uint _minterNonce\\n    ) external payable returns (uint _feeAmt) {\\n        _chainIds;\\n        _sharePerc;\\n        _minterNonce;\\n        _feeAmt;\\n        delegateAndReturn();\\n    }\\n\\n    function withdrawPercByAgent(\\n        address _account, uint _sharePerc, uint _minterNonce\\n    ) external {\\n        _account;\\n        _sharePerc;\\n        _minterNonce;\\n        delegateAndReturn();\\n    }\\n\\n    /// @dev It gathers withdrawn tokens of the user from user agents.\\n    function gather(\\n        uint[] memory _fromChainIds,\\n        AdapterType[] memory _adapterTypes\\n    ) external payable returns (uint _feeAmt) {\\n        _fromChainIds;\\n        _adapterTypes;\\n        _feeAmt;\\n        delegateAndReturn();\\n    }\\n\\n    function gatherByAdmin(\\n        address _account, uint _toChainId, AdapterType _adapterType\\n    ) external {\\n        _account;\\n        _toChainId;\\n        _adapterType;\\n        delegateAndReturn();\\n    }\\n\\n    /// @dev It calls exitWithdrawalByAdmin of BNIMinter.\\n    /// @param _gatheredAmount is the amount of token that is gathered.\\n    /// @notice _gatheredAmount doesn't include the balance which is withdrawan in this agent.\\n    function exitWithdrawal(uint _gatheredAmount) external payable returns (uint _feeAmt) {\\n        _gatheredAmount;\\n        _feeAmt;\\n        delegateAndReturn();\\n    }\\n\\n    function exitWithdrawalByAdmin(address _account) external {\\n        _account;\\n        delegateAndReturn();\\n    }\\n\\n    /// @dev It takes out tokens from this agent.\\n    /// @param _gatheredAmount is the amount of token that is gathered.\\n    /// @notice _gatheredAmount doesn't include the balance which is withdrawan in this agent.\\n    function takeOut(uint _gatheredAmount) external {\\n        _gatheredAmount;\\n        delegateAndReturn();\\n    }\\n\\n    /**\\n     * @dev Delegate to sub contract\\n     */\\n    function setSubImpl(address _subImpl) external onlyOwner {\\n        require(_subImpl != address(0), \\\"Invalid address\\\");\\n        subImpl = _subImpl;\\n    }\\n\\n    function delegateAndReturn() private returns (bytes memory) {\\n        (bool success, ) = subImpl.delegatecall(msg.data);\\n\\n        assembly {\\n            let free_mem_ptr := mload(0x40)\\n            returndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n            switch success\\n            case 0 { revert(free_mem_ptr, returndatasize()) }\\n            default { return(free_mem_ptr, returndatasize()) }\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xee413ab0edad0f8d4ecc522244c055964e1fa6470751480e783deebab981b50e\",\"license\":\"MIT\"},\"interfaces/IGnosisSafe.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity  0.8.9;\\r\\n\\r\\ninterface IGnosisSafe {\\r\\n    function getThreshold() external view returns (uint);\\r\\n    function isOwner(address owner) external view returns (bool);\\r\\n    function getOwners() external view returns (address[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x3d25da7867af583ad97d084914f3da48a72bad8dcf4ef9c6d1e4bde707132984\",\"license\":\"MIT\"},\"interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.9;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\",\"keccak256\":\"0x2feb0e97ff08902dc4fc0a993753af45c01fb5565f281cefc877f4bc490c8abf\",\"license\":\"MIT\"},\"libs/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    /*\\n     * require a function to be called through GSN only\\n     */\\n    modifier trustedForwarderOnly() {\\n        require(msg.sender == address(trustedForwarder), \\\"Function can only be called through the trusted Forwarder\\\");\\n        _;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n}\",\"keccak256\":\"0x4e6a1c99ec5a0369c516e18940336732c07df7c91f048042926154305b8fb720\",\"license\":\"MIT\"},\"libs/Const.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Const {\\r\\n\\r\\n    uint internal constant DENOMINATOR = 10000;\\r\\n\\r\\n    uint internal constant APR_SCALE = 1e18;\\r\\n    \\r\\n    uint internal constant YEAR_IN_SEC = 365 days;\\r\\n\\r\\n    address internal constant NATIVE_ASSET = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n\\r\\n    enum TokenID { USDT, USDC }\\r\\n}\\r\\n\",\"keccak256\":\"0xecdadc52a09a3242feae68d278fd152ab66e18c81c6aeca076ee1bb7d29a3fd7\",\"license\":\"MIT\"},\"libs/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../contracts/bni/constant/AuroraConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/AuroraConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/AvaxConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/AvaxConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/BscConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/BscConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/EthConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/EthConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/FtmConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/MaticConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/MaticConstantTest.sol\\\";\\r\\nimport \\\"./Const.sol\\\";\\r\\n\\r\\nlibrary Token {\\r\\n    function changeDecimals(uint amount, uint curDecimals, uint newDecimals) internal pure returns(uint) {\\r\\n        if (curDecimals == newDecimals) {\\r\\n            return amount;\\r\\n        } else if (curDecimals < newDecimals) {\\r\\n            return amount * (10 ** (newDecimals - curDecimals));\\r\\n        } else {\\r\\n            return amount / (10 ** (curDecimals - newDecimals));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, \\\"ETH transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function getChainID() internal view returns (uint256 id) {\\r\\n        assembly {\\r\\n            id := chainid()\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bytesToAddress(bytes memory bys) internal pure returns (address addr) {\\r\\n        assembly {\\r\\n            addr := mload(add(bys, 20))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTokenAddress(Const.TokenID _tokenId) internal view returns (address) {\\r\\n        uint chainId = getChainID();\\r\\n        if (chainId == AuroraConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AuroraConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AuroraConstant.USDT;\\r\\n        } else if (chainId == AvaxConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AvaxConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AvaxConstant.USDT;\\r\\n        } else if (chainId == BscConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return BscConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return BscConstant.USDT;\\r\\n        } else if (chainId == EthConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return EthConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return EthConstant.USDT;\\r\\n        } else if (chainId == MaticConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return MaticConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return MaticConstant.USDT;\\r\\n        }\\r\\n        return address(0);\\r\\n    }\\r\\n\\r\\n    function getTestTokenAddress(Const.TokenID _tokenId) internal view returns (address) {\\r\\n        uint chainId = getChainID();\\r\\n        if (chainId == AuroraConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AuroraConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AuroraConstantTest.USDT;\\r\\n        } else if (chainId == AvaxConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AvaxConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AvaxConstantTest.USDT;\\r\\n        } else if (chainId == BscConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return BscConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return BscConstantTest.USDT;\\r\\n        } else if (chainId == EthConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return EthConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return EthConstantTest.USDT;\\r\\n        } else if (chainId == FtmConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return FtmConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return FtmConstantTest.USDT;\\r\\n        } else if (chainId == MaticConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return MaticConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return MaticConstantTest.USDT;\\r\\n        }\\r\\n        return address(0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0f1b9bf679aa442dbda325b11ab40f935af4c3aa99787fb0c5e1ef4b3077a6ed\",\"license\":\"MIT\"},\"libs/multiSig/GnosisSafeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"../../interfaces/IGnosisSafe.sol\\\";\\r\\nimport \\\"../Token.sol\\\";\\r\\nimport \\\"./Signature.sol\\\";\\r\\n\\r\\ncontract GnosisSafeUpgradeable is Initializable {\\r\\n    using AddressUpgradeable for address;\\r\\n\\r\\n    // keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\")\\r\\n    bytes32 constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\\r\\n\\r\\n    bytes32 separator;\\r\\n\\r\\n    function __GnosisSafe_init() internal onlyInitializing {\\r\\n        separator = domainSeparator();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\\r\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\r\\n     * @param data That should be signed (this is passed to an external validator contract)\\r\\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\\r\\n     */\\r\\n    function checkSignatures(\\r\\n        IGnosisSafe safe,\\r\\n        bytes32 dataHash,\\r\\n        bytes memory data,\\r\\n        bytes memory signatures\\r\\n    ) internal view returns (bool) {\\r\\n        // Load threshold to avoid multiple storage loads\\r\\n        uint256 _threshold = safe.getThreshold();\\r\\n        // Check that a threshold is set\\r\\n        if (_threshold == 0) return false;\\r\\n        return checkNSignatures(safe, dataHash, data, signatures, _threshold);\\r\\n    }\\r\\n\\r\\n    function isAddressIncluded(address[] memory items, address item) internal pure returns (bool) {\\r\\n        uint length = items.length;\\r\\n        for (uint i = 0; i < length; i++) {\\r\\n            if (items[i] == item) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\\r\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\r\\n     * @param data That should be signed (this is passed to an external validator contract)\\r\\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\\r\\n     * @param requiredSignatures Amount of required valid signatures.\\r\\n     */\\r\\n    function checkNSignatures(\\r\\n        IGnosisSafe safe,\\r\\n        bytes32 dataHash,\\r\\n        bytes memory data,\\r\\n        bytes memory signatures,\\r\\n        uint256 requiredSignatures\\r\\n    ) internal view returns (bool) {\\r\\n        // Check that the provided signature data is not too short\\r\\n        if (signatures.length < (requiredSignatures*65)) return false;\\r\\n        address currentOwner;\\r\\n        address[] memory owners = safe.getOwners();\\r\\n        uint8 v;\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        uint256 i;\\r\\n\\r\\n        for (i = 0; i < requiredSignatures; i++) {\\r\\n            (v, r, s) = Signature.signatureSplit(signatures, i);\\r\\n            if (v == 0) {\\r\\n                // If v is 0 then it is a contract signature\\r\\n                // When handling contract signatures the address of the contract is encoded into r\\r\\n                currentOwner = address(uint160(uint256(r)));\\r\\n\\r\\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\\r\\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\\r\\n                // Here we only check that the pointer is not pointing inside the part that is being processed\\r\\n                if (uint256(s) < (requiredSignatures*65)) return false;\\r\\n\\r\\n                // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\\r\\n                if((uint256(s) + 32) > signatures.length) return false;\\r\\n\\r\\n                // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\\r\\n                uint256 contractSignatureLen;\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    contractSignatureLen := mload(add(add(signatures, s), 0x20))\\r\\n                }\\r\\n                if((uint256(s) + 32 + contractSignatureLen) > signatures.length) return false;\\r\\n\\r\\n                // Check signature\\r\\n                bytes memory contractSignature;\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\\r\\n                    contractSignature := add(add(signatures, s), 0x20)\\r\\n                }\\r\\n                if (_isValidSignature(IGnosisSafe(currentOwner), data, contractSignature) == false) return false;\\r\\n            } else {\\r\\n                // Default is the ecrecover flow with the provided data hash\\r\\n                // Use ecrecover with the messageHash for EOA signatures\\r\\n                currentOwner = ecrecover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", dataHash)), v, r, s);\\r\\n            }\\r\\n            if (isAddressIncluded(owners, currentOwner) == false) return false;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)\\r\\n     * @dev Should return whether the signature provided is valid for the provided data.\\r\\n     * @param _data Arbitrary length data signed on the behalf of address(msg.sender)\\r\\n     * @param _signature Signature byte array associated with _data\\r\\n     * @return a bool upon valid or invalid signature with corresponding _data\\r\\n     */\\r\\n    function _isValidSignature(IGnosisSafe _safe, bytes memory _data, bytes memory _signature) internal view returns (bool) {\\r\\n        bytes32 dataHash = getMessageHashForSafe(_data);\\r\\n        return checkSignatures(_safe, dataHash, _data, _signature);\\r\\n    }\\r\\n\\r\\n    function isValidSignature(address _account, bytes memory _data, bytes calldata _signature) public view returns (bool) {\\r\\n        bytes32 dataHash = getMessageHashForSafe(_data);\\r\\n        if (_account.isContract()) {\\r\\n            return checkSignatures(IGnosisSafe(_account), dataHash, _data, _signature);\\r\\n        } else {\\r\\n            (uint8 v, bytes32 r, bytes32 s) = Signature.signatureSplit(_signature, 0);\\r\\n            bytes32 messageDigest = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", dataHash));\\r\\n            address signer = ecrecover(messageDigest, v, r, s);\\r\\n            return (signer == _account);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @dev Returns hash of a message that can be signed by owners.\\r\\n    /// @param message Message that should be hashed\\r\\n    /// @return Message hash.\\r\\n    function getMessageHashForSafe(bytes memory message) public view returns (bytes32) {\\r\\n        bytes32 safeMessageHash = keccak256(message);\\r\\n        return keccak256(abi.encodePacked(bytes1(0x19), bytes1(0x01), separator, safeMessageHash));\\r\\n    }\\r\\n\\r\\n    function domainSeparator() internal view returns (bytes32) {\\r\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, Token.getChainID(), address(this)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x5bdab26d9aff767e3991f906c00008dc3b41c624d9b9087bb07d897135698906\",\"license\":\"MIT\"},\"libs/multiSig/Signature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Signature {\\r\\n\\r\\n    /// @dev divides bytes signature into `uint8 v, bytes32 r, bytes32 s`.\\r\\n    /// @notice Make sure to perform a bounds check for @param pos, to avoid out of bounds access on @param signatures\\r\\n    /// @param pos which signature to read. A prior bounds check of this parameter should be performed, to avoid out of bounds access\\r\\n    /// @param signatures concatenated rsv signatures\\r\\n    function signatureSplit(bytes memory signatures, uint256 pos) internal pure returns (\\r\\n        uint8 v, bytes32 r, bytes32 s\\r\\n    ) {\\r\\n        // The signature format is a compact form of:\\r\\n        //   {bytes32 r}{bytes32 s}{uint8 v}\\r\\n        // Compact means, uint8 is not padded to 32 bytes.\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            let signaturePos := mul(0x41, pos)\\r\\n            r := mload(add(signatures, add(signaturePos, 0x20)))\\r\\n            s := mload(add(signatures, add(signaturePos, 0x40)))\\r\\n            // Here we are loading the last 32 bytes, including 31 bytes\\r\\n            // of 's'. There is no 'mload8' to do this.\\r\\n            //\\r\\n            // 'byte' is not working due to the Solidity parser, so lets\\r\\n            // use the second best option, 'and'\\r\\n            v := and(mload(add(signatures, add(signaturePos, 0x41))), 0xff)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x726531cbfd1b0f2da12627a90fd5367dd6f4625a97a4c778cae7db06faee2a12\",\"license\":\"MIT\"},\"sgn-v2-contracts/contracts/message/interfaces/IMessageReceiverApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageReceiverApp {\\n    enum ExecutionStatus {\\n        Fail, // execution failed, finalized\\n        Success, // execution succeeded, finalized\\n        Retry // execution rejected, can retry later\\n    }\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Only called by MessageBus (MessageBusReceiver) if\\n     *         1. executeMessageWithTransfer reverts, or\\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver)\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n}\\n\",\"keccak256\":\"0x9e4d6ec7303c40c1a8c897655c3d6ef6ae1f9fa7e8c806e7c6878ff01b51e67b\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506151bd806100206000396000f3fe60806040526004361061044b5760003560e01c80637ecebe0011610234578063c54e44eb1161012e578063e941fa78116100b6578063f77de4861161007a578063f77de48614610d4d578063f7bb364c14610d68578063f851a44014610d83578063fb76bb7e14610da4578063fc637c3c14610db257600080fd5b8063e941fa7814610cc1578063e9e81a6a14610ca6578063f203d04714610cd6578063f2ea161814610cf6578063f2fde38b14610d2d57600080fd5b8063cd6c7f2d116100fd578063cd6c7f2d14610c3a578063d547741f14610c4d578063d843a40014610c6d578063e5293eca14610c93578063e629f7b314610ca657600080fd5b8063c54e44eb14610bb9578063c7205bce14610bda578063ca15c87314610bfa578063caffbec714610c1a57600080fd5b80639c82f2a4116101bc578063a8602fea11610180578063a8602fea14610b38578063a99c68c514610b58578063abe57f8714610b02578063af3da2f414610b86578063b390c0ab14610ba657600080fd5b80639c82f2a414610ac25780639e17747a14610ae2578063a0712d6814610b02578063a217fddf14610b15578063a7f4bdce14610b2a57600080fd5b806389a302711161020357806389a3027114610a2b5780638af5de7214610a4c5780638da5cb5b14610a635780639010d07c14610a8257806391d1485414610aa257600080fd5b80637ecebe00146109a85780638033a805146109d65780638456cb59146109f6578063897fd46914610a0b57600080fd5b8063407a2e9811610345578063582712b1116102cd5780636ebf33ce116102915780636ebf33ce146108fc5780636f6a886214610933578063704b6c0214610953578063715018a6146109735780637da0a8771461098857600080fd5b8063582712b1146108705780635c975abb146108905780635f2b3737146108a8578063615ce6b4146108c857806363032feb146108db57600080fd5b8063486ff0cd11610314578063486ff0cd146107a25780634d944755146107d2578063572b6c05146107f257806357cdd7f914610821578063582489cb1461084257600080fd5b8063407a2e981461071357806343a463c7146107415780634626402b14610761578063472c38ff1461078257600080fd5b8063218253cc116103d35780632f2ff15d116103975780632f2ff15d1461066057806331e8df891461068057806336568abe146106a057806339dacedb146106c05780633f4ba83a146106fe57600080fd5b8063218253cc146105bd578063248a9ca3146105d0578063278758a81461060057806328054fb7146106205780632aaf62d71461064057600080fd5b80630d8b76a81161041a5780630d8b76a8146105165780631459457a14610538578063187f3c541461055857806319463093146105865780631a5787d8146105a657600080fd5b8063013dee701461045757806301ffc9a71461049557806302a882e6146104c55780630c3a1821146104f557600080fd5b3661045257005b600080fd5b34801561046357600080fd5b5061019554610478906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156104a157600080fd5b506104b56104b0366004614468565b610dd2565b604051901515815260200161048c565b3480156104d157600080fd5b506104e760008051602061516883398151915281565b60405190815260200161048c565b34801561050157600080fd5b5061016654610478906001600160a01b031681565b34801561052257600080fd5b50610536610531366004614498565b610dfd565b005b34801561054457600080fd5b506105366105533660046144b5565b610e72565b34801561056457600080fd5b506104e7610573366004614526565b61016c6020526000908152604090205481565b34801561059257600080fd5b506104e76105a13660046145f4565b611025565b3480156105b257600080fd5b506104e76101925481565b6104e76105cb366004614727565b611071565b3480156105dc57600080fd5b506104e76105eb366004614526565b60009081526097602052604090206001015490565b34801561060c57600080fd5b5061053661061b366004614498565b611083565b34801561062c57600080fd5b5061053661063b3660046147ae565b6111ca565b34801561064c57600080fd5b5061053661065b366004614526565b6111d8565b34801561066c57600080fd5b5061053661067b3660046147ec565b61122d565b34801561068c57600080fd5b5061053661069b366004614498565b611257565b3480156106ac57600080fd5b506105366106bb3660046147ec565b6112db565b3480156106cc57600080fd5b506106f16106db366004614526565b61016a6020526000908152604090205460ff1681565b60405161048c9190614832565b34801561070a57600080fd5b50610536611365565b34801561071f57600080fd5b506104e761072e366004614468565b61016b6020526000908152604090205481565b34801561074d57600080fd5b5061053661075c36600461485a565b6116b2565b34801561076d57600080fd5b5061016d54610478906001600160a01b031681565b34801561078e57600080fd5b5061053661079d36600461488f565b611744565b3480156107ae57600080fd5b5060408051808201825260018152603160f81b6020820152905161048c919061492f565b3480156107de57600080fd5b506105366107ed366004614942565b61183a565b3480156107fe57600080fd5b506104b561080d366004614498565b6000546001600160a01b0391821691161490565b34801561082d57600080fd5b5061016754610478906001600160a01b031681565b34801561084e57600080fd5b506104e761085d366004614498565b6101656020526000908152604090205481565b34801561087c57600080fd5b5061053661088b366004614a65565b6118fa565b34801561089c57600080fd5b5060fb5460ff166104b5565b3480156108b457600080fd5b506105366108c3366004614ae2565b611909565b6104e76108d6366004614b3b565b611a21565b3480156108e757600080fd5b5061019454610478906001600160a01b031681565b34801561090857600080fd5b50610478610917366004614526565b610169602052600090815260409020546001600160a01b031681565b34801561093f57600080fd5b5061053661094e366004614b5d565b611b0d565b34801561095f57600080fd5b5061053661096e366004614498565b611bc2565b34801561097f57600080fd5b50610536611c2f565b34801561099457600080fd5b50600054610478906001600160a01b031681565b3480156109b457600080fd5b506104e76109c3366004614498565b6101606020526000908152604090205481565b3480156109e257600080fd5b506105366109f1366004614498565b611c83565b348015610a0257600080fd5b50610536611d38565b348015610a1757600080fd5b50610536610a26366004614ba9565b611e2d565b348015610a3757600080fd5b5061016254610478906001600160a01b031681565b348015610a5857600080fd5b506104e76101965481565b348015610a6f57600080fd5b5061012d546001600160a01b0316610478565b348015610a8e57600080fd5b50610478610a9d366004614b3b565b611f42565b348015610aae57600080fd5b506104b5610abd3660046147ec565b611f61565b348015610ace57600080fd5b50610536610add366004614498565b611f8c565b348015610aee57600080fd5b50610536610afd366004614498565b612010565b6104e7610b10366004614526565b612094565b348015610b2157600080fd5b506104e7600081565b6104e76105cb366004614c02565b348015610b4457600080fd5b50610536610b53366004614498565b6120a4565b348015610b6457600080fd5b506104e7610b73366004614498565b6101646020526000908152604090205481565b348015610b9257600080fd5b50610536610ba1366004614c4f565b612158565b6104e7610bb4366004614b3b565b612160565b348015610bc557600080fd5b5061016354610478906001600160a01b031681565b348015610be657600080fd5b506104b5610bf5366004614c7b565b612171565b348015610c0657600080fd5b506104e7610c15366004614526565b6122fe565b348015610c2657600080fd5b50610536610c35366004614526565b612315565b6104e7610c48366004614d1e565b61231d565b348015610c5957600080fd5b50610536610c683660046147ec565b612327565b348015610c7957600080fd5b50610193546104789061010090046001600160a01b031681565b6104e7610ca1366004614b3b565b61234c565b348015610cb257600080fd5b5061053661063b36600461485a565b348015610ccd57600080fd5b506105366124ce565b348015610ce257600080fd5b50610536610cf1366004614d6d565b61252f565b348015610d0257600080fd5b50610478610d11366004614526565b610168602052600090815260409020546001600160a01b031681565b348015610d3957600080fd5b50610536610d48366004614498565b612842565b348015610d5957600080fd5b50610536610c35366004614498565b348015610d7457600080fd5b50610193546104b59060ff1681565b348015610d8f57600080fd5b5061015f54610478906001600160a01b031681565b6104e7610bb4366004614ae2565b348015610dbe57600080fd5b50610536610dcd366004614498565b612898565b60006001600160e01b03198216635a05180f60e01b1480610df75750610df78261290b565b92915050565b610e05612940565b6001600160a01b0316610e2161012d546001600160a01b031690565b6001600160a01b031614610e505760405162461bcd60e51b8152600401610e4790614e16565b60405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000610e7e600161294f565b90508015610e9a576000805460ff60a81b1916600160a81b1790555b6001600160a01b038616610ee35760405162461bcd60e51b815260206004820152601060248201526f1d1c99585cdd5c9e481a5b9d985b1a5960821b6044820152606401610e47565b610eeb6129ef565b610f086000610f0361012d546001600160a01b031690565b612a28565b610f10612a32565b610f1a6001612aba565b61016280546001600160a01b0319166001600160a01b0392909216919091179055610f456000612aba565b61016380546001600160a01b03199081166001600160a01b039384161790915561016d8054821689841617905561015f8054909116918716919091179055610f8c84611f8c565b610f9583612010565b610f9e82611257565b6305e5a4c160e11b60005261016b602052620283077f2d70e6734fd5e0405ac12bd06c0e35dc8bbf9b8fc8cb72137e2af4c27ee1170155801561101d576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b805160209182012060015460408051601960f81b81860152600160f81b602182015260228101929092526042808301939093528051808303909301835260629091019052805191012090565b600061107b612d18565b509392505050565b61108b612940565b6001600160a01b03166110a761012d546001600160a01b031690565b6001600160a01b0316146110cd5760405162461bcd60e51b8152600401610e4790614e16565b610194546001600160a01b031680156110f957610163546110f9906001600160a01b0316826000612d99565b61019480546001600160a01b0319166001600160a01b038416908117909155158015906111a7575061016354604051636eb1769f60e11b81523060048201526001600160a01b0384811660248301529091169063dd62ed3e9060440160206040518083038186803b15801561116d57600080fd5b505afa158015611181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a59190614e4b565b155b156111c657610163546111c6906001600160a01b031683600019612d99565b5050565b6111d2612d18565b50505050565b6000805160206151688339815191526111f081612edf565b6101968290556040518281527fd7d38c38bbd30bbca4f00bb551cbb24ecefef53d6dd0165fb1ebee05277234dc9060200160405180910390a15050565b60008281526097602052604090206001015461124881612edf565b6112528383612ef0565b505050565b61125f612940565b6001600160a01b031661127b61012d546001600160a01b031690565b6001600160a01b0316146112a15760405162461bcd60e51b8152600401610e4790614e16565b610167546112b8906001600160a01b031682612f12565b61016780546001600160a01b0319166001600160a01b0392909216919091179055565b6112e3612940565b6001600160a01b0316816001600160a01b03161461135b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610e47565b6111c68282612fe4565b61136d612940565b6001600160a01b031661138961012d546001600160a01b031690565b6001600160a01b0316146113af5760405162461bcd60e51b8152600401610e4790614e16565b60fb5460ff166113f85760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610e47565b611400613006565b6101635461016654604051636eb1769f60e11b81523060048201526001600160a01b03918216602482015291169063dd62ed3e9060440160206040518083038186803b15801561144f57600080fd5b505afa158015611463573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114879190614e4b565b6114ac5761016654610163546114ac916001600160a01b039182169116600019612d99565b6101625461016654604051636eb1769f60e11b81523060048201526001600160a01b03918216602482015291169063dd62ed3e9060440160206040518083038186803b1580156114fb57600080fd5b505afa15801561150f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115339190614e4b565b611558576101665461016254611558916001600160a01b039182169116600019612d99565b6101635461016754604051636eb1769f60e11b81523060048201526001600160a01b03918216602482015291169063dd62ed3e9060440160206040518083038186803b1580156115a757600080fd5b505afa1580156115bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115df9190614e4b565b611604576101675461016354611604916001600160a01b039182169116600019612d99565b6101625461016754604051636eb1769f60e11b81523060048201526001600160a01b03918216602482015291169063dd62ed3e9060440160206040518083038186803b15801561165357600080fd5b505afa158015611667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168b9190614e4b565b6116b05761016754610162546116b0916001600160a01b039182169116600019612d99565b565b6000805160206151688339815191526116ca81612edf565b610193546040516343a463c760e01b81526001600160a01b0386811660048301526024820186905260448201859052610100909204909116906343a463c790606401600060405180830381600087803b15801561172657600080fd5b505af115801561173a573d6000803e3d6000fd5b5050505050505050565b610167546001600160a01b0316331461178e5760405162461bcd60e51b815260206004820152600c60248201526b4f6e6c79206342726964676560a01b6044820152606401610e47565b60008581526101686020526040902054610163546001600160a01b0391821691868116911614156117ed576001600160a01b03811660009081526101656020526040812080548692906117e2908490614e7a565b9091555061101d9050565b610162546001600160a01b038681169116141561101d576001600160a01b038116600090815261016460205260408120805486929061182d908490614e7a565b9091555050505050505050565b611842612940565b6001600160a01b031661185e61012d546001600160a01b031690565b6001600160a01b0316146118845760405162461bcd60e51b8152600401610e4790614e16565b60005b82518110156112525760008382815181106118a4576118a4614e92565b602002602001015190508282815181106118c0576118c0614e92565b6020908102919091018101516001600160e01b0319909216600090815261016b9091526040902055806118f281614ea8565b915050611887565b611902612d18565b5050505050565b611911612940565b6001600160a01b031661192d61012d546001600160a01b031690565b6001600160a01b0316146119535760405162461bcd60e51b8152600401610e4790614e16565b815160005b818110156111d257600084828151811061197457611974614e92565b6020026020010151905080600014156119c15760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9251608a1b6044820152606401610e47565b8382815181106119d3576119d3614e92565b602090810291909101810151600083815261016a9092526040909120805460ff191660018381811115611a0857611a0861481c565b0217905550508080611a1990614ea8565b915050611958565b6000611a2b612940565b6001600160a01b0316611a4761012d546001600160a01b031690565b6001600160a01b031614611a6d5760405162461bcd60e51b8152600401610e4790614e16565b6000611a77612940565b61019354909150349060ff16611af5576040805160248082018790528251808303909101815260449091018252602080820180516001600160e01b0316632aaf62d760e01b9081179091526000898152610169909252928120549192611aee9289926001600160a01b03909116918590878361309f565b9094509150505b8015611b0557611b0582826132b4565b505092915050565b611b15612940565b6001600160a01b0316611b3161012d546001600160a01b031690565b6001600160a01b031614611b575760405162461bcd60e51b8152600401610e4790614e16565b60005b8251811015611252576000838281518110611b7757611b77614e92565b60200260200101519050828281518110611b9357611b93614e92565b602090810291909101810151600092835261016c90915260409091205580611bba81614ea8565b915050611b5a565b611bca612940565b6001600160a01b0316611be661012d546001600160a01b031690565b6001600160a01b031614611c0c5760405162461bcd60e51b8152600401610e4790614e16565b61015f80546001600160a01b0319166001600160a01b0392909216919091179055565b611c37612940565b6001600160a01b0316611c5361012d546001600160a01b031690565b6001600160a01b031614611c795760405162461bcd60e51b8152600401610e4790614e16565b6116b06000613367565b611c8b612940565b6001600160a01b0316611ca761012d546001600160a01b031690565b6001600160a01b031614611ccd5760405162461bcd60e51b8152600401610e4790614e16565b6001600160a01b038116611d155760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610e47565b61019580546001600160a01b0319166001600160a01b0392909216919091179055565b611d40612940565b6001600160a01b0316611d5c61012d546001600160a01b031690565b6001600160a01b031614611d825760405162461bcd60e51b8152600401610e4790614e16565b60fb5460ff1615611da55760405162461bcd60e51b8152600401610e4790614ec3565b611dad6133ba565b6101665461016354611dcd916001600160a01b0391821691166000612d99565b6101665461016254611ded916001600160a01b0391821691166000612d99565b6101675461016354611e0d916001600160a01b0391821691166000612d99565b61016754610162546116b0916001600160a01b0391821691166000612d99565b611e35612940565b6001600160a01b0316611e5161012d546001600160a01b031690565b6001600160a01b031614611e775760405162461bcd60e51b8152600401610e4790614e16565b815160005b818110156111d2576000848281518110611e9857611e98614e92565b602002602001015190508060001415611ee55760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9251608a1b6044820152606401610e47565b838281518110611ef757611ef7614e92565b6020908102919091018101516000928352610169909152604090912080546001600160a01b0319166001600160a01b0390921691909117905580611f3a81614ea8565b915050611e7c565b600082815260c960205260408120611f5a9083613413565b9392505050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b611f94612940565b6001600160a01b0316611fb061012d546001600160a01b031690565b6001600160a01b031614611fd65760405162461bcd60e51b8152600401610e4790614e16565b61016154611fed906001600160a01b03168261341f565b61016180546001600160a01b0319166001600160a01b0392909216919091179055565b612018612940565b6001600160a01b031661203461012d546001600160a01b031690565b6001600160a01b03161461205a5760405162461bcd60e51b8152600401610e4790614e16565b61016654612071906001600160a01b031682612f12565b61016680546001600160a01b0319166001600160a01b0392909216919091179055565b600061209e612d18565b50919050565b6120ac612940565b6001600160a01b03166120c861012d546001600160a01b031690565b6001600160a01b0316146120ee5760405162461bcd60e51b8152600401610e4790614e16565b6001600160a01b0381166121355760405162461bcd60e51b815260206004820152600e60248201526d1dd85b1b195d081a5b9d985b1a5960921b6044820152606401610e47565b61016d80546001600160a01b0319166001600160a01b0392909216919091179055565b611252612d18565b600061216a612d18565b5092915050565b60008061217d85611025565b90506001600160a01b0386163b156121d9576121d186828787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506134a792505050565b9150506122f6565b600080600061221d87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250613543915050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018890529295509093509150600090605c0160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156122c6573d6000803e3d6000fd5b5050506020604051035190508a6001600160a01b0316816001600160a01b03161496505050505050506122f6565b505b949350505050565b600081815260c960205260408120610df790613561565b6111c6612d18565b60006122f4612d18565b60008281526097602052604090206001015461234281612edf565b6112528383612fe4565b600061235a60fb5460ff1690565b156123775760405162461bcd60e51b8152600401610e4790614ec3565b61237f612940565b6001600160a01b031661239b61012d546001600160a01b031690565b6001600160a01b0316146123c15760405162461bcd60e51b8152600401610e4790614e16565b60006123cb612940565b61019354909150349060ff161561245557610193546040516343a463c760e01b81526001600160a01b0384811660048301526024820188905260448201879052610100909204909116906343a463c790606401600060405180830381600087803b15801561243857600080fd5b505af115801561244c573d6000803e3d6000fd5b50505050611af5565b604080516001600160a01b0384811660248301526044820188905260648083018890528351808403909101815260849092018352602080830180516001600160e01b03166343a463c760e01b908117909152610192546000818152610169909352948220549394611aee9490931691908590878361309f565b6124d6612940565b6001600160a01b03166124f261012d546001600160a01b031690565b6001600160a01b0316146125185760405162461bcd60e51b8152600401610e4790614e16565b61016d546116b0906001600160a01b0316476132b4565b600061253b600161294f565b90508015612557576000805460ff60a81b1916600160a81b1790555b61255f6129ef565b6125776000610f0361012d546001600160a01b031690565b61257f612a32565b612589600161356b565b61016280546001600160a01b0319166001600160a01b03929092169190911790556125b2613833565b61016380546001600160a01b03199081166001600160a01b039384161790915561016d805482168b841617905561015f80549091169189169190911790556125f986611f8c565b61260285612010565b61260b84611257565b61019580546001600160a01b0319166001600160a01b038b1617905561a8696101925546610192546101938054634e45415360005261016a6020527f6c585d855e16497087f6ed093c621ebf17e5140687c03b009023a4cdb199a0f4805460ff191660011790556001600160a01b03871661010002610100600160a81b031994909314939093166001600160a81b0319909316929092171790556126ae82611083565b61016b6020526202085d7f0b582bb3eaff83dbf968c6793272c3caad7548876a22f91aaf9608b413010a22556202910d7fa7f4e7f52e00151b36175de5336a3c4fbbb63a58db2d4ee345354204e526a978556202588f7f456aa95b1d4171a6b7ceeed07677ec362a126f3f126e752f92758f752c0c9dc955620110d57f6a8619f610ec0326db9663f5c30929f4c448994d4ba02f45f6c43739d22e2f28556208dc467fb14f9cbe4209fb26e504871c5d11cda7e1994f33d3b370eeb16841fe270ba62055620aef877f88ab0bc2526ea72b44a73e5e031479419bac4d6bbf7210c298ba94837583e2c45562068ad17fbcd6055bbe7cf8314f1536581757352700e9e4b538962a30acb2bd9e2d141044556305e5a4c160e11b600052620283077f2d70e6734fd5e0405ac12bd06c0e35dc8bbf9b8fc8cb72137e2af4c27ee11701558015612837576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b61284a612940565b6001600160a01b031661286661012d546001600160a01b031690565b6001600160a01b03161461288c5760405162461bcd60e51b8152600401610e4790614e16565b6128958161391d565b50565b6128a0612940565b6001600160a01b03166128bc61012d546001600160a01b031690565b6001600160a01b0316146128e25760405162461bcd60e51b8152600401610e4790614e16565b61019380546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60006001600160e01b03198216637965db0b60e01b1480610df757506301ffc9a760e01b6001600160e01b0319831614610df7565b600061294a613998565b905090565b60008054600160a81b900460ff1615612998578160ff1660011480156129745750303b155b6129905760405162461bcd60e51b8152600401610e4790614eed565b506000919050565b60005460ff808416600160a01b90920416106129c65760405162461bcd60e51b8152600401610e4790614eed565b506000805460ff909216600160a01b0260ff60a01b19909216919091179055600190565b919050565b600054600160a81b900460ff16612a185760405162461bcd60e51b8152600401610e4790614f3b565b6116b0612a23612940565b613367565b6111c68282612ef0565b600054600160a81b900460ff16612a5b5760405162461bcd60e51b8152600401610e4790614f3b565b612ab560007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692184660408051602081019390935282015230606082015260800160405160208183030381529060405280519060200120905090565b600155565b600046634e454152811415612b3a576001836001811115612add57612add61481c565b1415612aff575073b12bfca5a55806aaf64e99521918a4bf0fc4080292915050565b6000836001811115612b1357612b1361481c565b1415612b355750734988a896b1227218e4a686fde5eabdcabd91571f92915050565b612d0f565b61a86a811415612bb0576001836001811115612b5857612b5861481c565b1415612b7a575073a7d7079b0fead91f3e65f86e8915cb59c1a4c66492915050565b6000836001811115612b8e57612b8e61481c565b1415612b35575073c7198437980c041c805a1edcba50c1ce5db9511892915050565b6038811415612c25576001836001811115612bcd57612bcd61481c565b1415612bef5750738ac76a51cc950d9822d68b83fe1ad97b32cd580d92915050565b6000836001811115612c0357612c0361481c565b1415612b3557507355d398326f99059ff775485246999027b319795592915050565b6001811415612c9a576001836001811115612c4257612c4261481c565b1415612c64575073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4892915050565b6000836001811115612c7857612c7861481c565b1415612b35575073dac17f958d2ee523a2206206994597c13d831ec792915050565b6089811415612d0f576001836001811115612cb757612cb761481c565b1415612cd95750732791bca1f2de4661ed88a30c99a7a9449aa8417492915050565b6000836001811115612ced57612ced61481c565b1415612d0f575073c2132d05d31c914a87c6611c10748aeb04b58e8f92915050565b50600092915050565b610195546040516060916000916001600160a01b0390911690612d3e9083903690614f86565b600060405180830381855af49150503d8060008114612d79576040519150601f19603f3d011682016040523d82523d6000602084013e612d7e565b606091505b505090506040513d6000823e818015612d95573d82f35b3d82fd5b801580612e225750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612de857600080fd5b505afa158015612dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e209190614e4b565b155b612e8d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610e47565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526112529084906139cc565b61289581612eeb612940565b613a9e565b612efa8282613b02565b600082815260c9602052604090206112529082613b89565b806001600160a01b0316826001600160a01b03161415612f30575050565b6001600160a01b03821615612f8957612f5760008051602061516883398151915283612fe4565b61016354612f70906001600160a01b0316836000612d99565b61016254612f89906001600160a01b0316836000612d99565b6001600160a01b038116156111c657612fb060008051602061516883398151915282612a28565b61016254612fca906001600160a01b031682600019612d99565b610163546111c6906001600160a01b031682600019612d99565b612fee8282613b9e565b600082815260c9602052604090206112529082613c23565b60fb5460ff1661304f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610e47565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa613082612940565b6040516001600160a01b03909116815260200160405180910390a1565b6000826001600160a01b0388166130f15760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081d185c99d95d10dbdb9d1c9858dd60521b6044820152606401610e47565b60008060008b815261016a602052604090205460ff1660018111156131185761311861481c565b1461312f57610167546001600160a01b031661313d565b610166546001600160a01b03165b90506000816001600160a01b031663bebc4f718c8c8c8c6040518563ffffffff1660e01b81526004016131739493929190614f96565b60206040518083038186803b15801561318b57600080fd5b505afa15801561319f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c39190614e4b565b610167549094508491506001600160a01b03838116911614156132215760008b815261016c60209081526040808320546001600160e01b03198b16845261016b909252909120546132149190614fc3565b61321e9085614e7a565b93505b8415801561322f5750838310155b156132a65761323e8484614fe2565b9250816001600160a01b03166377cae758828d8d8d8d6040518663ffffffff1660e01b81526004016132739493929190614f96565b6000604051808303818588803b15801561328c57600080fd5b505af11580156132a0573d6000803e3d6000fd5b50505050505b505097509795505050505050565b604080516000808252602082019092526001600160a01b0384169083906040516132de9190614ff9565b60006040518083038185875af1925050503d806000811461331b576040519150601f19603f3d011682016040523d82523d6000602084013e613320565b606091505b50509050806112525760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606401610e47565b61012d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60fb5460ff16156133dd5760405162461bcd60e51b8152600401610e4790614ec3565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613082612940565b6000611f5a8383613c38565b806001600160a01b0316826001600160a01b0316141561343d575050565b6001600160a01b0382161561347e5761016354613465906001600160a01b0316836000612d99565b6101625461347e906001600160a01b0316836000612d99565b6001600160a01b038116156111c65761016254612fca906001600160a01b031682600019612d99565b600080856001600160a01b031663e75235b86040518163ffffffff1660e01b815260040160206040518083038186803b1580156134e357600080fd5b505afa1580156134f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061351b9190614e4b565b90508061352c5760009150506122f6565b6135398686868685613c62565b9695505050505050565b60419081029190910160208101516040820151919092015160ff1692565b6000610df7825490565b600046634e4541538114156135e657600183600181111561358e5761358e61481c565b14156135b0575073cceca5c4a3355f8e7a0b7d2a7251eec012be7c5892915050565b60008360018111156135c4576135c461481c565b1415612b35575073f9c249974c1acf96a59e5757cc9ba7035ce489b192915050565b61a86981141561365c5760018360018111156136045761360461481c565b14156136265750737acdaba7ee51c1c3f7c6d605cc26b1c9aab0495a92915050565b600083600181111561363a5761363a61481c565b1415612b3557507378ae2880bd1672b49a33cf796cf53fe6db0ab01d92915050565b60618114156136d15760018360018111156136795761367961481c565b141561369b575073da14d11d2c7d79f167b6057de3d9cc25c2c488d592915050565b60008360018111156136af576136af61481c565b1415612b355750731f326a8ca5399418a76ea0efa0403cbb00790c6792915050565b60048114156137465760018360018111156136ee576136ee61481c565b1415613710575073df5324ebe6f6b852ff5cbf73627ee137e907527692915050565b60008360018111156137245761372461481c565b1415612b3557507321e48034753e490ff04f2f75f7caedf081b320d592915050565b610fa28114156137bc5760018360018111156137645761376461481c565b1415613786575073147abee959a578f2ae5f9bc996dcf6259ebd3a8992915050565b600083600181111561379a5761379a61481c565b1415612b35575073b02068ae04bf5d184efde3583e09f2185a30da0e92915050565b62013881811415612d0f5760018360018111156137db576137db61481c565b14156137fd5750736600bec324ccdd12c70297311aefb37fafb1d68992915050565b60008360018111156138115761381161481c565b1415612d0f5750737e4c234b1d634db790592d1550816b19e862f74492915050565b600046634e45415381141561385d5773f9c249974c1acf96a59e5757cc9ba7035ce489b191505090565b61a869811415613882577378ae2880bd1672b49a33cf796cf53fe6db0ab01d91505090565b60618114156138a657737d43aabc515c356145049227cee54b608342c0ad91505090565b60048114156138ca577321e48034753e490ff04f2f75f7caedf081b320d591505090565b610fa28114156138ef57737d43aabc515c356145049227cee54b608342c0ad91505090565b6201388181141561391557737e4c234b1d634db790592d1550816b19e862f74491505090565b600091505090565b613925612940565b6001600160a01b031661394161012d546001600160a01b031690565b6001600160a01b0316146139675760405162461bcd60e51b8152600401610e4790614e16565b613984600061397f61012d546001600160a01b031690565b612fe4565b61398d81613ebe565b612895600082612a28565b6000601836108015906139b557506000546001600160a01b031633145b156139c7575060131936013560601c90565b503390565b6000613a21826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613f769092919063ffffffff16565b8051909150156112525780806020019051810190613a3f9190615015565b6112525760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610e47565b613aa88282611f61565b6111c657613ac0816001600160a01b03166014613f85565b613acb836020613f85565b604051602001613adc929190615037565b60408051601f198184030181529082905262461bcd60e51b8252610e479160040161492f565b613b0c8282611f61565b6111c65760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613b45612940565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611f5a836001600160a01b038416614120565b613ba88282611f61565b156111c65760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19169055613bdf612940565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000611f5a836001600160a01b03841661416f565b6000826000018281548110613c4f57613c4f614e92565b9060005260206000200154905092915050565b6000613c6f826041614fc3565b83511015613c7f57506000613eb5565b600080876001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b158015613cbb57600080fd5b505afa158015613ccf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613cf791908101906150ac565b905060008080805b87811015613eaa5760418181028a0160208101516040820151919092015160ff169550909350915083613dda579194508491613d3c886041614fc3565b821015613d525760009650505050505050613eb5565b8851613d5f836020614e7a565b1115613d745760009650505050505050613eb5565b6020828a018101518a5190918290613d8d908690614e7a565b613d979190614e7a565b1115613dad576000975050505050505050613eb5565b898301602001613dbe888d83614262565b613dd357600098505050505050505050613eb5565b5050613e7b565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018c9052600190605c0160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015613e6e573d6000803e3d6000fd5b5050506020604051035195505b613e85858761427c565b613e985760009650505050505050613eb5565b80613ea281614ea8565b915050613cff565b600196505050505050505b95945050505050565b613ec6612940565b6001600160a01b0316613ee261012d546001600160a01b031690565b6001600160a01b031614613f085760405162461bcd60e51b8152600401610e4790614e16565b6001600160a01b038116613f6d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610e47565b61289581613367565b60606122f684846000856142e6565b60606000613f94836002614fc3565b613f9f906002614e7a565b6001600160401b03811115613fb657613fb661453f565b6040519080825280601f01601f191660200182016040528015613fe0576020820181803683370190505b509050600360fc1b81600081518110613ffb57613ffb614e92565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061402a5761402a614e92565b60200101906001600160f81b031916908160001a905350600061404e846002614fc3565b614059906001614e7a565b90505b60018111156140d1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061408d5761408d614e92565b1a60f81b8282815181106140a3576140a3614e92565b60200101906001600160f81b031916908160001a90535060049490941c936140ca8161513a565b905061405c565b508315611f5a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610e47565b600081815260018301602052604081205461416757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610df7565b506000610df7565b60008181526001830160205260408120548015614258576000614193600183614fe2565b85549091506000906141a790600190614fe2565b905081811461420c5760008660000182815481106141c7576141c7614e92565b90600052602060002001549050808760000184815481106141ea576141ea614e92565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061421d5761421d615151565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610df7565b6000915050610df7565b60008061426e84611025565b9050613eb5858286866134a7565b8151600090815b818110156142db57836001600160a01b03168582815181106142a7576142a7614e92565b60200260200101516001600160a01b031614156142c957600192505050610df7565b806142d381614ea8565b915050614283565b506000949350505050565b6060824710156143475760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610e47565b6001600160a01b0385163b61439e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e47565b600080866001600160a01b031685876040516143ba9190614ff9565b60006040518083038185875af1925050503d80600081146143f7576040519150601f19603f3d011682016040523d82523d6000602084013e6143fc565b606091505b509150915061440c828286614417565b979650505050505050565b60608315614426575081611f5a565b8251156144365782518084602001fd5b8160405162461bcd60e51b8152600401610e47919061492f565b80356001600160e01b0319811681146129ea57600080fd5b60006020828403121561447a57600080fd5b611f5a82614450565b6001600160a01b038116811461289557600080fd5b6000602082840312156144aa57600080fd5b8135611f5a81614483565b600080600080600060a086880312156144cd57600080fd5b85356144d881614483565b945060208601356144e881614483565b935060408601356144f881614483565b9250606086013561450881614483565b9150608086013561451881614483565b809150509295509295909350565b60006020828403121561453857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561457d5761457d61453f565b604052919050565b600082601f83011261459657600080fd5b81356001600160401b038111156145af576145af61453f565b6145c2601f8201601f1916602001614555565b8181528460208386010111156145d757600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561460657600080fd5b81356001600160401b0381111561461c57600080fd5b6122f684828501614585565b60006001600160401b038211156146415761464161453f565b5060051b60200190565b600082601f83011261465c57600080fd5b8135602061467161466c83614628565b614555565b82815260059290921b8401810191818101908684111561469057600080fd5b8286015b848110156146ab5780358352918301918301614694565b509695505050505050565b8035600281106129ea57600080fd5b600082601f8301126146d657600080fd5b813560206146e661466c83614628565b82815260059290921b8401810191818101908684111561470557600080fd5b8286015b848110156146ab5761471a816146b6565b8352918301918301614709565b60008060006060848603121561473c57600080fd5b83356001600160401b038082111561475357600080fd5b61475f8783880161464b565b9450602086013591508082111561477557600080fd5b6147818783880161464b565b9350604086013591508082111561479757600080fd5b506147a4868287016146c5565b9150509250925092565b6000806000606084860312156147c357600080fd5b83356147ce81614483565b9250602084013591506147e3604085016146b6565b90509250925092565b600080604083850312156147ff57600080fd5b82359150602083013561481181614483565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b602081016002831061485457634e487b7160e01b600052602160045260246000fd5b91905290565b60008060006060848603121561486f57600080fd5b833561487a81614483565b95602085013595506040909401359392505050565b600080600080600060a086880312156148a757600080fd5b8535945060208601356148b981614483565b93506040860135925060608601359150608086013561451881614483565b60005b838110156148f25781810151838201526020016148da565b838111156111d25750506000910152565b6000815180845261491b8160208601602086016148d7565b601f01601f19169290920160200192915050565b602081526000611f5a6020830184614903565b6000806040838503121561495557600080fd5b82356001600160401b038082111561496c57600080fd5b818501915085601f83011261498057600080fd5b8135602061499061466c83614628565b82815260059290921b840181019181810190898411156149af57600080fd5b948201945b838610156149d4576149c586614450565b825294820194908201906149b4565b965050860135925050808211156149ea57600080fd5b506149f78582860161464b565b9150509250929050565b600082601f830112614a1257600080fd5b81356020614a2261466c83614628565b82815260059290921b84018101918181019086841115614a4157600080fd5b8286015b848110156146ab578035614a5881614483565b8352918301918301614a45565b60008060008060808587031215614a7b57600080fd5b8435614a8681614483565b935060208501356001600160401b0380821115614aa257600080fd5b614aae88838901614a01565b94506040870135915080821115614ac457600080fd5b50614ad18782880161464b565b949793965093946060013593505050565b60008060408385031215614af557600080fd5b82356001600160401b0380821115614b0c57600080fd5b614b188683870161464b565b93506020850135915080821115614b2e57600080fd5b506149f7858286016146c5565b60008060408385031215614b4e57600080fd5b50508035926020909101359150565b60008060408385031215614b7057600080fd5b82356001600160401b0380821115614b8757600080fd5b614b938683870161464b565b935060208501359150808211156149ea57600080fd5b60008060408385031215614bbc57600080fd5b82356001600160401b0380821115614bd357600080fd5b614bdf8683870161464b565b93506020850135915080821115614bf557600080fd5b506149f785828601614a01565b600080600060608486031215614c1757600080fd5b83356001600160401b03811115614c2d57600080fd5b614c398682870161464b565b9660208601359650604090950135949350505050565b60008060408385031215614c6257600080fd5b8235614c6d81614483565b946020939093013593505050565b60008060008060608587031215614c9157600080fd5b8435614c9c81614483565b935060208501356001600160401b0380821115614cb857600080fd5b614cc488838901614585565b94506040870135915080821115614cda57600080fd5b818701915087601f830112614cee57600080fd5b813581811115614cfd57600080fd5b886020828501011115614d0f57600080fd5b95989497505060200194505050565b60008060008060808587031215614d3457600080fd5b84356001600160401b0380821115614d4b57600080fd5b614d578883890161464b565b95506020870135915080821115614aa257600080fd5b600080600080600080600080610100898b031215614d8a57600080fd5b8835614d9581614483565b97506020890135614da581614483565b96506040890135614db581614483565b95506060890135614dc581614483565b94506080890135614dd581614483565b935060a0890135614de581614483565b925060c0890135614df581614483565b915060e0890135614e0581614483565b809150509295985092959890939650565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215614e5d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115614e8d57614e8d614e64565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415614ebc57614ebc614e64565b5060010190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8183823760009101908152919050565b84815260018060a01b03841660208201528260408201526080606082015260006135396080830184614903565b6000816000190483118215151615614fdd57614fdd614e64565b500290565b600082821015614ff457614ff4614e64565b500390565b6000825161500b8184602087016148d7565b9190910192915050565b60006020828403121561502757600080fd5b81518015158114611f5a57600080fd5b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161506f8160178501602088016148d7565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516150a08160288401602088016148d7565b01602801949350505050565b600060208083850312156150bf57600080fd5b82516001600160401b038111156150d557600080fd5b8301601f810185136150e657600080fd5b80516150f461466c82614628565b81815260059190911b8201830190838101908783111561511357600080fd5b928401925b8284101561440c57835161512b81614483565b82529284019290840190615118565b60008161514957615149614e64565b506000190190565b634e487b7160e01b600052603160045260246000fdfedbeb657137b1822b3d5418bea6fd641226d964b4c3871ef23546db2622258871a26469706673582212207820c1798d8ffecf48899efaf6d091d0735bdef2b2047e025a9886c51584142b64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061044b5760003560e01c80637ecebe0011610234578063c54e44eb1161012e578063e941fa78116100b6578063f77de4861161007a578063f77de48614610d4d578063f7bb364c14610d68578063f851a44014610d83578063fb76bb7e14610da4578063fc637c3c14610db257600080fd5b8063e941fa7814610cc1578063e9e81a6a14610ca6578063f203d04714610cd6578063f2ea161814610cf6578063f2fde38b14610d2d57600080fd5b8063cd6c7f2d116100fd578063cd6c7f2d14610c3a578063d547741f14610c4d578063d843a40014610c6d578063e5293eca14610c93578063e629f7b314610ca657600080fd5b8063c54e44eb14610bb9578063c7205bce14610bda578063ca15c87314610bfa578063caffbec714610c1a57600080fd5b80639c82f2a4116101bc578063a8602fea11610180578063a8602fea14610b38578063a99c68c514610b58578063abe57f8714610b02578063af3da2f414610b86578063b390c0ab14610ba657600080fd5b80639c82f2a414610ac25780639e17747a14610ae2578063a0712d6814610b02578063a217fddf14610b15578063a7f4bdce14610b2a57600080fd5b806389a302711161020357806389a3027114610a2b5780638af5de7214610a4c5780638da5cb5b14610a635780639010d07c14610a8257806391d1485414610aa257600080fd5b80637ecebe00146109a85780638033a805146109d65780638456cb59146109f6578063897fd46914610a0b57600080fd5b8063407a2e9811610345578063582712b1116102cd5780636ebf33ce116102915780636ebf33ce146108fc5780636f6a886214610933578063704b6c0214610953578063715018a6146109735780637da0a8771461098857600080fd5b8063582712b1146108705780635c975abb146108905780635f2b3737146108a8578063615ce6b4146108c857806363032feb146108db57600080fd5b8063486ff0cd11610314578063486ff0cd146107a25780634d944755146107d2578063572b6c05146107f257806357cdd7f914610821578063582489cb1461084257600080fd5b8063407a2e981461071357806343a463c7146107415780634626402b14610761578063472c38ff1461078257600080fd5b8063218253cc116103d35780632f2ff15d116103975780632f2ff15d1461066057806331e8df891461068057806336568abe146106a057806339dacedb146106c05780633f4ba83a146106fe57600080fd5b8063218253cc146105bd578063248a9ca3146105d0578063278758a81461060057806328054fb7146106205780632aaf62d71461064057600080fd5b80630d8b76a81161041a5780630d8b76a8146105165780631459457a14610538578063187f3c541461055857806319463093146105865780631a5787d8146105a657600080fd5b8063013dee701461045757806301ffc9a71461049557806302a882e6146104c55780630c3a1821146104f557600080fd5b3661045257005b600080fd5b34801561046357600080fd5b5061019554610478906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156104a157600080fd5b506104b56104b0366004614468565b610dd2565b604051901515815260200161048c565b3480156104d157600080fd5b506104e760008051602061516883398151915281565b60405190815260200161048c565b34801561050157600080fd5b5061016654610478906001600160a01b031681565b34801561052257600080fd5b50610536610531366004614498565b610dfd565b005b34801561054457600080fd5b506105366105533660046144b5565b610e72565b34801561056457600080fd5b506104e7610573366004614526565b61016c6020526000908152604090205481565b34801561059257600080fd5b506104e76105a13660046145f4565b611025565b3480156105b257600080fd5b506104e76101925481565b6104e76105cb366004614727565b611071565b3480156105dc57600080fd5b506104e76105eb366004614526565b60009081526097602052604090206001015490565b34801561060c57600080fd5b5061053661061b366004614498565b611083565b34801561062c57600080fd5b5061053661063b3660046147ae565b6111ca565b34801561064c57600080fd5b5061053661065b366004614526565b6111d8565b34801561066c57600080fd5b5061053661067b3660046147ec565b61122d565b34801561068c57600080fd5b5061053661069b366004614498565b611257565b3480156106ac57600080fd5b506105366106bb3660046147ec565b6112db565b3480156106cc57600080fd5b506106f16106db366004614526565b61016a6020526000908152604090205460ff1681565b60405161048c9190614832565b34801561070a57600080fd5b50610536611365565b34801561071f57600080fd5b506104e761072e366004614468565b61016b6020526000908152604090205481565b34801561074d57600080fd5b5061053661075c36600461485a565b6116b2565b34801561076d57600080fd5b5061016d54610478906001600160a01b031681565b34801561078e57600080fd5b5061053661079d36600461488f565b611744565b3480156107ae57600080fd5b5060408051808201825260018152603160f81b6020820152905161048c919061492f565b3480156107de57600080fd5b506105366107ed366004614942565b61183a565b3480156107fe57600080fd5b506104b561080d366004614498565b6000546001600160a01b0391821691161490565b34801561082d57600080fd5b5061016754610478906001600160a01b031681565b34801561084e57600080fd5b506104e761085d366004614498565b6101656020526000908152604090205481565b34801561087c57600080fd5b5061053661088b366004614a65565b6118fa565b34801561089c57600080fd5b5060fb5460ff166104b5565b3480156108b457600080fd5b506105366108c3366004614ae2565b611909565b6104e76108d6366004614b3b565b611a21565b3480156108e757600080fd5b5061019454610478906001600160a01b031681565b34801561090857600080fd5b50610478610917366004614526565b610169602052600090815260409020546001600160a01b031681565b34801561093f57600080fd5b5061053661094e366004614b5d565b611b0d565b34801561095f57600080fd5b5061053661096e366004614498565b611bc2565b34801561097f57600080fd5b50610536611c2f565b34801561099457600080fd5b50600054610478906001600160a01b031681565b3480156109b457600080fd5b506104e76109c3366004614498565b6101606020526000908152604090205481565b3480156109e257600080fd5b506105366109f1366004614498565b611c83565b348015610a0257600080fd5b50610536611d38565b348015610a1757600080fd5b50610536610a26366004614ba9565b611e2d565b348015610a3757600080fd5b5061016254610478906001600160a01b031681565b348015610a5857600080fd5b506104e76101965481565b348015610a6f57600080fd5b5061012d546001600160a01b0316610478565b348015610a8e57600080fd5b50610478610a9d366004614b3b565b611f42565b348015610aae57600080fd5b506104b5610abd3660046147ec565b611f61565b348015610ace57600080fd5b50610536610add366004614498565b611f8c565b348015610aee57600080fd5b50610536610afd366004614498565b612010565b6104e7610b10366004614526565b612094565b348015610b2157600080fd5b506104e7600081565b6104e76105cb366004614c02565b348015610b4457600080fd5b50610536610b53366004614498565b6120a4565b348015610b6457600080fd5b506104e7610b73366004614498565b6101646020526000908152604090205481565b348015610b9257600080fd5b50610536610ba1366004614c4f565b612158565b6104e7610bb4366004614b3b565b612160565b348015610bc557600080fd5b5061016354610478906001600160a01b031681565b348015610be657600080fd5b506104b5610bf5366004614c7b565b612171565b348015610c0657600080fd5b506104e7610c15366004614526565b6122fe565b348015610c2657600080fd5b50610536610c35366004614526565b612315565b6104e7610c48366004614d1e565b61231d565b348015610c5957600080fd5b50610536610c683660046147ec565b612327565b348015610c7957600080fd5b50610193546104789061010090046001600160a01b031681565b6104e7610ca1366004614b3b565b61234c565b348015610cb257600080fd5b5061053661063b36600461485a565b348015610ccd57600080fd5b506105366124ce565b348015610ce257600080fd5b50610536610cf1366004614d6d565b61252f565b348015610d0257600080fd5b50610478610d11366004614526565b610168602052600090815260409020546001600160a01b031681565b348015610d3957600080fd5b50610536610d48366004614498565b612842565b348015610d5957600080fd5b50610536610c35366004614498565b348015610d7457600080fd5b50610193546104b59060ff1681565b348015610d8f57600080fd5b5061015f54610478906001600160a01b031681565b6104e7610bb4366004614ae2565b348015610dbe57600080fd5b50610536610dcd366004614498565b612898565b60006001600160e01b03198216635a05180f60e01b1480610df75750610df78261290b565b92915050565b610e05612940565b6001600160a01b0316610e2161012d546001600160a01b031690565b6001600160a01b031614610e505760405162461bcd60e51b8152600401610e4790614e16565b60405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000610e7e600161294f565b90508015610e9a576000805460ff60a81b1916600160a81b1790555b6001600160a01b038616610ee35760405162461bcd60e51b815260206004820152601060248201526f1d1c99585cdd5c9e481a5b9d985b1a5960821b6044820152606401610e47565b610eeb6129ef565b610f086000610f0361012d546001600160a01b031690565b612a28565b610f10612a32565b610f1a6001612aba565b61016280546001600160a01b0319166001600160a01b0392909216919091179055610f456000612aba565b61016380546001600160a01b03199081166001600160a01b039384161790915561016d8054821689841617905561015f8054909116918716919091179055610f8c84611f8c565b610f9583612010565b610f9e82611257565b6305e5a4c160e11b60005261016b602052620283077f2d70e6734fd5e0405ac12bd06c0e35dc8bbf9b8fc8cb72137e2af4c27ee1170155801561101d576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b805160209182012060015460408051601960f81b81860152600160f81b602182015260228101929092526042808301939093528051808303909301835260629091019052805191012090565b600061107b612d18565b509392505050565b61108b612940565b6001600160a01b03166110a761012d546001600160a01b031690565b6001600160a01b0316146110cd5760405162461bcd60e51b8152600401610e4790614e16565b610194546001600160a01b031680156110f957610163546110f9906001600160a01b0316826000612d99565b61019480546001600160a01b0319166001600160a01b038416908117909155158015906111a7575061016354604051636eb1769f60e11b81523060048201526001600160a01b0384811660248301529091169063dd62ed3e9060440160206040518083038186803b15801561116d57600080fd5b505afa158015611181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a59190614e4b565b155b156111c657610163546111c6906001600160a01b031683600019612d99565b5050565b6111d2612d18565b50505050565b6000805160206151688339815191526111f081612edf565b6101968290556040518281527fd7d38c38bbd30bbca4f00bb551cbb24ecefef53d6dd0165fb1ebee05277234dc9060200160405180910390a15050565b60008281526097602052604090206001015461124881612edf565b6112528383612ef0565b505050565b61125f612940565b6001600160a01b031661127b61012d546001600160a01b031690565b6001600160a01b0316146112a15760405162461bcd60e51b8152600401610e4790614e16565b610167546112b8906001600160a01b031682612f12565b61016780546001600160a01b0319166001600160a01b0392909216919091179055565b6112e3612940565b6001600160a01b0316816001600160a01b03161461135b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610e47565b6111c68282612fe4565b61136d612940565b6001600160a01b031661138961012d546001600160a01b031690565b6001600160a01b0316146113af5760405162461bcd60e51b8152600401610e4790614e16565b60fb5460ff166113f85760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610e47565b611400613006565b6101635461016654604051636eb1769f60e11b81523060048201526001600160a01b03918216602482015291169063dd62ed3e9060440160206040518083038186803b15801561144f57600080fd5b505afa158015611463573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114879190614e4b565b6114ac5761016654610163546114ac916001600160a01b039182169116600019612d99565b6101625461016654604051636eb1769f60e11b81523060048201526001600160a01b03918216602482015291169063dd62ed3e9060440160206040518083038186803b1580156114fb57600080fd5b505afa15801561150f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115339190614e4b565b611558576101665461016254611558916001600160a01b039182169116600019612d99565b6101635461016754604051636eb1769f60e11b81523060048201526001600160a01b03918216602482015291169063dd62ed3e9060440160206040518083038186803b1580156115a757600080fd5b505afa1580156115bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115df9190614e4b565b611604576101675461016354611604916001600160a01b039182169116600019612d99565b6101625461016754604051636eb1769f60e11b81523060048201526001600160a01b03918216602482015291169063dd62ed3e9060440160206040518083038186803b15801561165357600080fd5b505afa158015611667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168b9190614e4b565b6116b05761016754610162546116b0916001600160a01b039182169116600019612d99565b565b6000805160206151688339815191526116ca81612edf565b610193546040516343a463c760e01b81526001600160a01b0386811660048301526024820186905260448201859052610100909204909116906343a463c790606401600060405180830381600087803b15801561172657600080fd5b505af115801561173a573d6000803e3d6000fd5b5050505050505050565b610167546001600160a01b0316331461178e5760405162461bcd60e51b815260206004820152600c60248201526b4f6e6c79206342726964676560a01b6044820152606401610e47565b60008581526101686020526040902054610163546001600160a01b0391821691868116911614156117ed576001600160a01b03811660009081526101656020526040812080548692906117e2908490614e7a565b9091555061101d9050565b610162546001600160a01b038681169116141561101d576001600160a01b038116600090815261016460205260408120805486929061182d908490614e7a565b9091555050505050505050565b611842612940565b6001600160a01b031661185e61012d546001600160a01b031690565b6001600160a01b0316146118845760405162461bcd60e51b8152600401610e4790614e16565b60005b82518110156112525760008382815181106118a4576118a4614e92565b602002602001015190508282815181106118c0576118c0614e92565b6020908102919091018101516001600160e01b0319909216600090815261016b9091526040902055806118f281614ea8565b915050611887565b611902612d18565b5050505050565b611911612940565b6001600160a01b031661192d61012d546001600160a01b031690565b6001600160a01b0316146119535760405162461bcd60e51b8152600401610e4790614e16565b815160005b818110156111d257600084828151811061197457611974614e92565b6020026020010151905080600014156119c15760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9251608a1b6044820152606401610e47565b8382815181106119d3576119d3614e92565b602090810291909101810151600083815261016a9092526040909120805460ff191660018381811115611a0857611a0861481c565b0217905550508080611a1990614ea8565b915050611958565b6000611a2b612940565b6001600160a01b0316611a4761012d546001600160a01b031690565b6001600160a01b031614611a6d5760405162461bcd60e51b8152600401610e4790614e16565b6000611a77612940565b61019354909150349060ff16611af5576040805160248082018790528251808303909101815260449091018252602080820180516001600160e01b0316632aaf62d760e01b9081179091526000898152610169909252928120549192611aee9289926001600160a01b03909116918590878361309f565b9094509150505b8015611b0557611b0582826132b4565b505092915050565b611b15612940565b6001600160a01b0316611b3161012d546001600160a01b031690565b6001600160a01b031614611b575760405162461bcd60e51b8152600401610e4790614e16565b60005b8251811015611252576000838281518110611b7757611b77614e92565b60200260200101519050828281518110611b9357611b93614e92565b602090810291909101810151600092835261016c90915260409091205580611bba81614ea8565b915050611b5a565b611bca612940565b6001600160a01b0316611be661012d546001600160a01b031690565b6001600160a01b031614611c0c5760405162461bcd60e51b8152600401610e4790614e16565b61015f80546001600160a01b0319166001600160a01b0392909216919091179055565b611c37612940565b6001600160a01b0316611c5361012d546001600160a01b031690565b6001600160a01b031614611c795760405162461bcd60e51b8152600401610e4790614e16565b6116b06000613367565b611c8b612940565b6001600160a01b0316611ca761012d546001600160a01b031690565b6001600160a01b031614611ccd5760405162461bcd60e51b8152600401610e4790614e16565b6001600160a01b038116611d155760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610e47565b61019580546001600160a01b0319166001600160a01b0392909216919091179055565b611d40612940565b6001600160a01b0316611d5c61012d546001600160a01b031690565b6001600160a01b031614611d825760405162461bcd60e51b8152600401610e4790614e16565b60fb5460ff1615611da55760405162461bcd60e51b8152600401610e4790614ec3565b611dad6133ba565b6101665461016354611dcd916001600160a01b0391821691166000612d99565b6101665461016254611ded916001600160a01b0391821691166000612d99565b6101675461016354611e0d916001600160a01b0391821691166000612d99565b61016754610162546116b0916001600160a01b0391821691166000612d99565b611e35612940565b6001600160a01b0316611e5161012d546001600160a01b031690565b6001600160a01b031614611e775760405162461bcd60e51b8152600401610e4790614e16565b815160005b818110156111d2576000848281518110611e9857611e98614e92565b602002602001015190508060001415611ee55760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9251608a1b6044820152606401610e47565b838281518110611ef757611ef7614e92565b6020908102919091018101516000928352610169909152604090912080546001600160a01b0319166001600160a01b0390921691909117905580611f3a81614ea8565b915050611e7c565b600082815260c960205260408120611f5a9083613413565b9392505050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b611f94612940565b6001600160a01b0316611fb061012d546001600160a01b031690565b6001600160a01b031614611fd65760405162461bcd60e51b8152600401610e4790614e16565b61016154611fed906001600160a01b03168261341f565b61016180546001600160a01b0319166001600160a01b0392909216919091179055565b612018612940565b6001600160a01b031661203461012d546001600160a01b031690565b6001600160a01b03161461205a5760405162461bcd60e51b8152600401610e4790614e16565b61016654612071906001600160a01b031682612f12565b61016680546001600160a01b0319166001600160a01b0392909216919091179055565b600061209e612d18565b50919050565b6120ac612940565b6001600160a01b03166120c861012d546001600160a01b031690565b6001600160a01b0316146120ee5760405162461bcd60e51b8152600401610e4790614e16565b6001600160a01b0381166121355760405162461bcd60e51b815260206004820152600e60248201526d1dd85b1b195d081a5b9d985b1a5960921b6044820152606401610e47565b61016d80546001600160a01b0319166001600160a01b0392909216919091179055565b611252612d18565b600061216a612d18565b5092915050565b60008061217d85611025565b90506001600160a01b0386163b156121d9576121d186828787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506134a792505050565b9150506122f6565b600080600061221d87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250613543915050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018890529295509093509150600090605c0160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156122c6573d6000803e3d6000fd5b5050506020604051035190508a6001600160a01b0316816001600160a01b03161496505050505050506122f6565b505b949350505050565b600081815260c960205260408120610df790613561565b6111c6612d18565b60006122f4612d18565b60008281526097602052604090206001015461234281612edf565b6112528383612fe4565b600061235a60fb5460ff1690565b156123775760405162461bcd60e51b8152600401610e4790614ec3565b61237f612940565b6001600160a01b031661239b61012d546001600160a01b031690565b6001600160a01b0316146123c15760405162461bcd60e51b8152600401610e4790614e16565b60006123cb612940565b61019354909150349060ff161561245557610193546040516343a463c760e01b81526001600160a01b0384811660048301526024820188905260448201879052610100909204909116906343a463c790606401600060405180830381600087803b15801561243857600080fd5b505af115801561244c573d6000803e3d6000fd5b50505050611af5565b604080516001600160a01b0384811660248301526044820188905260648083018890528351808403909101815260849092018352602080830180516001600160e01b03166343a463c760e01b908117909152610192546000818152610169909352948220549394611aee9490931691908590878361309f565b6124d6612940565b6001600160a01b03166124f261012d546001600160a01b031690565b6001600160a01b0316146125185760405162461bcd60e51b8152600401610e4790614e16565b61016d546116b0906001600160a01b0316476132b4565b600061253b600161294f565b90508015612557576000805460ff60a81b1916600160a81b1790555b61255f6129ef565b6125776000610f0361012d546001600160a01b031690565b61257f612a32565b612589600161356b565b61016280546001600160a01b0319166001600160a01b03929092169190911790556125b2613833565b61016380546001600160a01b03199081166001600160a01b039384161790915561016d805482168b841617905561015f80549091169189169190911790556125f986611f8c565b61260285612010565b61260b84611257565b61019580546001600160a01b0319166001600160a01b038b1617905561a8696101925546610192546101938054634e45415360005261016a6020527f6c585d855e16497087f6ed093c621ebf17e5140687c03b009023a4cdb199a0f4805460ff191660011790556001600160a01b03871661010002610100600160a81b031994909314939093166001600160a81b0319909316929092171790556126ae82611083565b61016b6020526202085d7f0b582bb3eaff83dbf968c6793272c3caad7548876a22f91aaf9608b413010a22556202910d7fa7f4e7f52e00151b36175de5336a3c4fbbb63a58db2d4ee345354204e526a978556202588f7f456aa95b1d4171a6b7ceeed07677ec362a126f3f126e752f92758f752c0c9dc955620110d57f6a8619f610ec0326db9663f5c30929f4c448994d4ba02f45f6c43739d22e2f28556208dc467fb14f9cbe4209fb26e504871c5d11cda7e1994f33d3b370eeb16841fe270ba62055620aef877f88ab0bc2526ea72b44a73e5e031479419bac4d6bbf7210c298ba94837583e2c45562068ad17fbcd6055bbe7cf8314f1536581757352700e9e4b538962a30acb2bd9e2d141044556305e5a4c160e11b600052620283077f2d70e6734fd5e0405ac12bd06c0e35dc8bbf9b8fc8cb72137e2af4c27ee11701558015612837576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b61284a612940565b6001600160a01b031661286661012d546001600160a01b031690565b6001600160a01b03161461288c5760405162461bcd60e51b8152600401610e4790614e16565b6128958161391d565b50565b6128a0612940565b6001600160a01b03166128bc61012d546001600160a01b031690565b6001600160a01b0316146128e25760405162461bcd60e51b8152600401610e4790614e16565b61019380546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60006001600160e01b03198216637965db0b60e01b1480610df757506301ffc9a760e01b6001600160e01b0319831614610df7565b600061294a613998565b905090565b60008054600160a81b900460ff1615612998578160ff1660011480156129745750303b155b6129905760405162461bcd60e51b8152600401610e4790614eed565b506000919050565b60005460ff808416600160a01b90920416106129c65760405162461bcd60e51b8152600401610e4790614eed565b506000805460ff909216600160a01b0260ff60a01b19909216919091179055600190565b919050565b600054600160a81b900460ff16612a185760405162461bcd60e51b8152600401610e4790614f3b565b6116b0612a23612940565b613367565b6111c68282612ef0565b600054600160a81b900460ff16612a5b5760405162461bcd60e51b8152600401610e4790614f3b565b612ab560007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692184660408051602081019390935282015230606082015260800160405160208183030381529060405280519060200120905090565b600155565b600046634e454152811415612b3a576001836001811115612add57612add61481c565b1415612aff575073b12bfca5a55806aaf64e99521918a4bf0fc4080292915050565b6000836001811115612b1357612b1361481c565b1415612b355750734988a896b1227218e4a686fde5eabdcabd91571f92915050565b612d0f565b61a86a811415612bb0576001836001811115612b5857612b5861481c565b1415612b7a575073a7d7079b0fead91f3e65f86e8915cb59c1a4c66492915050565b6000836001811115612b8e57612b8e61481c565b1415612b35575073c7198437980c041c805a1edcba50c1ce5db9511892915050565b6038811415612c25576001836001811115612bcd57612bcd61481c565b1415612bef5750738ac76a51cc950d9822d68b83fe1ad97b32cd580d92915050565b6000836001811115612c0357612c0361481c565b1415612b3557507355d398326f99059ff775485246999027b319795592915050565b6001811415612c9a576001836001811115612c4257612c4261481c565b1415612c64575073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4892915050565b6000836001811115612c7857612c7861481c565b1415612b35575073dac17f958d2ee523a2206206994597c13d831ec792915050565b6089811415612d0f576001836001811115612cb757612cb761481c565b1415612cd95750732791bca1f2de4661ed88a30c99a7a9449aa8417492915050565b6000836001811115612ced57612ced61481c565b1415612d0f575073c2132d05d31c914a87c6611c10748aeb04b58e8f92915050565b50600092915050565b610195546040516060916000916001600160a01b0390911690612d3e9083903690614f86565b600060405180830381855af49150503d8060008114612d79576040519150601f19603f3d011682016040523d82523d6000602084013e612d7e565b606091505b505090506040513d6000823e818015612d95573d82f35b3d82fd5b801580612e225750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612de857600080fd5b505afa158015612dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e209190614e4b565b155b612e8d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610e47565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526112529084906139cc565b61289581612eeb612940565b613a9e565b612efa8282613b02565b600082815260c9602052604090206112529082613b89565b806001600160a01b0316826001600160a01b03161415612f30575050565b6001600160a01b03821615612f8957612f5760008051602061516883398151915283612fe4565b61016354612f70906001600160a01b0316836000612d99565b61016254612f89906001600160a01b0316836000612d99565b6001600160a01b038116156111c657612fb060008051602061516883398151915282612a28565b61016254612fca906001600160a01b031682600019612d99565b610163546111c6906001600160a01b031682600019612d99565b612fee8282613b9e565b600082815260c9602052604090206112529082613c23565b60fb5460ff1661304f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610e47565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa613082612940565b6040516001600160a01b03909116815260200160405180910390a1565b6000826001600160a01b0388166130f15760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081d185c99d95d10dbdb9d1c9858dd60521b6044820152606401610e47565b60008060008b815261016a602052604090205460ff1660018111156131185761311861481c565b1461312f57610167546001600160a01b031661313d565b610166546001600160a01b03165b90506000816001600160a01b031663bebc4f718c8c8c8c6040518563ffffffff1660e01b81526004016131739493929190614f96565b60206040518083038186803b15801561318b57600080fd5b505afa15801561319f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c39190614e4b565b610167549094508491506001600160a01b03838116911614156132215760008b815261016c60209081526040808320546001600160e01b03198b16845261016b909252909120546132149190614fc3565b61321e9085614e7a565b93505b8415801561322f5750838310155b156132a65761323e8484614fe2565b9250816001600160a01b03166377cae758828d8d8d8d6040518663ffffffff1660e01b81526004016132739493929190614f96565b6000604051808303818588803b15801561328c57600080fd5b505af11580156132a0573d6000803e3d6000fd5b50505050505b505097509795505050505050565b604080516000808252602082019092526001600160a01b0384169083906040516132de9190614ff9565b60006040518083038185875af1925050503d806000811461331b576040519150601f19603f3d011682016040523d82523d6000602084013e613320565b606091505b50509050806112525760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606401610e47565b61012d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60fb5460ff16156133dd5760405162461bcd60e51b8152600401610e4790614ec3565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613082612940565b6000611f5a8383613c38565b806001600160a01b0316826001600160a01b0316141561343d575050565b6001600160a01b0382161561347e5761016354613465906001600160a01b0316836000612d99565b6101625461347e906001600160a01b0316836000612d99565b6001600160a01b038116156111c65761016254612fca906001600160a01b031682600019612d99565b600080856001600160a01b031663e75235b86040518163ffffffff1660e01b815260040160206040518083038186803b1580156134e357600080fd5b505afa1580156134f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061351b9190614e4b565b90508061352c5760009150506122f6565b6135398686868685613c62565b9695505050505050565b60419081029190910160208101516040820151919092015160ff1692565b6000610df7825490565b600046634e4541538114156135e657600183600181111561358e5761358e61481c565b14156135b0575073cceca5c4a3355f8e7a0b7d2a7251eec012be7c5892915050565b60008360018111156135c4576135c461481c565b1415612b35575073f9c249974c1acf96a59e5757cc9ba7035ce489b192915050565b61a86981141561365c5760018360018111156136045761360461481c565b14156136265750737acdaba7ee51c1c3f7c6d605cc26b1c9aab0495a92915050565b600083600181111561363a5761363a61481c565b1415612b3557507378ae2880bd1672b49a33cf796cf53fe6db0ab01d92915050565b60618114156136d15760018360018111156136795761367961481c565b141561369b575073da14d11d2c7d79f167b6057de3d9cc25c2c488d592915050565b60008360018111156136af576136af61481c565b1415612b355750731f326a8ca5399418a76ea0efa0403cbb00790c6792915050565b60048114156137465760018360018111156136ee576136ee61481c565b1415613710575073df5324ebe6f6b852ff5cbf73627ee137e907527692915050565b60008360018111156137245761372461481c565b1415612b3557507321e48034753e490ff04f2f75f7caedf081b320d592915050565b610fa28114156137bc5760018360018111156137645761376461481c565b1415613786575073147abee959a578f2ae5f9bc996dcf6259ebd3a8992915050565b600083600181111561379a5761379a61481c565b1415612b35575073b02068ae04bf5d184efde3583e09f2185a30da0e92915050565b62013881811415612d0f5760018360018111156137db576137db61481c565b14156137fd5750736600bec324ccdd12c70297311aefb37fafb1d68992915050565b60008360018111156138115761381161481c565b1415612d0f5750737e4c234b1d634db790592d1550816b19e862f74492915050565b600046634e45415381141561385d5773f9c249974c1acf96a59e5757cc9ba7035ce489b191505090565b61a869811415613882577378ae2880bd1672b49a33cf796cf53fe6db0ab01d91505090565b60618114156138a657737d43aabc515c356145049227cee54b608342c0ad91505090565b60048114156138ca577321e48034753e490ff04f2f75f7caedf081b320d591505090565b610fa28114156138ef57737d43aabc515c356145049227cee54b608342c0ad91505090565b6201388181141561391557737e4c234b1d634db790592d1550816b19e862f74491505090565b600091505090565b613925612940565b6001600160a01b031661394161012d546001600160a01b031690565b6001600160a01b0316146139675760405162461bcd60e51b8152600401610e4790614e16565b613984600061397f61012d546001600160a01b031690565b612fe4565b61398d81613ebe565b612895600082612a28565b6000601836108015906139b557506000546001600160a01b031633145b156139c7575060131936013560601c90565b503390565b6000613a21826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613f769092919063ffffffff16565b8051909150156112525780806020019051810190613a3f9190615015565b6112525760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610e47565b613aa88282611f61565b6111c657613ac0816001600160a01b03166014613f85565b613acb836020613f85565b604051602001613adc929190615037565b60408051601f198184030181529082905262461bcd60e51b8252610e479160040161492f565b613b0c8282611f61565b6111c65760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613b45612940565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611f5a836001600160a01b038416614120565b613ba88282611f61565b156111c65760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19169055613bdf612940565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000611f5a836001600160a01b03841661416f565b6000826000018281548110613c4f57613c4f614e92565b9060005260206000200154905092915050565b6000613c6f826041614fc3565b83511015613c7f57506000613eb5565b600080876001600160a01b031663a0e67e2b6040518163ffffffff1660e01b815260040160006040518083038186803b158015613cbb57600080fd5b505afa158015613ccf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613cf791908101906150ac565b905060008080805b87811015613eaa5760418181028a0160208101516040820151919092015160ff169550909350915083613dda579194508491613d3c886041614fc3565b821015613d525760009650505050505050613eb5565b8851613d5f836020614e7a565b1115613d745760009650505050505050613eb5565b6020828a018101518a5190918290613d8d908690614e7a565b613d979190614e7a565b1115613dad576000975050505050505050613eb5565b898301602001613dbe888d83614262565b613dd357600098505050505050505050613eb5565b5050613e7b565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018c9052600190605c0160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015613e6e573d6000803e3d6000fd5b5050506020604051035195505b613e85858761427c565b613e985760009650505050505050613eb5565b80613ea281614ea8565b915050613cff565b600196505050505050505b95945050505050565b613ec6612940565b6001600160a01b0316613ee261012d546001600160a01b031690565b6001600160a01b031614613f085760405162461bcd60e51b8152600401610e4790614e16565b6001600160a01b038116613f6d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610e47565b61289581613367565b60606122f684846000856142e6565b60606000613f94836002614fc3565b613f9f906002614e7a565b6001600160401b03811115613fb657613fb661453f565b6040519080825280601f01601f191660200182016040528015613fe0576020820181803683370190505b509050600360fc1b81600081518110613ffb57613ffb614e92565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061402a5761402a614e92565b60200101906001600160f81b031916908160001a905350600061404e846002614fc3565b614059906001614e7a565b90505b60018111156140d1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061408d5761408d614e92565b1a60f81b8282815181106140a3576140a3614e92565b60200101906001600160f81b031916908160001a90535060049490941c936140ca8161513a565b905061405c565b508315611f5a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610e47565b600081815260018301602052604081205461416757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610df7565b506000610df7565b60008181526001830160205260408120548015614258576000614193600183614fe2565b85549091506000906141a790600190614fe2565b905081811461420c5760008660000182815481106141c7576141c7614e92565b90600052602060002001549050808760000184815481106141ea576141ea614e92565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061421d5761421d615151565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610df7565b6000915050610df7565b60008061426e84611025565b9050613eb5858286866134a7565b8151600090815b818110156142db57836001600160a01b03168582815181106142a7576142a7614e92565b60200260200101516001600160a01b031614156142c957600192505050610df7565b806142d381614ea8565b915050614283565b506000949350505050565b6060824710156143475760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610e47565b6001600160a01b0385163b61439e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e47565b600080866001600160a01b031685876040516143ba9190614ff9565b60006040518083038185875af1925050503d80600081146143f7576040519150601f19603f3d011682016040523d82523d6000602084013e6143fc565b606091505b509150915061440c828286614417565b979650505050505050565b60608315614426575081611f5a565b8251156144365782518084602001fd5b8160405162461bcd60e51b8152600401610e47919061492f565b80356001600160e01b0319811681146129ea57600080fd5b60006020828403121561447a57600080fd5b611f5a82614450565b6001600160a01b038116811461289557600080fd5b6000602082840312156144aa57600080fd5b8135611f5a81614483565b600080600080600060a086880312156144cd57600080fd5b85356144d881614483565b945060208601356144e881614483565b935060408601356144f881614483565b9250606086013561450881614483565b9150608086013561451881614483565b809150509295509295909350565b60006020828403121561453857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561457d5761457d61453f565b604052919050565b600082601f83011261459657600080fd5b81356001600160401b038111156145af576145af61453f565b6145c2601f8201601f1916602001614555565b8181528460208386010111156145d757600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561460657600080fd5b81356001600160401b0381111561461c57600080fd5b6122f684828501614585565b60006001600160401b038211156146415761464161453f565b5060051b60200190565b600082601f83011261465c57600080fd5b8135602061467161466c83614628565b614555565b82815260059290921b8401810191818101908684111561469057600080fd5b8286015b848110156146ab5780358352918301918301614694565b509695505050505050565b8035600281106129ea57600080fd5b600082601f8301126146d657600080fd5b813560206146e661466c83614628565b82815260059290921b8401810191818101908684111561470557600080fd5b8286015b848110156146ab5761471a816146b6565b8352918301918301614709565b60008060006060848603121561473c57600080fd5b83356001600160401b038082111561475357600080fd5b61475f8783880161464b565b9450602086013591508082111561477557600080fd5b6147818783880161464b565b9350604086013591508082111561479757600080fd5b506147a4868287016146c5565b9150509250925092565b6000806000606084860312156147c357600080fd5b83356147ce81614483565b9250602084013591506147e3604085016146b6565b90509250925092565b600080604083850312156147ff57600080fd5b82359150602083013561481181614483565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b602081016002831061485457634e487b7160e01b600052602160045260246000fd5b91905290565b60008060006060848603121561486f57600080fd5b833561487a81614483565b95602085013595506040909401359392505050565b600080600080600060a086880312156148a757600080fd5b8535945060208601356148b981614483565b93506040860135925060608601359150608086013561451881614483565b60005b838110156148f25781810151838201526020016148da565b838111156111d25750506000910152565b6000815180845261491b8160208601602086016148d7565b601f01601f19169290920160200192915050565b602081526000611f5a6020830184614903565b6000806040838503121561495557600080fd5b82356001600160401b038082111561496c57600080fd5b818501915085601f83011261498057600080fd5b8135602061499061466c83614628565b82815260059290921b840181019181810190898411156149af57600080fd5b948201945b838610156149d4576149c586614450565b825294820194908201906149b4565b965050860135925050808211156149ea57600080fd5b506149f78582860161464b565b9150509250929050565b600082601f830112614a1257600080fd5b81356020614a2261466c83614628565b82815260059290921b84018101918181019086841115614a4157600080fd5b8286015b848110156146ab578035614a5881614483565b8352918301918301614a45565b60008060008060808587031215614a7b57600080fd5b8435614a8681614483565b935060208501356001600160401b0380821115614aa257600080fd5b614aae88838901614a01565b94506040870135915080821115614ac457600080fd5b50614ad18782880161464b565b949793965093946060013593505050565b60008060408385031215614af557600080fd5b82356001600160401b0380821115614b0c57600080fd5b614b188683870161464b565b93506020850135915080821115614b2e57600080fd5b506149f7858286016146c5565b60008060408385031215614b4e57600080fd5b50508035926020909101359150565b60008060408385031215614b7057600080fd5b82356001600160401b0380821115614b8757600080fd5b614b938683870161464b565b935060208501359150808211156149ea57600080fd5b60008060408385031215614bbc57600080fd5b82356001600160401b0380821115614bd357600080fd5b614bdf8683870161464b565b93506020850135915080821115614bf557600080fd5b506149f785828601614a01565b600080600060608486031215614c1757600080fd5b83356001600160401b03811115614c2d57600080fd5b614c398682870161464b565b9660208601359650604090950135949350505050565b60008060408385031215614c6257600080fd5b8235614c6d81614483565b946020939093013593505050565b60008060008060608587031215614c9157600080fd5b8435614c9c81614483565b935060208501356001600160401b0380821115614cb857600080fd5b614cc488838901614585565b94506040870135915080821115614cda57600080fd5b818701915087601f830112614cee57600080fd5b813581811115614cfd57600080fd5b886020828501011115614d0f57600080fd5b95989497505060200194505050565b60008060008060808587031215614d3457600080fd5b84356001600160401b0380821115614d4b57600080fd5b614d578883890161464b565b95506020870135915080821115614aa257600080fd5b600080600080600080600080610100898b031215614d8a57600080fd5b8835614d9581614483565b97506020890135614da581614483565b96506040890135614db581614483565b95506060890135614dc581614483565b94506080890135614dd581614483565b935060a0890135614de581614483565b925060c0890135614df581614483565b915060e0890135614e0581614483565b809150509295985092959890939650565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215614e5d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115614e8d57614e8d614e64565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415614ebc57614ebc614e64565b5060010190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8183823760009101908152919050565b84815260018060a01b03841660208201528260408201526080606082015260006135396080830184614903565b6000816000190483118215151615614fdd57614fdd614e64565b500290565b600082821015614ff457614ff4614e64565b500390565b6000825161500b8184602087016148d7565b9190910192915050565b60006020828403121561502757600080fd5b81518015158114611f5a57600080fd5b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161506f8160178501602088016148d7565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516150a08160288401602088016148d7565b01602801949350505050565b600060208083850312156150bf57600080fd5b82516001600160401b038111156150d557600080fd5b8301601f810185136150e657600080fd5b80516150f461466c82614628565b81815260059190911b8201830190838101908783111561511357600080fd5b928401925b8284101561440c57835161512b81614483565b82529284019290840190615118565b60008161514957615149614e64565b506000190190565b634e487b7160e01b600052603160045260246000fdfedbeb657137b1822b3d5418bea6fd641226d964b4c3871ef23546db2622258871a26469706673582212207820c1798d8ffecf48899efaf6d091d0735bdef2b2047e025a9886c51584142b64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burn(uint256,uint256)": {
        "details": "It calls burnByAdmin of BNIMinter.",
        "params": {
          "_pool": "total pool in USD",
          "_share": "amount of shares"
        }
      },
      "deposit(uint256[],address[],uint256[],uint256)": {
        "details": "It calls depositByAdmin of BNIVaults."
      },
      "exitWithdrawal(uint256)": {
        "details": "It calls exitWithdrawalByAdmin of BNIMinter.",
        "params": {
          "_gatheredAmount": "is the amount of token that is gathered."
        }
      },
      "gather(uint256[],uint8[])": {
        "details": "It gathers withdrawn tokens of the user from user agents."
      },
      "getMessageHashForSafe(bytes)": {
        "details": "Returns hash of a message that can be signed by owners.",
        "params": {
          "message": "Message that should be hashed"
        },
        "returns": {
          "_0": "Message hash."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initDeposit(uint256,uint256)": {
        "details": "It calls initDepositByAdmin of BNIMinter.",
        "params": {
          "_USDT6Amt": "USDT with 6 decimals to be deposited",
          "_pool": "total pool in USD"
        }
      },
      "mint(uint256)": {
        "details": "It calls mintByAdmin of BNIMinter."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setSubImpl(address)": {
        "details": "Delegate to sub contract"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "takeOut(uint256)": {
        "details": "It takes out tokens from this agent.",
        "params": {
          "_gatheredAmount": "is the amount of token that is gathered."
        }
      },
      "transfer(uint256[],uint256[],uint8[])": {
        "details": "It transfers tokens to user agents"
      },
      "withdraw(uint256[],uint256,uint256)": {
        "details": "It calls withdrawPercByAdmin of BNIVaults."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "exitWithdrawal(uint256)": {
        "notice": "_gatheredAmount doesn't include the balance which is withdrawan in this agent."
      },
      "isTrustedForwarder(address)": {
        "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
      },
      "onRefunded(uint256,address,uint256,uint256,address)": {
        "notice": "Never revert in this function. If not, cbridgeAdapter.executeMessageWithTransferRefund will be failed."
      },
      "takeOut(uint256)": {
        "notice": "_gatheredAmount doesn't include the balance which is withdrawan in this agent."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 69824,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 713,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 716,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 70364,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "separator",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 70781,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3292,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3946,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 483,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4359_storage)"
      },
      {
        "astId": 143,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 869,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "_paused",
        "offset": 0,
        "slot": "251",
        "type": "t_bool"
      },
      {
        "astId": 958,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 593,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "_owner",
        "offset": 0,
        "slot": "301",
        "type": "t_address"
      },
      {
        "astId": 705,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 60170,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "admin",
        "offset": 0,
        "slot": "351",
        "type": "t_address"
      },
      {
        "astId": 60174,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "nonces",
        "offset": 0,
        "slot": "352",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 60177,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "swap",
        "offset": 0,
        "slot": "353",
        "type": "t_contract(ISwap)56041"
      },
      {
        "astId": 60180,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "USDC",
        "offset": 0,
        "slot": "354",
        "type": "t_contract(IERC20Upgradeable)1707"
      },
      {
        "astId": 60183,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "USDT",
        "offset": 0,
        "slot": "355",
        "type": "t_contract(IERC20Upgradeable)1707"
      },
      {
        "astId": 60187,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "usdcBalances",
        "offset": 0,
        "slot": "356",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 60191,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "usdtBalances",
        "offset": 0,
        "slot": "357",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 60194,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "multichainAdapter",
        "offset": 0,
        "slot": "358",
        "type": "t_contract(IXChainAdapter)56366"
      },
      {
        "astId": 60197,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "cbridgeAdapter",
        "offset": 0,
        "slot": "359",
        "type": "t_contract(IXChainAdapter)56366"
      },
      {
        "astId": 60201,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "cbridgeSenders",
        "offset": 0,
        "slot": "360",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 60205,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "userAgents",
        "offset": 0,
        "slot": "361",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 60210,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "callAdapterTypes",
        "offset": 0,
        "slot": "362",
        "type": "t_mapping(t_uint256,t_enum(AdapterType)60144)"
      },
      {
        "astId": 60214,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "gasAmounts",
        "offset": 0,
        "slot": "363",
        "type": "t_mapping(t_bytes4,t_uint256)"
      },
      {
        "astId": 60218,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "gasCosts",
        "offset": 0,
        "slot": "364",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 60220,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "treasuryWallet",
        "offset": 0,
        "slot": "365",
        "type": "t_address"
      },
      {
        "astId": 60913,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "__gap",
        "offset": 0,
        "slot": "366",
        "type": "t_array(t_uint256)36_storage"
      },
      {
        "astId": 57154,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "chainIdOnLP",
        "offset": 0,
        "slot": "402",
        "type": "t_uint256"
      },
      {
        "astId": 57156,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "isLPChain",
        "offset": 0,
        "slot": "403",
        "type": "t_bool"
      },
      {
        "astId": 57159,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "bniMinter",
        "offset": 1,
        "slot": "403",
        "type": "t_contract(IBNIMinter)10340"
      },
      {
        "astId": 57162,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "bniVault",
        "offset": 0,
        "slot": "404",
        "type": "t_contract(IBNIVault)10387"
      },
      {
        "astId": 57164,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "subImpl",
        "offset": 0,
        "slot": "405",
        "type": "t_address"
      },
      {
        "astId": 66010,
        "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
        "label": "testValue",
        "offset": 0,
        "slot": "406",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)36_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[36]",
        "numberOfBytes": "1152"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IBNIMinter)10340": {
        "encoding": "inplace",
        "label": "contract IBNIMinter",
        "numberOfBytes": "20"
      },
      "t_contract(IBNIVault)10387": {
        "encoding": "inplace",
        "label": "contract IBNIVault",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)1707": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(ISwap)56041": {
        "encoding": "inplace",
        "label": "contract ISwap",
        "numberOfBytes": "20"
      },
      "t_contract(IXChainAdapter)56366": {
        "encoding": "inplace",
        "label": "contract IXChainAdapter",
        "numberOfBytes": "20"
      },
      "t_enum(AdapterType)60144": {
        "encoding": "inplace",
        "label": "enum BasicUserAgentBase.AdapterType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4359_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4359_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_enum(AdapterType)60144)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum BasicUserAgentBase.AdapterType)",
        "numberOfBytes": "32",
        "value": "t_enum(AdapterType)60144"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4359_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 4358,
            "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4058_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4058_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 4053,
            "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4057,
            "contract": "contracts/xchain/agent/test/UserAgentTest.sol:UserAgentTest",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}