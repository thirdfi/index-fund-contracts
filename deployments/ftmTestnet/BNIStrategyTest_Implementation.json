{
  "address": "0xE276b8197D61D1b5da0d50E0B6c7B41937da29C3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "AddToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "RemoveToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "SetAdminWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasuryWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasuryWallet",
          "type": "address"
        }
      ],
      "name": "SetTreasuryWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SWAP_BASE_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20UpgradeableExt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20UpgradeableExt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTokenCompositionPerc",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEachPoolInUSD",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "pools",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUSDTPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_SWAP_BASE_TOKEN",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_USDTAmts",
          "type": "uint256[]"
        }
      ],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryWallet",
          "type": "address"
        }
      ],
      "name": "setTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        }
      ],
      "name": "withdrawPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3ddc042cf81451158b6ffccd780a0f3545f32ad89aad4515b1ad1fb08f3d4da1",
  "receipt": {
    "to": null,
    "from": "0xd91Fbc9b431464D737E1BC4e76900D43405a639b",
    "contractAddress": "0xE276b8197D61D1b5da0d50E0B6c7B41937da29C3",
    "transactionIndex": 1,
    "gasUsed": "1906870",
    "logsBloom": "0x
    "blockHash": "0x00002bcc000009c656de7e138eb2a7cd41a63b4f4f944418a384c6c697c0936b",
    "transactionHash": "0x3ddc042cf81451158b6ffccd780a0f3545f32ad89aad4515b1ad1fb08f3d4da1",
    "logs": [],
    "blockNumber": 10277699,
    "cumulativeGasUsed": "1927870",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "88c5ae54797f57c2378a41f884fd5600",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"RemoveToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetAdminWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasuryWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasuryWallet\",\"type\":\"address\"}],\"name\":\"SetTreasuryWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SWAP_BASE_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20UpgradeableExt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20UpgradeableExt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenCompositionPerc\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEachPoolInUSD\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pools\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SWAP_BASE_TOKEN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_USDTAmts\",\"type\":\"uint256[]\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"}],\"name\":\"withdrawFromPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"}],\"name\":\"withdrawPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getUSDTPriceInUSD()\":{\"returns\":{\"_0\":\"the price of USDT in USD.\"}},\"invest(address[],uint256[])\":{\"params\":{\"_USDTAmts\":\"amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bni/strategy/BNIStrategyTest.sol\":\"BNIStrategyTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/bni/priceOracle/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity  0.8.9;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n\\r\\n    /**\\r\\n     * @notice Sets or replaces price sources of assets\\r\\n     * @param assets The addresses of the assets\\r\\n     * @param sources The addresses of the price sources\\r\\n     */\\r\\n    function setAssetSources(address[] memory assets, address[] memory sources) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the source for an asset address\\r\\n     * @param asset The address of the asset\\r\\n     * @return The address of the source\\r\\n     */\\r\\n    function getSourceOfAsset(address asset) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param assets The list of assets addresses\\r\\n     * @return prices The prices of the given assets\\r\\n     */\\r\\n    function getAssetsPrices(address[] memory assets) external view returns (uint[] memory prices, uint8[] memory decimalsArray);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param asset The asset address\\r\\n     * @return price The prices of the given assets\\r\\n     */\\r\\n    function getAssetPrice(address asset) external view returns (uint price, uint8 decimals);\\r\\n}\",\"keccak256\":\"0xaf07db77a02bf0cdc1cbd5f7c33cebd04e3e961c517adc53664eca0fc6dccdfe\",\"license\":\"MIT\"},\"contracts/bni/strategy/BNIStrategyTest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../priceOracle/IPriceOracle.sol\\\";\\n\\ninterface IRouter {\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IERC20UpgradeableExt is IERC20Upgradeable {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract BNIStrategyTest is OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20UpgradeableExt;\\n\\n    IRouter public router;\\n    IERC20UpgradeableExt public SWAP_BASE_TOKEN; // It has same role with WETH on Ethereum Swaps. Most of tokens have been paired with this token.\\n    IERC20UpgradeableExt public USDT;\\n    uint8 usdtDecimals;\\n\\n    uint constant DENOMINATOR = 10000;\\n\\n    address public treasuryWallet;\\n    address public admin;\\n    address public vault;\\n    IPriceOracle public priceOracle;\\n\\n    address[] public tokens;\\n    mapping(address => uint) public pid; // Pool indices in tokens array\\n\\n    event AddToken(address token, uint pid);\\n    event RemoveToken(address token, uint pid);\\n    event Withdraw(uint sharePerc, uint USDTAmt);\\n    event EmergencyWithdraw(uint USDTAmt);\\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\\n    event SetAdminWallet(address oldAdmin, address newAdmin);\\n\\n    modifier onlyVault {\\n        require(msg.sender == vault, \\\"Only vault\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _treasuryWallet, address _admin,\\n        address _priceOracle,\\n        address _router, address _SWAP_BASE_TOKEN,\\n        address _USDT, address _token0\\n    ) external initializer {\\n        require(_router != address(0), \\\"Invalid router\\\");\\n        require(_SWAP_BASE_TOKEN != address(0), \\\"Invalid SWAP_BASE_TOKEN\\\");\\n        require(_USDT != address(0), \\\"Invalid USDT\\\");\\n        require(_token0 != address(0), \\\"Invalid token0\\\");\\n        __Ownable_init();\\n\\n        treasuryWallet = _treasuryWallet;\\n        admin = _admin;\\n        priceOracle = IPriceOracle(_priceOracle);\\n        router = IRouter(_router);\\n        SWAP_BASE_TOKEN = IERC20UpgradeableExt(_SWAP_BASE_TOKEN);\\n\\n        USDT = IERC20UpgradeableExt(_USDT);\\n        usdtDecimals = USDT.decimals();\\n        require(6 <= usdtDecimals, \\\"USDT decimals must >= 6\\\");\\n\\n        tokens.push(_token0);\\n        updatePid();\\n\\n        // USDT.safeApprove(address(router), type(uint).max);\\n        // IERC20UpgradeableExt(_token0).safeApprove(address(router), type(uint).max);\\n    }\\n\\n    function updatePid() internal {\\n        address[] memory _tokens = tokens;\\n\\n        uint tokenCnt = _tokens.length;\\n        for (uint i = 0; i < tokenCnt; i ++) {\\n            pid[_tokens[i]] = i;\\n        }\\n    }\\n\\n    function addToken(address _token) external onlyOwner {\\n        uint _pid = pid[_token];\\n        require ((_pid == 0 && _token != tokens[0]), \\\"Already added\\\");\\n\\n        tokens.push(_token);\\n        _pid = tokens.length-1;\\n        pid[_token] = _pid;\\n\\n        // if (IERC20UpgradeableExt(_token).allowance(address(this), address(router)) == 0) {\\n        //     IERC20UpgradeableExt(_token).safeApprove(address(router), type(uint).max);\\n        // }\\n        emit AddToken(_token, _pid);\\n    }\\n\\n    function removeToken(uint _pid) external onlyOwner {\\n        uint tokenCnt = tokens.length;\\n        require(_pid < tokenCnt, \\\"Invalid pid\\\");\\n        uint pool = _getPoolInUSD(_pid);\\n        require(pool == 0, \\\"Pool is not empty\\\");\\n\\n        address _token = tokens[_pid];\\n        tokens[_pid] = tokens[tokenCnt-1];\\n        tokens.pop();\\n\\n        pid[_token] = 0;\\n        updatePid();\\n\\n        emit RemoveToken(_token, _pid);\\n    }\\n\\n    /// @param _USDTAmts amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals\\n    function invest(address[] memory _tokens, uint[] memory _USDTAmts) external onlyVault {\\n        uint poolCnt = _tokens.length;\\n        uint USDTAmt;\\n        uint[] memory USDTAmts = new uint[](tokens.length);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            uint amount = _USDTAmts[i];\\n            USDTAmt += amount;\\n            uint _pid = pid[_tokens[i]];\\n            USDTAmts[_pid] += amount;\\n        }\\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\\n\\n        // _invest(USDTAmts);\\n    }\\n\\n    function _invest(uint[] memory _USDTAmts) internal virtual {\\n        uint poolCnt = _USDTAmts.length;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            address token = tokens[i];\\n            if (token == address(USDT)) continue;\\n\\n            uint USDTAmt = _USDTAmts[i];\\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n            (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(token);\\n            uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\\n            uint numerator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\\n            uint denominator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\\n            uint amountOutMin = USDTAmt * numerator * 95 / (denominator * 100);\\n\\n            if (token == address(SWAP_BASE_TOKEN)) {\\n                _swap(address(USDT), token, USDTAmt, amountOutMin);\\n            } else {\\n                _swap2(address(USDT), token, USDTAmt, amountOutMin);\\n            }\\n        }\\n    }\\n\\n    function withdrawPerc(uint _sharePerc) external onlyVault returns (uint USDTAmt) {\\n        require(_sharePerc <= 1e18, \\\"Over 100%\\\");\\n        // USDTAmt = _withdraw(_sharePerc);\\n        USDTAmt = USDT.balanceOf(address(this)) * _sharePerc / 1e18;\\n        USDT.safeTransfer(vault, USDTAmt);\\n        emit Withdraw(_sharePerc, USDTAmt);\\n    }\\n\\n    function _withdraw(uint _sharePerc) internal virtual returns (uint USDTAmt) {\\n        uint poolCnt = tokens.length;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            USDTAmt += _withdrawFromPool(i, _sharePerc);\\n        }\\n    }\\n\\n    function _withdrawFromPool(uint _pid, uint _sharePerc) internal virtual returns (uint USDTAmt) {\\n        IERC20UpgradeableExt token = IERC20UpgradeableExt(tokens[_pid]);\\n        uint amount = token.balanceOf(address(this)) * _sharePerc / 1e18;\\n        if (0 < amount) {\\n            if (address(token) == address(USDT)) {\\n                USDTAmt = amount;\\n            } else {\\n                (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n                (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(address(token));\\n                uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\\n                uint numerator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\\n                uint denominator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\\n                uint amountOutMin = amount * numerator * 95 / (denominator * 100);\\n\\n                if (address(token) == address(SWAP_BASE_TOKEN)) {\\n                    USDTAmt = _swap(address(token), address(USDT), amount, amountOutMin);\\n                } else{\\n                    USDTAmt = _swap2(address(token), address(USDT), amount, amountOutMin);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenA;\\n        path[1] = _tokenB;\\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[1];\\n    }\\n\\n    function _swap2(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\\n        address[] memory path = new address[](3);\\n        path[0] = _tokenA;\\n        path[1] = address(SWAP_BASE_TOKEN);\\n        path[2] = _tokenB;\\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[2];\\n    }\\n\\n    function withdrawFromPool(uint _pid, uint _sharePerc) external onlyVault returns (uint USDTAmt) {\\n        _pid;\\n        require(_sharePerc <= 1e18, \\\"Over 100%\\\");\\n        // USDTAmt = _withdrawFromPool(_pid, _sharePerc);\\n        USDTAmt = USDT.balanceOf(address(this)) * _sharePerc / 1e18;\\n        USDT.safeTransfer(vault, USDTAmt);\\n    }\\n\\n    function emergencyWithdraw() external onlyVault {\\n        // 1e18 == 100% of share\\n        // uint USDTAmt = _withdraw(1e18);\\n        uint USDTAmt = USDT.balanceOf(address(this));\\n        if (0 < USDTAmt) {\\n            USDT.safeTransfer(vault, USDTAmt);\\n        }\\n        emit EmergencyWithdraw(USDTAmt);\\n    }\\n\\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\\n        address oldTreasuryWallet = treasuryWallet;\\n        treasuryWallet = _treasuryWallet;\\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\\n    }\\n\\n    function setAdmin(address _admin) external onlyOwner {\\n        address oldAdmin = admin;\\n        admin = _admin;\\n        emit SetAdminWallet(oldAdmin, _admin);\\n    }\\n\\n    function setVault(address _vault) external onlyOwner {\\n        require(vault == address(0), \\\"Vault set\\\");\\n        vault = _vault;\\n    }\\n\\n    /// @return the price of USDT in USD.\\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\\n        // return priceOracle.getAssetPrice(address(USDT));\\n        return (1e8, 8);\\n    }\\n\\n    function getEachPoolInUSD() public view returns (address[] memory, uint[] memory pools) {\\n        return (tokens, _getEachPoolInUSD());\\n    }\\n\\n    function _getEachPoolInUSD() private view returns (uint[] memory pools) {\\n        uint poolCnt = tokens.length;\\n        pools = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            pools[i] = _getPoolInUSD(i);\\n        }\\n    }\\n\\n    function _getPoolInUSD(uint _pid) private view returns (uint pool) {\\n        _pid;\\n        // IERC20UpgradeableExt token = IERC20UpgradeableExt(tokens[_pid]);\\n        // uint amount = token.balanceOf(address(this));\\n        // if (0 < amount) {\\n        //     (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(address(token));\\n        //     uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\\n        //     pool = amount * TOKENPriceInUSD * (10 ** (18-tokenDecimals)) / (10 ** (TOKENPriceDecimals));\\n        // }\\n        uint amount = USDT.balanceOf(address(this));\\n        pool = amount * (10 ** (18-usdtDecimals));\\n    }\\n\\n    function getAllPoolInUSD() public view returns (uint) {\\n        uint[] memory pools = _getEachPoolInUSD();\\n        uint poolCnt = pools.length;\\n        uint allPool;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            allPool += pools[i];\\n        }\\n        return allPool;\\n    }\\n\\n    function getCurrentTokenCompositionPerc() public view returns (address[] memory, uint[] memory percentages) {\\n        uint[] memory pools = _getEachPoolInUSD();\\n        uint poolCnt = pools.length;\\n        uint allPool;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            allPool += pools[i];\\n        }\\n\\n        uint defaultTargetPerc = poolCnt == 0 ? 0 : DENOMINATOR / poolCnt;\\n        percentages = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            percentages[i] = allPool == 0 ? defaultTargetPerc : pools[i] * DENOMINATOR / allPool;\\n        }\\n        return (tokens, percentages);\\n    }\\n\\n    function getAPR() external view virtual returns (uint) {\\n        return 0;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x21c5088e4ff7761ac3631b3adb8ca8bba0dc329b793b846ac01b3ea2cfff07db\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612187806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c8063aae09236116100f9578063db2e21bc11610097578063f2fde38b11610071578063f2fde38b1461036b578063f851a4401461037e578063f887ea4014610391578063fbfa77cf146103a457600080fd5b8063db2e21bc1461033d578063ed47d90914610345578063ef1b31661461035857600080fd5b8063c54e44eb116100d3578063c54e44eb146102f0578063c89d5b8b14610303578063d48bfca71461030a578063d8274d0a1461031d57600080fd5b8063aae09236146102ba578063b47c6a27146102c2578063bd244af4146102da57600080fd5b80634631b24611610166578063704b6c0211610140578063704b6c021461027b578063715018a61461028e5780638da5cb5b14610296578063a8602fea146102a757600080fd5b80634631b2461461023f5780634f64b2be146102555780636817031b1461026857600080fd5b80632630c12f146101ae57806326b89b71146101de57806330703f32146101f3578063358764761461020657806336c5d724146102195780634626402b1461022c575b600080fd5b606b546101c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101f16101ec366004611b83565b6103b7565b005b6066546101c1906001600160a01b031681565b6101f1610214366004611c43565b610518565b6101f1610227366004611cc9565b610851565b6068546101c1906001600160a01b031681565b610247610a49565b6040516101d5929190611ce2565b6101c1610263366004611cc9565b610be9565b6101f1610276366004611d66565b610c13565b6101f1610289366004611d66565b610ca4565b6101f1610d30565b6033546001600160a01b03166101c1565b6101f16102b5366004611d66565b610d66565b610247610dea565b604080516305f5e100815260086020820152016101d5565b6102e2610e57565b6040519081526020016101d5565b6067546101c1906001600160a01b031681565b60006102e2565b6101f1610318366004611d66565b610eb4565b6102e261032b366004611d66565b606d6020526000908152604090205481565b6101f1611019565b6102e2610353366004611cc9565b61111a565b6102e2610366366004611d81565b611284565b6101f1610379366004611d66565b6113b6565b6069546101c1906001600160a01b031681565b6065546101c1906001600160a01b031681565b606a546101c1906001600160a01b031681565b606a546001600160a01b031633146103ea5760405162461bcd60e51b81526004016103e190611da3565b60405180910390fd5b8151606c54600090819067ffffffffffffffff81111561040c5761040c611a96565b604051908082528060200260200182016040528015610435578160200160208202803683370190505b50905060005b838110156104f257600085828151811061045757610457611dc7565b60200260200101519050808461046d9190611df3565b93506000606d600089858151811061048757610487611dc7565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020549050818482815181106104c5576104c5611dc7565b602002602001018181516104d99190611df3565b9052508291506104ea905081611e0b565b91505061043b565b50606a54606754610511916001600160a01b0391821691163085611451565b5050505050565b600061052460016114c2565b9050801561053c576000805461ff0019166101001790555b6001600160a01b0385166105835760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b2103937baba32b960911b60448201526064016103e1565b6001600160a01b0384166105d95760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420535741505f424153455f544f4b454e00000000000000000060448201526064016103e1565b6001600160a01b03831661061e5760405162461bcd60e51b815260206004820152600c60248201526b125b9d985b1a59081554d11560a21b60448201526064016103e1565b6001600160a01b0382166106655760405162461bcd60e51b815260206004820152600e60248201526d0496e76616c696420746f6b656e360941b60448201526064016103e1565b61066d61154f565b606880546001600160a01b03199081166001600160a01b038b8116919091179092556069805482168a8416179055606b805482168984161790556065805482168884161790556066805482168784161790556067805490911691851691821790556040805163313ce56760e01b8152905163313ce56791600481810192602092909190829003018186803b15801561070457600080fd5b505afa158015610718573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073c9190611e26565b6067805460ff60a01b1916600160a01b60ff93841681029190911791829055900416600611156107ae5760405162461bcd60e51b815260206004820152601760248201527f5553445420646563696d616c73206d757374203e3d203600000000000000000060448201526064016103e1565b606c80546001810182556000919091527f2b4a51ab505fc96a0952efda2ba61bcd3078d4c02c39a186ec16f21883fbe0160180546001600160a01b0319166001600160a01b03841617905561080161157e565b8015610847576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6033546001600160a01b0316331461087b5760405162461bcd60e51b81526004016103e190611e49565b606c548082106108bb5760405162461bcd60e51b815260206004820152600b60248201526a125b9d985b1a59081c1a5960aa1b60448201526064016103e1565b60006108c683611647565b9050801561090a5760405162461bcd60e51b8152602060048201526011602482015270506f6f6c206973206e6f7420656d70747960781b60448201526064016103e1565b6000606c848154811061091f5761091f611dc7565b6000918252602090912001546001600160a01b03169050606c610943600185611e7e565b8154811061095357610953611dc7565b600091825260209091200154606c80546001600160a01b03909216918690811061097f5761097f611dc7565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606c8054806109be576109be611e95565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0383168252606d90526040812055610a0161157e565b604080516001600160a01b0383168152602081018690527f67f5552e5abc48ba6305130450943fa23b76a0b6eb18c29d3eea39559139fc5a910160405180910390a150505050565b6060806000610a566116fe565b80519091506000805b82811015610aa057838181518110610a7957610a79611dc7565b602002602001015182610a8c9190611df3565b915080610a9881611e0b565b915050610a5f565b5060008215610aba57610ab583612710611eab565b610abd565b60005b90508267ffffffffffffffff811115610ad857610ad8611a96565b604051908082528060200260200182016040528015610b01578160200160208202803683370190505b50945060005b83811015610b7d578215610b4c5782612710868381518110610b2b57610b2b611dc7565b6020026020010151610b3d9190611ecd565b610b479190611eab565b610b4e565b815b868281518110610b6057610b60611dc7565b602090810291909101015280610b7581611e0b565b915050610b07565b50606c8581805480602002602001604051908101604052809291908181526020018280548015610bd657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610bb8575b5050505050915095509550505050509091565b606c8181548110610bf957600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b03163314610c3d5760405162461bcd60e51b81526004016103e190611e49565b606a546001600160a01b031615610c825760405162461bcd60e51b815260206004820152600960248201526815985d5b1d081cd95d60ba1b60448201526064016103e1565b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314610cce5760405162461bcd60e51b81526004016103e190611e49565b606980546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9f0ac88be9159761bacf6c9e7c294c397ebf594607f6b3f2f70e7e0841ea68e891015b60405180910390a15050565b6033546001600160a01b03163314610d5a5760405162461bcd60e51b81526004016103e190611e49565b610d646000611791565b565b6033546001600160a01b03163314610d905760405162461bcd60e51b81526004016103e190611e49565b606880546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527febcecb9db04071cf4b4ecc1e2e1e4603e74c9382d6e36c3531f0b62af4c78ed79101610d24565b606080606c610df76116fe565b815460408051602080840282018101909252828152918491830182828015610e4857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e2a575b50505050509150915091509091565b600080610e626116fe565b80519091506000805b82811015610eac57838181518110610e8557610e85611dc7565b602002602001015182610e989190611df3565b915080610ea481611e0b565b915050610e6b565b509392505050565b6033546001600160a01b03163314610ede5760405162461bcd60e51b81526004016103e190611e49565b6001600160a01b0381166000908152606d602052604090205480158015610f305750606c600081548110610f1457610f14611dc7565b6000918252602090912001546001600160a01b03838116911614155b610f6c5760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481859191959609a1b60448201526064016103e1565b606c80546001808201835560008390527f2b4a51ab505fc96a0952efda2ba61bcd3078d4c02c39a186ec16f21883fbe01690910180546001600160a01b0319166001600160a01b0386161790559054610fc59190611e7e565b6001600160a01b0383166000818152606d6020908152604091829020849055815192835282018390529192507fe1bea1af9b1d1aede8b7fa043080de8690470a8ae61449360b3d0c0bf8104b469101610d24565b606a546001600160a01b031633146110435760405162461bcd60e51b81526004016103e190611da3565b6067546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561108757600080fd5b505afa15801561109b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bf9190611eec565b905080156110e457606a546067546110e4916001600160a01b039182169116836117e3565b6040518181527f99d7f8b71cfb9126984f7a5eed3a40e64a8959e9b0e442221546fb04ec6a489c9060200160405180910390a150565b606a546000906001600160a01b031633146111475760405162461bcd60e51b81526004016103e190611da3565b670de0b6b3a764000082111561118b5760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b60448201526064016103e1565b6067546040516370a0823160e01b8152306004820152670de0b6b3a76400009184916001600160a01b03909116906370a082319060240160206040518083038186803b1580156111da57600080fd5b505afa1580156111ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112129190611eec565b61121c9190611ecd565b6112269190611eab565b606a54606754919250611246916001600160a01b039081169116836117e3565b60408051838152602081018390527f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8910160405180910390a1919050565b606a546000906001600160a01b031633146112b15760405162461bcd60e51b81526004016103e190611da3565b670de0b6b3a76400008211156112f55760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b60448201526064016103e1565b6067546040516370a0823160e01b8152306004820152670de0b6b3a76400009184916001600160a01b03909116906370a082319060240160206040518083038186803b15801561134457600080fd5b505afa158015611358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137c9190611eec565b6113869190611ecd565b6113909190611eab565b606a546067549192506113b0916001600160a01b039081169116836117e3565b92915050565b6033546001600160a01b031633146113e05760405162461bcd60e51b81526004016103e190611e49565b6001600160a01b0381166114455760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103e1565b61144e81611791565b50565b6040516001600160a01b03808516602483015283166044820152606481018290526114bc9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611813565b50505050565b60008054610100900460ff1615611509578160ff1660011480156114e55750303b155b6115015760405162461bcd60e51b81526004016103e190611f05565b506000919050565b60005460ff8084169116106115305760405162461bcd60e51b81526004016103e190611f05565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166115765760405162461bcd60e51b81526004016103e190611f53565b610d646118e5565b6000606c8054806020026020016040519081016040528092919081815260200182805480156115d657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115b8575b505083519394506000925050505b818110156116425780606d600085848151811061160357611603611dc7565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061163a90611e0b565b9150506115e4565b505050565b6067546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561168f57600080fd5b505afa1580156116a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c79190611eec565b6067549091506116e290600160a01b900460ff166012611f9e565b6116ed90600a6120a5565b6116f79082611ecd565b9392505050565b606c546060908067ffffffffffffffff81111561171d5761171d611a96565b604051908082528060200260200182016040528015611746578160200160208202803683370190505b50915060005b8181101561178c5761175d81611647565b83828151811061176f5761176f611dc7565b60209081029190910101528061178481611e0b565b91505061174c565b505090565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03831660248201526044810182905261164290849063a9059cbb60e01b90606401611485565b6000611868826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119159092919063ffffffff16565b805190915015611642578080602001905181019061188691906120b4565b6116425760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103e1565b600054610100900460ff1661190c5760405162461bcd60e51b81526004016103e190611f53565b610d6433611791565b6060611924848460008561192c565b949350505050565b60608247101561198d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103e1565b6001600160a01b0385163b6119e45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103e1565b600080866001600160a01b03168587604051611a009190612102565b60006040518083038185875af1925050503d8060008114611a3d576040519150601f19603f3d011682016040523d82523d6000602084013e611a42565b606091505b5091509150611a52828286611a5d565b979650505050505050565b60608315611a6c5750816116f7565b825115611a7c5782518084602001fd5b8160405162461bcd60e51b81526004016103e1919061211e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611ad557611ad5611a96565b604052919050565b600067ffffffffffffffff821115611af757611af7611a96565b5060051b60200190565b80356001600160a01b038116811461154a57600080fd5b600082601f830112611b2957600080fd5b81356020611b3e611b3983611add565b611aac565b82815260059290921b84018101918181019086841115611b5d57600080fd5b8286015b84811015611b785780358352918301918301611b61565b509695505050505050565b60008060408385031215611b9657600080fd5b823567ffffffffffffffff80821115611bae57600080fd5b818501915085601f830112611bc257600080fd5b81356020611bd2611b3983611add565b82815260059290921b84018101918181019089841115611bf157600080fd5b948201945b83861015611c1657611c0786611b01565b82529482019490820190611bf6565b96505086013592505080821115611c2c57600080fd5b50611c3985828601611b18565b9150509250929050565b600080600080600080600060e0888a031215611c5e57600080fd5b611c6788611b01565b9650611c7560208901611b01565b9550611c8360408901611b01565b9450611c9160608901611b01565b9350611c9f60808901611b01565b9250611cad60a08901611b01565b9150611cbb60c08901611b01565b905092959891949750929550565b600060208284031215611cdb57600080fd5b5035919050565b604080825283519082018190526000906020906060840190828701845b82811015611d245781516001600160a01b031684529284019290840190600101611cff565b5050508381038285015284518082528583019183019060005b81811015611d5957835183529284019291840191600101611d3d565b5090979650505050505050565b600060208284031215611d7857600080fd5b6116f782611b01565b60008060408385031215611d9457600080fd5b50508035926020909101359150565b6020808252600a908201526913db9b1e481d985d5b1d60b21b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611e0657611e06611ddd565b500190565b6000600019821415611e1f57611e1f611ddd565b5060010190565b600060208284031215611e3857600080fd5b815160ff811681146116f757600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082821015611e9057611e90611ddd565b500390565b634e487b7160e01b600052603160045260246000fd5b600082611ec857634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611ee757611ee7611ddd565b500290565b600060208284031215611efe57600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060ff821660ff841680821015611fb857611fb8611ddd565b90039392505050565b600181815b80851115611ffc578160001904821115611fe257611fe2611ddd565b80851615611fef57918102915b93841c9390800290611fc6565b509250929050565b600082612013575060016113b0565b81612020575060006113b0565b816001811461203657600281146120405761205c565b60019150506113b0565b60ff84111561205157612051611ddd565b50506001821b6113b0565b5060208310610133831016604e8410600b841016171561207f575081810a6113b0565b6120898383611fc1565b806000190482111561209d5761209d611ddd565b029392505050565b60006116f760ff841683612004565b6000602082840312156120c657600080fd5b815180151581146116f757600080fd5b60005b838110156120f15781810151838201526020016120d9565b838111156114bc5750506000910152565b600082516121148184602087016120d6565b9190910192915050565b602081526000825180602084015261213d8160408501602087016120d6565b601f01601f1916919091016040019291505056fea264697066735822122070ebf524711cc0d296368e32fd53c582851ec867b9436a9d883e48d1cc2b72d064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c8063aae09236116100f9578063db2e21bc11610097578063f2fde38b11610071578063f2fde38b1461036b578063f851a4401461037e578063f887ea4014610391578063fbfa77cf146103a457600080fd5b8063db2e21bc1461033d578063ed47d90914610345578063ef1b31661461035857600080fd5b8063c54e44eb116100d3578063c54e44eb146102f0578063c89d5b8b14610303578063d48bfca71461030a578063d8274d0a1461031d57600080fd5b8063aae09236146102ba578063b47c6a27146102c2578063bd244af4146102da57600080fd5b80634631b24611610166578063704b6c0211610140578063704b6c021461027b578063715018a61461028e5780638da5cb5b14610296578063a8602fea146102a757600080fd5b80634631b2461461023f5780634f64b2be146102555780636817031b1461026857600080fd5b80632630c12f146101ae57806326b89b71146101de57806330703f32146101f3578063358764761461020657806336c5d724146102195780634626402b1461022c575b600080fd5b606b546101c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101f16101ec366004611b83565b6103b7565b005b6066546101c1906001600160a01b031681565b6101f1610214366004611c43565b610518565b6101f1610227366004611cc9565b610851565b6068546101c1906001600160a01b031681565b610247610a49565b6040516101d5929190611ce2565b6101c1610263366004611cc9565b610be9565b6101f1610276366004611d66565b610c13565b6101f1610289366004611d66565b610ca4565b6101f1610d30565b6033546001600160a01b03166101c1565b6101f16102b5366004611d66565b610d66565b610247610dea565b604080516305f5e100815260086020820152016101d5565b6102e2610e57565b6040519081526020016101d5565b6067546101c1906001600160a01b031681565b60006102e2565b6101f1610318366004611d66565b610eb4565b6102e261032b366004611d66565b606d6020526000908152604090205481565b6101f1611019565b6102e2610353366004611cc9565b61111a565b6102e2610366366004611d81565b611284565b6101f1610379366004611d66565b6113b6565b6069546101c1906001600160a01b031681565b6065546101c1906001600160a01b031681565b606a546101c1906001600160a01b031681565b606a546001600160a01b031633146103ea5760405162461bcd60e51b81526004016103e190611da3565b60405180910390fd5b8151606c54600090819067ffffffffffffffff81111561040c5761040c611a96565b604051908082528060200260200182016040528015610435578160200160208202803683370190505b50905060005b838110156104f257600085828151811061045757610457611dc7565b60200260200101519050808461046d9190611df3565b93506000606d600089858151811061048757610487611dc7565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020549050818482815181106104c5576104c5611dc7565b602002602001018181516104d99190611df3565b9052508291506104ea905081611e0b565b91505061043b565b50606a54606754610511916001600160a01b0391821691163085611451565b5050505050565b600061052460016114c2565b9050801561053c576000805461ff0019166101001790555b6001600160a01b0385166105835760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b2103937baba32b960911b60448201526064016103e1565b6001600160a01b0384166105d95760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420535741505f424153455f544f4b454e00000000000000000060448201526064016103e1565b6001600160a01b03831661061e5760405162461bcd60e51b815260206004820152600c60248201526b125b9d985b1a59081554d11560a21b60448201526064016103e1565b6001600160a01b0382166106655760405162461bcd60e51b815260206004820152600e60248201526d0496e76616c696420746f6b656e360941b60448201526064016103e1565b61066d61154f565b606880546001600160a01b03199081166001600160a01b038b8116919091179092556069805482168a8416179055606b805482168984161790556065805482168884161790556066805482168784161790556067805490911691851691821790556040805163313ce56760e01b8152905163313ce56791600481810192602092909190829003018186803b15801561070457600080fd5b505afa158015610718573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073c9190611e26565b6067805460ff60a01b1916600160a01b60ff93841681029190911791829055900416600611156107ae5760405162461bcd60e51b815260206004820152601760248201527f5553445420646563696d616c73206d757374203e3d203600000000000000000060448201526064016103e1565b606c80546001810182556000919091527f2b4a51ab505fc96a0952efda2ba61bcd3078d4c02c39a186ec16f21883fbe0160180546001600160a01b0319166001600160a01b03841617905561080161157e565b8015610847576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6033546001600160a01b0316331461087b5760405162461bcd60e51b81526004016103e190611e49565b606c548082106108bb5760405162461bcd60e51b815260206004820152600b60248201526a125b9d985b1a59081c1a5960aa1b60448201526064016103e1565b60006108c683611647565b9050801561090a5760405162461bcd60e51b8152602060048201526011602482015270506f6f6c206973206e6f7420656d70747960781b60448201526064016103e1565b6000606c848154811061091f5761091f611dc7565b6000918252602090912001546001600160a01b03169050606c610943600185611e7e565b8154811061095357610953611dc7565b600091825260209091200154606c80546001600160a01b03909216918690811061097f5761097f611dc7565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606c8054806109be576109be611e95565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0383168252606d90526040812055610a0161157e565b604080516001600160a01b0383168152602081018690527f67f5552e5abc48ba6305130450943fa23b76a0b6eb18c29d3eea39559139fc5a910160405180910390a150505050565b6060806000610a566116fe565b80519091506000805b82811015610aa057838181518110610a7957610a79611dc7565b602002602001015182610a8c9190611df3565b915080610a9881611e0b565b915050610a5f565b5060008215610aba57610ab583612710611eab565b610abd565b60005b90508267ffffffffffffffff811115610ad857610ad8611a96565b604051908082528060200260200182016040528015610b01578160200160208202803683370190505b50945060005b83811015610b7d578215610b4c5782612710868381518110610b2b57610b2b611dc7565b6020026020010151610b3d9190611ecd565b610b479190611eab565b610b4e565b815b868281518110610b6057610b60611dc7565b602090810291909101015280610b7581611e0b565b915050610b07565b50606c8581805480602002602001604051908101604052809291908181526020018280548015610bd657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610bb8575b5050505050915095509550505050509091565b606c8181548110610bf957600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b03163314610c3d5760405162461bcd60e51b81526004016103e190611e49565b606a546001600160a01b031615610c825760405162461bcd60e51b815260206004820152600960248201526815985d5b1d081cd95d60ba1b60448201526064016103e1565b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314610cce5760405162461bcd60e51b81526004016103e190611e49565b606980546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f9f0ac88be9159761bacf6c9e7c294c397ebf594607f6b3f2f70e7e0841ea68e891015b60405180910390a15050565b6033546001600160a01b03163314610d5a5760405162461bcd60e51b81526004016103e190611e49565b610d646000611791565b565b6033546001600160a01b03163314610d905760405162461bcd60e51b81526004016103e190611e49565b606880546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527febcecb9db04071cf4b4ecc1e2e1e4603e74c9382d6e36c3531f0b62af4c78ed79101610d24565b606080606c610df76116fe565b815460408051602080840282018101909252828152918491830182828015610e4857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e2a575b50505050509150915091509091565b600080610e626116fe565b80519091506000805b82811015610eac57838181518110610e8557610e85611dc7565b602002602001015182610e989190611df3565b915080610ea481611e0b565b915050610e6b565b509392505050565b6033546001600160a01b03163314610ede5760405162461bcd60e51b81526004016103e190611e49565b6001600160a01b0381166000908152606d602052604090205480158015610f305750606c600081548110610f1457610f14611dc7565b6000918252602090912001546001600160a01b03838116911614155b610f6c5760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481859191959609a1b60448201526064016103e1565b606c80546001808201835560008390527f2b4a51ab505fc96a0952efda2ba61bcd3078d4c02c39a186ec16f21883fbe01690910180546001600160a01b0319166001600160a01b0386161790559054610fc59190611e7e565b6001600160a01b0383166000818152606d6020908152604091829020849055815192835282018390529192507fe1bea1af9b1d1aede8b7fa043080de8690470a8ae61449360b3d0c0bf8104b469101610d24565b606a546001600160a01b031633146110435760405162461bcd60e51b81526004016103e190611da3565b6067546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561108757600080fd5b505afa15801561109b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bf9190611eec565b905080156110e457606a546067546110e4916001600160a01b039182169116836117e3565b6040518181527f99d7f8b71cfb9126984f7a5eed3a40e64a8959e9b0e442221546fb04ec6a489c9060200160405180910390a150565b606a546000906001600160a01b031633146111475760405162461bcd60e51b81526004016103e190611da3565b670de0b6b3a764000082111561118b5760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b60448201526064016103e1565b6067546040516370a0823160e01b8152306004820152670de0b6b3a76400009184916001600160a01b03909116906370a082319060240160206040518083038186803b1580156111da57600080fd5b505afa1580156111ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112129190611eec565b61121c9190611ecd565b6112269190611eab565b606a54606754919250611246916001600160a01b039081169116836117e3565b60408051838152602081018390527f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8910160405180910390a1919050565b606a546000906001600160a01b031633146112b15760405162461bcd60e51b81526004016103e190611da3565b670de0b6b3a76400008211156112f55760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b60448201526064016103e1565b6067546040516370a0823160e01b8152306004820152670de0b6b3a76400009184916001600160a01b03909116906370a082319060240160206040518083038186803b15801561134457600080fd5b505afa158015611358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137c9190611eec565b6113869190611ecd565b6113909190611eab565b606a546067549192506113b0916001600160a01b039081169116836117e3565b92915050565b6033546001600160a01b031633146113e05760405162461bcd60e51b81526004016103e190611e49565b6001600160a01b0381166114455760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103e1565b61144e81611791565b50565b6040516001600160a01b03808516602483015283166044820152606481018290526114bc9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611813565b50505050565b60008054610100900460ff1615611509578160ff1660011480156114e55750303b155b6115015760405162461bcd60e51b81526004016103e190611f05565b506000919050565b60005460ff8084169116106115305760405162461bcd60e51b81526004016103e190611f05565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166115765760405162461bcd60e51b81526004016103e190611f53565b610d646118e5565b6000606c8054806020026020016040519081016040528092919081815260200182805480156115d657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115b8575b505083519394506000925050505b818110156116425780606d600085848151811061160357611603611dc7565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061163a90611e0b565b9150506115e4565b505050565b6067546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561168f57600080fd5b505afa1580156116a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c79190611eec565b6067549091506116e290600160a01b900460ff166012611f9e565b6116ed90600a6120a5565b6116f79082611ecd565b9392505050565b606c546060908067ffffffffffffffff81111561171d5761171d611a96565b604051908082528060200260200182016040528015611746578160200160208202803683370190505b50915060005b8181101561178c5761175d81611647565b83828151811061176f5761176f611dc7565b60209081029190910101528061178481611e0b565b91505061174c565b505090565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03831660248201526044810182905261164290849063a9059cbb60e01b90606401611485565b6000611868826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119159092919063ffffffff16565b805190915015611642578080602001905181019061188691906120b4565b6116425760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103e1565b600054610100900460ff1661190c5760405162461bcd60e51b81526004016103e190611f53565b610d6433611791565b6060611924848460008561192c565b949350505050565b60608247101561198d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103e1565b6001600160a01b0385163b6119e45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103e1565b600080866001600160a01b03168587604051611a009190612102565b60006040518083038185875af1925050503d8060008114611a3d576040519150601f19603f3d011682016040523d82523d6000602084013e611a42565b606091505b5091509150611a52828286611a5d565b979650505050505050565b60608315611a6c5750816116f7565b825115611a7c5782518084602001fd5b8160405162461bcd60e51b81526004016103e1919061211e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611ad557611ad5611a96565b604052919050565b600067ffffffffffffffff821115611af757611af7611a96565b5060051b60200190565b80356001600160a01b038116811461154a57600080fd5b600082601f830112611b2957600080fd5b81356020611b3e611b3983611add565b611aac565b82815260059290921b84018101918181019086841115611b5d57600080fd5b8286015b84811015611b785780358352918301918301611b61565b509695505050505050565b60008060408385031215611b9657600080fd5b823567ffffffffffffffff80821115611bae57600080fd5b818501915085601f830112611bc257600080fd5b81356020611bd2611b3983611add565b82815260059290921b84018101918181019089841115611bf157600080fd5b948201945b83861015611c1657611c0786611b01565b82529482019490820190611bf6565b96505086013592505080821115611c2c57600080fd5b50611c3985828601611b18565b9150509250929050565b600080600080600080600060e0888a031215611c5e57600080fd5b611c6788611b01565b9650611c7560208901611b01565b9550611c8360408901611b01565b9450611c9160608901611b01565b9350611c9f60808901611b01565b9250611cad60a08901611b01565b9150611cbb60c08901611b01565b905092959891949750929550565b600060208284031215611cdb57600080fd5b5035919050565b604080825283519082018190526000906020906060840190828701845b82811015611d245781516001600160a01b031684529284019290840190600101611cff565b5050508381038285015284518082528583019183019060005b81811015611d5957835183529284019291840191600101611d3d565b5090979650505050505050565b600060208284031215611d7857600080fd5b6116f782611b01565b60008060408385031215611d9457600080fd5b50508035926020909101359150565b6020808252600a908201526913db9b1e481d985d5b1d60b21b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611e0657611e06611ddd565b500190565b6000600019821415611e1f57611e1f611ddd565b5060010190565b600060208284031215611e3857600080fd5b815160ff811681146116f757600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082821015611e9057611e90611ddd565b500390565b634e487b7160e01b600052603160045260246000fd5b600082611ec857634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611ee757611ee7611ddd565b500290565b600060208284031215611efe57600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060ff821660ff841680821015611fb857611fb8611ddd565b90039392505050565b600181815b80851115611ffc578160001904821115611fe257611fe2611ddd565b80851615611fef57918102915b93841c9390800290611fc6565b509250929050565b600082612013575060016113b0565b81612020575060006113b0565b816001811461203657600281146120405761205c565b60019150506113b0565b60ff84111561205157612051611ddd565b50506001821b6113b0565b5060208310610133831016604e8410600b841016171561207f575081810a6113b0565b6120898383611fc1565b806000190482111561209d5761209d611ddd565b029392505050565b60006116f760ff841683612004565b6000602082840312156120c657600080fd5b815180151581146116f757600080fd5b60005b838110156120f15781810151838201526020016120d9565b838111156114bc5750506000910152565b600082516121148184602087016120d6565b9190910192915050565b602081526000825180602084015261213d8160408501602087016120d6565b601f01601f1916919091016040019291505056fea264697066735822122070ebf524711cc0d296368e32fd53c582851ec867b9436a9d883e48d1cc2b72d064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getUSDTPriceInUSD()": {
        "returns": {
          "_0": "the price of USDT in USD."
        }
      },
      "invest(address[],uint256[])": {
        "params": {
          "_USDTAmts": "amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 713,
        "contract": "contracts/bni/strategy/BNIStrategyTest.sol:BNIStrategyTest",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 716,
        "contract": "contracts/bni/strategy/BNIStrategyTest.sol:BNIStrategyTest",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3292,
        "contract": "contracts/bni/strategy/BNIStrategyTest.sol:BNIStrategyTest",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 593,
        "contract": "contracts/bni/strategy/BNIStrategyTest.sol:BNIStrategyTest",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 705,
        "contract": "contracts/bni/strategy/BNIStrategyTest.sol:BNIStrategyTest",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14957,
        "contract": "contracts/bni/strategy/BNIStrategyTest.sol:BNIStrategyTest",
        "label": "router",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IRouter)14940"
      },
      {
        "astId": 14960,
        "contract": "contracts/bni/strategy/BNIStrategyTest.sol:BNIStrategyTest",
        "label": "SWAP_BASE_TOKEN",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IERC20UpgradeableExt)14948"
      },
      {
        "astId": 14963,
        "contract": "contracts/bni/strategy/BNIStrategyTest.sol:BNIStrategyTest",
        "label": "USDT",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IERC20UpgradeableExt)14948"
      },
      {
        "astId": 14965,
        "contract": "contracts/bni/strategy/BNIStrategyTest.sol:BNIStrategyTest",
        "label": "usdtDecimals",
        "offset": 20,
        "slot": "103",
        "type": "t_uint8"
      },
      {
        "astId": 14970,
        "contract": "contracts/bni/strategy/BNIStrategyTest.sol:BNIStrategyTest",
        "label": "treasuryWallet",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 14972,
        "contract": "contracts/bni/strategy/BNIStrategyTest.sol:BNIStrategyTest",
        "label": "admin",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 14974,
        "contract": "contracts/bni/strategy/BNIStrategyTest.sol:BNIStrategyTest",
        "label": "vault",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 14977,
        "contract": "contracts/bni/strategy/BNIStrategyTest.sol:BNIStrategyTest",
        "label": "priceOracle",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(IPriceOracle)12040"
      },
      {
        "astId": 14980,
        "contract": "contracts/bni/strategy/BNIStrategyTest.sol:BNIStrategyTest",
        "label": "tokens",
        "offset": 0,
        "slot": "108",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 14984,
        "contract": "contracts/bni/strategy/BNIStrategyTest.sol:BNIStrategyTest",
        "label": "pid",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20UpgradeableExt)14948": {
        "encoding": "inplace",
        "label": "contract IERC20UpgradeableExt",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)12040": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IRouter)14940": {
        "encoding": "inplace",
        "label": "contract IRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}