{
  "address": "0xF6a72730a133Ecf4607d19136E9A43AB47ED46C6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WBTCTargetPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHTargetPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WAVAXCurrentPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTCurrentPool",
          "type": "uint256"
        }
      ],
      "name": "CurrentComposition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDtAmt",
          "type": "uint256"
        }
      ],
      "name": "InvestUSDT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WAVAXAmt",
          "type": "uint256"
        }
      ],
      "name": "InvestWAVAX",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WBTCAmt",
          "type": "uint256"
        }
      ],
      "name": "InvestWBTC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHAmt",
          "type": "uint256"
        }
      ],
      "name": "InvestWETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WBTCTargetPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHTargetPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WAVAXTargetPool",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTTargetPool",
          "type": "uint256"
        }
      ],
      "name": "TargetComposition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDtAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "WithdrawUSDT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WAVAXAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "WithdrawWAVAX",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WBTCAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "WithdrawWBTC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "WithdrawWETH",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "JoeRouter",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDTTargetPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDTVault",
      "outputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT_MAIN",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDt",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDt_MAIN",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVAX",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVAXTargetPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVAXVault",
      "outputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVAX_MAIN",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WBTC",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WBTCTargetPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WBTCVault",
      "outputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WBTC_MAIN",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETHTargetPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETHVault",
      "outputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH_MAIN",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTokenCompositionPerc",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IL2Vault",
          "name": "_WBTCVault",
          "type": "address"
        },
        {
          "internalType": "contract IL2Vault",
          "name": "_WETHVault",
          "type": "address"
        },
        {
          "internalType": "contract IL2Vault",
          "name": "_WAVAXVault",
          "type": "address"
        },
        {
          "internalType": "contract IL2Vault",
          "name": "_USDTVault",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_targetPerc",
          "type": "uint256[]"
        }
      ],
      "name": "setTokenCompositionTargetPerc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "farmIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromFarm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        }
      ],
      "name": "withdrawPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "USDTAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc645ada108cbd92c0186c56c1a58054f489ee3a12d025feda2e4aec82201f035",
  "receipt": {
    "to": null,
    "from": "0xd91Fbc9b431464D737E1BC4e76900D43405a639b",
    "contractAddress": "0xF6a72730a133Ecf4607d19136E9A43AB47ED46C6",
    "transactionIndex": 6,
    "gasUsed": "1600281",
    "logsBloom": "0x
    "blockHash": "0x1b512789739745c0a457d5ccfb11f520ce8e1bcfd3f078f15d21cc188f90dd68",
    "transactionHash": "0xc645ada108cbd92c0186c56c1a58054f489ee3a12d025feda2e4aec82201f035",
    "logs": [],
    "blockNumber": 14927537,
    "cumulativeGasUsed": "2716216",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "d82c5221a35d46136da314f1aa71b6fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WBTCTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WAVAXCurrentPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTCurrentPool\",\"type\":\"uint256\"}],\"name\":\"CurrentComposition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDtAmt\",\"type\":\"uint256\"}],\"name\":\"InvestUSDT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WAVAXAmt\",\"type\":\"uint256\"}],\"name\":\"InvestWAVAX\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WBTCAmt\",\"type\":\"uint256\"}],\"name\":\"InvestWBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"}],\"name\":\"InvestWETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WBTCTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WAVAXTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTTargetPool\",\"type\":\"uint256\"}],\"name\":\"TargetComposition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDtAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawUSDT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WAVAXAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawWAVAX\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WBTCAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawWBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawWETH\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"JoeRouter\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTTargetPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTVault\",\"outputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_MAIN\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDt\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDt_MAIN\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVAX\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVAXTargetPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVAXVault\",\"outputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVAX_MAIN\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBTC\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBTCTargetPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBTCVault\",\"outputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBTC_MAIN\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHTargetPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHVault\",\"outputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_MAIN\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenCompositionPerc\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IL2Vault\",\"name\":\"_WBTCVault\",\"type\":\"address\"},{\"internalType\":\"contract IL2Vault\",\"name\":\"_WETHVault\",\"type\":\"address\"},{\"internalType\":\"contract IL2Vault\",\"name\":\"_WAVAXVault\",\"type\":\"address\"},{\"internalType\":\"contract IL2Vault\",\"name\":\"_USDTVault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_targetPerc\",\"type\":\"uint256[]\"}],\"name\":\"setTokenCompositionTargetPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"farmIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"}],\"name\":\"withdrawFromFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"}],\"name\":\"withdrawPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mwi/MWIStrategyTest.sol\":\"MWIStrategyTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/mwi/MWIStrategyTest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./libs/Price.sol\\\";\\n\\ninterface IRouter {\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IL2Vault is IERC20Upgradeable {\\n    function deposit(uint amount) external;\\n    function withdraw(uint share) external;\\n    function getAllPoolInUSD() external view returns (uint);\\n    function getAPR() external view returns (uint);\\n}\\n\\ncontract MWIStrategyTest is OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0x78ae2880bd1672b49a33cF796CF53FE6db0aB01D);\\n    IERC20Upgradeable public constant WBTC = IERC20Upgradeable(0x50b7545627a5162F82A992c33b87aDc75187B218);\\n    IERC20Upgradeable public constant WETH = IERC20Upgradeable(0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB);\\n    IERC20Upgradeable public constant WAVAX = IERC20Upgradeable(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n    IERC20Upgradeable public constant USDt = IERC20Upgradeable(0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7);\\n    IERC20Upgradeable public constant USDT_MAIN = IERC20Upgradeable(0xc7198437980c041c805A1EDcbA50c1Ce5db95118);\\n    IERC20Upgradeable public constant WBTC_MAIN = IERC20Upgradeable(0x50b7545627a5162F82A992c33b87aDc75187B218);\\n    IERC20Upgradeable public constant WETH_MAIN = IERC20Upgradeable(0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB);\\n    IERC20Upgradeable public constant WAVAX_MAIN = IERC20Upgradeable(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n    IERC20Upgradeable public constant USDt_MAIN = IERC20Upgradeable(0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7);\\n\\n    IRouter public constant JoeRouter = IRouter(0x60aE616a2155Ee3d9A68541Ba4544862310933d4);\\n\\n    IL2Vault public WBTCVault;\\n    IL2Vault public WETHVault;\\n    IL2Vault public WAVAXVault;\\n    IL2Vault public USDTVault;\\n    \\n    uint constant DENOMINATOR = 10000;\\n    uint public WBTCTargetPerc;\\n    uint public WETHTargetPerc;\\n    uint public WAVAXTargetPerc;\\n    uint public USDTTargetPerc;\\n\\n    address public vault;\\n\\n    event TargetComposition (uint WBTCTargetPool, uint WETHTargetPool, uint WAVAXTargetPool, uint USDTTargetPool);\\n    event CurrentComposition (uint WBTCTargetPool, uint WETHTargetPool, uint WAVAXCurrentPool, uint USDTCurrentPool);\\n    event InvestWBTC(uint USDTAmt, uint WBTCAmt);\\n    event InvestWETH(uint USDTAmt, uint WETHAmt);\\n    event InvestWAVAX(uint USDTAmt, uint WAVAXAmt);\\n    event InvestUSDT(uint USDTAmt, uint USDtAmt);\\n    event Withdraw(uint sharePerc, uint USDTAmt);\\n    event WithdrawWBTC(uint WBTCAmt, uint USDTAmt);\\n    event WithdrawWETH(uint WETHAmt, uint USDTAmt);\\n    event WithdrawWAVAX(uint WAVAXAmt, uint USDTAmt);\\n    event WithdrawUSDT(uint USDtAmt, uint USDTAmt);\\n    event EmergencyWithdraw(uint USDTAmt);\\n\\n    modifier onlyVault {\\n        require(msg.sender == vault, \\\"Only vault\\\");\\n        _;\\n    }\\n\\n    function initialize(IL2Vault _WBTCVault, IL2Vault _WETHVault, IL2Vault _WAVAXVault, IL2Vault _USDTVault) external initializer {\\n        __Ownable_init();\\n\\n        WBTCTargetPerc = 4500; // 45%\\n        WETHTargetPerc = 3500; // 35%\\n        WAVAXTargetPerc = 1500; // 15%\\n        USDTTargetPerc = 500; // 5%\\n\\n        WBTCVault = _WBTCVault;\\n        WETHVault = _WETHVault;\\n        WAVAXVault = _WAVAXVault;\\n        USDTVault = _USDTVault;\\n\\n        // USDT.safeApprove(address(JoeRouter), type(uint).max);\\n        // WBTC.safeApprove(address(JoeRouter), type(uint).max);\\n        // WETH.safeApprove(address(JoeRouter), type(uint).max);\\n        // WAVAX.safeApprove(address(JoeRouter), type(uint).max);\\n        // USDt.safeApprove(address(JoeRouter), type(uint).max);\\n\\n        // WBTC.safeApprove(address(WBTCVault), type(uint).max);\\n        // WETH.safeApprove(address(WETHVault), type(uint).max);\\n        // WAVAX.safeApprove(address(WAVAXVault), type(uint).max);\\n        // USDt.safeApprove(address(USDTVault), type(uint).max);\\n    }\\n\\n    function invest(uint USDTAmt) external onlyVault {\\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\\n        // USDTAmt = USDT.balanceOf(address(this));\\n        // uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\\n        // uint k = USDTPriceInUSD * 1e4;\\n\\n        // uint[] memory pools = getEachPoolInUSD();\\n        // uint pool = pools[0] + pools[1] + pools[2] + pools[3] + (USDTAmt * k); // USDT's decimals is 6\\n        // uint WBTCTargetPool = pool * WBTCTargetPerc / DENOMINATOR;\\n        // uint WETHTargetPool = pool * WETHTargetPerc / DENOMINATOR;\\n        // uint WAVAXTargetPool = pool * WAVAXTargetPerc / DENOMINATOR;\\n        // uint USDTTargetPool = pool * USDTTargetPerc / DENOMINATOR;\\n\\n        // // Rebalancing invest\\n        // if (\\n        //     WBTCTargetPool > pools[0] &&\\n        //     WETHTargetPool > pools[1] &&\\n        //     WAVAXTargetPool > pools[2] &&\\n        //     USDTTargetPool > pools[3]\\n        // ) {\\n        //     _investWBTC((WBTCTargetPool-pools[0])/k, USDTPriceInUSD);\\n        //     _investWETH((WETHTargetPool-pools[1])/k, USDTPriceInUSD);\\n        //     _investWAVAX((WAVAXTargetPool-pools[2])/k, USDTPriceInUSD);\\n        //     _investUSDT((USDTTargetPool-pools[3])/k);\\n        // } else {\\n        //     uint furthest;\\n        //     uint farmIndex;\\n        //     uint diff;\\n\\n        //     if (WBTCTargetPool > pools[0]) {\\n        //         diff = WBTCTargetPool - pools[0];\\n        //         furthest = diff;\\n        //         farmIndex = 0;\\n        //     }\\n        //     if (WETHTargetPool > pools[1]) {\\n        //         diff = WETHTargetPool - pools[1];\\n        //         if (diff > furthest) {\\n        //             furthest = diff;\\n        //             farmIndex = 1;\\n        //         }\\n        //     }\\n        //     if (WAVAXTargetPool > pools[2]) {\\n        //         diff = WAVAXTargetPool - pools[2];\\n        //         if (diff > furthest) {\\n        //             furthest = diff;\\n        //             farmIndex = 2;\\n        //         }\\n        //     }\\n        //     if (USDTTargetPool > pools[3]) {\\n        //         diff = USDTTargetPool - pools[3];\\n        //         if (diff > furthest) {\\n        //             farmIndex = 3;\\n        //         }\\n        //     }\\n\\n        //     if (farmIndex == 0) _investWBTC(USDTAmt, USDTPriceInUSD);\\n        //     else if (farmIndex == 1) _investWETH(USDTAmt, USDTPriceInUSD);\\n        //     else if (farmIndex == 2) _investWAVAX(USDTAmt, USDTPriceInUSD);\\n        //     else _investUSDT(USDTAmt);\\n        // }\\n\\n        // emit TargetComposition(WBTCTargetPool, WETHTargetPool, WAVAXTargetPool, USDTTargetPool);\\n        // emit CurrentComposition(pools[0], pools[1], pools[2], pools[3]);\\n    }\\n\\n    function _investWBTC(uint USDTAmt, uint USDTPriceInUSD) private {\\n        uint WBTCPriceInUSD = PriceLib.getAssetPrice(address(WBTC));\\n        uint amountOut = USDTAmt * USDTPriceInUSD * 100 / WBTCPriceInUSD;  // USDT's decimals is 6, WBTC's decimals is 8\\n        uint WBTCAmt = _swap2(address(USDT), address(WBTC), USDTAmt, amountOut*95/100);\\n        WBTCVault.deposit(WBTCAmt);\\n        emit InvestWBTC(USDTAmt, WBTCAmt);\\n    }\\n\\n    function _investWETH(uint USDTAmt, uint USDTPriceInUSD) private {\\n        uint WETHPriceInUSD = PriceLib.getAssetPrice(address(WETH));\\n        uint amountOut = USDTAmt * USDTPriceInUSD * 1e12 / WETHPriceInUSD;  // USDT's decimals is 6, WETH's decimals is 18\\n        uint WETHAmt = _swap2(address(USDT), address(WETH), USDTAmt, amountOut*95/100);\\n        WETHVault.deposit(WETHAmt);\\n        emit InvestWETH(USDTAmt, WETHAmt);\\n    }\\n\\n    function _investWAVAX(uint USDTAmt, uint USDTPriceInUSD) private {\\n        uint WAVAXPriceInUSD = PriceLib.getAssetPrice(address(WAVAX));\\n        uint amountOut = USDTAmt * USDTPriceInUSD * 1e12 / WAVAXPriceInUSD;  // USDT's decimals is 6, WAVAX's decimals is 18\\n        uint WAVAXAmt = _swap(address(USDT), address(WAVAX), USDTAmt, amountOut*95/100);\\n        WAVAXVault.deposit(WAVAXAmt);\\n        emit InvestWAVAX(USDTAmt, WAVAXAmt);\\n    }\\n\\n    function _investUSDT(uint USDTAmt) private {\\n        uint USDtAmt = _swap(address(USDT), address(USDt), USDTAmt, USDTAmt*99/100);\\n        USDTVault.deposit(USDtAmt);\\n        emit InvestUSDT(USDTAmt, USDtAmt);\\n    }\\n\\n    function withdrawPerc(uint sharePerc) external onlyVault returns (uint USDTAmt) {\\n        require(sharePerc <= 1e18, \\\"Over 100%\\\");\\n        \\n        // uint USDTAmtBefore = USDT.balanceOf(address(this));\\n        // uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\\n\\n        // _withdrawWBTC(sharePerc, USDTPriceInUSD);\\n        // _withdrawWETH(sharePerc, USDTPriceInUSD);\\n        // _withdrawWAVAX(sharePerc, USDTPriceInUSD);\\n        // _withdrawUSDT(sharePerc);\\n\\n        // USDTAmt = USDT.balanceOf(address(this)) - USDTAmtBefore;\\n        USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\\n        USDT.safeTransfer(vault, USDTAmt);\\n        emit Withdraw(sharePerc, USDTAmt);\\n    }\\n\\n    function _withdrawWBTC(uint _sharePerc, uint USDTPriceInUSD) private {\\n        uint amount = WBTCVault.balanceOf(address(this)) * _sharePerc / 1e18;\\n        if (0 < amount) {\\n            WBTCVault.withdraw(amount);\\n\\n            uint WBTCAmt = WBTC.balanceOf(address(this));\\n            uint WBTCPriceInUSD = PriceLib.getAssetPrice(address(WBTC));\\n            uint amountOut = WBTCAmt * WBTCPriceInUSD / (USDTPriceInUSD * 100);  // USDT's decimals is 6, WBTC's decimals is 8\\n            uint USDTAmt = _swap2(address(WBTC), address(USDT), WBTCAmt, amountOut*95/100);\\n            emit WithdrawWBTC(WBTCAmt, USDTAmt);\\n        }\\n    }\\n\\n    function _withdrawWETH(uint _sharePerc, uint USDTPriceInUSD) private {\\n        uint amount = WETHVault.balanceOf(address(this)) * _sharePerc / 1e18;\\n        if (0 < amount) {\\n            WETHVault.withdraw(amount);\\n\\n            uint WETHAmt = WETH.balanceOf(address(this));\\n            uint WETHPriceInUSD = PriceLib.getAssetPrice(address(WETH));\\n            uint amountOut = WETHAmt * WETHPriceInUSD / (USDTPriceInUSD * 1e12);  // USDT's decimals is 6, WETH's decimals is 18\\n            uint USDTAmt = _swap2(address(WETH), address(USDT), WETHAmt, amountOut*95/100);\\n            emit WithdrawWETH(WETHAmt, USDTAmt);\\n        }\\n    }\\n\\n    function _withdrawWAVAX(uint _sharePerc, uint USDTPriceInUSD) private {\\n        uint amount = WAVAXVault.balanceOf(address(this)) * _sharePerc / 1e18;\\n        if (0 < amount) {\\n            WAVAXVault.withdraw(amount);\\n\\n            uint WAVAXAmt = WAVAX.balanceOf(address(this));\\n            uint WAVAXPriceInUSD = PriceLib.getAssetPrice(address(WAVAX));\\n            uint amountOut = WAVAXAmt * WAVAXPriceInUSD / (USDTPriceInUSD * 1e12);  // USDT's decimals is 6, WAVAX's decimals is 18\\n            uint USDTAmt = _swap(address(WAVAX), address(USDT), WAVAXAmt, amountOut*95/100);\\n            emit WithdrawWAVAX(WAVAXAmt, USDTAmt);\\n        }\\n    }\\n\\n    function _withdrawUSDT(uint _sharePerc) private {\\n        uint amount = USDTVault.balanceOf(address(this)) * _sharePerc / 1e18;\\n        if (0 < amount) {\\n            USDTVault.withdraw(amount);\\n\\n            uint USDtAmt = USDt.balanceOf(address(this));\\n            uint USDTAmt = _swap(address(USDt), address(USDT), USDtAmt, USDtAmt*99/100);\\n            emit WithdrawUSDT(USDtAmt, USDTAmt);\\n        }\\n    }\\n\\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenA;\\n        path[1] = _tokenB;\\n        return (JoeRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[1];\\n    }\\n\\n    function _swap2(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\\n        address[] memory path = new address[](3);\\n        path[0] = _tokenA;\\n        path[1] = address(WAVAX);\\n        path[2] = _tokenB;\\n        return (JoeRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[2];\\n    }\\n\\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external onlyVault returns (uint USDTAmt) {\\n        farmIndex;\\n        require(sharePerc <= 1e18, \\\"Over 100%\\\");\\n        // uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\\n\\n        // if (farmIndex == 0) _withdrawWBTC(sharePerc, USDTPriceInUSD);\\n        // else if (farmIndex == 1) _withdrawWETH(sharePerc, USDTPriceInUSD);\\n        // else if (farmIndex == 2) _withdrawWAVAX(sharePerc, USDTPriceInUSD);\\n        // else if (farmIndex == 3) _withdrawUSDT(sharePerc);\\n\\n        // USDTAmt = USDT.balanceOf(address(this));\\n        USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\\n        USDT.safeTransfer(vault, USDTAmt);\\n    }\\n\\n    function emergencyWithdraw() external onlyVault {\\n        // 1e18 == 100% of share\\n        // uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\\n\\n        // _withdrawWBTC(1e18, USDTPriceInUSD);\\n        // _withdrawWETH(1e18, USDTPriceInUSD);\\n        // _withdrawWAVAX(1e18, USDTPriceInUSD);\\n        // _withdrawUSDT(1e18);\\n\\n        uint USDTAmt = USDT.balanceOf(address(this));\\n        if (0 < USDTAmt) {\\n            USDT.safeTransfer(vault, USDTAmt);\\n        }\\n        emit EmergencyWithdraw(USDTAmt);\\n    }\\n\\n    function setVault(address _vault) external onlyOwner {\\n        require(vault == address(0), \\\"Vault set\\\");\\n        vault = _vault;\\n    }\\n\\n    function setTokenCompositionTargetPerc(uint[] calldata _targetPerc) external onlyOwner {\\n        require(_targetPerc.length == 4, \\\"Invalid count\\\");\\n        require((_targetPerc[0]+_targetPerc[1]+_targetPerc[2]+_targetPerc[3]) == DENOMINATOR, \\\"Invalid parameter\\\");\\n\\n        WBTCTargetPerc = _targetPerc[0];\\n        WETHTargetPerc = _targetPerc[1];\\n        WAVAXTargetPerc = _targetPerc[2];\\n        USDTTargetPerc = _targetPerc[3];\\n    }\\n\\n    function getWBTCPoolInUSD() private view  returns (uint) {\\n        uint amt = WBTCVault.getAllPoolInUSD();\\n        return amt == 0 ? 0 : amt * WBTCVault.balanceOf(address(this)) / WBTCVault.totalSupply(); //to exclude L1 deposits from other addresses\\n    }\\n\\n    function getWETHPoolInUSD() private view  returns (uint) {\\n        uint amt = WETHVault.getAllPoolInUSD();\\n        return amt == 0 ? 0 : amt * WETHVault.balanceOf(address(this)) / WETHVault.totalSupply(); //to exclude L1 deposits from other addresses\\n    }\\n\\n    function getWAVAXPoolInUSD() private view  returns (uint) {\\n        uint amt = WAVAXVault.getAllPoolInUSD();\\n        return amt == 0 ? 0 : amt * WAVAXVault.balanceOf(address(this)) / WAVAXVault.totalSupply(); //to exclude L1 deposits from other addresses\\n    }\\n\\n    function getUSDTPoolInUSD() private view  returns (uint) {\\n        uint amt = USDTVault.getAllPoolInUSD();\\n        return amt == 0 ? 0 : amt * USDTVault.balanceOf(address(this)) / USDTVault.totalSupply(); //to exclude L1 deposits from other addresses\\n    }\\n\\n    function getEachPoolInUSD() private view returns (uint[] memory pools) {\\n        pools = new uint[](4);\\n        // pools[0] = getWBTCPoolInUSD();\\n        // pools[1] = getWETHPoolInUSD();\\n        // pools[2] = getWAVAXPoolInUSD();\\n        // pools[3] = getUSDTPoolInUSD();\\n    }\\n\\n    function getAllPoolInUSD() public view returns (uint) {\\n        // uint[] memory pools = getEachPoolInUSD();\\n        // return pools[0] + pools[1] + pools[2] + pools[3];\\n        return USDT.balanceOf(address(this)) * 1e12;\\n    }\\n\\n    function getCurrentTokenCompositionPerc() public view returns (address[] memory tokens, uint[] memory percentages) {\\n        tokens = new address[](4);\\n        tokens[0] = address(WBTC_MAIN);\\n        tokens[1] = address(WETH_MAIN);\\n        tokens[2] = address(WAVAX_MAIN);\\n        tokens[3] = address(USDt_MAIN);\\n\\n        uint[] memory pools = getEachPoolInUSD();\\n        uint allPool = pools[0] + pools[1] + pools[2] + pools[3];\\n        percentages = new uint[](4);\\n        percentages[0] = allPool == 0 ? WBTCTargetPerc : pools[0] * DENOMINATOR / allPool;\\n        percentages[1] = allPool == 0 ? WETHTargetPerc : pools[1] * DENOMINATOR / allPool;\\n        percentages[2] = allPool == 0 ? WAVAXTargetPerc : pools[2] * DENOMINATOR / allPool;\\n        percentages[3] = allPool == 0 ? USDTTargetPerc : pools[3] * DENOMINATOR / allPool;\\n    }\\n\\n    function getAPR() external view returns (uint) {\\n        (, uint[] memory perc) = getCurrentTokenCompositionPerc();\\n        uint allApr = WBTCVault.getAPR() * perc[0]\\n                    + WETHVault.getAPR() * perc[1]\\n                    + WAVAXVault.getAPR() * perc[2]\\n                    + USDTVault.getAPR() * perc[3];\\n        return (allApr / DENOMINATOR);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xcf63f3f79ed18cc563140edffbcbc81a61d898497670cc5427eb7f0dccd20085\",\"license\":\"MIT\"},\"contracts/mwi/libs/Price.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\ninterface IChainlink {\\n    function latestAnswer() external view returns (int256);\\n}\\n\\ninterface IAaveOracle {\\n    function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\\nlibrary PriceLib {\\n    IAaveOracle internal constant AaveOracle = IAaveOracle(0xEBd36016B3eD09D4693Ed4251c67Bd858c3c7C9C);\\n    address internal constant USDT = 0xc7198437980c041c805A1EDcbA50c1Ce5db95118;\\n\\n    /// @return the price in USD of 8 decimals in precision.\\n    function getAssetPrice(address asset) internal view returns (uint) {\\n        if (asset == USDT) {\\n            return uint(IChainlink(0xEBE676ee90Fe1112671f19b6B7459bC678B67e8a).latestAnswer());\\n        }\\n        return AaveOracle.getAssetPrice(asset);\\n    }\\n}\\n\",\"keccak256\":\"0x97767bf363fb8882cf768dd091a0444407b46c1fe9aabb39eae04953f3605543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611bfa806100206000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c80638da5cb5b1161011a578063c89d5b8b116100ad578063ed47d9091161007c578063ed47d909146103ed578063eede27b614610356578063f2fde38b14610400578063f8c8765e14610413578063fbfa77cf1461042657600080fd5b8063c89d5b8b146103ca578063cc742cb614610317578063db2e21bc146103d2578063e8e3318b146103da57600080fd5b8063bb9e887d116100e9578063bb9e887d146102bc578063bd244af41461038c578063c12f857f14610394578063c54e44eb146103af57600080fd5b80638da5cb5b146103455780639b2f58f214610356578063ad5c464814610371578063b61bf6a81461037157600080fd5b80634dede3de11610192578063715018a611610161578063715018a614610306578063735b0a0e1461030e57806373b295c2146103175780637fb2df421461033257600080fd5b80634dede3de146102bc57806364351540146102d75780636817031b146102e05780636e21950f146102f357600080fd5b80632afcf480116101ce5780632afcf480146102755780633acf36541461028a5780634631b2461461029d5780634b10dbb1146102b357600080fd5b80630b450cb81461020057806312166f1e146102305780631289a7c71461024b57806326abc06814610262575b600080fd5b606554610213906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61021373c7198437980c041c805a1edcba50c1ce5db9511881565b610254606a5481565b604051908152602001610227565b606854610213906001600160a01b031681565b6102886102833660046117d5565b610439565b005b606754610213906001600160a01b031681565b6102a561049c565b6040516102279291906117ee565b610254606b5481565b6102137350b7545627a5162f82a992c33b87adc75187b21881565b610254606c5481565b6102886102ee366004611887565b610824565b6102546103013660046118a4565b6108b5565b6102886109fd565b61025460695481565b61021373b31f66aa3c1e785363f0875a1b74e27b85fd66c781565b6102886103403660046118c6565b610a33565b6033546001600160a01b0316610213565b610213739702230a8ea53601f5cd2dc00fdbc13d4df4a8c781565b6102137349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab81565b610254610be7565b6102137360ae616a2155ee3d9a68541ba4544862310933d481565b6102137378ae2880bd1672b49a33cf796cf53fe6db0ab01d81565b610254610c80565b610288610f6f565b606654610213906001600160a01b031681565b6102546103fb3660046117d5565b611088565b61028861040e366004611887565b611208565b61028861042136600461193b565b6112a0565b606d54610213906001600160a01b031681565b606d546001600160a01b0316331461046c5760405162461bcd60e51b815260040161046390611997565b60405180910390fd5b606d54610499907378ae2880bd1672b49a33cf796cf53fe6db0ab01d906001600160a01b0316308461137b565b50565b60408051600480825260a08201909252606091829190602082016080803683370190505091507350b7545627a5162f82a992c33b87adc75187b218826000815181106104ea576104ea6119bb565b60200260200101906001600160a01b031690816001600160a01b0316815250507349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab82600181518110610532576105326119bb565b60200260200101906001600160a01b031690816001600160a01b03168152505073b31f66aa3c1e785363f0875a1b74e27b85fd66c78260028151811061057a5761057a6119bb565b60200260200101906001600160a01b031690816001600160a01b031681525050739702230a8ea53601f5cd2dc00fdbc13d4df4a8c7826003815181106105c2576105c26119bb565b60200260200101906001600160a01b031690816001600160a01b03168152505060006105ec6113ec565b9050600081600381518110610603576106036119bb565b60200260200101518260028151811061061e5761061e6119bb565b602002602001015183600181518110610639576106396119bb565b602002602001015184600081518110610654576106546119bb565b602002602001015161066691906119e7565b61067091906119e7565b61067a91906119e7565b60408051600480825260a082019092529192506020820160808036833701905050925080156106db5780612710836000815181106106ba576106ba6119bb565b60200260200101516106cc91906119ff565b6106d69190611a1e565b6106df565b6069545b836000815181106106f2576106f26119bb565b6020908102919091010152801561073b57806127108360018151811061071a5761071a6119bb565b602002602001015161072c91906119ff565b6107369190611a1e565b61073f565b606a545b83600181518110610752576107526119bb565b6020908102919091010152801561079b57806127108360028151811061077a5761077a6119bb565b602002602001015161078c91906119ff565b6107969190611a1e565b61079f565b606b545b836002815181106107b2576107b26119bb565b602090810291909101015280156107fb5780612710836003815181106107da576107da6119bb565b60200260200101516107ec91906119ff565b6107f69190611a1e565b6107ff565b606c545b83600381518110610812576108126119bb565b60200260200101818152505050509091565b6033546001600160a01b0316331461084e5760405162461bcd60e51b815260040161046390611a40565b606d546001600160a01b0316156108935760405162461bcd60e51b815260206004820152600960248201526815985d5b1d081cd95d60ba1b6044820152606401610463565b606d80546001600160a01b0319166001600160a01b0392909216919091179055565b606d546000906001600160a01b031633146108e25760405162461bcd60e51b815260040161046390611997565b670de0b6b3a76400008211156109265760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b6044820152606401610463565b6040516370a0823160e01b8152306004820152670de0b6b3a76400009083907378ae2880bd1672b49a33cf796cf53fe6db0ab01d906370a082319060240160206040518083038186803b15801561097c57600080fd5b505afa158015610990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b49190611a75565b6109be91906119ff565b6109c89190611a1e565b606d549091506109f7907378ae2880bd1672b49a33cf796cf53fe6db0ab01d906001600160a01b031683611412565b92915050565b6033546001600160a01b03163314610a275760405162461bcd60e51b815260040161046390611a40565b610a316000611447565b565b6033546001600160a01b03163314610a5d5760405162461bcd60e51b815260040161046390611a40565b60048114610a9d5760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a590818dbdd5b9d609a1b6044820152606401610463565b61271082826003818110610ab357610ab36119bb565b9050602002013583836002818110610acd57610acd6119bb565b9050602002013584846001818110610ae757610ae76119bb565b9050602002013585856000818110610b0157610b016119bb565b90506020020135610b1291906119e7565b610b1c91906119e7565b610b2691906119e7565b14610b675760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b2103830b930b6b2ba32b960791b6044820152606401610463565b81816000818110610b7a57610b7a6119bb565b60200291909101356069555081816001818110610b9957610b996119bb565b6020029190910135606a555081816002818110610bb857610bb86119bb565b6020029190910135606b555081816003818110610bd757610bd76119bb565b6020029190910135606c55505050565b6040516370a0823160e01b81523060048201526000907378ae2880bd1672b49a33cf796cf53fe6db0ab01d906370a082319060240160206040518083038186803b158015610c3457600080fd5b505afa158015610c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6c9190611a75565b610c7b9064e8d4a510006119ff565b905090565b600080610c8b61049c565b915050600081600381518110610ca357610ca36119bb565b6020026020010151606860009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cf957600080fd5b505afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d319190611a75565b610d3b91906119ff565b82600281518110610d4e57610d4e6119bb565b6020026020010151606760009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610da457600080fd5b505afa158015610db8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddc9190611a75565b610de691906119ff565b83600181518110610df957610df96119bb565b6020026020010151606660009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4f57600080fd5b505afa158015610e63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e879190611a75565b610e9191906119ff565b84600081518110610ea457610ea46119bb565b6020026020010151606560009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610efa57600080fd5b505afa158015610f0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f329190611a75565b610f3c91906119ff565b610f4691906119e7565b610f5091906119e7565b610f5a91906119e7565b9050610f6861271082611a1e565b9250505090565b606d546001600160a01b03163314610f995760405162461bcd60e51b815260040161046390611997565b6040516370a0823160e01b81523060048201526000907378ae2880bd1672b49a33cf796cf53fe6db0ab01d906370a082319060240160206040518083038186803b158015610fe657600080fd5b505afa158015610ffa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101e9190611a75565b9050801561105257606d54611052907378ae2880bd1672b49a33cf796cf53fe6db0ab01d906001600160a01b031683611412565b6040518181527f99d7f8b71cfb9126984f7a5eed3a40e64a8959e9b0e442221546fb04ec6a489c9060200160405180910390a150565b606d546000906001600160a01b031633146110b55760405162461bcd60e51b815260040161046390611997565b670de0b6b3a76400008211156110f95760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b6044820152606401610463565b6040516370a0823160e01b8152306004820152670de0b6b3a76400009083907378ae2880bd1672b49a33cf796cf53fe6db0ab01d906370a082319060240160206040518083038186803b15801561114f57600080fd5b505afa158015611163573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111879190611a75565b61119191906119ff565b61119b9190611a1e565b606d549091506111ca907378ae2880bd1672b49a33cf796cf53fe6db0ab01d906001600160a01b031683611412565b60408051838152602081018390527f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8910160405180910390a1919050565b6033546001600160a01b031633146112325760405162461bcd60e51b815260040161046390611a40565b6001600160a01b0381166112975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610463565b61049981611447565b60006112ac6001611499565b905080156112c4576000805461ff0019166101001790555b6112cc611521565b611194606955610dac606a556105dc606b556101f4606c55606580546001600160a01b038088166001600160a01b031992831617909255606680548784169083161790556067805486841690831617905560688054928516929091169190911790558015611374576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526113e69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611550565b50505050565b60408051600480825260a082019092526060916020820160808036833701905050905090565b6040516001600160a01b03831660248201526044810182905261144290849063a9059cbb60e01b906064016113af565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff16156114e0578160ff1660011480156114bc5750303b155b6114d85760405162461bcd60e51b815260040161046390611a8e565b506000919050565b60005460ff8084169116106115075760405162461bcd60e51b815260040161046390611a8e565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166115485760405162461bcd60e51b815260040161046390611adc565b610a31611622565b60006115a5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116529092919063ffffffff16565b80519091501561144257808060200190518101906115c39190611b27565b6114425760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610463565b600054610100900460ff166116495760405162461bcd60e51b815260040161046390611adc565b610a3133611447565b6060611661848460008561166b565b90505b9392505050565b6060824710156116cc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610463565b6001600160a01b0385163b6117235760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610463565b600080866001600160a01b0316858760405161173f9190611b75565b60006040518083038185875af1925050503d806000811461177c576040519150601f19603f3d011682016040523d82523d6000602084013e611781565b606091505b509150915061179182828661179c565b979650505050505050565b606083156117ab575081611664565b8251156117bb5782518084602001fd5b8160405162461bcd60e51b81526004016104639190611b91565b6000602082840312156117e757600080fd5b5035919050565b604080825283519082018190526000906020906060840190828701845b828110156118305781516001600160a01b03168452928401929084019060010161180b565b5050508381038285015284518082528583019183019060005b8181101561186557835183529284019291840191600101611849565b5090979650505050505050565b6001600160a01b038116811461049957600080fd5b60006020828403121561189957600080fd5b813561166481611872565b600080604083850312156118b757600080fd5b50508035926020909101359150565b600080602083850312156118d957600080fd5b823567ffffffffffffffff808211156118f157600080fd5b818501915085601f83011261190557600080fd5b81358181111561191457600080fd5b8660208260051b850101111561192957600080fd5b60209290920196919550909350505050565b6000806000806080858703121561195157600080fd5b843561195c81611872565b9350602085013561196c81611872565b9250604085013561197c81611872565b9150606085013561198c81611872565b939692955090935050565b6020808252600a908201526913db9b1e481d985d5b1d60b21b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156119fa576119fa6119d1565b500190565b6000816000190483118215151615611a1957611a196119d1565b500290565b600082611a3b57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611a8757600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215611b3957600080fd5b8151801515811461166457600080fd5b60005b83811015611b64578181015183820152602001611b4c565b838111156113e65750506000910152565b60008251611b87818460208701611b49565b9190910192915050565b6020815260008251806020840152611bb0816040850160208701611b49565b601f01601f1916919091016040019291505056fea264697066735822122045dd74d4ae2ee7d2fcd4b464e82f347e1479c14a89f9032f3240b60ee8b1ce2364736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c80638da5cb5b1161011a578063c89d5b8b116100ad578063ed47d9091161007c578063ed47d909146103ed578063eede27b614610356578063f2fde38b14610400578063f8c8765e14610413578063fbfa77cf1461042657600080fd5b8063c89d5b8b146103ca578063cc742cb614610317578063db2e21bc146103d2578063e8e3318b146103da57600080fd5b8063bb9e887d116100e9578063bb9e887d146102bc578063bd244af41461038c578063c12f857f14610394578063c54e44eb146103af57600080fd5b80638da5cb5b146103455780639b2f58f214610356578063ad5c464814610371578063b61bf6a81461037157600080fd5b80634dede3de11610192578063715018a611610161578063715018a614610306578063735b0a0e1461030e57806373b295c2146103175780637fb2df421461033257600080fd5b80634dede3de146102bc57806364351540146102d75780636817031b146102e05780636e21950f146102f357600080fd5b80632afcf480116101ce5780632afcf480146102755780633acf36541461028a5780634631b2461461029d5780634b10dbb1146102b357600080fd5b80630b450cb81461020057806312166f1e146102305780631289a7c71461024b57806326abc06814610262575b600080fd5b606554610213906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61021373c7198437980c041c805a1edcba50c1ce5db9511881565b610254606a5481565b604051908152602001610227565b606854610213906001600160a01b031681565b6102886102833660046117d5565b610439565b005b606754610213906001600160a01b031681565b6102a561049c565b6040516102279291906117ee565b610254606b5481565b6102137350b7545627a5162f82a992c33b87adc75187b21881565b610254606c5481565b6102886102ee366004611887565b610824565b6102546103013660046118a4565b6108b5565b6102886109fd565b61025460695481565b61021373b31f66aa3c1e785363f0875a1b74e27b85fd66c781565b6102886103403660046118c6565b610a33565b6033546001600160a01b0316610213565b610213739702230a8ea53601f5cd2dc00fdbc13d4df4a8c781565b6102137349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab81565b610254610be7565b6102137360ae616a2155ee3d9a68541ba4544862310933d481565b6102137378ae2880bd1672b49a33cf796cf53fe6db0ab01d81565b610254610c80565b610288610f6f565b606654610213906001600160a01b031681565b6102546103fb3660046117d5565b611088565b61028861040e366004611887565b611208565b61028861042136600461193b565b6112a0565b606d54610213906001600160a01b031681565b606d546001600160a01b0316331461046c5760405162461bcd60e51b815260040161046390611997565b60405180910390fd5b606d54610499907378ae2880bd1672b49a33cf796cf53fe6db0ab01d906001600160a01b0316308461137b565b50565b60408051600480825260a08201909252606091829190602082016080803683370190505091507350b7545627a5162f82a992c33b87adc75187b218826000815181106104ea576104ea6119bb565b60200260200101906001600160a01b031690816001600160a01b0316815250507349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab82600181518110610532576105326119bb565b60200260200101906001600160a01b031690816001600160a01b03168152505073b31f66aa3c1e785363f0875a1b74e27b85fd66c78260028151811061057a5761057a6119bb565b60200260200101906001600160a01b031690816001600160a01b031681525050739702230a8ea53601f5cd2dc00fdbc13d4df4a8c7826003815181106105c2576105c26119bb565b60200260200101906001600160a01b031690816001600160a01b03168152505060006105ec6113ec565b9050600081600381518110610603576106036119bb565b60200260200101518260028151811061061e5761061e6119bb565b602002602001015183600181518110610639576106396119bb565b602002602001015184600081518110610654576106546119bb565b602002602001015161066691906119e7565b61067091906119e7565b61067a91906119e7565b60408051600480825260a082019092529192506020820160808036833701905050925080156106db5780612710836000815181106106ba576106ba6119bb565b60200260200101516106cc91906119ff565b6106d69190611a1e565b6106df565b6069545b836000815181106106f2576106f26119bb565b6020908102919091010152801561073b57806127108360018151811061071a5761071a6119bb565b602002602001015161072c91906119ff565b6107369190611a1e565b61073f565b606a545b83600181518110610752576107526119bb565b6020908102919091010152801561079b57806127108360028151811061077a5761077a6119bb565b602002602001015161078c91906119ff565b6107969190611a1e565b61079f565b606b545b836002815181106107b2576107b26119bb565b602090810291909101015280156107fb5780612710836003815181106107da576107da6119bb565b60200260200101516107ec91906119ff565b6107f69190611a1e565b6107ff565b606c545b83600381518110610812576108126119bb565b60200260200101818152505050509091565b6033546001600160a01b0316331461084e5760405162461bcd60e51b815260040161046390611a40565b606d546001600160a01b0316156108935760405162461bcd60e51b815260206004820152600960248201526815985d5b1d081cd95d60ba1b6044820152606401610463565b606d80546001600160a01b0319166001600160a01b0392909216919091179055565b606d546000906001600160a01b031633146108e25760405162461bcd60e51b815260040161046390611997565b670de0b6b3a76400008211156109265760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b6044820152606401610463565b6040516370a0823160e01b8152306004820152670de0b6b3a76400009083907378ae2880bd1672b49a33cf796cf53fe6db0ab01d906370a082319060240160206040518083038186803b15801561097c57600080fd5b505afa158015610990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b49190611a75565b6109be91906119ff565b6109c89190611a1e565b606d549091506109f7907378ae2880bd1672b49a33cf796cf53fe6db0ab01d906001600160a01b031683611412565b92915050565b6033546001600160a01b03163314610a275760405162461bcd60e51b815260040161046390611a40565b610a316000611447565b565b6033546001600160a01b03163314610a5d5760405162461bcd60e51b815260040161046390611a40565b60048114610a9d5760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a590818dbdd5b9d609a1b6044820152606401610463565b61271082826003818110610ab357610ab36119bb565b9050602002013583836002818110610acd57610acd6119bb565b9050602002013584846001818110610ae757610ae76119bb565b9050602002013585856000818110610b0157610b016119bb565b90506020020135610b1291906119e7565b610b1c91906119e7565b610b2691906119e7565b14610b675760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b2103830b930b6b2ba32b960791b6044820152606401610463565b81816000818110610b7a57610b7a6119bb565b60200291909101356069555081816001818110610b9957610b996119bb565b6020029190910135606a555081816002818110610bb857610bb86119bb565b6020029190910135606b555081816003818110610bd757610bd76119bb565b6020029190910135606c55505050565b6040516370a0823160e01b81523060048201526000907378ae2880bd1672b49a33cf796cf53fe6db0ab01d906370a082319060240160206040518083038186803b158015610c3457600080fd5b505afa158015610c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6c9190611a75565b610c7b9064e8d4a510006119ff565b905090565b600080610c8b61049c565b915050600081600381518110610ca357610ca36119bb565b6020026020010151606860009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cf957600080fd5b505afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d319190611a75565b610d3b91906119ff565b82600281518110610d4e57610d4e6119bb565b6020026020010151606760009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610da457600080fd5b505afa158015610db8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddc9190611a75565b610de691906119ff565b83600181518110610df957610df96119bb565b6020026020010151606660009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4f57600080fd5b505afa158015610e63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e879190611a75565b610e9191906119ff565b84600081518110610ea457610ea46119bb565b6020026020010151606560009054906101000a90046001600160a01b03166001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610efa57600080fd5b505afa158015610f0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f329190611a75565b610f3c91906119ff565b610f4691906119e7565b610f5091906119e7565b610f5a91906119e7565b9050610f6861271082611a1e565b9250505090565b606d546001600160a01b03163314610f995760405162461bcd60e51b815260040161046390611997565b6040516370a0823160e01b81523060048201526000907378ae2880bd1672b49a33cf796cf53fe6db0ab01d906370a082319060240160206040518083038186803b158015610fe657600080fd5b505afa158015610ffa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101e9190611a75565b9050801561105257606d54611052907378ae2880bd1672b49a33cf796cf53fe6db0ab01d906001600160a01b031683611412565b6040518181527f99d7f8b71cfb9126984f7a5eed3a40e64a8959e9b0e442221546fb04ec6a489c9060200160405180910390a150565b606d546000906001600160a01b031633146110b55760405162461bcd60e51b815260040161046390611997565b670de0b6b3a76400008211156110f95760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b6044820152606401610463565b6040516370a0823160e01b8152306004820152670de0b6b3a76400009083907378ae2880bd1672b49a33cf796cf53fe6db0ab01d906370a082319060240160206040518083038186803b15801561114f57600080fd5b505afa158015611163573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111879190611a75565b61119191906119ff565b61119b9190611a1e565b606d549091506111ca907378ae2880bd1672b49a33cf796cf53fe6db0ab01d906001600160a01b031683611412565b60408051838152602081018390527f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8910160405180910390a1919050565b6033546001600160a01b031633146112325760405162461bcd60e51b815260040161046390611a40565b6001600160a01b0381166112975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610463565b61049981611447565b60006112ac6001611499565b905080156112c4576000805461ff0019166101001790555b6112cc611521565b611194606955610dac606a556105dc606b556101f4606c55606580546001600160a01b038088166001600160a01b031992831617909255606680548784169083161790556067805486841690831617905560688054928516929091169190911790558015611374576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526113e69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611550565b50505050565b60408051600480825260a082019092526060916020820160808036833701905050905090565b6040516001600160a01b03831660248201526044810182905261144290849063a9059cbb60e01b906064016113af565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff16156114e0578160ff1660011480156114bc5750303b155b6114d85760405162461bcd60e51b815260040161046390611a8e565b506000919050565b60005460ff8084169116106115075760405162461bcd60e51b815260040161046390611a8e565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166115485760405162461bcd60e51b815260040161046390611adc565b610a31611622565b60006115a5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116529092919063ffffffff16565b80519091501561144257808060200190518101906115c39190611b27565b6114425760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610463565b600054610100900460ff166116495760405162461bcd60e51b815260040161046390611adc565b610a3133611447565b6060611661848460008561166b565b90505b9392505050565b6060824710156116cc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610463565b6001600160a01b0385163b6117235760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610463565b600080866001600160a01b0316858760405161173f9190611b75565b60006040518083038185875af1925050503d806000811461177c576040519150601f19603f3d011682016040523d82523d6000602084013e611781565b606091505b509150915061179182828661179c565b979650505050505050565b606083156117ab575081611664565b8251156117bb5782518084602001fd5b8160405162461bcd60e51b81526004016104639190611b91565b6000602082840312156117e757600080fd5b5035919050565b604080825283519082018190526000906020906060840190828701845b828110156118305781516001600160a01b03168452928401929084019060010161180b565b5050508381038285015284518082528583019183019060005b8181101561186557835183529284019291840191600101611849565b5090979650505050505050565b6001600160a01b038116811461049957600080fd5b60006020828403121561189957600080fd5b813561166481611872565b600080604083850312156118b757600080fd5b50508035926020909101359150565b600080602083850312156118d957600080fd5b823567ffffffffffffffff808211156118f157600080fd5b818501915085601f83011261190557600080fd5b81358181111561191457600080fd5b8660208260051b850101111561192957600080fd5b60209290920196919550909350505050565b6000806000806080858703121561195157600080fd5b843561195c81611872565b9350602085013561196c81611872565b9250604085013561197c81611872565b9150606085013561198c81611872565b939692955090935050565b6020808252600a908201526913db9b1e481d985d5b1d60b21b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156119fa576119fa6119d1565b500190565b6000816000190483118215151615611a1957611a196119d1565b500290565b600082611a3b57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611a8757600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215611b3957600080fd5b8151801515811461166457600080fd5b60005b83811015611b64578181015183820152602001611b4c565b838111156113e65750506000910152565b60008251611b87818460208701611b49565b9190910192915050565b6020815260008251806020840152611bb0816040850160208701611b49565b601f01601f1916919091016040019291505056fea264697066735822122045dd74d4ae2ee7d2fcd4b464e82f347e1479c14a89f9032f3240b60ee8b1ce2364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 713,
        "contract": "contracts/mwi/MWIStrategyTest.sol:MWIStrategyTest",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 716,
        "contract": "contracts/mwi/MWIStrategyTest.sol:MWIStrategyTest",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3292,
        "contract": "contracts/mwi/MWIStrategyTest.sol:MWIStrategyTest",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 593,
        "contract": "contracts/mwi/MWIStrategyTest.sol:MWIStrategyTest",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 705,
        "contract": "contracts/mwi/MWIStrategyTest.sol:MWIStrategyTest",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 31872,
        "contract": "contracts/mwi/MWIStrategyTest.sol:MWIStrategyTest",
        "label": "WBTCVault",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IL2Vault)31797"
      },
      {
        "astId": 31875,
        "contract": "contracts/mwi/MWIStrategyTest.sol:MWIStrategyTest",
        "label": "WETHVault",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IL2Vault)31797"
      },
      {
        "astId": 31878,
        "contract": "contracts/mwi/MWIStrategyTest.sol:MWIStrategyTest",
        "label": "WAVAXVault",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IL2Vault)31797"
      },
      {
        "astId": 31881,
        "contract": "contracts/mwi/MWIStrategyTest.sol:MWIStrategyTest",
        "label": "USDTVault",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IL2Vault)31797"
      },
      {
        "astId": 31886,
        "contract": "contracts/mwi/MWIStrategyTest.sol:MWIStrategyTest",
        "label": "WBTCTargetPerc",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 31888,
        "contract": "contracts/mwi/MWIStrategyTest.sol:MWIStrategyTest",
        "label": "WETHTargetPerc",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 31890,
        "contract": "contracts/mwi/MWIStrategyTest.sol:MWIStrategyTest",
        "label": "WAVAXTargetPerc",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 31892,
        "contract": "contracts/mwi/MWIStrategyTest.sol:MWIStrategyTest",
        "label": "USDTTargetPerc",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 31894,
        "contract": "contracts/mwi/MWIStrategyTest.sol:MWIStrategyTest",
        "label": "vault",
        "offset": 0,
        "slot": "109",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IL2Vault)31797": {
        "encoding": "inplace",
        "label": "contract IL2Vault",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}