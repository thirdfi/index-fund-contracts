{
  "address": "0x2AEd0C3A5b32240C1cF8ea84099f32F32c2CAB80",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        }
      ],
      "name": "AddToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "shareBurned",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amtDeposit",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "shareMinted",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum BNIMinterV1.OperationType",
          "name": "operation",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "NewOperation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetPerc",
          "type": "uint256"
        }
      ],
      "name": "RemoveToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BNI",
      "outputs": [
        {
          "internalType": "contract IBNI",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_share",
          "type": "uint256"
        }
      ],
      "name": "burnByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "chainIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "exitWithdrawalByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewaySigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_allPoolInUSDs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_APRs",
          "type": "uint256[]"
        }
      ],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPR1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "getAPR1WithSig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_allPoolInUSDs",
          "type": "uint256[]"
        }
      ],
      "name": "getAllPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolInUSD1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "getAllPoolInUSD1WithSig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "getAllPoolInUSDAtNonce1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_chainIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_poolInUSDs",
          "type": "uint256[]"
        }
      ],
      "name": "getCurrentTokenCompositionPerc",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "pools",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTokenCompositionPerc1",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "getCurrentTokenCompositionPercWithSig",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_chainIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_poolInUSDs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_USDT6Amt",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokenComposition",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_USDT6Amts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_USDT6Amt",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokenComposition1",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "getDepositTokenComposition1WithSig",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "getOperation",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "enum BNIMinterV1.OperationType",
              "name": "operation",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "done",
              "type": "bool"
            }
          ],
          "internalType": "struct BNIMinterV1.Operation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_allPoolInUSDs",
          "type": "uint256[]"
        }
      ],
      "name": "getPricePerFullShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePerFullShare1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "getPricePerFullShare1WithSig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUSDTPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_share",
          "type": "uint256"
        }
      ],
      "name": "getWithdrawPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_USDT6Amt",
          "type": "uint256"
        }
      ],
      "name": "initDepositByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_BNI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_biconomy",
          "type": "address"
        }
      ],
      "name": "initialize2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_USDT6Amt",
          "type": "uint256"
        }
      ],
      "name": "mintByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "operations",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "enum BNIMinterV1.OperationType",
          "name": "operation",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolsAtNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_biconomy",
          "type": "address"
        }
      ],
      "name": "setBiconomy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setGatewaySigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_targetPerc",
          "type": "uint256[]"
        }
      ],
      "name": "setTokenCompositionTargetPerc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_urls",
          "type": "string[]"
        }
      ],
      "name": "setUrls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAgent",
          "type": "address"
        }
      ],
      "name": "setUserAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "targetPercentages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "urls",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLastOperationNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x43e2b08d4eb83329d1d4031475cdc57125db6977e5302af2a2f5f7283e3948c0",
  "receipt": {
    "to": null,
    "from": "0xd91Fbc9b431464D737E1BC4e76900D43405a639b",
    "contractAddress": "0x2AEd0C3A5b32240C1cF8ea84099f32F32c2CAB80",
    "transactionIndex": 15,
    "gasUsed": "4477487",
    "logsBloom": "0x
    "blockHash": "0xb4e07df86dce551c8bb82b1573b39f7c46274ec737c3aded1706d1522b9b1915",
    "transactionHash": "0x43e2b08d4eb83329d1d4031475cdc57125db6977e5302af2a2f5f7283e3948c0",
    "logs": [],
    "blockNumber": 13835013,
    "cumulativeGasUsed": "7527435",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 18,
  "solcInputHash": "909ebc7922d0a2d37d455c128151d0ed",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"shareBurned\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amtDeposit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"shareMinted\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum BNIMinterV1.OperationType\",\"name\":\"operation\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"NewOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetPerc\",\"type\":\"uint256\"}],\"name\":\"RemoveToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BNI\",\"outputs\":[{\"internalType\":\"contract IBNI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"burnByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"exitWithdrawalByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewaySigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allPoolInUSDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_APRs\",\"type\":\"uint256[]\"}],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"getAPR1WithSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allPoolInUSDs\",\"type\":\"uint256[]\"}],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInUSD1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"getAllPoolInUSD1WithSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getAllPoolInUSDAtNonce1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_chainIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_poolInUSDs\",\"type\":\"uint256[]\"}],\"name\":\"getCurrentTokenCompositionPerc\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pools\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenCompositionPerc1\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"getCurrentTokenCompositionPercWithSig\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_chainIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_poolInUSDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_USDT6Amt\",\"type\":\"uint256\"}],\"name\":\"getDepositTokenComposition\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_USDT6Amts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_USDT6Amt\",\"type\":\"uint256\"}],\"name\":\"getDepositTokenComposition1\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"getDepositTokenComposition1WithSig\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getOperation\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"enum BNIMinterV1.OperationType\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"internalType\":\"struct BNIMinterV1.Operation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allPoolInUSDs\",\"type\":\"uint256[]\"}],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"getPricePerFullShare1WithSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"getWithdrawPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_USDT6Amt\",\"type\":\"uint256\"}],\"name\":\"initDepositByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_BNI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_biconomy\",\"type\":\"address\"}],\"name\":\"initialize2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_USDT6Amt\",\"type\":\"uint256\"}],\"name\":\"mintByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"enum BNIMinterV1.OperationType\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolsAtNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_biconomy\",\"type\":\"address\"}],\"name\":\"setBiconomy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setGatewaySigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_targetPerc\",\"type\":\"uint256[]\"}],\"name\":\"setTokenCompositionTargetPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_urls\",\"type\":\"string[]\"}],\"name\":\"setUrls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAgent\",\"type\":\"address\"}],\"name\":\"setUserAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targetPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"urls\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastOperationNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burnByAdmin(address,uint256,uint256)\":{\"details\":\"mint BNIs according to the deposited USDT\",\"params\":{\"_account\":\"account to which BNIs will be minted\",\"_pool\":\"total pool in USD\",\"_share\":\"amount of BNI to be burnt\"}},\"getDepositTokenComposition(uint256[],address[],uint256[],uint256)\":{\"params\":{\"_USDT6Amt\":\"amount of USDT with 6 decimals\"},\"returns\":{\"_0\":\"_USDT6Amts amount of USDT should be deposited to each pools\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getUSDTPriceInUSD()\":{\"returns\":{\"_0\":\"the price of USDT in USD.\"}},\"getWithdrawPerc(address,uint256)\":{\"params\":{\"_share\":\"amount of BNI to be withdrawn\"},\"returns\":{\"_sharePerc\":\"percentage of assets which should be withdrawn. It's 18 decimals\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initDepositByAdmin(address,uint256,uint256)\":{\"params\":{\"_USDT6Amt\":\"USDT with 6 decimals to be deposited\",\"_account\":\"account to which BNIs will be minted\",\"_pool\":\"total pool in USD\"}},\"mintByAdmin(address,uint256)\":{\"details\":\"mint BNIs according to the deposited USDT\",\"params\":{\"_USDT6Amt\":\"the deposited USDT with 6 decimals\",\"_account\":\"account to which BNIs will be minted\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addToken(uint256,address)\":{\"notice\":\"After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\"},\"getAPR(uint256[],uint256[])\":{\"notice\":\"The length of array is based on network count. And the lengths should be same on the arraies.\"},\"getAllPoolInUSD(uint256[])\":{\"notice\":\"The length of array is based on network count. And the lengths should be same on the arraies.\"},\"getCurrentTokenCompositionPerc(uint256[],address[],uint256[])\":{\"notice\":\"The length of array is based on token count. And the lengths should be same on the arraies.\"},\"getDepositTokenComposition(uint256[],address[],uint256[],uint256)\":{\"notice\":\"The length of array is based on token count. And the lengths should be same on the arraies.\"},\"getPricePerFullShare(uint256[])\":{\"notice\":\"Can be used for calculate both user shares & APR\"},\"getWithdrawPerc(address,uint256)\":{\"notice\":\"The length of array is based on token count. And the lengths should be same on the arraies.\"},\"removeToken(uint256)\":{\"notice\":\"After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\"},\"setTokenCompositionTargetPerc(uint256[])\":{\"notice\":\"The length of array is based on token count.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bni/BNIMinterTest.sol\":\"BNIMinterTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x6602a65e0277f31f45cad4c7a15b024fd182f2f0e01eaa1954103b0d57848a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1976ce0aadaa551a0fecab9930a7f4956252fa40594c8d165f682020f0e826c0\",\"license\":\"MIT\"},\"contracts/bni/BNIMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"./priceOracle/IPriceOracle.sol\\\";\\nimport \\\"./constant/AvaxConstant.sol\\\";\\nimport \\\"./constant/AuroraConstant.sol\\\";\\nimport \\\"./constant/MaticConstant.sol\\\";\\nimport \\\"../../libs/Const.sol\\\";\\nimport \\\"./IBNIMinter.sol\\\";\\n\\ninterface IBNI is IERC20Upgradeable {\\n    function decimals() external view returns (uint8);\\n    function mint(address account_, uint256 amount_) external;\\n    function burn(uint256 amount) external;\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\\nerror OffchainLookup(address sender, string[] urls, bytes callData, bytes4 callbackFunction, bytes extraData);\\n\\ninterface Gateway {\\n    function getCurrentTokenCompositionPerc1() external view returns(\\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs,\\n        bytes memory sig\\n    );\\n    function getAllPoolInUSD1() external view returns(\\n        uint[] memory _allPoolInUSDs,\\n        bytes memory sig\\n    );\\n    function getAllPoolInUSDAtNonce1(uint _nonce) external view returns(\\n        uint[] memory _allPoolInUSDs,\\n        bytes memory sig\\n    );\\n    function getPricePerFullShare1() external view returns(\\n        uint[] memory _allPoolInUSDs,\\n        bytes memory sig\\n    );\\n    function getAPR1() external view returns(\\n        uint[] memory _allPoolInUSDs,  uint[] memory _APRs,\\n        bytes memory sig\\n    );\\n    function getDepositTokenComposition1() external view returns(\\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs,\\n        bytes memory sig\\n    );\\n}\\n\\n\\ncontract BNIMinterV1 is\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    OwnableUpgradeable\\n{\\n    enum OperationType { Null, Deposit, Withdrawal }\\n\\n    struct Operation {\\n        address account;\\n        OperationType operation;\\n        uint amount; // amount of USDT or shares\\n        bool done;\\n    }\\n\\n    uint[] public chainIDs;\\n    address[] public tokens;\\n    uint[] public targetPercentages;\\n    mapping(uint => mapping(address => uint)) public tid; // Token indices in arrays\\n\\n    address public admin;\\n    IBNI public BNI;\\n    IPriceOracle public priceOracle;\\n\\n    string[] public urls;\\n    address public gatewaySigner;\\n\\n    address public trustedForwarder;\\n\\n    Operation[] public operations; // The nonce start from 1.\\n    mapping(address => uint) public userLastOperationNonce;\\n\\n    function initialize(\\n        address _admin, address _BNI, address _priceOracle\\n    ) external initializer {\\n        __Ownable_init();\\n\\n        admin = _admin;\\n        BNI = IBNI(_BNI);\\n        priceOracle = IPriceOracle(_priceOracle);\\n\\n        chainIDs.push(MaticConstant.CHAINID);\\n        chainIDs.push(AvaxConstant.CHAINID);\\n        chainIDs.push(AuroraConstant.CHAINID);\\n\\n        tokens.push(MaticConstant.WMATIC);\\n        tokens.push(AvaxConstant.WAVAX);\\n        tokens.push(AuroraConstant.WNEAR);\\n\\n        targetPercentages.push(4000); // 40%\\n        targetPercentages.push(4000); // 40%\\n        targetPercentages.push(2000); // 20%\\n\\n        updateTid();\\n\\n        urls.push(\\\"http://localhost:8000/\\\");\\n        gatewaySigner = _admin;\\n    }\\n\\n    function updateTid() internal {\\n        uint[] memory _chainIDs = chainIDs;\\n        address[] memory _tokens = tokens;\\n\\n        uint tokenCnt = _tokens.length;\\n        for (uint i = 0; i < tokenCnt; i ++) {\\n            tid[_chainIDs[i]][_tokens[i]] = i;\\n        }\\n    }\\n}\\n\\ncontract BNIMinter is\\n    IBNIMinter,\\n    BNIMinterV1,\\n    AccessControlEnumerableUpgradeable\\n{\\n    using ECDSAUpgradeable for bytes32;\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    uint public version;\\n\\n    address public userAgent;\\n    uint[] public poolsAtNonce; // The array of total pool in USD. The nonce start from 1.\\n\\n    event AddToken(uint indexed chainID, address indexed token, uint indexed tid);\\n    event RemoveToken(uint indexed chainID, address indexed token, uint indexed tid, uint targetPerc);\\n    event NewOperation(address indexed account, OperationType indexed operation, uint amount, uint indexed nonce);\\n    event Mint(address indexed caller, uint indexed amtDeposit, uint indexed shareMinted);\\n    event Burn(address indexed caller, uint indexed shareBurned);\\n\\n    function initialize2(address _userAgent, address _biconomy) external onlyOwner {\\n        require(version < 2, \\\"Already called\\\");\\n        version = 2;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, owner());\\n        if (admin != address(0)) _setupRole(ADMIN_ROLE, admin);\\n        if (_userAgent != address(0)) _setupRole(ADMIN_ROLE, _userAgent);\\n\\n        userAgent = _userAgent;\\n        trustedForwarder = _biconomy;\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _revokeRole(DEFAULT_ADMIN_ROLE, owner());\\n        super.transferOwnership(newOwner);\\n        if (newOwner != address(0)) _setupRole(DEFAULT_ADMIN_ROLE, newOwner);\\n    }\\n\\n    function setAdmin(address _admin) external onlyOwner {\\n        address oldAdmin = admin;\\n        if (oldAdmin != address(0)) _revokeRole(ADMIN_ROLE, oldAdmin);\\n        admin = _admin;\\n        if (_admin != address(0)) _setupRole(ADMIN_ROLE, _admin);\\n    }\\n\\n    function setUserAgent(address _userAgent) external onlyOwner {\\n        address oldAgent = userAgent;\\n        if (oldAgent != address(0)) _revokeRole(ADMIN_ROLE, oldAgent);\\n        userAgent = _userAgent;\\n        if (_userAgent != address(0)) _setupRole(ADMIN_ROLE, _userAgent);\\n    }\\n\\n    function setBiconomy(address _biconomy) external onlyOwner {\\n        trustedForwarder = _biconomy;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns(bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    function _msgSender() internal override(ContextUpgradeable) view returns (address ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function versionRecipient() external pure returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    function setGatewaySigner(address _signer) external onlyOwner {\\n        gatewaySigner = _signer;\\n    }\\n\\n    function setUrls(string[] memory _urls) external onlyOwner {\\n        urls = _urls;\\n    }\\n\\n    /// @notice After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\\n    function addToken(uint _chainID, address _token) external onlyOwner {\\n        uint _tid = tid[_chainID][_token];\\n        require ((_tid == 0 && _chainID != chainIDs[0] && _token != tokens[0]), \\\"Already added\\\");\\n\\n        chainIDs.push(_chainID);\\n        tokens.push(_token);\\n        targetPercentages.push(0);\\n\\n        _tid = tokens.length-1;\\n        tid[_chainID][_token] = _tid;\\n\\n        emit AddToken(_chainID, _token, _tid);\\n    }\\n\\n    /// @notice After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\\n    function removeToken(uint _tid) external onlyOwner {\\n        uint tokenCnt = tokens.length;\\n        require(_tid < tokenCnt, \\\"Invalid tid\\\");\\n\\n        uint _chainID = chainIDs[_tid];\\n        address _token = tokens[_tid];\\n        uint _targetPerc = targetPercentages[_tid];\\n\\n        chainIDs[_tid] = chainIDs[tokenCnt-1];\\n        chainIDs.pop();\\n        tokens[_tid] = tokens[tokenCnt-1];\\n        tokens.pop();\\n        targetPercentages[_tid] = targetPercentages[tokenCnt-1];\\n        targetPercentages.pop();\\n\\n        tid[_chainID][_token] = 0;\\n        updateTid();\\n\\n        emit RemoveToken(_chainID, _token, _tid, _targetPerc);\\n    }\\n\\n    /// @notice The length of array is based on token count.\\n    function setTokenCompositionTargetPerc(uint[] calldata _targetPerc) public onlyOwner {\\n        uint targetCnt = _targetPerc.length;\\n        require(targetCnt == targetPercentages.length, \\\"Invalid count\\\");\\n\\n        uint sum;\\n        for (uint i = 0; i < targetCnt; i ++) {\\n            targetPercentages[i] = _targetPerc[i];\\n            sum += _targetPerc[i];\\n        }\\n        require(sum == Const.DENOMINATOR, \\\"Invalid parameter\\\");\\n    }\\n\\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\\n    function getEachPoolInUSD(\\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs\\n    ) private view returns (uint[] memory pools) {\\n        uint inputCnt = _tokens.length;\\n        uint tokenCnt = tokens.length;\\n        pools = new uint[](tokenCnt);\\n\\n        for (uint i = 0; i < inputCnt; i ++) {\\n            uint _chainID = _chainIDs[i];\\n            address _token = _tokens[i];\\n            uint _tid = tid[_chainID][_token];\\n            if (tokenCnt <= _tid) continue;\\n            if (_tid == 0 && (_chainID != chainIDs[0] || _token != tokens[0])) continue;\\n\\n            pools[_tid] = _poolInUSDs[i];\\n        }\\n    }\\n\\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\\n    function getCurrentTokenCompositionPerc(\\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs\\n    ) public view returns (\\n        uint[] memory, address[] memory, uint[] memory pools, uint[] memory percentages\\n    ) {\\n        pools = getEachPoolInUSD(_chainIDs, _tokens, _poolInUSDs);\\n        uint poolCnt = pools.length;\\n\\n        uint allPool;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            allPool += pools[i];\\n        }\\n\\n        percentages = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            percentages[i] = allPool == 0 ? targetPercentages[i] : pools[i] * Const.DENOMINATOR / allPool;\\n        }\\n\\n        return (chainIDs, tokens, pools, percentages);\\n    }\\n    function getCurrentTokenCompositionPerc1() external view returns (\\n        uint[] memory, address[] memory, uint[] memory, uint[] memory\\n    ) {\\n        revert OffchainLookup(address(this), urls,\\n            abi.encodeWithSelector(Gateway.getCurrentTokenCompositionPerc1.selector),\\n            BNIMinter.getCurrentTokenCompositionPercWithSig.selector,\\n            abi.encode(0)\\n        );\\n    }\\n    function getCurrentTokenCompositionPercWithSig(bytes calldata result, bytes calldata extraData) external view returns(\\n        uint[] memory, address[] memory, uint[] memory, uint[] memory\\n    ) {\\n        extraData;\\n        (uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, bytes memory sig)\\n            = abi.decode(result, (uint[], address[], uint[], bytes));\\n\\n        address recovered = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n            keccak256(abi.encodePacked(_chainIDs, _tokens, _poolInUSDs))\\n        )).recover(sig);\\n        require(gatewaySigner == recovered, \\\"Signer is incorrect\\\");\\n\\n        return getCurrentTokenCompositionPerc(_chainIDs, _tokens, _poolInUSDs);\\n    }\\n\\n    /// @notice The length of array is based on network count. And the lengths should be same on the arraies.\\n    function getAllPoolInUSD(uint[] memory _allPoolInUSDs) public pure returns (uint) {\\n        uint networkCnt = _allPoolInUSDs.length;\\n        uint allPoolInUSD;\\n        for (uint i = 0; i < networkCnt; i ++) {\\n            allPoolInUSD += _allPoolInUSDs[i];\\n        }\\n        return allPoolInUSD;\\n    }\\n    function getAllPoolInUSD1() external view returns (uint) {\\n        revert OffchainLookup(address(this), urls,\\n            abi.encodeWithSelector(Gateway.getAllPoolInUSD1.selector),\\n            BNIMinter.getAllPoolInUSD1WithSig.selector,\\n            abi.encode(0)\\n        );\\n    }\\n    function getAllPoolInUSD1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\\n        extraData;\\n        (uint[] memory _allPoolInUSDs, bytes memory sig) = abi.decode(result, (uint[], bytes));\\n\\n        address recovered = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n            keccak256(abi.encodePacked(_allPoolInUSDs))\\n        )).recover(sig);\\n        require(gatewaySigner == recovered, \\\"Signer is incorrect\\\");\\n\\n        return getAllPoolInUSD(_allPoolInUSDs);\\n    }\\n\\n    function getAllPoolInUSDAtNonce1(uint _nonce) external view returns (uint) {\\n        revert OffchainLookup(address(this), urls,\\n            abi.encodeWithSelector(Gateway.getAllPoolInUSDAtNonce1.selector, _nonce),\\n            BNIMinter.getAllPoolInUSD1WithSig.selector,\\n            abi.encode(_nonce)\\n        );\\n    }\\n\\n    /// @notice Can be used for calculate both user shares & APR\\n    function getPricePerFullShare(uint[] memory _allPoolInUSDs) public view returns (uint) {\\n        uint _totalSupply = BNI.totalSupply();\\n        if (_totalSupply == 0) return 1e18;\\n        return getAllPoolInUSD(_allPoolInUSDs) * 1e18 / _totalSupply;\\n    }\\n    function getPricePerFullShare1() external view returns (uint) {\\n        revert OffchainLookup(address(this), urls,\\n            abi.encodeWithSelector(Gateway.getPricePerFullShare1.selector),\\n            BNIMinter.getPricePerFullShare1WithSig.selector,\\n            abi.encode(0)\\n        );\\n    }\\n    function getPricePerFullShare1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\\n        extraData;\\n        (uint[] memory _allPoolInUSDs, bytes memory sig) = abi.decode(result, (uint[], bytes));\\n\\n        address recovered = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n            keccak256(abi.encodePacked(_allPoolInUSDs))\\n        )).recover(sig);\\n        require(gatewaySigner == recovered, \\\"Signer is incorrect\\\");\\n\\n        return getPricePerFullShare(_allPoolInUSDs);\\n    }\\n\\n    /// @notice The length of array is based on network count. And the lengths should be same on the arraies.\\n    function getAPR(uint[] memory _allPoolInUSDs, uint[] memory _APRs) public pure returns (uint) {\\n        uint networkCnt = _allPoolInUSDs.length;\\n        require(networkCnt == _APRs.length, \\\"Not match array length\\\");\\n\\n        uint pool = getAllPoolInUSD(_allPoolInUSDs);\\n        if (pool == 0) return 0;\\n\\n        uint allApr;\\n        for (uint i = 0; i < networkCnt; i ++) {\\n            allApr += (_APRs[i] * _allPoolInUSDs[i]);\\n        }\\n        return (allApr / pool);\\n    }\\n    function getAPR1() external view returns (uint) {\\n        revert OffchainLookup(address(this), urls,\\n            abi.encodeWithSelector(Gateway.getAPR1.selector),\\n            BNIMinter.getAPR1WithSig.selector,\\n            abi.encode(0)\\n        );\\n    }\\n    function getAPR1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\\n        extraData;\\n        (uint[] memory _allPoolInUSDs,  uint[] memory _APRs, bytes memory sig) = abi.decode(result, (uint[], uint[], bytes));\\n\\n        address recovered = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n            keccak256(abi.encodePacked(_allPoolInUSDs, _APRs))\\n        )).recover(sig);\\n        require(gatewaySigner == recovered, \\\"Signer is incorrect\\\");\\n\\n        return getAPR(_allPoolInUSDs, _APRs);\\n    }\\n\\n    /// @return the price of USDT in USD.\\n    function getUSDTPriceInUSD() public virtual view returns(uint, uint8) {\\n        return priceOracle.getAssetPrice(AvaxConstant.USDT);\\n    }\\n\\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\\n    /// @param _USDT6Amt amount of USDT with 6 decimals\\n    /// @return _USDT6Amts amount of USDT should be deposited to each pools\\n    function getDepositTokenComposition(\\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, uint _USDT6Amt\\n    ) public view returns (\\n        uint[] memory, address[] memory, uint[] memory _USDT6Amts\\n    ) {\\n        (,, uint[] memory pools, uint[] memory perc) = getCurrentTokenCompositionPerc(_chainIDs, _tokens, _poolInUSDs);\\n        uint poolCnt = perc.length;\\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n\\n        uint allPool = _USDT6Amt * 1e12 * USDTPriceInUSD / (10 ** USDTPriceDecimals); // USDT's decimals is 6\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            allPool += pools[i];\\n        }\\n\\n        uint totalAllocation;\\n        uint[] memory allocations = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            uint target = allPool * targetPercentages[i] / Const.DENOMINATOR;\\n            if (pools[i] < target) {\\n                uint diff = target - pools[i];\\n                allocations[i] = diff;\\n                totalAllocation += diff;\\n            }\\n        }\\n\\n        _USDT6Amts = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            _USDT6Amts[i] = _USDT6Amt * allocations[i] / totalAllocation;\\n        }\\n\\n        return (chainIDs, tokens, _USDT6Amts);\\n    }\\n    function getDepositTokenComposition1(uint _USDT6Amt) external view returns (\\n        uint[] memory, address[] memory, uint[] memory\\n    ) {\\n        revert OffchainLookup(address(this), urls,\\n            abi.encodeWithSelector(Gateway.getDepositTokenComposition1.selector),\\n            BNIMinter.getDepositTokenComposition1WithSig.selector,\\n            abi.encode(_USDT6Amt)\\n        );\\n    }\\n    function getDepositTokenComposition1WithSig(bytes calldata result, bytes calldata extraData) external view returns(\\n        uint[] memory, address[] memory, uint[] memory\\n    ) {\\n        (uint _USDT6Amt) = abi.decode(extraData, (uint));\\n        (uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, bytes memory sig)\\n            = abi.decode(result, (uint[], address[], uint[], bytes));\\n\\n        address recovered = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n            keccak256(abi.encodePacked(_chainIDs, _tokens, _poolInUSDs))\\n        )).recover(sig);\\n        require(gatewaySigner == recovered, \\\"Signer is incorrect\\\");\\n\\n        return getDepositTokenComposition(_chainIDs, _tokens, _poolInUSDs, _USDT6Amt);\\n    }\\n\\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\\n    /// @param _share amount of BNI to be withdrawn\\n    /// @return _sharePerc percentage of assets which should be withdrawn. It's 18 decimals\\n    function getWithdrawPerc(address _account, uint _share) public view returns (uint _sharePerc) {\\n        require(0 < _share && _share <= BNI.balanceOf(_account), \\\"Invalid share amount\\\");\\n        return (_share * 1e18) / BNI.totalSupply();\\n    }\\n\\n    function getNonce() public view returns (uint) {\\n        return operations.length;\\n    }\\n\\n    function getOperation(uint _nonce) public view returns (Operation memory) {\\n        return operations[_nonce - 1];\\n    }\\n\\n    function _checkAndAddOperation(address _account, OperationType _operation, uint _pool, uint _amount) internal {\\n        uint nonce = userLastOperationNonce[_account];\\n        if (nonce > 0) {\\n            Operation memory op = getOperation(nonce);\\n            require(op.done, \\\"Previous operation not finished\\\");\\n        }\\n        operations.push(Operation({\\n            account: _account,\\n            operation: _operation,\\n            amount: _amount,\\n            done: false\\n        }));\\n        poolsAtNonce.push(_pool);\\n        nonce = getNonce();\\n        userLastOperationNonce[_account] = nonce;\\n        emit NewOperation(_account, _operation, _amount, nonce);\\n    }\\n\\n    function _checkAndExitOperation(address _account, OperationType _operation) internal returns (uint _pool, uint _amount) {\\n        uint nonce = userLastOperationNonce[_account];\\n        require(nonce > 0, \\\"No operation\\\");\\n\\n        Operation memory op = getOperation(nonce);\\n        require(op.operation == _operation && op.done == false, \\\"Already finished\\\");\\n\\n        operations[nonce - 1].done = true;\\n        return (poolsAtNonce[nonce-1], op.amount);\\n    }\\n\\n    /// @param _account account to which BNIs will be minted\\n    /// @param _pool total pool in USD\\n    /// @param _USDT6Amt USDT with 6 decimals to be deposited\\n    function initDepositByAdmin(address _account, uint _pool, uint _USDT6Amt) external onlyRole(ADMIN_ROLE) whenNotPaused {\\n        _checkAndAddOperation(_account, OperationType.Deposit, _pool, _USDT6Amt);\\n    }\\n\\n    /// @dev mint BNIs according to the deposited USDT\\n    /// @param _account account to which BNIs will be minted\\n    /// @param _USDT6Amt the deposited USDT with 6 decimals\\n    function mintByAdmin(address _account, uint _USDT6Amt) external onlyRole(ADMIN_ROLE) whenNotPaused {\\n        (uint pool,) = _checkAndExitOperation(_account, OperationType.Deposit);\\n\\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\\n        uint amtDeposit = _USDT6Amt * 1e12 * USDTPriceInUSD / (10 ** USDTPriceDecimals); // USDT's decimals is 6\\n\\n        uint _totalSupply = BNI.totalSupply();\\n        uint share = (_totalSupply == 0 || pool == 0)  ? amtDeposit : _totalSupply * amtDeposit / pool;\\n        // When assets invested in strategy, around 0.3% lost for swapping fee. We will consider it in share amount calculation to avoid pricePerFullShare fall down under 1.\\n        share = share * 997 / 1000;\\n\\n        BNI.mint(_account, share);\\n        emit Mint(_account, amtDeposit, share);\\n    }\\n\\n    /// @dev mint BNIs according to the deposited USDT\\n    /// @param _account account to which BNIs will be minted\\n    /// @param _pool total pool in USD\\n    /// @param _share amount of BNI to be burnt\\n    function burnByAdmin(address _account, uint _pool, uint _share) external onlyRole(ADMIN_ROLE) {\\n        require(0 < _share && _share <= BNI.balanceOf(_account), \\\"Invalid share amount\\\");\\n        _checkAndAddOperation(_account, OperationType.Withdrawal, _pool, _share);\\n\\n        BNI.burnFrom(_account, _share);\\n        emit Burn(_account, _share);\\n    }\\n\\n    function exitWithdrawalByAdmin(address _account) external onlyRole(ADMIN_ROLE) {\\n        _checkAndExitOperation(_account, OperationType.Withdrawal);\\n    }\\n}\\n\",\"keccak256\":\"0x24dacab03354ff20ef5332b348342dde3c761ff50b23534a1ff4aaa461645cbf\",\"license\":\"MIT\"},\"contracts/bni/BNIMinterTest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./BNIMinter.sol\\\";\\nimport \\\"./priceOracle/IPriceOracle.sol\\\";\\nimport \\\"./constant/AvaxConstantTest.sol\\\";\\n\\ncontract BNIMinterTest is BNIMinter {\\n\\n    /// @return the price of USDT in USD.\\n    function getUSDTPriceInUSD() public override view returns(uint, uint8) {\\n        return priceOracle.getAssetPrice(AvaxConstantTest.USDT);\\n    }\\n\\n    function setPriceOracle(address _priceOracle) external onlyOwner {\\n        priceOracle = IPriceOracle(_priceOracle);\\n    }\\n}\\n\",\"keccak256\":\"0x7503ba225d03122d87bd743dd4ea231ca02706c4a8add7f7743a9b66983a5976\",\"license\":\"MIT\"},\"contracts/bni/IBNIMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IBNIMinter {\\n    function initDepositByAdmin(address _account, uint _pool, uint _USDT6Amt) external;\\n    function mintByAdmin(address _account, uint _USDT6Amt) external;\\n    function burnByAdmin(address _account, uint _pool, uint _share) external;\\n    function exitWithdrawalByAdmin(address _account) external;\\n}\",\"keccak256\":\"0x8b61fe1ce134c6bd6261984e8be3c3e7a0340a86b13227f35c0a6f26aa5d745c\",\"license\":\"MIT\"},\"contracts/bni/constant/AuroraConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AuroraConstant {\\n    uint internal constant CHAINID = 1313161554;\\n\\n    address internal constant BSTN = 0x9f1F933C660a1DC856F0E0Fe058435879c5CCEf0;\\n    address internal constant META = 0xc21Ff01229e982d7c8b8691163B0A3Cb8F357453;\\n    address internal constant stNEAR = 0x07F9F7f963C5cD2BBFFd30CcfB964Be114332E30;\\n    address internal constant USDC = 0xB12BFcA5A55806AaF64E99521918A4bf0fC40802;\\n    address internal constant USDT = 0x4988a896b1227218e4A686fdE5EabdcAbd91571f;\\n    address internal constant WETH = 0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB;\\n    address internal constant WNEAR = 0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d;\\n}\\n\",\"keccak256\":\"0xb4c50615e5b8672de4e3918c881272987794a28f3cc00f680f04bdfddc21dba8\",\"license\":\"MIT\"},\"contracts/bni/constant/AvaxConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AvaxConstant {\\n    uint internal constant CHAINID = 43114;\\n\\n    address internal constant USDC = 0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664;\\n    address internal constant USDT = 0xc7198437980c041c805A1EDcbA50c1Ce5db95118;\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    address internal constant aAVAXb = 0x6C6f910A79639dcC94b4feEF59Ff507c2E843929;\\n}\\n\",\"keccak256\":\"0x53216c58dd6d77a9fa18b7ea121a2a8aa8c3ae6577577e8c332747bd0d74fde2\",\"license\":\"MIT\"},\"contracts/bni/constant/AvaxConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AvaxConstantTest {\\n    uint internal constant CHAINID = 43113;\\n\\n    address internal constant USDC = 0x7aCdaba7Ee51c1c3F7C6D605CC26b1c9aAB0495A;\\n    address internal constant USDT = 0x78ae2880bd1672b49a33cF796CF53FE6db0aB01D;\\n    address internal constant WAVAX = 0xd00ae08403B9bbb9124bB305C09058E32C39A48c;\\n\\n    address internal constant aAVAXb = 0xBd97c29aa3E83C523C9714edCA8DB8881841a593;\\n}\\n\",\"keccak256\":\"0x11c2007f9c851ef591ac5f7d8b2540bfbcde5091044f5bc2a02645fc13230c3e\",\"license\":\"MIT\"},\"contracts/bni/constant/MaticConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary MaticConstant {\\n    uint internal constant CHAINID = 137;\\n\\n    address internal constant USDC = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n    address internal constant USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\\n    address internal constant WMATIC = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\\n}\\n\",\"keccak256\":\"0x0503964316f40535769a8e59b212628df2799c1bbde38dae6f0fce5f250f0ba2\",\"license\":\"MIT\"},\"contracts/bni/priceOracle/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity  0.8.9;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n\\r\\n    /**\\r\\n     * @notice Sets or replaces price sources of assets\\r\\n     * @param assets The addresses of the assets\\r\\n     * @param sources The addresses of the price sources\\r\\n     */\\r\\n    function setAssetSources(address[] memory assets, address[] memory sources) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the source for an asset address\\r\\n     * @param asset The address of the asset\\r\\n     * @return The address of the source\\r\\n     */\\r\\n    function getSourceOfAsset(address asset) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param assets The list of assets addresses\\r\\n     * @return prices The prices of the given assets\\r\\n     */\\r\\n    function getAssetsPrices(address[] memory assets) external view returns (uint[] memory prices, uint8[] memory decimalsArray);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param asset The asset address\\r\\n     * @return price The prices of the given assets\\r\\n     */\\r\\n    function getAssetPrice(address asset) external view returns (uint price, uint8 decimals);\\r\\n}\",\"keccak256\":\"0xaf07db77a02bf0cdc1cbd5f7c33cebd04e3e961c517adc53664eca0fc6dccdfe\",\"license\":\"MIT\"},\"libs/Const.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Const {\\r\\n\\r\\n    uint internal constant DENOMINATOR = 10000;\\r\\n\\r\\n    uint internal constant APR_SCALE = 1e18;\\r\\n    \\r\\n    uint internal constant YEAR_IN_SEC = 365 days;\\r\\n\\r\\n    address internal constant NATIVE_ASSET = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n\\r\\n    enum TokenID { USDT, USDC }\\r\\n}\\r\\n\",\"keccak256\":\"0xecdadc52a09a3242feae68d278fd152ab66e18c81c6aeca076ee1bb7d29a3fd7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615007806100206000396000f3fe608060405234801561001057600080fd5b50600436106103e65760003560e01c80638da5cb5b1161020a578063c0c53b8b11610125578063e629f7b3116100b8578063f2fde38b11610087578063f2fde38b146108f2578063f3253c6314610905578063f77de48614610918578063f851a4401461092b578063fd6878cc1461093e57600080fd5b8063e629f7b3146108b1578063ec2e54c7146108c4578063ece90e90146108d7578063f2f3325a146108df57600080fd5b8063d3b974a0116100f4578063d3b974a014610865578063d547741f14610878578063da3bc85c1461088b578063dd8aae411461089e57600080fd5b8063c0c53b8b14610824578063ca15c87314610837578063cb25bb651461084a578063d087d2881461085d57600080fd5b8063a217fddf1161019d578063b2e9949d1161016c578063b2e9949d146107bb578063b47c6a27146107de578063b9bd5bb5146107fd578063bdf1c4a11461081057600080fd5b8063a217fddf14610785578063a7645a201461078d578063af05a749146107a0578063af3da2f4146107a857600080fd5b806397cd02e6116101d957806397cd02e6146107395780639ecb6fae1461074c5780639f86d4dd1461075f578063a08ce5201461077257600080fd5b80638da5cb5b146106ef5780639010d07c1461070057806391d14854146107135780639434b9891461072657600080fd5b80634f64b2be116103055780636628f9451161029857806375b238fc1161026757806375b238fc1461068e578063796676be146106a35780637da0a877146106b65780637ed66ec6146106c95780637fb2df42146106dc57600080fd5b80636628f9451461064d5780636cc895a914610660578063704b6c0214610673578063715018a61461068657600080fd5b806357016b0a116102d457806357016b0a14610605578063572b6c05146106185780635796d0b01461063a5780635c975abb1461064257600080fd5b80634f64b2be146105cd5780635042f9b6146105e0578063530e784f146105e857806354fd4d50146105fb57600080fd5b80632f2ff15d1161037d57806340b8e57f1161034c57806340b8e57f1461055f57806343a463c714610572578063486ff0cd1461058557806349445553146105ab57600080fd5b80632f2ff15d1461050357806336568abe1461051657806336c5d7241461052957806338a871631461053c57600080fd5b80631c60ffc3116103b95780631c60ffc314610469578063202e392414610494578063248a9ca3146104b45780632630c12f146104d857600080fd5b806301ffc9a7146103eb57806309d23e24146104135780630d8b76a81461043457806319dac5af14610449575b600080fd5b6103fe6103f9366004613fb1565b610951565b60405190151581526020015b60405180910390f35b610426610421366004613fdb565b61097c565b60405190815260200161040a565b61044761044236600461400b565b61099d565b005b61042661045736600461400b565b60d46020526000908152604090205481565b610426610477366004614026565b60cc60209081526000928352604080842090915290825290205481565b6104a76104a2366004613fdb565b610a11565b60405161040a919061408a565b6104266104c2366004613fdb565b6000908152610107602052604090206001015490565b60cf546104eb906001600160a01b031681565b6040516001600160a01b03909116815260200161040a565b610447610511366004614026565b610ad4565b610447610524366004614026565b610aff565b610447610537366004613fdb565b610b8d565b61054f61054a36600461410c565b610e88565b60405161040a94939291906141eb565b61042661056d36600461410c565b610f81565b610447610580366004614243565b610ff8565b6040805180820190915260018152603160f81b60208201525b60405161040a91906142ce565b6105be6105b9366004613fdb565b611069565b60405161040a939291906142e1565b6104eb6105db366004613fdb565b6110dd565b610426611107565b6104476105f636600461400b565b611152565b61042661016b5481565b610447610613366004614026565b6111bd565b6103fe61062636600461400b565b60d2546001600160a01b0391821691161490565b61054f6113d2565b60655460ff166103fe565b61044761065b36600461400b565b611425565b61044761066e3660046143da565b6114d5565b61044761068136600461400b565b611531565b6104476115df565b610426600080516020614fb283398151915281565b61059e6106b1366004613fdb565b611634565b60d2546104eb906001600160a01b031681565b6105be6106d736600461410c565b6116e0565b6104476106ea3660046144a4565b61177a565b6097546001600160a01b03166104eb565b6104eb61070e366004614518565b6118c8565b6103fe610721366004614026565b6118e8565b61044761073436600461453a565b611914565b6104266107473660046145ca565b611a4f565b61042661075a366004613fdb565b611b15565b61042661076d366004614606565b611b84565b61042661078036600461410c565b611ced565b610426600081565b61042661079b366004613fdb565b611d5d565b610426611d6d565b6104476107b6366004614606565b611db8565b6107ce6107c9366004613fdb565b611fe6565b60405161040a9493929190614630565b6107e6612031565b6040805192835260ff90911660208301520161040a565b61044761080b36600461400b565b6120cc565b61016c546104eb906001600160a01b031681565b610447610832366004614664565b612137565b610426610845366004613fdb565b6123b7565b61054f610858366004614709565b6123cf565b60d354610426565b6105be610873366004614790565b6125cd565b610447610886366004614026565b612904565b61042661089936600461481f565b61292a565b6104266108ac3660046145ca565b612a13565b6104476108bf366004614243565b612a64565b60ce546104eb906001600160a01b031681565b610426612bfa565b6104266108ed366004613fdb565b612c45565b61044761090036600461400b565b612c56565b60d1546104eb906001600160a01b031681565b61044761092636600461400b565b612ce1565b60cd546104eb906001600160a01b031681565b61042661094c36600461410c565b612d04565b60006001600160e01b03198216635a05180f60e01b1480610976575061097682612d68565b92915050565b60c9818154811061098c57600080fd5b600091825260209091200154905081565b6109a5612d9d565b6001600160a01b03166109c06097546001600160a01b031690565b6001600160a01b0316146109ef5760405162461bcd60e51b81526004016109e690614882565b60405180910390fd5b60d280546001600160a01b0319166001600160a01b0392909216919091179055565b60408051608081018252600080825260208201819052918101829052606081019190915260d3610a426001846148cd565b81548110610a5257610a526148e4565b6000918252602091829020604080516080810190915260039092020180546001600160a01b0381168352919290919083019060ff600160a01b909104166002811115610aa057610aa0614052565b6002811115610ab157610ab1614052565b81526001820154602082015260029091015460ff16151560409091015292915050565b60008281526101076020526040902060010154610af081612dd1565b610afa8383612de2565b505050565b610b07612d9d565b6001600160a01b0316816001600160a01b031614610b7f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016109e6565b610b898282612e05565b5050565b610b95612d9d565b6001600160a01b0316610bb06097546001600160a01b031690565b6001600160a01b031614610bd65760405162461bcd60e51b81526004016109e690614882565b60ca54808210610c165760405162461bcd60e51b815260206004820152600b60248201526a125b9d985b1a59081d1a5960aa1b60448201526064016109e6565b600060c98381548110610c2b57610c2b6148e4565b90600052602060002001549050600060ca8481548110610c4d57610c4d6148e4565b600091825260208220015460cb80546001600160a01b0390921693509086908110610c7a57610c7a6148e4565b9060005260206000200154905060c9600185610c9691906148cd565b81548110610ca657610ca66148e4565b906000526020600020015460c98681548110610cc457610cc46148e4565b60009182526020909120015560c9805480610ce157610ce16148fa565b6001900381819060005260206000200160009055905560ca600185610d0691906148cd565b81548110610d1657610d166148e4565b60009182526020909120015460ca80546001600160a01b039092169187908110610d4257610d426148e4565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060ca805480610d8157610d816148fa565b600082815260209020810160001990810180546001600160a01b031916905501905560cb610db06001866148cd565b81548110610dc057610dc06148e4565b906000526020600020015460cb8681548110610dde57610dde6148e4565b60009182526020909120015560cb805480610dfb57610dfb6148fa565b60008281526020808220830160001990810183905590920190925584825260cc815260408083206001600160a01b0386168452909152812055610e3c612e28565b84826001600160a01b0316847fd8cc1d279bf727e9ee02c4ed116f7c12f4965ace9b477482de71a7929a1871b384604051610e7991815260200190565b60405180910390a45050505050565b60608080806000808080610e9e8b8d018d614930565b93509350935093506000610f2e82868686604051602001610ec193929190614a01565b60408051601f198184030181529082905280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000091830191909152603c820152605c0160405160208183030381529060405280519060200120612f6b90919063ffffffff16565b60d1549091506001600160a01b03808316911614610f5e5760405162461bcd60e51b81526004016109e690614a4a565b610f698585856123cf565b98509850985098505050505050945094509450949050565b6000808080610f9287890189614a77565b9250925092506000610fb1828585604051602001610ec1929190614af4565b60d1549091506001600160a01b03808316911614610fe15760405162461bcd60e51b81526004016109e690614a4a565b610feb848461292a565b9998505050505050505050565b600080516020614fb283398151915261101081612dd1565b60655460ff16156110565760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016109e6565b6110638460018585612f87565b50505050565b6040805160048152602481018252602080820180516001600160e01b0316633c1d708960e01b179052825190810184905260609283928392309260d09291633f6b376360e11b91015b60408051601f1981840301815290829052630556f18360e41b82526109e69594939291600401614b44565b60ca81815481106110ed57600080fd5b6000918252602090912001546001600160a01b0316905081565b6040805160048152602481018252602080820180516001600160e01b03166328217cdb60e11b179052825160009181018290529092309260d0929091630504672960e51b91016110b2565b61115a612d9d565b6001600160a01b03166111756097546001600160a01b031690565b6001600160a01b03161461119b5760405162461bcd60e51b81526004016109e690614882565b60cf80546001600160a01b0319166001600160a01b0392909216919091179055565b6111c5612d9d565b6001600160a01b03166111e06097546001600160a01b031690565b6001600160a01b0316146112065760405162461bcd60e51b81526004016109e690614882565b600082815260cc602090815260408083206001600160a01b038516845290915290205480158015611255575060c9600081548110611246576112466148e4565b90600052602060002001548314155b801561128c575060ca600081548110611270576112706148e4565b6000918252602090912001546001600160a01b03838116911614155b6112c85760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481859191959609a1b60448201526064016109e6565b60c9805460018082019092557f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d280184905560ca805480830182557f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee10180546001600160a01b0319166001600160a01b03861617905560cb8054808401825560009182527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb01555461137991906148cd565b600084815260cc602090815260408083206001600160a01b0387168085529252808320849055519293508392909186917fefa15d4fefbb71d07b3cdc624ab208ebe2d3b6933946582fd8b807e8a5bc93cc9190a4505050565b6040805160048152602481018252602080820180516001600160e01b03166305796d0b60e41b1790528251600091810191909152606092839283928392309260d09290916338a8716360e01b91016110b2565b61142d612d9d565b6001600160a01b03166114486097546001600160a01b031690565b6001600160a01b03161461146e5760405162461bcd60e51b81526004016109e690614882565b61016c546001600160a01b0316801561149957611499600080516020614fb283398151915282612e05565b61016c80546001600160a01b0319166001600160a01b03841690811790915515610b8957610b89600080516020614fb283398151915283613175565b6114dd612d9d565b6001600160a01b03166114f86097546001600160a01b031690565b6001600160a01b03161461151e5760405162461bcd60e51b81526004016109e690614882565b8051610b899060d0906020840190613e68565b611539612d9d565b6001600160a01b03166115546097546001600160a01b031690565b6001600160a01b03161461157a5760405162461bcd60e51b81526004016109e690614882565b60cd546001600160a01b031680156115a4576115a4600080516020614fb283398151915282612e05565b60cd80546001600160a01b0319166001600160a01b03841690811790915515610b8957610b89600080516020614fb283398151915283613175565b6115e7612d9d565b6001600160a01b03166116026097546001600160a01b031690565b6001600160a01b0316146116285760405162461bcd60e51b81526004016109e690614882565b611632600061317f565b565b60d0818154811061164457600080fd5b90600052602060002001600091509050805461165f90614b09565b80601f016020809104026020016040519081016040528092919081815260200182805461168b90614b09565b80156116d85780601f106116ad576101008083540402835291602001916116d8565b820191906000526020600020905b8154815290600101906020018083116116bb57829003601f168201915b505050505081565b6060808060006116f285870187613fdb565b905060008080806117058b8d018d614930565b9350935093509350600061172882868686604051602001610ec193929190614a01565b60d1549091506001600160a01b038083169116146117585760405162461bcd60e51b81526004016109e690614a4a565b611764858585896125cd565b9850985098505050505050509450945094915050565b611782612d9d565b6001600160a01b031661179d6097546001600160a01b031690565b6001600160a01b0316146117c35760405162461bcd60e51b81526004016109e690614882565b60cb54819081146118065760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a590818dbdd5b9d609a1b60448201526064016109e6565b6000805b8281101561188257848482818110611824576118246148e4565b9050602002013560cb828154811061183e5761183e6148e4565b60009182526020909120015584848281811061185c5761185c6148e4565b905060200201358261186e9190614c71565b91508061187a81614c89565b91505061180a565b5061271081146110635760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b2103830b930b6b2ba32b960791b60448201526064016109e6565b6000828152610139602052604081206118e190836131d1565b9392505050565b6000918252610107602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61191c612d9d565b6001600160a01b03166119376097546001600160a01b031690565b6001600160a01b03161461195d5760405162461bcd60e51b81526004016109e690614882565b600261016b54106119a15760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e4818d85b1b195960921b60448201526064016109e6565b600261016b556119c360006119be6097546001600160a01b031690565b613175565b60cd546001600160a01b0316156119f95760cd546119f990600080516020614fb2833981519152906001600160a01b0316613175565b6001600160a01b03821615611a2057611a20600080516020614fb283398151915283613175565b61016c80546001600160a01b039384166001600160a01b03199182161790915560d28054929093169116179055565b60008060ce60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aa057600080fd5b505afa158015611ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad89190614ca4565b905080611aef5750670de0b6b3a764000092915050565b80611af984612a13565b611b0b90670de0b6b3a7640000614cbd565b6118e19190614cdc565b60003060d0639ecb6fae60e01b84604051602401611b3591815260200190565b60408051601f19818403018152918152602080830180516001600160e01b03166001600160e01b031990951694909417909352519091630504672960e51b916110b29188910190815260200190565b6000816000108015611c12575060ce546040516370a0823160e01b81526001600160a01b038581166004830152909116906370a082319060240160206040518083038186803b158015611bd657600080fd5b505afa158015611bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0e9190614ca4565b8211155b611c555760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081cda185c9948185b5bdd5b9d60621b60448201526064016109e6565b60ce60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ca357600080fd5b505afa158015611cb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdb9190614ca4565b611b0b83670de0b6b3a7640000614cbd565b60008080611cfd86880188614cfe565b915091506000611d188284604051602001610ec19190614d57565b60d1549091506001600160a01b03808316911614611d485760405162461bcd60e51b81526004016109e690614a4a565b611d5183612a13565b98975050505050505050565b60cb818154811061098c57600080fd5b6040805160048152602481018252602080820180516001600160e01b031663af05a74960e01b179052825160009181018290529092309260d0929091633f5a1e3360e21b91016110b2565b600080516020614fb2833981519152611dd081612dd1565b60655460ff1615611e165760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016109e6565b6000611e238460016131dd565b509050600080611e31612031565b90925090506000611e4382600a614e47565b83611e538864e8d4a51000614cbd565b611e5d9190614cbd565b611e679190614cdc565b9050600060ce60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611eb957600080fd5b505afa158015611ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef19190614ca4565b90506000811580611f00575085155b611f1e5785611f0f8484614cbd565b611f199190614cdc565b611f20565b825b90506103e8611f31826103e5614cbd565b611f3b9190614cdc565b60ce546040516340c10f1960e01b81526001600160a01b038c81166004830152602482018490529293509116906340c10f1990604401600060405180830381600087803b158015611f8b57600080fd5b505af1158015611f9f573d6000803e3d6000fd5b5050505080838a6001600160a01b03167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f60405160405180910390a4505050505050505050565b60d38181548110611ff657600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b038216935060ff600160a01b909204821692911684565b60cf5460405163b3596f0760e01b81527378ae2880bd1672b49a33cf796cf53fe6db0ab01d600482015260009182916001600160a01b039091169063b3596f0790602401604080518083038186803b15801561208c57600080fd5b505afa1580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c49190614e56565b915091509091565b6120d4612d9d565b6001600160a01b03166120ef6097546001600160a01b031690565b6001600160a01b0316146121155760405162461bcd60e51b81526004016109e690614882565b60d180546001600160a01b0319166001600160a01b0392909216919091179055565b60006121436001613333565b9050801561215b576000805461ff0019166101001790555b6121636133c0565b60cd80546001600160a01b038087166001600160a01b03199283161790925560ce805486841690831617905560cf80549285169282169290921790915560c980546001818101835560897f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d28928301558254808201845561a86a908301558254808201909355634e454152929091019190915560ca805480830182557f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee190810180548516730d500b1d8e8ef31e21c99d1db9a6444d3adf12701790558154808401835581018054851673b31f66aa3c1e785363f0875a1b74e27b85fd66c7179055815480840190925501805490921673c42c30ac6cc15fac9bd938618bcaa1a1fae8501d1790915560cb805480830182556000829052610fa07fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb9182018190558254808501845582015581549283019091556107d09101556122e2612e28565b60d0805460018101825560009190915260408051808201909152601680825275687474703a2f2f6c6f63616c686f73743a383030302f60501b6020909201918252612350927fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb019190613ec5565b5060d180546001600160a01b0319166001600160a01b0386161790558015611063576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b600081815261013960205260408120610976906133ef565b6060806060806123e08787876133f9565b80519092506000805b8281101561242a57848181518110612403576124036148e4565b6020026020010151826124169190614c71565b91508061242281614c89565b9150506123e9565b50816001600160401b038111156124435761244361431a565b60405190808252806020026020018201604052801561246c578160200160208202803683370190505b50925060005b828110156125055781156124b75781612710868381518110612496576124966148e4565b60200260200101516124a89190614cbd565b6124b29190614cdc565b6124d6565b60cb81815481106124ca576124ca6148e4565b90600052602060002001545b8482815181106124e8576124e86148e4565b6020908102919091010152806124fd81614c89565b915050612472565b5060c960ca85858380548060200260200160405190810160405280929190818152602001828054801561255757602002820191906000526020600020905b815481526020019060010190808311612543575b50505050509350828054806020026020016040519081016040528092919081815260200182805480156125b357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612595575b505050505092509550955095509550505093509350935093565b60608060606000806125e08989896123cf565b9350935050506000815190506000806125f7612031565b9092509050600061260982600a614e47565b836126198c64e8d4a51000614cbd565b6126239190614cbd565b61262d9190614cdc565b905060005b848110156126735786818151811061264c5761264c6148e4565b60200260200101518261265f9190614c71565b91508061266b81614c89565b915050612632565b50600080856001600160401b0381111561268f5761268f61431a565b6040519080825280602002602001820160405280156126b8578160200160208202803683370190505b50905060005b8681101561278957600061271060cb83815481106126de576126de6148e4565b9060005260206000200154866126f49190614cbd565b6126fe9190614cdc565b9050808a8381518110612713576127136148e4565b602002602001015110156127765760008a8381518110612735576127356148e4565b60200260200101518261274891906148cd565b90508084848151811061275d5761275d6148e4565b60209081029190910101526127728186614c71565b9450505b508061278181614c89565b9150506126be565b50856001600160401b038111156127a2576127a261431a565b6040519080825280602002602001820160405280156127cb578160200160208202803683370190505b50985060005b8681101561283857828282815181106127ec576127ec6148e4565b60200260200101518e6127ff9190614cbd565b6128099190614cdc565b8a828151811061281b5761281b6148e4565b60209081029190910101528061283081614c89565b9150506127d1565b5060c960ca8a8280548060200260200160405190810160405280929190818152602001828054801561288957602002820191906000526020600020905b815481526020019060010190808311612875575b50505050509250818054806020026020016040519081016040528092919081815260200182805480156128e557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116128c7575b505050505091509a509a509a5050505050505050509450945094915050565b6000828152610107602052604090206001015461292081612dd1565b610afa8383612e05565b815181516000919081146129795760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b60448201526064016109e6565b600061298485612a13565b90508061299657600092505050610976565b6000805b838110156129fe578681815181106129b4576129b46148e4565b60200260200101518682815181106129ce576129ce6148e4565b60200260200101516129e09190614cbd565b6129ea9083614c71565b9150806129f681614c89565b91505061299a565b50612a098282614cdc565b9695505050505050565b805160009081805b82811015612a5c57848181518110612a3557612a356148e4565b602002602001015182612a489190614c71565b915080612a5481614c89565b915050612a1b565b509392505050565b600080516020614fb2833981519152612a7c81612dd1565b816000108015612b08575060ce546040516370a0823160e01b81526001600160a01b038681166004830152909116906370a082319060240160206040518083038186803b158015612acc57600080fd5b505afa158015612ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b049190614ca4565b8211155b612b4b5760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081cda185c9948185b5bdd5b9d60621b60448201526064016109e6565b612b588460028585612f87565b60ce5460405163079cc67960e41b81526001600160a01b03868116600483015260248201859052909116906379cc679090604401600060405180830381600087803b158015612ba657600080fd5b505af1158015612bba573d6000803e3d6000fd5b50506040518492506001600160a01b03871691507fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca590600090a350505050565b6040805160048152602481018252602080820180516001600160e01b0316630ece90e960e41b179052825160009181018290529092309260d09290916340b8e57f60e01b91016110b2565b61016d818154811061098c57600080fd5b612c5e612d9d565b6001600160a01b0316612c796097546001600160a01b031690565b6001600160a01b031614612c9f5760405162461bcd60e51b81526004016109e690614882565b612cbb6000612cb66097546001600160a01b031690565b612e05565b612cc481613589565b6001600160a01b03811615612cde57612cde600082613175565b50565b600080516020614fb2833981519152612cf981612dd1565b6110638260026131dd565b60008080612d1486880188614cfe565b915091506000612d2f8284604051602001610ec19190614d57565b60d1549091506001600160a01b03808316911614612d5f5760405162461bcd60e51b81526004016109e690614a4a565b611d5183611a4f565b60006001600160e01b03198216637965db0b60e01b148061097657506301ffc9a760e01b6001600160e01b0319831614610976565b600060183610801590612dba575060d2546001600160a01b031633145b15612dcc575060131936013560601c90565b503390565b612cde81612ddd612d9d565b613640565b612dec82826136a4565b600082815261013960205260409020610afa908261372c565b612e0f8282613741565b600082815261013960205260409020610afa90826137c7565b600060c9805480602002602001604051908101604052809291908181526020018280548015612e7657602002820191906000526020600020905b815481526020019060010190808311612e62575b50505050509050600060ca805480602002602001604051908101604052809291908181526020018280548015612ed557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612eb7575b505083519394506000925050505b81811015611063578060cc6000868481518110612f0257612f026148e4565b602002602001015181526020019081526020016000206000858481518110612f2c57612f2c6148e4565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080612f6390614c89565b915050612ee3565b6000806000612f7a85856137dc565b91509150612a5c81613849565b6001600160a01b038416600090815260d460205260409020548015613006576000612fb182610a11565b905080606001516130045760405162461bcd60e51b815260206004820152601f60248201527f50726576696f7573206f7065726174696f6e206e6f742066696e69736865640060448201526064016109e6565b505b60d36040518060800160405280876001600160a01b0316815260200186600281111561303457613034614052565b8152602080820186905260006040909201829052835460018101855593825290819020825160039094020180546001600160a01b039094166001600160a01b031985168117825591830151929390929183916001600160a81b03191617600160a01b8360028111156130a8576130a8614052565b021790555060408201516001828101919091556060909201516002909101805460ff191691151591909117905561016d805491820181556000527f535f6990c27693b80d059530c371f53ea19bfc595ef3bd58348694aac90953000183905560d3546001600160a01b038616600090815260d46020526040902081905590508084600281111561313a5761313a614052565b866001600160a01b03167f10d3887b2457af3c1a2b037160ac9b072afe851d7835cc253ee6c0d47cbd428185604051610e7991815260200190565b610b898282612de2565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006118e18383613a04565b6001600160a01b038216600090815260d460205260408120548190806132345760405162461bcd60e51b815260206004820152600c60248201526b27379037b832b930ba34b7b760a11b60448201526064016109e6565b600061323f82610a11565b905084600281111561325357613253614052565b8160200151600281111561326957613269614052565b14801561327857506060810151155b6132b75760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48199a5b9a5cda195960821b60448201526064016109e6565b600160d36132c582856148cd565b815481106132d5576132d56148e4565b60009182526020909120600390910201600201805460ff191691151591909117905561016d6133056001846148cd565b81548110613315576133156148e4565b906000526020600020015481604001519350935050505b9250929050565b60008054610100900460ff161561337a578160ff1660011480156133565750303b155b6133725760405162461bcd60e51b81526004016109e690614e8c565b506000919050565b60005460ff8084169116106133a15760405162461bcd60e51b81526004016109e690614e8c565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166133e75760405162461bcd60e51b81526004016109e690614eda565b611632613a2e565b6000610976825490565b815160ca5460609190806001600160401b0381111561341a5761341a61431a565b604051908082528060200260200182016040528015613443578160200160208202803683370190505b50925060005b8281101561357f576000878281518110613465576134656148e4565b602002602001015190506000878381518110613483576134836148e4565b602090810291909101810151600084815260cc835260408082206001600160a01b038416835290935291909120549091508085116134c35750505061356d565b80158015613524575060c96000815481106134e0576134e06148e4565b906000526020600020015483141580613524575060ca600081548110613508576135086148e4565b6000918252602090912001546001600160a01b03838116911614155b156135315750505061356d565b878481518110613543576135436148e4565b602002602001015187828151811061355d5761355d6148e4565b6020026020010181815250505050505b8061357781614c89565b915050613449565b5050509392505050565b613591612d9d565b6001600160a01b03166135ac6097546001600160a01b031690565b6001600160a01b0316146135d25760405162461bcd60e51b81526004016109e690614882565b6001600160a01b0381166136375760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109e6565b612cde8161317f565b61364a82826118e8565b610b8957613662816001600160a01b03166014613a65565b61366d836020613a65565b60405160200161367e929190614f25565b60408051601f198184030181529082905262461bcd60e51b82526109e6916004016142ce565b6136ae82826118e8565b610b89576000828152610107602090815260408083206001600160a01b03851684529091529020805460ff191660011790556136e8612d9d565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006118e1836001600160a01b038416613c00565b61374b82826118e8565b15610b89576000828152610107602090815260408083206001600160a01b03851684529091529020805460ff19169055613783612d9d565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006118e1836001600160a01b038416613c4f565b6000808251604114156138135760208301516040840151606085015160001a61380787828585613d42565b9450945050505061332c565b82516040141561383d5760208301516040840151613832868383613e2f565b93509350505061332c565b5060009050600261332c565b600081600481111561385d5761385d614052565b14156138665750565b600181600481111561387a5761387a614052565b14156138c85760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016109e6565b60028160048111156138dc576138dc614052565b141561392a5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016109e6565b600381600481111561393e5761393e614052565b14156139975760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016109e6565b60048160048111156139ab576139ab614052565b1415612cde5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016109e6565b6000826000018281548110613a1b57613a1b6148e4565b9060005260206000200154905092915050565b600054610100900460ff16613a555760405162461bcd60e51b81526004016109e690614eda565b611632613a60612d9d565b61317f565b60606000613a74836002614cbd565b613a7f906002614c71565b6001600160401b03811115613a9657613a9661431a565b6040519080825280601f01601f191660200182016040528015613ac0576020820181803683370190505b509050600360fc1b81600081518110613adb57613adb6148e4565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613b0a57613b0a6148e4565b60200101906001600160f81b031916908160001a9053506000613b2e846002614cbd565b613b39906001614c71565b90505b6001811115613bb1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613b6d57613b6d6148e4565b1a60f81b828281518110613b8357613b836148e4565b60200101906001600160f81b031916908160001a90535060049490941c93613baa81614f9a565b9050613b3c565b5083156118e15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016109e6565b6000818152600183016020526040812054613c4757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610976565b506000610976565b60008181526001830160205260408120548015613d38576000613c736001836148cd565b8554909150600090613c87906001906148cd565b9050818114613cec576000866000018281548110613ca757613ca76148e4565b9060005260206000200154905080876000018481548110613cca57613cca6148e4565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613cfd57613cfd6148fa565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610976565b6000915050610976565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115613d795750600090506003613e26565b8460ff16601b14158015613d9157508460ff16601c14155b15613da25750600090506004613e26565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613df6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116613e1f57600060019250925050613e26565b9150600090505b94509492505050565b6000806001600160ff1b03831681613e4c60ff86901c601b614c71565b9050613e5a87828885613d42565b935093505050935093915050565b828054828255906000526020600020908101928215613eb5579160200282015b82811115613eb55782518051613ea5918491602090910190613ec5565b5091602001919060010190613e88565b50613ec1929150613f45565b5090565b828054613ed190614b09565b90600052602060002090601f016020900481019282613ef35760008555613f39565b82601f10613f0c57805160ff1916838001178555613f39565b82800160010185558215613f39579182015b82811115613f39578251825591602001919060010190613f1e565b50613ec1929150613f62565b80821115613ec1576000613f598282613f77565b50600101613f45565b5b80821115613ec15760008155600101613f63565b508054613f8390614b09565b6000825580601f10613f93575050565b601f016020900490600052602060002090810190612cde9190613f62565b600060208284031215613fc357600080fd5b81356001600160e01b0319811681146118e157600080fd5b600060208284031215613fed57600080fd5b5035919050565b80356001600160a01b03811681146133bb57600080fd5b60006020828403121561401d57600080fd5b6118e182613ff4565b6000806040838503121561403957600080fd5b8235915061404960208401613ff4565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b6003811061408657634e487b7160e01b600052602160045260246000fd5b9052565b81516001600160a01b0316815260208083015160808301916140ae90840182614068565b506040830151604083015260608301511515606083015292915050565b60008083601f8401126140dd57600080fd5b5081356001600160401b038111156140f457600080fd5b60208301915083602082850101111561332c57600080fd5b6000806000806040858703121561412257600080fd5b84356001600160401b038082111561413957600080fd5b614145888389016140cb565b9096509450602087013591508082111561415e57600080fd5b5061416b878288016140cb565b95989497509550505050565b600081518084526020808501945080840160005b838110156141a75781518752958201959082019060010161418b565b509495945050505050565b600081518084526020808501945080840160005b838110156141a75781516001600160a01b0316875295820195908201906001016141c6565b6080815260006141fe6080830187614177565b828103602084015261421081876141b2565b905082810360408401526142248186614177565b905082810360608401526142388185614177565b979650505050505050565b60008060006060848603121561425857600080fd5b61426184613ff4565b95602085013595506040909401359392505050565b60005b83811015614291578181015183820152602001614279565b838111156110635750506000910152565b600081518084526142ba816020860160208601614276565b601f01601f19169290920160200192915050565b6020815260006118e160208301846142a2565b6060815260006142f46060830186614177565b828103602084015261430681866141b2565b90508281036040840152612a098185614177565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156143585761435861431a565b604052919050565b60006001600160401b038211156143795761437961431a565b5060051b60200190565b60006001600160401b0383111561439c5761439c61431a565b6143af601f8401601f1916602001614330565b90508281528383830111156143c357600080fd5b828260208301376000602084830101529392505050565b600060208083850312156143ed57600080fd5b82356001600160401b038082111561440457600080fd5b818501915085601f83011261441857600080fd5b813561442b61442682614360565b614330565b81815260059190911b8301840190848101908883111561444a57600080fd5b8585015b83811015614497578035858111156144665760008081fd5b8601603f81018b136144785760008081fd5b6144898b8983013560408401614383565b84525091860191860161444e565b5098975050505050505050565b600080602083850312156144b757600080fd5b82356001600160401b03808211156144ce57600080fd5b818501915085601f8301126144e257600080fd5b8135818111156144f157600080fd5b8660208260051b850101111561450657600080fd5b60209290920196919550909350505050565b6000806040838503121561452b57600080fd5b50508035926020909101359150565b6000806040838503121561454d57600080fd5b61455683613ff4565b915061404960208401613ff4565b600082601f83011261457557600080fd5b8135602061458561442683614360565b82815260059290921b840181019181810190868411156145a457600080fd5b8286015b848110156145bf57803583529183019183016145a8565b509695505050505050565b6000602082840312156145dc57600080fd5b81356001600160401b038111156145f257600080fd5b6145fe84828501614564565b949350505050565b6000806040838503121561461957600080fd5b61462283613ff4565b946020939093013593505050565b6001600160a01b03851681526080810161464d6020830186614068565b836040830152821515606083015295945050505050565b60008060006060848603121561467957600080fd5b61468284613ff4565b925061469060208501613ff4565b915061469e60408501613ff4565b90509250925092565b600082601f8301126146b857600080fd5b813560206146c861442683614360565b82815260059290921b840181019181810190868411156146e757600080fd5b8286015b848110156145bf576146fc81613ff4565b83529183019183016146eb565b60008060006060848603121561471e57600080fd5b83356001600160401b038082111561473557600080fd5b61474187838801614564565b9450602086013591508082111561475757600080fd5b614763878388016146a7565b9350604086013591508082111561477957600080fd5b5061478686828701614564565b9150509250925092565b600080600080608085870312156147a657600080fd5b84356001600160401b03808211156147bd57600080fd5b6147c988838901614564565b955060208701359150808211156147df57600080fd5b6147eb888389016146a7565b9450604087013591508082111561480157600080fd5b5061480e87828801614564565b949793965093946060013593505050565b6000806040838503121561483257600080fd5b82356001600160401b038082111561484957600080fd5b61485586838701614564565b9350602085013591508082111561486b57600080fd5b5061487885828601614564565b9150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156148df576148df6148b7565b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600082601f83011261492157600080fd5b6118e183833560208501614383565b6000806000806080858703121561494657600080fd5b84356001600160401b038082111561495d57600080fd5b61496988838901614564565b9550602087013591508082111561497f57600080fd5b61498b888389016146a7565b945060408701359150808211156149a157600080fd5b6149ad88838901614564565b935060608701359150808211156149c357600080fd5b506149d087828801614910565b91505092959194509250565b805160009060208084018383156141a75781518752958201959082019060010161418b565b6000614a0d82866149dc565b8451602080870160005b83811015614a3c5781516001600160a01b031685529382019390820190600101614a17565b50505050612a0981856149dc565b60208082526013908201527214da59db995c881a5cc81a5b98dbdc9c9958dd606a1b604082015260600190565b600080600060608486031215614a8c57600080fd5b83356001600160401b0380821115614aa357600080fd5b614aaf87838801614564565b94506020860135915080821115614ac557600080fd5b614ad187838801614564565b93506040860135915080821115614ae757600080fd5b5061478686828701614910565b60006145fe614b0383866149dc565b846149dc565b600181811c90821680614b1d57607f821691505b60208210811415614b3e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060a0820160018060a01b0388168352602060a08185015281885480845260c08601915060c08160051b870101935060008a8152838120815b83811015614c355788870360bf1901855281548390600181811c9080831680614ba857607f831692505b8a8310811415614bc657634e487b7160e01b88526022600452602488fd5b828c5260208c01818015614be15760018114614bf257614c1c565b60ff19861682528c82019650614c1c565b6000898152602090208a5b86811015614c1657815484820152908501908e01614bfd565b83019750505b50949b5050978901979490940193505050600101614b7e565b5050505050508281036040840152614c4d81876142a2565b6001600160e01b03198616606085015290508281036080840152611d5181856142a2565b60008219821115614c8457614c846148b7565b500190565b6000600019821415614c9d57614c9d6148b7565b5060010190565b600060208284031215614cb657600080fd5b5051919050565b6000816000190483118215151615614cd757614cd76148b7565b500290565b600082614cf957634e487b7160e01b600052601260045260246000fd5b500490565b60008060408385031215614d1157600080fd5b82356001600160401b0380821115614d2857600080fd5b614d3486838701614564565b93506020850135915080821115614d4a57600080fd5b5061487885828601614910565b60006118e182846149dc565b600181815b80851115614d9e578160001904821115614d8457614d846148b7565b80851615614d9157918102915b93841c9390800290614d68565b509250929050565b600082614db557506001610976565b81614dc257506000610976565b8160018114614dd85760028114614de257614dfe565b6001915050610976565b60ff841115614df357614df36148b7565b50506001821b610976565b5060208310610133831016604e8410600b8410161715614e21575081810a610976565b614e2b8383614d63565b8060001904821115614e3f57614e3f6148b7565b029392505050565b60006118e160ff841683614da6565b60008060408385031215614e6957600080fd5b82519150602083015160ff81168114614e8157600080fd5b809150509250929050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614f5d816017850160208801614276565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614f8e816028840160208801614276565b01602801949350505050565b600081614fa957614fa96148b7565b50600019019056fea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220b31613ad3771f21e7cb6b21c0f6a2935362e9c188e677fac97cb8716d833dbc864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103e65760003560e01c80638da5cb5b1161020a578063c0c53b8b11610125578063e629f7b3116100b8578063f2fde38b11610087578063f2fde38b146108f2578063f3253c6314610905578063f77de48614610918578063f851a4401461092b578063fd6878cc1461093e57600080fd5b8063e629f7b3146108b1578063ec2e54c7146108c4578063ece90e90146108d7578063f2f3325a146108df57600080fd5b8063d3b974a0116100f4578063d3b974a014610865578063d547741f14610878578063da3bc85c1461088b578063dd8aae411461089e57600080fd5b8063c0c53b8b14610824578063ca15c87314610837578063cb25bb651461084a578063d087d2881461085d57600080fd5b8063a217fddf1161019d578063b2e9949d1161016c578063b2e9949d146107bb578063b47c6a27146107de578063b9bd5bb5146107fd578063bdf1c4a11461081057600080fd5b8063a217fddf14610785578063a7645a201461078d578063af05a749146107a0578063af3da2f4146107a857600080fd5b806397cd02e6116101d957806397cd02e6146107395780639ecb6fae1461074c5780639f86d4dd1461075f578063a08ce5201461077257600080fd5b80638da5cb5b146106ef5780639010d07c1461070057806391d14854146107135780639434b9891461072657600080fd5b80634f64b2be116103055780636628f9451161029857806375b238fc1161026757806375b238fc1461068e578063796676be146106a35780637da0a877146106b65780637ed66ec6146106c95780637fb2df42146106dc57600080fd5b80636628f9451461064d5780636cc895a914610660578063704b6c0214610673578063715018a61461068657600080fd5b806357016b0a116102d457806357016b0a14610605578063572b6c05146106185780635796d0b01461063a5780635c975abb1461064257600080fd5b80634f64b2be146105cd5780635042f9b6146105e0578063530e784f146105e857806354fd4d50146105fb57600080fd5b80632f2ff15d1161037d57806340b8e57f1161034c57806340b8e57f1461055f57806343a463c714610572578063486ff0cd1461058557806349445553146105ab57600080fd5b80632f2ff15d1461050357806336568abe1461051657806336c5d7241461052957806338a871631461053c57600080fd5b80631c60ffc3116103b95780631c60ffc314610469578063202e392414610494578063248a9ca3146104b45780632630c12f146104d857600080fd5b806301ffc9a7146103eb57806309d23e24146104135780630d8b76a81461043457806319dac5af14610449575b600080fd5b6103fe6103f9366004613fb1565b610951565b60405190151581526020015b60405180910390f35b610426610421366004613fdb565b61097c565b60405190815260200161040a565b61044761044236600461400b565b61099d565b005b61042661045736600461400b565b60d46020526000908152604090205481565b610426610477366004614026565b60cc60209081526000928352604080842090915290825290205481565b6104a76104a2366004613fdb565b610a11565b60405161040a919061408a565b6104266104c2366004613fdb565b6000908152610107602052604090206001015490565b60cf546104eb906001600160a01b031681565b6040516001600160a01b03909116815260200161040a565b610447610511366004614026565b610ad4565b610447610524366004614026565b610aff565b610447610537366004613fdb565b610b8d565b61054f61054a36600461410c565b610e88565b60405161040a94939291906141eb565b61042661056d36600461410c565b610f81565b610447610580366004614243565b610ff8565b6040805180820190915260018152603160f81b60208201525b60405161040a91906142ce565b6105be6105b9366004613fdb565b611069565b60405161040a939291906142e1565b6104eb6105db366004613fdb565b6110dd565b610426611107565b6104476105f636600461400b565b611152565b61042661016b5481565b610447610613366004614026565b6111bd565b6103fe61062636600461400b565b60d2546001600160a01b0391821691161490565b61054f6113d2565b60655460ff166103fe565b61044761065b36600461400b565b611425565b61044761066e3660046143da565b6114d5565b61044761068136600461400b565b611531565b6104476115df565b610426600080516020614fb283398151915281565b61059e6106b1366004613fdb565b611634565b60d2546104eb906001600160a01b031681565b6105be6106d736600461410c565b6116e0565b6104476106ea3660046144a4565b61177a565b6097546001600160a01b03166104eb565b6104eb61070e366004614518565b6118c8565b6103fe610721366004614026565b6118e8565b61044761073436600461453a565b611914565b6104266107473660046145ca565b611a4f565b61042661075a366004613fdb565b611b15565b61042661076d366004614606565b611b84565b61042661078036600461410c565b611ced565b610426600081565b61042661079b366004613fdb565b611d5d565b610426611d6d565b6104476107b6366004614606565b611db8565b6107ce6107c9366004613fdb565b611fe6565b60405161040a9493929190614630565b6107e6612031565b6040805192835260ff90911660208301520161040a565b61044761080b36600461400b565b6120cc565b61016c546104eb906001600160a01b031681565b610447610832366004614664565b612137565b610426610845366004613fdb565b6123b7565b61054f610858366004614709565b6123cf565b60d354610426565b6105be610873366004614790565b6125cd565b610447610886366004614026565b612904565b61042661089936600461481f565b61292a565b6104266108ac3660046145ca565b612a13565b6104476108bf366004614243565b612a64565b60ce546104eb906001600160a01b031681565b610426612bfa565b6104266108ed366004613fdb565b612c45565b61044761090036600461400b565b612c56565b60d1546104eb906001600160a01b031681565b61044761092636600461400b565b612ce1565b60cd546104eb906001600160a01b031681565b61042661094c36600461410c565b612d04565b60006001600160e01b03198216635a05180f60e01b1480610976575061097682612d68565b92915050565b60c9818154811061098c57600080fd5b600091825260209091200154905081565b6109a5612d9d565b6001600160a01b03166109c06097546001600160a01b031690565b6001600160a01b0316146109ef5760405162461bcd60e51b81526004016109e690614882565b60405180910390fd5b60d280546001600160a01b0319166001600160a01b0392909216919091179055565b60408051608081018252600080825260208201819052918101829052606081019190915260d3610a426001846148cd565b81548110610a5257610a526148e4565b6000918252602091829020604080516080810190915260039092020180546001600160a01b0381168352919290919083019060ff600160a01b909104166002811115610aa057610aa0614052565b6002811115610ab157610ab1614052565b81526001820154602082015260029091015460ff16151560409091015292915050565b60008281526101076020526040902060010154610af081612dd1565b610afa8383612de2565b505050565b610b07612d9d565b6001600160a01b0316816001600160a01b031614610b7f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016109e6565b610b898282612e05565b5050565b610b95612d9d565b6001600160a01b0316610bb06097546001600160a01b031690565b6001600160a01b031614610bd65760405162461bcd60e51b81526004016109e690614882565b60ca54808210610c165760405162461bcd60e51b815260206004820152600b60248201526a125b9d985b1a59081d1a5960aa1b60448201526064016109e6565b600060c98381548110610c2b57610c2b6148e4565b90600052602060002001549050600060ca8481548110610c4d57610c4d6148e4565b600091825260208220015460cb80546001600160a01b0390921693509086908110610c7a57610c7a6148e4565b9060005260206000200154905060c9600185610c9691906148cd565b81548110610ca657610ca66148e4565b906000526020600020015460c98681548110610cc457610cc46148e4565b60009182526020909120015560c9805480610ce157610ce16148fa565b6001900381819060005260206000200160009055905560ca600185610d0691906148cd565b81548110610d1657610d166148e4565b60009182526020909120015460ca80546001600160a01b039092169187908110610d4257610d426148e4565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060ca805480610d8157610d816148fa565b600082815260209020810160001990810180546001600160a01b031916905501905560cb610db06001866148cd565b81548110610dc057610dc06148e4565b906000526020600020015460cb8681548110610dde57610dde6148e4565b60009182526020909120015560cb805480610dfb57610dfb6148fa565b60008281526020808220830160001990810183905590920190925584825260cc815260408083206001600160a01b0386168452909152812055610e3c612e28565b84826001600160a01b0316847fd8cc1d279bf727e9ee02c4ed116f7c12f4965ace9b477482de71a7929a1871b384604051610e7991815260200190565b60405180910390a45050505050565b60608080806000808080610e9e8b8d018d614930565b93509350935093506000610f2e82868686604051602001610ec193929190614a01565b60408051601f198184030181529082905280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000091830191909152603c820152605c0160405160208183030381529060405280519060200120612f6b90919063ffffffff16565b60d1549091506001600160a01b03808316911614610f5e5760405162461bcd60e51b81526004016109e690614a4a565b610f698585856123cf565b98509850985098505050505050945094509450949050565b6000808080610f9287890189614a77565b9250925092506000610fb1828585604051602001610ec1929190614af4565b60d1549091506001600160a01b03808316911614610fe15760405162461bcd60e51b81526004016109e690614a4a565b610feb848461292a565b9998505050505050505050565b600080516020614fb283398151915261101081612dd1565b60655460ff16156110565760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016109e6565b6110638460018585612f87565b50505050565b6040805160048152602481018252602080820180516001600160e01b0316633c1d708960e01b179052825190810184905260609283928392309260d09291633f6b376360e11b91015b60408051601f1981840301815290829052630556f18360e41b82526109e69594939291600401614b44565b60ca81815481106110ed57600080fd5b6000918252602090912001546001600160a01b0316905081565b6040805160048152602481018252602080820180516001600160e01b03166328217cdb60e11b179052825160009181018290529092309260d0929091630504672960e51b91016110b2565b61115a612d9d565b6001600160a01b03166111756097546001600160a01b031690565b6001600160a01b03161461119b5760405162461bcd60e51b81526004016109e690614882565b60cf80546001600160a01b0319166001600160a01b0392909216919091179055565b6111c5612d9d565b6001600160a01b03166111e06097546001600160a01b031690565b6001600160a01b0316146112065760405162461bcd60e51b81526004016109e690614882565b600082815260cc602090815260408083206001600160a01b038516845290915290205480158015611255575060c9600081548110611246576112466148e4565b90600052602060002001548314155b801561128c575060ca600081548110611270576112706148e4565b6000918252602090912001546001600160a01b03838116911614155b6112c85760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481859191959609a1b60448201526064016109e6565b60c9805460018082019092557f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d280184905560ca805480830182557f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee10180546001600160a01b0319166001600160a01b03861617905560cb8054808401825560009182527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb01555461137991906148cd565b600084815260cc602090815260408083206001600160a01b0387168085529252808320849055519293508392909186917fefa15d4fefbb71d07b3cdc624ab208ebe2d3b6933946582fd8b807e8a5bc93cc9190a4505050565b6040805160048152602481018252602080820180516001600160e01b03166305796d0b60e41b1790528251600091810191909152606092839283928392309260d09290916338a8716360e01b91016110b2565b61142d612d9d565b6001600160a01b03166114486097546001600160a01b031690565b6001600160a01b03161461146e5760405162461bcd60e51b81526004016109e690614882565b61016c546001600160a01b0316801561149957611499600080516020614fb283398151915282612e05565b61016c80546001600160a01b0319166001600160a01b03841690811790915515610b8957610b89600080516020614fb283398151915283613175565b6114dd612d9d565b6001600160a01b03166114f86097546001600160a01b031690565b6001600160a01b03161461151e5760405162461bcd60e51b81526004016109e690614882565b8051610b899060d0906020840190613e68565b611539612d9d565b6001600160a01b03166115546097546001600160a01b031690565b6001600160a01b03161461157a5760405162461bcd60e51b81526004016109e690614882565b60cd546001600160a01b031680156115a4576115a4600080516020614fb283398151915282612e05565b60cd80546001600160a01b0319166001600160a01b03841690811790915515610b8957610b89600080516020614fb283398151915283613175565b6115e7612d9d565b6001600160a01b03166116026097546001600160a01b031690565b6001600160a01b0316146116285760405162461bcd60e51b81526004016109e690614882565b611632600061317f565b565b60d0818154811061164457600080fd5b90600052602060002001600091509050805461165f90614b09565b80601f016020809104026020016040519081016040528092919081815260200182805461168b90614b09565b80156116d85780601f106116ad576101008083540402835291602001916116d8565b820191906000526020600020905b8154815290600101906020018083116116bb57829003601f168201915b505050505081565b6060808060006116f285870187613fdb565b905060008080806117058b8d018d614930565b9350935093509350600061172882868686604051602001610ec193929190614a01565b60d1549091506001600160a01b038083169116146117585760405162461bcd60e51b81526004016109e690614a4a565b611764858585896125cd565b9850985098505050505050509450945094915050565b611782612d9d565b6001600160a01b031661179d6097546001600160a01b031690565b6001600160a01b0316146117c35760405162461bcd60e51b81526004016109e690614882565b60cb54819081146118065760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a590818dbdd5b9d609a1b60448201526064016109e6565b6000805b8281101561188257848482818110611824576118246148e4565b9050602002013560cb828154811061183e5761183e6148e4565b60009182526020909120015584848281811061185c5761185c6148e4565b905060200201358261186e9190614c71565b91508061187a81614c89565b91505061180a565b5061271081146110635760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b2103830b930b6b2ba32b960791b60448201526064016109e6565b6000828152610139602052604081206118e190836131d1565b9392505050565b6000918252610107602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61191c612d9d565b6001600160a01b03166119376097546001600160a01b031690565b6001600160a01b03161461195d5760405162461bcd60e51b81526004016109e690614882565b600261016b54106119a15760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e4818d85b1b195960921b60448201526064016109e6565b600261016b556119c360006119be6097546001600160a01b031690565b613175565b60cd546001600160a01b0316156119f95760cd546119f990600080516020614fb2833981519152906001600160a01b0316613175565b6001600160a01b03821615611a2057611a20600080516020614fb283398151915283613175565b61016c80546001600160a01b039384166001600160a01b03199182161790915560d28054929093169116179055565b60008060ce60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aa057600080fd5b505afa158015611ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad89190614ca4565b905080611aef5750670de0b6b3a764000092915050565b80611af984612a13565b611b0b90670de0b6b3a7640000614cbd565b6118e19190614cdc565b60003060d0639ecb6fae60e01b84604051602401611b3591815260200190565b60408051601f19818403018152918152602080830180516001600160e01b03166001600160e01b031990951694909417909352519091630504672960e51b916110b29188910190815260200190565b6000816000108015611c12575060ce546040516370a0823160e01b81526001600160a01b038581166004830152909116906370a082319060240160206040518083038186803b158015611bd657600080fd5b505afa158015611bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0e9190614ca4565b8211155b611c555760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081cda185c9948185b5bdd5b9d60621b60448201526064016109e6565b60ce60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ca357600080fd5b505afa158015611cb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdb9190614ca4565b611b0b83670de0b6b3a7640000614cbd565b60008080611cfd86880188614cfe565b915091506000611d188284604051602001610ec19190614d57565b60d1549091506001600160a01b03808316911614611d485760405162461bcd60e51b81526004016109e690614a4a565b611d5183612a13565b98975050505050505050565b60cb818154811061098c57600080fd5b6040805160048152602481018252602080820180516001600160e01b031663af05a74960e01b179052825160009181018290529092309260d0929091633f5a1e3360e21b91016110b2565b600080516020614fb2833981519152611dd081612dd1565b60655460ff1615611e165760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016109e6565b6000611e238460016131dd565b509050600080611e31612031565b90925090506000611e4382600a614e47565b83611e538864e8d4a51000614cbd565b611e5d9190614cbd565b611e679190614cdc565b9050600060ce60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611eb957600080fd5b505afa158015611ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef19190614ca4565b90506000811580611f00575085155b611f1e5785611f0f8484614cbd565b611f199190614cdc565b611f20565b825b90506103e8611f31826103e5614cbd565b611f3b9190614cdc565b60ce546040516340c10f1960e01b81526001600160a01b038c81166004830152602482018490529293509116906340c10f1990604401600060405180830381600087803b158015611f8b57600080fd5b505af1158015611f9f573d6000803e3d6000fd5b5050505080838a6001600160a01b03167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f60405160405180910390a4505050505050505050565b60d38181548110611ff657600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b038216935060ff600160a01b909204821692911684565b60cf5460405163b3596f0760e01b81527378ae2880bd1672b49a33cf796cf53fe6db0ab01d600482015260009182916001600160a01b039091169063b3596f0790602401604080518083038186803b15801561208c57600080fd5b505afa1580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c49190614e56565b915091509091565b6120d4612d9d565b6001600160a01b03166120ef6097546001600160a01b031690565b6001600160a01b0316146121155760405162461bcd60e51b81526004016109e690614882565b60d180546001600160a01b0319166001600160a01b0392909216919091179055565b60006121436001613333565b9050801561215b576000805461ff0019166101001790555b6121636133c0565b60cd80546001600160a01b038087166001600160a01b03199283161790925560ce805486841690831617905560cf80549285169282169290921790915560c980546001818101835560897f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d28928301558254808201845561a86a908301558254808201909355634e454152929091019190915560ca805480830182557f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee190810180548516730d500b1d8e8ef31e21c99d1db9a6444d3adf12701790558154808401835581018054851673b31f66aa3c1e785363f0875a1b74e27b85fd66c7179055815480840190925501805490921673c42c30ac6cc15fac9bd938618bcaa1a1fae8501d1790915560cb805480830182556000829052610fa07fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb9182018190558254808501845582015581549283019091556107d09101556122e2612e28565b60d0805460018101825560009190915260408051808201909152601680825275687474703a2f2f6c6f63616c686f73743a383030302f60501b6020909201918252612350927fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb019190613ec5565b5060d180546001600160a01b0319166001600160a01b0386161790558015611063576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b600081815261013960205260408120610976906133ef565b6060806060806123e08787876133f9565b80519092506000805b8281101561242a57848181518110612403576124036148e4565b6020026020010151826124169190614c71565b91508061242281614c89565b9150506123e9565b50816001600160401b038111156124435761244361431a565b60405190808252806020026020018201604052801561246c578160200160208202803683370190505b50925060005b828110156125055781156124b75781612710868381518110612496576124966148e4565b60200260200101516124a89190614cbd565b6124b29190614cdc565b6124d6565b60cb81815481106124ca576124ca6148e4565b90600052602060002001545b8482815181106124e8576124e86148e4565b6020908102919091010152806124fd81614c89565b915050612472565b5060c960ca85858380548060200260200160405190810160405280929190818152602001828054801561255757602002820191906000526020600020905b815481526020019060010190808311612543575b50505050509350828054806020026020016040519081016040528092919081815260200182805480156125b357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612595575b505050505092509550955095509550505093509350935093565b60608060606000806125e08989896123cf565b9350935050506000815190506000806125f7612031565b9092509050600061260982600a614e47565b836126198c64e8d4a51000614cbd565b6126239190614cbd565b61262d9190614cdc565b905060005b848110156126735786818151811061264c5761264c6148e4565b60200260200101518261265f9190614c71565b91508061266b81614c89565b915050612632565b50600080856001600160401b0381111561268f5761268f61431a565b6040519080825280602002602001820160405280156126b8578160200160208202803683370190505b50905060005b8681101561278957600061271060cb83815481106126de576126de6148e4565b9060005260206000200154866126f49190614cbd565b6126fe9190614cdc565b9050808a8381518110612713576127136148e4565b602002602001015110156127765760008a8381518110612735576127356148e4565b60200260200101518261274891906148cd565b90508084848151811061275d5761275d6148e4565b60209081029190910101526127728186614c71565b9450505b508061278181614c89565b9150506126be565b50856001600160401b038111156127a2576127a261431a565b6040519080825280602002602001820160405280156127cb578160200160208202803683370190505b50985060005b8681101561283857828282815181106127ec576127ec6148e4565b60200260200101518e6127ff9190614cbd565b6128099190614cdc565b8a828151811061281b5761281b6148e4565b60209081029190910101528061283081614c89565b9150506127d1565b5060c960ca8a8280548060200260200160405190810160405280929190818152602001828054801561288957602002820191906000526020600020905b815481526020019060010190808311612875575b50505050509250818054806020026020016040519081016040528092919081815260200182805480156128e557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116128c7575b505050505091509a509a509a5050505050505050509450945094915050565b6000828152610107602052604090206001015461292081612dd1565b610afa8383612e05565b815181516000919081146129795760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b60448201526064016109e6565b600061298485612a13565b90508061299657600092505050610976565b6000805b838110156129fe578681815181106129b4576129b46148e4565b60200260200101518682815181106129ce576129ce6148e4565b60200260200101516129e09190614cbd565b6129ea9083614c71565b9150806129f681614c89565b91505061299a565b50612a098282614cdc565b9695505050505050565b805160009081805b82811015612a5c57848181518110612a3557612a356148e4565b602002602001015182612a489190614c71565b915080612a5481614c89565b915050612a1b565b509392505050565b600080516020614fb2833981519152612a7c81612dd1565b816000108015612b08575060ce546040516370a0823160e01b81526001600160a01b038681166004830152909116906370a082319060240160206040518083038186803b158015612acc57600080fd5b505afa158015612ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b049190614ca4565b8211155b612b4b5760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081cda185c9948185b5bdd5b9d60621b60448201526064016109e6565b612b588460028585612f87565b60ce5460405163079cc67960e41b81526001600160a01b03868116600483015260248201859052909116906379cc679090604401600060405180830381600087803b158015612ba657600080fd5b505af1158015612bba573d6000803e3d6000fd5b50506040518492506001600160a01b03871691507fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca590600090a350505050565b6040805160048152602481018252602080820180516001600160e01b0316630ece90e960e41b179052825160009181018290529092309260d09290916340b8e57f60e01b91016110b2565b61016d818154811061098c57600080fd5b612c5e612d9d565b6001600160a01b0316612c796097546001600160a01b031690565b6001600160a01b031614612c9f5760405162461bcd60e51b81526004016109e690614882565b612cbb6000612cb66097546001600160a01b031690565b612e05565b612cc481613589565b6001600160a01b03811615612cde57612cde600082613175565b50565b600080516020614fb2833981519152612cf981612dd1565b6110638260026131dd565b60008080612d1486880188614cfe565b915091506000612d2f8284604051602001610ec19190614d57565b60d1549091506001600160a01b03808316911614612d5f5760405162461bcd60e51b81526004016109e690614a4a565b611d5183611a4f565b60006001600160e01b03198216637965db0b60e01b148061097657506301ffc9a760e01b6001600160e01b0319831614610976565b600060183610801590612dba575060d2546001600160a01b031633145b15612dcc575060131936013560601c90565b503390565b612cde81612ddd612d9d565b613640565b612dec82826136a4565b600082815261013960205260409020610afa908261372c565b612e0f8282613741565b600082815261013960205260409020610afa90826137c7565b600060c9805480602002602001604051908101604052809291908181526020018280548015612e7657602002820191906000526020600020905b815481526020019060010190808311612e62575b50505050509050600060ca805480602002602001604051908101604052809291908181526020018280548015612ed557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612eb7575b505083519394506000925050505b81811015611063578060cc6000868481518110612f0257612f026148e4565b602002602001015181526020019081526020016000206000858481518110612f2c57612f2c6148e4565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080612f6390614c89565b915050612ee3565b6000806000612f7a85856137dc565b91509150612a5c81613849565b6001600160a01b038416600090815260d460205260409020548015613006576000612fb182610a11565b905080606001516130045760405162461bcd60e51b815260206004820152601f60248201527f50726576696f7573206f7065726174696f6e206e6f742066696e69736865640060448201526064016109e6565b505b60d36040518060800160405280876001600160a01b0316815260200186600281111561303457613034614052565b8152602080820186905260006040909201829052835460018101855593825290819020825160039094020180546001600160a01b039094166001600160a01b031985168117825591830151929390929183916001600160a81b03191617600160a01b8360028111156130a8576130a8614052565b021790555060408201516001828101919091556060909201516002909101805460ff191691151591909117905561016d805491820181556000527f535f6990c27693b80d059530c371f53ea19bfc595ef3bd58348694aac90953000183905560d3546001600160a01b038616600090815260d46020526040902081905590508084600281111561313a5761313a614052565b866001600160a01b03167f10d3887b2457af3c1a2b037160ac9b072afe851d7835cc253ee6c0d47cbd428185604051610e7991815260200190565b610b898282612de2565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006118e18383613a04565b6001600160a01b038216600090815260d460205260408120548190806132345760405162461bcd60e51b815260206004820152600c60248201526b27379037b832b930ba34b7b760a11b60448201526064016109e6565b600061323f82610a11565b905084600281111561325357613253614052565b8160200151600281111561326957613269614052565b14801561327857506060810151155b6132b75760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48199a5b9a5cda195960821b60448201526064016109e6565b600160d36132c582856148cd565b815481106132d5576132d56148e4565b60009182526020909120600390910201600201805460ff191691151591909117905561016d6133056001846148cd565b81548110613315576133156148e4565b906000526020600020015481604001519350935050505b9250929050565b60008054610100900460ff161561337a578160ff1660011480156133565750303b155b6133725760405162461bcd60e51b81526004016109e690614e8c565b506000919050565b60005460ff8084169116106133a15760405162461bcd60e51b81526004016109e690614e8c565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166133e75760405162461bcd60e51b81526004016109e690614eda565b611632613a2e565b6000610976825490565b815160ca5460609190806001600160401b0381111561341a5761341a61431a565b604051908082528060200260200182016040528015613443578160200160208202803683370190505b50925060005b8281101561357f576000878281518110613465576134656148e4565b602002602001015190506000878381518110613483576134836148e4565b602090810291909101810151600084815260cc835260408082206001600160a01b038416835290935291909120549091508085116134c35750505061356d565b80158015613524575060c96000815481106134e0576134e06148e4565b906000526020600020015483141580613524575060ca600081548110613508576135086148e4565b6000918252602090912001546001600160a01b03838116911614155b156135315750505061356d565b878481518110613543576135436148e4565b602002602001015187828151811061355d5761355d6148e4565b6020026020010181815250505050505b8061357781614c89565b915050613449565b5050509392505050565b613591612d9d565b6001600160a01b03166135ac6097546001600160a01b031690565b6001600160a01b0316146135d25760405162461bcd60e51b81526004016109e690614882565b6001600160a01b0381166136375760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109e6565b612cde8161317f565b61364a82826118e8565b610b8957613662816001600160a01b03166014613a65565b61366d836020613a65565b60405160200161367e929190614f25565b60408051601f198184030181529082905262461bcd60e51b82526109e6916004016142ce565b6136ae82826118e8565b610b89576000828152610107602090815260408083206001600160a01b03851684529091529020805460ff191660011790556136e8612d9d565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006118e1836001600160a01b038416613c00565b61374b82826118e8565b15610b89576000828152610107602090815260408083206001600160a01b03851684529091529020805460ff19169055613783612d9d565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006118e1836001600160a01b038416613c4f565b6000808251604114156138135760208301516040840151606085015160001a61380787828585613d42565b9450945050505061332c565b82516040141561383d5760208301516040840151613832868383613e2f565b93509350505061332c565b5060009050600261332c565b600081600481111561385d5761385d614052565b14156138665750565b600181600481111561387a5761387a614052565b14156138c85760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016109e6565b60028160048111156138dc576138dc614052565b141561392a5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016109e6565b600381600481111561393e5761393e614052565b14156139975760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016109e6565b60048160048111156139ab576139ab614052565b1415612cde5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016109e6565b6000826000018281548110613a1b57613a1b6148e4565b9060005260206000200154905092915050565b600054610100900460ff16613a555760405162461bcd60e51b81526004016109e690614eda565b611632613a60612d9d565b61317f565b60606000613a74836002614cbd565b613a7f906002614c71565b6001600160401b03811115613a9657613a9661431a565b6040519080825280601f01601f191660200182016040528015613ac0576020820181803683370190505b509050600360fc1b81600081518110613adb57613adb6148e4565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613b0a57613b0a6148e4565b60200101906001600160f81b031916908160001a9053506000613b2e846002614cbd565b613b39906001614c71565b90505b6001811115613bb1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613b6d57613b6d6148e4565b1a60f81b828281518110613b8357613b836148e4565b60200101906001600160f81b031916908160001a90535060049490941c93613baa81614f9a565b9050613b3c565b5083156118e15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016109e6565b6000818152600183016020526040812054613c4757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610976565b506000610976565b60008181526001830160205260408120548015613d38576000613c736001836148cd565b8554909150600090613c87906001906148cd565b9050818114613cec576000866000018281548110613ca757613ca76148e4565b9060005260206000200154905080876000018481548110613cca57613cca6148e4565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613cfd57613cfd6148fa565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610976565b6000915050610976565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115613d795750600090506003613e26565b8460ff16601b14158015613d9157508460ff16601c14155b15613da25750600090506004613e26565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613df6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116613e1f57600060019250925050613e26565b9150600090505b94509492505050565b6000806001600160ff1b03831681613e4c60ff86901c601b614c71565b9050613e5a87828885613d42565b935093505050935093915050565b828054828255906000526020600020908101928215613eb5579160200282015b82811115613eb55782518051613ea5918491602090910190613ec5565b5091602001919060010190613e88565b50613ec1929150613f45565b5090565b828054613ed190614b09565b90600052602060002090601f016020900481019282613ef35760008555613f39565b82601f10613f0c57805160ff1916838001178555613f39565b82800160010185558215613f39579182015b82811115613f39578251825591602001919060010190613f1e565b50613ec1929150613f62565b80821115613ec1576000613f598282613f77565b50600101613f45565b5b80821115613ec15760008155600101613f63565b508054613f8390614b09565b6000825580601f10613f93575050565b601f016020900490600052602060002090810190612cde9190613f62565b600060208284031215613fc357600080fd5b81356001600160e01b0319811681146118e157600080fd5b600060208284031215613fed57600080fd5b5035919050565b80356001600160a01b03811681146133bb57600080fd5b60006020828403121561401d57600080fd5b6118e182613ff4565b6000806040838503121561403957600080fd5b8235915061404960208401613ff4565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b6003811061408657634e487b7160e01b600052602160045260246000fd5b9052565b81516001600160a01b0316815260208083015160808301916140ae90840182614068565b506040830151604083015260608301511515606083015292915050565b60008083601f8401126140dd57600080fd5b5081356001600160401b038111156140f457600080fd5b60208301915083602082850101111561332c57600080fd5b6000806000806040858703121561412257600080fd5b84356001600160401b038082111561413957600080fd5b614145888389016140cb565b9096509450602087013591508082111561415e57600080fd5b5061416b878288016140cb565b95989497509550505050565b600081518084526020808501945080840160005b838110156141a75781518752958201959082019060010161418b565b509495945050505050565b600081518084526020808501945080840160005b838110156141a75781516001600160a01b0316875295820195908201906001016141c6565b6080815260006141fe6080830187614177565b828103602084015261421081876141b2565b905082810360408401526142248186614177565b905082810360608401526142388185614177565b979650505050505050565b60008060006060848603121561425857600080fd5b61426184613ff4565b95602085013595506040909401359392505050565b60005b83811015614291578181015183820152602001614279565b838111156110635750506000910152565b600081518084526142ba816020860160208601614276565b601f01601f19169290920160200192915050565b6020815260006118e160208301846142a2565b6060815260006142f46060830186614177565b828103602084015261430681866141b2565b90508281036040840152612a098185614177565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156143585761435861431a565b604052919050565b60006001600160401b038211156143795761437961431a565b5060051b60200190565b60006001600160401b0383111561439c5761439c61431a565b6143af601f8401601f1916602001614330565b90508281528383830111156143c357600080fd5b828260208301376000602084830101529392505050565b600060208083850312156143ed57600080fd5b82356001600160401b038082111561440457600080fd5b818501915085601f83011261441857600080fd5b813561442b61442682614360565b614330565b81815260059190911b8301840190848101908883111561444a57600080fd5b8585015b83811015614497578035858111156144665760008081fd5b8601603f81018b136144785760008081fd5b6144898b8983013560408401614383565b84525091860191860161444e565b5098975050505050505050565b600080602083850312156144b757600080fd5b82356001600160401b03808211156144ce57600080fd5b818501915085601f8301126144e257600080fd5b8135818111156144f157600080fd5b8660208260051b850101111561450657600080fd5b60209290920196919550909350505050565b6000806040838503121561452b57600080fd5b50508035926020909101359150565b6000806040838503121561454d57600080fd5b61455683613ff4565b915061404960208401613ff4565b600082601f83011261457557600080fd5b8135602061458561442683614360565b82815260059290921b840181019181810190868411156145a457600080fd5b8286015b848110156145bf57803583529183019183016145a8565b509695505050505050565b6000602082840312156145dc57600080fd5b81356001600160401b038111156145f257600080fd5b6145fe84828501614564565b949350505050565b6000806040838503121561461957600080fd5b61462283613ff4565b946020939093013593505050565b6001600160a01b03851681526080810161464d6020830186614068565b836040830152821515606083015295945050505050565b60008060006060848603121561467957600080fd5b61468284613ff4565b925061469060208501613ff4565b915061469e60408501613ff4565b90509250925092565b600082601f8301126146b857600080fd5b813560206146c861442683614360565b82815260059290921b840181019181810190868411156146e757600080fd5b8286015b848110156145bf576146fc81613ff4565b83529183019183016146eb565b60008060006060848603121561471e57600080fd5b83356001600160401b038082111561473557600080fd5b61474187838801614564565b9450602086013591508082111561475757600080fd5b614763878388016146a7565b9350604086013591508082111561477957600080fd5b5061478686828701614564565b9150509250925092565b600080600080608085870312156147a657600080fd5b84356001600160401b03808211156147bd57600080fd5b6147c988838901614564565b955060208701359150808211156147df57600080fd5b6147eb888389016146a7565b9450604087013591508082111561480157600080fd5b5061480e87828801614564565b949793965093946060013593505050565b6000806040838503121561483257600080fd5b82356001600160401b038082111561484957600080fd5b61485586838701614564565b9350602085013591508082111561486b57600080fd5b5061487885828601614564565b9150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156148df576148df6148b7565b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600082601f83011261492157600080fd5b6118e183833560208501614383565b6000806000806080858703121561494657600080fd5b84356001600160401b038082111561495d57600080fd5b61496988838901614564565b9550602087013591508082111561497f57600080fd5b61498b888389016146a7565b945060408701359150808211156149a157600080fd5b6149ad88838901614564565b935060608701359150808211156149c357600080fd5b506149d087828801614910565b91505092959194509250565b805160009060208084018383156141a75781518752958201959082019060010161418b565b6000614a0d82866149dc565b8451602080870160005b83811015614a3c5781516001600160a01b031685529382019390820190600101614a17565b50505050612a0981856149dc565b60208082526013908201527214da59db995c881a5cc81a5b98dbdc9c9958dd606a1b604082015260600190565b600080600060608486031215614a8c57600080fd5b83356001600160401b0380821115614aa357600080fd5b614aaf87838801614564565b94506020860135915080821115614ac557600080fd5b614ad187838801614564565b93506040860135915080821115614ae757600080fd5b5061478686828701614910565b60006145fe614b0383866149dc565b846149dc565b600181811c90821680614b1d57607f821691505b60208210811415614b3e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060a0820160018060a01b0388168352602060a08185015281885480845260c08601915060c08160051b870101935060008a8152838120815b83811015614c355788870360bf1901855281548390600181811c9080831680614ba857607f831692505b8a8310811415614bc657634e487b7160e01b88526022600452602488fd5b828c5260208c01818015614be15760018114614bf257614c1c565b60ff19861682528c82019650614c1c565b6000898152602090208a5b86811015614c1657815484820152908501908e01614bfd565b83019750505b50949b5050978901979490940193505050600101614b7e565b5050505050508281036040840152614c4d81876142a2565b6001600160e01b03198616606085015290508281036080840152611d5181856142a2565b60008219821115614c8457614c846148b7565b500190565b6000600019821415614c9d57614c9d6148b7565b5060010190565b600060208284031215614cb657600080fd5b5051919050565b6000816000190483118215151615614cd757614cd76148b7565b500290565b600082614cf957634e487b7160e01b600052601260045260246000fd5b500490565b60008060408385031215614d1157600080fd5b82356001600160401b0380821115614d2857600080fd5b614d3486838701614564565b93506020850135915080821115614d4a57600080fd5b5061487885828601614910565b60006118e182846149dc565b600181815b80851115614d9e578160001904821115614d8457614d846148b7565b80851615614d9157918102915b93841c9390800290614d68565b509250929050565b600082614db557506001610976565b81614dc257506000610976565b8160018114614dd85760028114614de257614dfe565b6001915050610976565b60ff841115614df357614df36148b7565b50506001821b610976565b5060208310610133831016604e8410600b8410161715614e21575081810a610976565b614e2b8383614d63565b8060001904821115614e3f57614e3f6148b7565b029392505050565b60006118e160ff841683614da6565b60008060408385031215614e6957600080fd5b82519150602083015160ff81168114614e8157600080fd5b809150509250929050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614f5d816017850160208801614276565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614f8e816028840160208801614276565b01602801949350505050565b600081614fa957614fa96148b7565b50600019019056fea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220b31613ad3771f21e7cb6b21c0f6a2935362e9c188e677fac97cb8716d833dbc864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burnByAdmin(address,uint256,uint256)": {
        "details": "mint BNIs according to the deposited USDT",
        "params": {
          "_account": "account to which BNIs will be minted",
          "_pool": "total pool in USD",
          "_share": "amount of BNI to be burnt"
        }
      },
      "getDepositTokenComposition(uint256[],address[],uint256[],uint256)": {
        "params": {
          "_USDT6Amt": "amount of USDT with 6 decimals"
        },
        "returns": {
          "_0": "_USDT6Amts amount of USDT should be deposited to each pools"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getUSDTPriceInUSD()": {
        "returns": {
          "_0": "the price of USDT in USD."
        }
      },
      "getWithdrawPerc(address,uint256)": {
        "params": {
          "_share": "amount of BNI to be withdrawn"
        },
        "returns": {
          "_sharePerc": "percentage of assets which should be withdrawn. It's 18 decimals"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initDepositByAdmin(address,uint256,uint256)": {
        "params": {
          "_USDT6Amt": "USDT with 6 decimals to be deposited",
          "_account": "account to which BNIs will be minted",
          "_pool": "total pool in USD"
        }
      },
      "mintByAdmin(address,uint256)": {
        "details": "mint BNIs according to the deposited USDT",
        "params": {
          "_USDT6Amt": "the deposited USDT with 6 decimals",
          "_account": "account to which BNIs will be minted"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addToken(uint256,address)": {
        "notice": "After this method called, setTokenCompositionTargetPerc should be called to adjust percentages."
      },
      "getAPR(uint256[],uint256[])": {
        "notice": "The length of array is based on network count. And the lengths should be same on the arraies."
      },
      "getAllPoolInUSD(uint256[])": {
        "notice": "The length of array is based on network count. And the lengths should be same on the arraies."
      },
      "getCurrentTokenCompositionPerc(uint256[],address[],uint256[])": {
        "notice": "The length of array is based on token count. And the lengths should be same on the arraies."
      },
      "getDepositTokenComposition(uint256[],address[],uint256[],uint256)": {
        "notice": "The length of array is based on token count. And the lengths should be same on the arraies."
      },
      "getPricePerFullShare(uint256[])": {
        "notice": "Can be used for calculate both user shares & APR"
      },
      "getWithdrawPerc(address,uint256)": {
        "notice": "The length of array is based on token count. And the lengths should be same on the arraies."
      },
      "removeToken(uint256)": {
        "notice": "After this method called, setTokenCompositionTargetPerc should be called to adjust percentages."
      },
      "setTokenCompositionTargetPerc(uint256[])": {
        "notice": "The length of array is based on token count."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 713,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 716,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 973,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1017,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3292,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 869,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 958,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 593,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 705,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6234,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "chainIDs",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6237,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "tokens",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6240,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "targetPercentages",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6246,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "tid",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6248,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "admin",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 6251,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "BNI",
        "offset": 0,
        "slot": "206",
        "type": "t_contract(IBNI)6132"
      },
      {
        "astId": 6254,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "priceOracle",
        "offset": 0,
        "slot": "207",
        "type": "t_contract(IPriceOracle)12040"
      },
      {
        "astId": 6257,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "urls",
        "offset": 0,
        "slot": "208",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 6259,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "gatewaySigner",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 6261,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "210",
        "type": "t_address"
      },
      {
        "astId": 6265,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "operations",
        "offset": 0,
        "slot": "211",
        "type": "t_array(t_struct(Operation)6231_storage)dyn_storage"
      },
      {
        "astId": 6269,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "userLastOperationNonce",
        "offset": 0,
        "slot": "212",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3946,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "213",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "_roles",
        "offset": 0,
        "slot": "263",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 483,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "264",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "313",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4359_storage)"
      },
      {
        "astId": 143,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "314",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6437,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "version",
        "offset": 0,
        "slot": "363",
        "type": "t_uint256"
      },
      {
        "astId": 6439,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "userAgent",
        "offset": 0,
        "slot": "364",
        "type": "t_address"
      },
      {
        "astId": 6442,
        "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
        "label": "poolsAtNonce",
        "offset": 0,
        "slot": "365",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Operation)6231_storage)dyn_storage": {
        "base": "t_struct(Operation)6231_storage",
        "encoding": "dynamic_array",
        "label": "struct BNIMinterV1.Operation[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBNI)6132": {
        "encoding": "inplace",
        "label": "contract IBNI",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)12040": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_enum(OperationType)6221": {
        "encoding": "inplace",
        "label": "enum BNIMinterV1.OperationType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4359_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4359_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4359_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 4358,
            "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4058_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Operation)6231_storage": {
        "encoding": "inplace",
        "label": "struct BNIMinterV1.Operation",
        "members": [
          {
            "astId": 6223,
            "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6226,
            "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
            "label": "operation",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(OperationType)6221"
          },
          {
            "astId": 6228,
            "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6230,
            "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
            "label": "done",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4058_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 4053,
            "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4057,
            "contract": "contracts/bni/BNIMinterTest.sol:BNIMinterTest",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}