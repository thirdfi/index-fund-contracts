{
  "address": "0xA1509E98e80938e2Bb42c0245c6fE9F66fce6A50",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amtDeposit",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenDeposit",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amtWithdraw",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenWithdraw",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20UpgradeableExt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "claimByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "claimByAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimEmergencyWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_USDT6Amts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "depositByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_USDT6Amts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "depositByAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "firstOperationNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allPool",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "getAllPoolInUSDAtNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAllUnbonded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "waitingInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unbondedInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "waitForTs",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentCompositionPerc",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "percentages",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEachPoolInUSD",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "chainIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "pools",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEmergencyWithdrawalUnbonded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "waitingInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unbondedInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "waitForTs",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getPoolsUnbonded",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "chainIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "waitings",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "waitingInUSDs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "unbondeds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "unbondedInUSDs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "waitForTses",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUSDTPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawableSharePerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sharePerc",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_userAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_biconomy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDT",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastOperationNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "operationAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolAtNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "poolInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_perc",
          "type": "uint256[]"
        }
      ],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_biconomy",
          "type": "address"
        }
      ],
      "name": "setBiconomy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAgent",
          "type": "address"
        }
      ],
      "name": "setUserAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLastOperationNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "withdrawPercByAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharePerc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "withdrawPercByAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc92630e7b438ff5b8d4c371f2ea10b726ba06c092ba1a8745cfc245ff1562a0f",
  "receipt": {
    "to": null,
    "from": "0xd91Fbc9b431464D737E1BC4e76900D43405a639b",
    "contractAddress": "0xA1509E98e80938e2Bb42c0245c6fE9F66fce6A50",
    "transactionIndex": 0,
    "gasUsed": "3075957",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x63646fd74b7525af82eb9a247dbd7c1f8093bd2f2a8b50f18dff0cf692c8f333",
    "transactionHash": "0xc92630e7b438ff5b8d4c371f2ea10b726ba06c092ba1a8745cfc245ff1562a0f",
    "logs": [],
    "blockNumber": 14243720,
    "cumulativeGasUsed": "3075957",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "083761efc634c244215e46cced869b47",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amtDeposit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenDeposit\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amtWithdraw\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenWithdraw\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20UpgradeableExt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimByAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEmergencyWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_USDT6Amts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"depositByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_USDT6Amts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"depositByAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstOperationNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getAllPoolInUSDAtNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAllUnbonded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"waitingInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondedInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitForTs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentCompositionPerc\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEachPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"chainIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pools\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmergencyWithdrawalUnbonded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"waitingInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondedInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitForTs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPoolsUnbonded\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"chainIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"waitings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"waitingInUSDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unbondeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unbondedInUSDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"waitForTses\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawableSharePerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePerc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_biconomy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastOperationNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operationAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolAtNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_perc\",\"type\":\"uint256[]\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_biconomy\",\"type\":\"address\"}],\"name\":\"setBiconomy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAgent\",\"type\":\"address\"}],\"name\":\"setUserAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastOperationNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"withdrawPercByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharePerc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"withdrawPercByAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositByAdmin(address,address[],uint256[],uint256)\":{\"params\":{\"_USDT6Amts\":\"amounts of USDT should be deposited to each pools. It's 6 decimals\"}},\"getUSDTPriceInUSD()\":{\"returns\":{\"_0\":\"the price of USDT in USD.\"}},\"getWithdrawableSharePerc()\":{\"returns\":{\"chainID\":\"is the ID of the current chain\",\"sharePerc\":\"is percentage of the value in the vault of the total value. It's useful for calculating the withdrawable share under emergency status.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawPercByAdmin(address,uint256,uint256)\":{\"params\":{\"_sharePerc\":\"percentage of assets which should be withdrawn. It's 18 decimals\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositByAdmin(address,address[],uint256[],uint256)\":{\"notice\":\"The length of array is based on token count. And the lengths should be same on the arraies.\"},\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/sti/STIVault.sol\":\"STIVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/bni/constant/AuroraConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AuroraConstant {\\n    uint internal constant CHAINID = 1313161554;\\n\\n    address internal constant BSTN = 0x9f1F933C660a1DC856F0E0Fe058435879c5CCEf0;\\n    address internal constant META = 0xc21Ff01229e982d7c8b8691163B0A3Cb8F357453;\\n    address internal constant stNEAR = 0x07F9F7f963C5cD2BBFFd30CcfB964Be114332E30;\\n    address internal constant USDC = 0xB12BFcA5A55806AaF64E99521918A4bf0fC40802;\\n    address internal constant USDT = 0x4988a896b1227218e4A686fdE5EabdcAbd91571f;\\n    address internal constant WETH = 0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB;\\n    address internal constant WNEAR = 0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d;\\n}\\n\",\"keccak256\":\"0xb4c50615e5b8672de4e3918c881272987794a28f3cc00f680f04bdfddc21dba8\",\"license\":\"MIT\"},\"contracts/bni/constant/AuroraConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AuroraConstantTest {\\n    uint internal constant CHAINID = 1313161555;\\n\\n    address internal constant BSTN = 0x9f1F933C660a1DC856F0E0Fe058435879c5CCEf0; // Should be replaced with testnet address\\n    address internal constant META = 0xc21Ff01229e982d7c8b8691163B0A3Cb8F357453; // Should be replaced with testnet address\\n    address internal constant stNEAR = 0x2137df2e54abd6bF1c1a8c1739f2EA6A8C15F144;\\n    address internal constant USDC = 0xCcECA5C4A3355F8e7a0B7d2a7251eec012Be7c58;\\n    address internal constant USDT = 0xF9C249974c1Acf96a59e5757Cc9ba7035cE489B1;\\n    address internal constant WETH = 0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB; // Should be replaced with testnet address\\n    address internal constant WNEAR = 0x4861825E75ab14553E5aF711EbbE6873d369d146;\\n}\\n\",\"keccak256\":\"0x2c142ce864cd38aa02fa7e50f069b88c73a06d913be71355858f34396c30c048\",\"license\":\"MIT\"},\"contracts/bni/constant/AvaxConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AvaxConstant {\\n    uint internal constant CHAINID = 43114;\\n\\n    address internal constant USDC = 0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664;\\n    address internal constant USDT = 0xc7198437980c041c805A1EDcbA50c1Ce5db95118;\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    address internal constant aAVAXb = 0x6C6f910A79639dcC94b4feEF59Ff507c2E843929;\\n}\\n\",\"keccak256\":\"0x53216c58dd6d77a9fa18b7ea121a2a8aa8c3ae6577577e8c332747bd0d74fde2\",\"license\":\"MIT\"},\"contracts/bni/constant/AvaxConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AvaxConstantTest {\\n    uint internal constant CHAINID = 43113;\\n\\n    address internal constant USDC = 0x7aCdaba7Ee51c1c3F7C6D605CC26b1c9aAB0495A;\\n    address internal constant USDT = 0x78ae2880bd1672b49a33cF796CF53FE6db0aB01D;\\n    address internal constant WAVAX = 0xd00ae08403B9bbb9124bB305C09058E32C39A48c;\\n\\n    address internal constant aAVAXb = 0xBd97c29aa3E83C523C9714edCA8DB8881841a593;\\n}\\n\",\"keccak256\":\"0x11c2007f9c851ef591ac5f7d8b2540bfbcde5091044f5bc2a02645fc13230c3e\",\"license\":\"MIT\"},\"contracts/bni/constant/BscConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary BscConstant {\\n    uint internal constant CHAINID = 56;\\n\\n    address internal constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address internal constant CAKE = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82;\\n    address internal constant USDC = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\\n    address internal constant USDT = 0x55d398326f99059fF775485246999027B3197955;\\n    address internal constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    address internal constant aBNBb = 0xBb1Aa6e59E5163D8722a122cd66EBA614b59df0d;\\n}\\n\",\"keccak256\":\"0xd0c4c785ade0a75733c82781329443ec20ba40754d99575689064ac9e7196adf\",\"license\":\"MIT\"},\"contracts/bni/constant/BscConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary BscConstantTest {\\n    uint internal constant CHAINID = 97;\\n\\n    address internal constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // Should be replaced with testnet address\\n    address internal constant CAKE = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82; // Should be replaced with testnet address\\n    address internal constant USDC = 0xda14d11D2C7d79F167b6057DE3D9cc25C2c488d5;\\n    address internal constant USDT = 0x1F326a8CA5399418a76eA0efa0403Cbb00790C67;\\n    address internal constant WBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd;\\n\\n    address internal constant aBNBb = 0xaB56897fE4e9f0757e02B54C27E81B9ddd6A30AE;\\n}\\n\",\"keccak256\":\"0x9ca5b6fb202a1748ffa97c55a155bd7e1fd5bb4bde9fb276bb0a5c42d2539e0b\",\"license\":\"MIT\"},\"contracts/bni/constant/EthConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary EthConstant {\\n    uint internal constant CHAINID = 1;\\n\\n    address internal constant MATIC = 0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0;\\n    address internal constant stETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\n    address internal constant stMATIC = 0x9ee91F9f426fA633d227f7a9b000E28b9dfd8599;\\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n}\\n\",\"keccak256\":\"0x7d278bbafd2c0dae080f4aea2c853ec12ea88f767de21cdaa1ddd4be393143e1\",\"license\":\"MIT\"},\"contracts/bni/constant/EthConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary EthConstantTest {\\n    uint internal constant CHAINID = 4;\\n\\n    address internal constant MATIC = 0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0; // Should be replaced with testnet address\\n    address internal constant stETH = 0xF4242f9d78DB7218Ad72Ee3aE14469DBDE8731eD;\\n    address internal constant stMATIC = 0x9ee91F9f426fA633d227f7a9b000E28b9dfd8599; // Should be replaced with testnet address\\n    address internal constant USDC = 0xDf5324ebe6F6b852Ff5cBf73627eE137e9075276;\\n    address internal constant USDT = 0x21e48034753E490ff04f2f75f7CAEdF081B320d5;\\n    address internal constant WETH = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\\n}\\n\",\"keccak256\":\"0x2711954dbd697694829429f6b66d704bb80b214e8f5077f8c79554c2af901a38\",\"license\":\"MIT\"},\"contracts/bni/constant/FtmConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary FtmConstantTest {\\n    uint internal constant CHAINID = 4002;\\n\\n    address internal constant USDC = 0x147abEE959A578F2ae5F9bC996dcf6259EBd3a89;\\n    address internal constant USDT = 0xb02068AE04Bf5d184EFDe3583e09f2185a30da0e;\\n    address internal constant WFTM = 0xf1277d1Ed8AD466beddF92ef448A132661956621;\\n}\\n\",\"keccak256\":\"0xf3f23ac114bd1500bd38c3095382b9459f8f4750b59c96bee4e44bb0187bb906\",\"license\":\"MIT\"},\"contracts/bni/constant/MaticConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary MaticConstant {\\n    uint internal constant CHAINID = 137;\\n\\n    address internal constant USDC = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n    address internal constant USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\\n    address internal constant WMATIC = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\\n}\\n\",\"keccak256\":\"0x0503964316f40535769a8e59b212628df2799c1bbde38dae6f0fce5f250f0ba2\",\"license\":\"MIT\"},\"contracts/bni/constant/MaticConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary MaticConstantTest {\\n    uint internal constant CHAINID = 80001;\\n\\n    address internal constant USDC = 0x6600BeC324CCDd12c70297311AEfB37fafB1D689;\\n    address internal constant USDT = 0x7e4C234B1d634DB790592d1550816b19E862F744;\\n    address internal constant WMATIC = 0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889;\\n}\\n\",\"keccak256\":\"0x454ef5183082f4cbadd6166b4b5f56ad6b1b3406c0c39132e12177229cb66b48\",\"license\":\"MIT\"},\"contracts/bni/priceOracle/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity  0.8.9;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n\\r\\n    /**\\r\\n     * @notice Sets or replaces price sources of assets\\r\\n     * @param assets The addresses of the assets\\r\\n     * @param sources The addresses of the price sources\\r\\n     */\\r\\n    function setAssetSources(address[] memory assets, address[] memory sources) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the source for an asset address\\r\\n     * @param asset The address of the asset\\r\\n     * @return The address of the source\\r\\n     */\\r\\n    function getSourceOfAsset(address asset) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param assets The list of assets addresses\\r\\n     * @return prices The prices of the given assets\\r\\n     */\\r\\n    function getAssetsPrices(address[] memory assets) external view returns (uint[] memory prices, uint8[] memory decimalsArray);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of prices from a list of assets addresses\\r\\n     * @param asset The asset address\\r\\n     * @return price The prices of the given assets\\r\\n     */\\r\\n    function getAssetPrice(address asset) external view returns (uint price, uint8 decimals);\\r\\n}\",\"keccak256\":\"0xaf07db77a02bf0cdc1cbd5f7c33cebd04e3e961c517adc53664eca0fc6dccdfe\",\"license\":\"MIT\"},\"contracts/sti/ISTIVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface ISTIVault {\\n    function depositByAdmin(address _account, address[] memory _tokens, uint[] memory _USDTAmts, uint _nonce) external;\\n    function depositByAgent(address _account, address[] memory _tokens, uint[] memory _USDTAmts, uint _nonce) external;\\n    function withdrawPercByAdmin(address _account, uint _sharePerc, uint _nonce) external;\\n    function withdrawPercByAgent(address _account, uint _sharePerc, uint _nonce) external;\\n    function claimByAdmin(address _account) external;\\n    function claimByAgent(address _account) external;\\n}\",\"keccak256\":\"0x0509ac3095967d130510d8dfe2321078964ceb6fd8a756862c51a3d1530fdcea\",\"license\":\"MIT\"},\"contracts/sti/STIVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../bni/priceOracle/IPriceOracle.sol\\\";\\nimport \\\"../../interfaces/IERC20UpgradeableExt.sol\\\";\\nimport \\\"../../libs/Const.sol\\\";\\nimport \\\"../../libs/Token.sol\\\";\\nimport \\\"../../libs/BaseRelayRecipient.sol\\\";\\nimport \\\"./ISTIVault.sol\\\";\\n\\ninterface IStrategy {\\n    function invest(address[] memory tokens, uint[] memory USDTAmts) external;\\n    function withdrawPerc(address claimer, uint sharePerc) external;\\n    function claim(address _claimer) external returns (uint USDTAmt);\\n    function emergencyWithdraw() external;\\n    function claimEmergencyWithdrawal() external;\\n    function reinvest(address[] memory tokens, uint[] memory USDTAmts) external;\\n    function getEmergencyWithdrawalUnbonded() external view returns (uint waitingInUSD, uint unbondedInUSD, uint waitForTs);\\n    function getPoolsUnbonded(address _claimer) external view returns (\\n        address[] memory tokens,\\n        uint[] memory waitings,\\n        uint[] memory waitingInUSDs,\\n        uint[] memory unbondeds,\\n        uint[] memory unbondedInUSDs,\\n        uint[] memory waitForTses\\n    );\\n    function getAllUnbonded(address _claimer) external view returns (uint waitingInUSD, uint unbondedInUSD, uint waitForTs);\\n    function getPoolCount() external view returns (uint);\\n    function getEachPoolInUSD() external view returns (address[] memory tokens, uint[] memory pools);\\n    function getAllPoolInUSD() external view returns (uint);\\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages);\\n    function getAPR() external view returns (uint);\\n}\\n\\ncontract STIVault is\\n    ISTIVault,\\n    BaseRelayRecipient,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    OwnableUpgradeable\\n{\\n    using SafeERC20Upgradeable for IERC20UpgradeableExt;\\n\\n    struct PoolSnapshot {\\n        uint poolInUSD;\\n        uint ts;\\n    }\\n\\n    IERC20UpgradeableExt public USDT;\\n    uint8 usdtDecimals;\\n\\n    address public admin;\\n    IStrategy public strategy;\\n    IPriceOracle public priceOracle;\\n\\n    uint public firstOperationNonce;\\n    uint public lastOperationNonce;\\n    mapping(uint => PoolSnapshot) public poolAtNonce;\\n    mapping(address => uint) public userLastOperationNonce;\\n    mapping(uint => uint) public operationAmounts; // value in USD scaled by 10^18\\n\\n    address public userAgent;\\n\\n    event Deposit(address indexed account, address from, uint indexed amtDeposit, address indexed tokenDeposit);\\n    event Withdraw(address indexed account, address to, uint indexed amtWithdraw, address indexed tokenWithdraw, uint sharePerc);\\n    event Reinvest(uint indexed amount);\\n    \\n    modifier onlyOwnerOrAdmin {\\n        require(msg.sender == owner() || msg.sender == address(admin), \\\"Only owner or admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyAgent {\\n        require(msg.sender == address(userAgent), \\\"Only agent\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _admin, address _userAgent, address _biconomy,\\n        address _strategy, address _priceOracle,\\n        address _USDT\\n    ) external initializer {\\n        __Ownable_init();\\n        admin = _admin;\\n        userAgent = _userAgent;\\n\\n        trustedForwarder = _biconomy;\\n        strategy = IStrategy(_strategy);\\n        priceOracle = IPriceOracle(_priceOracle);\\n\\n        USDT = IERC20UpgradeableExt(_USDT);\\n        usdtDecimals = USDT.decimals();\\n        require(6 <= usdtDecimals, \\\"USDT decimals must >= 6\\\");\\n\\n        USDT.safeApprove(address(strategy), type(uint).max);\\n    }\\n\\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\\n    /// @param _USDT6Amts amounts of USDT should be deposited to each pools. It's 6 decimals\\n    function depositByAdmin(\\n        address _account, address[] memory _tokens, uint[] memory _USDT6Amts, uint _nonce\\n    ) external onlyOwnerOrAdmin nonReentrant whenNotPaused {\\n        _deposit(_account, _account, _tokens, _USDT6Amts, _nonce);\\n    }\\n\\n    function depositByAgent(\\n        address _account, address[] memory _tokens, uint[] memory _USDT6Amts, uint _nonce\\n    ) external onlyAgent nonReentrant whenNotPaused {\\n        _deposit(_account, _msgSender(), _tokens, _USDT6Amts, _nonce);\\n    }\\n\\n    function _deposit(\\n        address _account, address _from, address[] memory _tokens, uint[] memory _USDT6Amts, uint _nonce\\n    ) private {\\n        require(_account != address(0), \\\"Invalid account\\\");\\n        uint poolCnt = _tokens.length;\\n        require(poolCnt == _USDT6Amts.length, \\\"Not match array length\\\");\\n\\n        uint k = 10 ** (usdtDecimals - 6);\\n        uint USDTAmt;\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            _USDT6Amts[i] = _USDT6Amts[i] * k;\\n            USDTAmt += _USDT6Amts[i];\\n        }\\n        require(USDTAmt > 0, \\\"Amounts must > 0\\\");\\n\\n        require(userLastOperationNonce[_account] < _nonce, \\\"Nonce is behind\\\");\\n        userLastOperationNonce[_account] = _nonce;\\n        operationAmounts[_nonce] = getValueInUSD(address(USDT), USDTAmt);\\n        _snapshotPool(_nonce, getAllPoolInUSD());\\n\\n        USDT.safeTransferFrom(_from, address(this), USDTAmt);\\n        strategy.invest(_tokens, _USDT6Amts);\\n        emit Deposit(_account, _from, USDTAmt, address(USDT));\\n    }\\n\\n    /// @param _sharePerc percentage of assets which should be withdrawn. It's 18 decimals\\n    function withdrawPercByAdmin(\\n        address _account, uint _sharePerc, uint _nonce\\n    ) external onlyOwnerOrAdmin nonReentrant {\\n        _withdraw(_account, _account, _sharePerc, _nonce);\\n    }\\n\\n    function withdrawPercByAgent(\\n        address _account, uint _sharePerc, uint _nonce\\n    ) external onlyAgent nonReentrant {\\n        _withdraw(_account, _msgSender(), _sharePerc, _nonce);\\n    }\\n\\n    function _withdraw(\\n        address _account, address _to, uint _sharePerc, uint _nonce\\n    ) private {\\n        require(_sharePerc > 0, \\\"SharePerc must > 0\\\");\\n        require(_sharePerc <= 1e18, \\\"Over 100%\\\");\\n\\n        (uint vaultPool, uint strategyPool) = _getAllPoolInUSD();\\n        uint pool = vaultPool + strategyPool;\\n        uint withdrawAmt = pool * _sharePerc / 1e18;\\n\\n        require(userLastOperationNonce[_account] < _nonce, \\\"Nonce is behind\\\");\\n        userLastOperationNonce[_account] = _nonce;\\n        operationAmounts[_nonce] = withdrawAmt;\\n        _snapshotPool(_nonce, pool);\\n\\n        uint USDTAmt;\\n        if (withdrawAmt <= vaultPool) {\\n            USDTAmt = USDT.balanceOf(address(this)) * withdrawAmt / vaultPool;\\n        } else {\\n            if (paused() == false) {\\n                strategy.withdrawPerc(_account, 1e18 * (withdrawAmt - vaultPool) / strategyPool);\\n                USDTAmt = USDT.balanceOf(address(this));\\n            } else {\\n                require(false, \\\"Retry after all claimed\\\");\\n            }\\n        }\\n\\n        if (USDTAmt > 0) {\\n            USDT.safeTransfer(_to, USDTAmt);\\n        }\\n        emit Withdraw(_account, _to, withdrawAmt, address(USDT), _sharePerc);\\n    }\\n\\n    function _snapshotPool(uint _nonce, uint _pool) internal {\\n        poolAtNonce[_nonce] = PoolSnapshot({\\n            poolInUSD: _pool,\\n            ts: block.timestamp\\n        });\\n\\n        if (firstOperationNonce == 0) {\\n            firstOperationNonce = _nonce;\\n        }\\n        if (lastOperationNonce < _nonce) {\\n            lastOperationNonce = _nonce;\\n        }\\n    }\\n\\n    function claim() external nonReentrant {\\n        _claimAllAndTransfer(msg.sender, msg.sender);\\n    }\\n\\n    function claimByAdmin(address _account) external onlyOwnerOrAdmin nonReentrant {\\n        _claimAllAndTransfer(_account, _account);\\n    }\\n\\n    function claimByAgent(address _account) external onlyAgent nonReentrant {\\n        _claimAllAndTransfer(_account, _msgSender());\\n    }\\n\\n    function _claimAllAndTransfer(address _account, address _to) internal {\\n        uint USDTAmt = strategy.claim(_account);\\n        if (USDTAmt > 0) {\\n            USDT.safeTransfer(_to, USDTAmt);\\n        }\\n    }\\n\\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\\n        _pause();\\n        strategy.emergencyWithdraw();\\n    }\\n\\n    function claimEmergencyWithdrawal() external onlyOwnerOrAdmin whenPaused {\\n        strategy.claimEmergencyWithdrawal();\\n    }\\n\\n    function reinvest(address[] memory _tokens, uint[] memory _perc) external onlyOwnerOrAdmin whenPaused {\\n        uint poolCnt = _tokens.length;\\n        require(poolCnt == _perc.length, \\\"Not match array length\\\");\\n\\n        (uint waitingInUSD, uint unbondedInUSD,) = getEmergencyWithdrawalUnbonded();\\n        require(waitingInUSD + unbondedInUSD == 0, \\\"Need to claim emergency withdrawal first\\\");\\n\\n        _unpause();\\n        uint USDTAmt = USDT.balanceOf(address(this));\\n        if (USDTAmt > 0) {\\n            uint totalPerc;\\n            for (uint i = 0; i < poolCnt; i ++) {\\n                totalPerc += _perc[i];\\n            }\\n\\n            uint[] memory USMTAmts = new uint[](poolCnt);\\n            for (uint i = 0; i < poolCnt; i ++) {\\n                USMTAmts[i] = _perc[i] * USDTAmt / totalPerc;\\n            }\\n\\n            strategy.reinvest(_tokens, USMTAmts);\\n            emit Reinvest(USDTAmt);\\n        }\\n    }\\n\\n    function setStrategy(address _strategy) external onlyOwner {\\n        strategy = IStrategy(_strategy);\\n\\n        if (USDT.allowance(address(this), address(strategy)) == 0) {\\n            USDT.safeApprove(address(strategy), type(uint).max);\\n        }\\n    }\\n\\n    function setAdmin(address _admin) external onlyOwner {\\n        admin = _admin;\\n    }\\n\\n    function setUserAgent(address _userAgent) external onlyOwner {\\n        userAgent = _userAgent;\\n    }\\n\\n    function setBiconomy(address _biconomy) external onlyOwner {\\n        trustedForwarder = _biconomy;\\n    }\\n\\n    function _msgSender() internal override(ContextUpgradeable, BaseRelayRecipient) view returns (address) {\\n        return BaseRelayRecipient._msgSender();\\n    }\\n\\n    function versionRecipient() external pure override returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    function getPoolsUnbonded(address _account) external view returns (\\n        uint[] memory chainIDs,\\n        address[] memory tokens,\\n        uint[] memory waitings,\\n        uint[] memory waitingInUSDs,\\n        uint[] memory unbondeds,\\n        uint[] memory unbondedInUSDs,\\n        uint[] memory waitForTses\\n    ) {\\n        (tokens, waitings, waitingInUSDs, unbondeds, unbondedInUSDs, waitForTses) = strategy.getPoolsUnbonded(_account);\\n\\n        uint poolCnt = tokens.length;\\n        uint chainID = Token.getChainID();\\n        chainIDs = new uint[](poolCnt);\\n        for (uint _pid = 0; _pid < poolCnt; _pid ++) {\\n            chainIDs[_pid] = chainID;\\n        }\\n    }\\n\\n    function getAllUnbonded(address _account) external view returns (\\n        uint waitingInUSD, uint unbondedInUSD, uint waitForTs\\n    ) {\\n        return strategy.getAllUnbonded(_account);\\n    }\\n\\n    function getEmergencyWithdrawalUnbonded() public view returns (\\n        uint waitingInUSD, uint unbondedInUSD, uint waitForTs\\n    ) {\\n        return strategy.getEmergencyWithdrawalUnbonded();\\n    }\\n\\n    ///@return chainID is the ID of the current chain\\n    ///@return sharePerc is percentage of the value in the vault of the total value. It's useful for calculating the withdrawable share under emergency status.\\n    function getWithdrawableSharePerc() public view returns (uint chainID, uint sharePerc) {\\n        chainID = Token.getChainID();\\n        if (paused() == false) {\\n            sharePerc = 1e18;\\n        } else {\\n            // In emergency mode, the unclaimed assets can not be withdrawn.\\n            (uint vaultPool, uint strategyPool) = _getAllPoolInUSD();\\n            sharePerc = 1e18 * vaultPool / (vaultPool + strategyPool);\\n        }\\n    }\\n\\n    ///@return the price of USDT in USD.\\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\\n        return priceOracle.getAssetPrice(address(USDT));\\n    }\\n\\n    ///@return the value in USD. it's scaled by 1e18;\\n    function getValueInUSD(address _asset, uint _amount) internal view returns (uint) {\\n        (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(_asset);\\n        uint8 _decimals = IERC20UpgradeableExt(_asset).decimals();\\n        return Token.changeDecimals(_amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\\n    }\\n\\n    function getEachPoolInUSD() public view returns (uint[] memory chainIDs, address[] memory tokens, uint[] memory pools) {\\n        (tokens, pools) = strategy.getEachPoolInUSD();\\n        uint poolCnt = pools.length;\\n        uint chainID = Token.getChainID();\\n        chainIDs = new uint[](poolCnt);\\n        for (uint i = 0; i < poolCnt; i ++) {\\n            chainIDs[i] = chainID;\\n        }\\n\\n        uint USDTAmt = USDT.balanceOf(address(this));\\n        if(USDTAmt > 0 && poolCnt > 0) {\\n            pools[0] += getValueInUSD(address(USDT), USDTAmt);\\n        }\\n        return (chainIDs, tokens, pools);\\n    }\\n\\n    function getAllPoolInUSD() public view returns (uint allPool) {\\n        (uint vaultPool, uint strategyPool) = _getAllPoolInUSD();\\n        allPool = vaultPool + strategyPool;\\n    }\\n\\n    function _getAllPoolInUSD() internal view returns (uint vaultPool, uint strategyPool) {\\n        uint USDTAmt = USDT.balanceOf(address(this));\\n        if (USDTAmt > 0) {\\n            vaultPool = getValueInUSD(address(USDT), USDTAmt);\\n        }\\n        strategyPool = strategy.getAllPoolInUSD();\\n    }\\n\\n    function getAllPoolInUSDAtNonce(uint _nonce) public view returns (uint) {\\n        if (firstOperationNonce != 0) {\\n            if (_nonce < firstOperationNonce) {\\n                return 0;\\n            }\\n            if (_nonce <= lastOperationNonce) {\\n                for (uint i = _nonce; i >= firstOperationNonce; i --) {\\n                    PoolSnapshot memory snapshot = poolAtNonce[i];\\n                    if (snapshot.ts > 0) {\\n                        return snapshot.poolInUSD;\\n                    }\\n                }\\n            }\\n        }\\n        return getAllPoolInUSD();\\n    }\\n\\n    function getCurrentCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\\n        return strategy.getCurrentTokenCompositionPerc();\\n    }\\n\\n    function getAPR() external view returns (uint) {\\n        return strategy.getAPR();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x14f998f508f984025fbcaad3aedd6b0e5e2a357184f2ce05d495b4d32f8ef195\",\"license\":\"MIT\"},\"interfaces/IERC20UpgradeableExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IERC20UpgradeableExt is IERC20Upgradeable {\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x06f547094243d372a789dbb9207b12091bfebb770fb1f1de0a103bd100e1a9e2\",\"license\":\"MIT\"},\"interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.9;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\",\"keccak256\":\"0x2feb0e97ff08902dc4fc0a993753af45c01fb5565f281cefc877f4bc490c8abf\",\"license\":\"MIT\"},\"libs/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    /*\\n     * require a function to be called through GSN only\\n     */\\n    modifier trustedForwarderOnly() {\\n        require(msg.sender == address(trustedForwarder), \\\"Function can only be called through the trusted Forwarder\\\");\\n        _;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n}\",\"keccak256\":\"0x4e6a1c99ec5a0369c516e18940336732c07df7c91f048042926154305b8fb720\",\"license\":\"MIT\"},\"libs/Const.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Const {\\r\\n\\r\\n    uint internal constant DENOMINATOR = 10000;\\r\\n\\r\\n    uint internal constant APR_SCALE = 1e18;\\r\\n    \\r\\n    uint internal constant YEAR_IN_SEC = 365 days;\\r\\n\\r\\n    address internal constant NATIVE_ASSET = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n\\r\\n    enum TokenID { USDT, USDC }\\r\\n}\\r\\n\",\"keccak256\":\"0xecdadc52a09a3242feae68d278fd152ab66e18c81c6aeca076ee1bb7d29a3fd7\",\"license\":\"MIT\"},\"libs/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../contracts/bni/constant/AuroraConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/AuroraConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/AvaxConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/AvaxConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/BscConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/BscConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/EthConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/EthConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/FtmConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/MaticConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/MaticConstantTest.sol\\\";\\r\\nimport \\\"./Const.sol\\\";\\r\\n\\r\\nlibrary Token {\\r\\n    function changeDecimals(uint amount, uint curDecimals, uint newDecimals) internal pure returns(uint) {\\r\\n        if (curDecimals == newDecimals) {\\r\\n            return amount;\\r\\n        } else if (curDecimals < newDecimals) {\\r\\n            return amount * (10 ** (newDecimals - curDecimals));\\r\\n        } else {\\r\\n            return amount / (10 ** (curDecimals - newDecimals));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, \\\"ETH transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function getChainID() internal view returns (uint256 id) {\\r\\n        assembly {\\r\\n            id := chainid()\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bytesToAddress(bytes memory bys) internal pure returns (address addr) {\\r\\n        assembly {\\r\\n            addr := mload(add(bys, 20))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTokenAddress(Const.TokenID _tokenId) internal view returns (address) {\\r\\n        uint chainId = getChainID();\\r\\n        if (chainId == AuroraConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AuroraConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AuroraConstant.USDT;\\r\\n        } else if (chainId == AvaxConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AvaxConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AvaxConstant.USDT;\\r\\n        } else if (chainId == BscConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return BscConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return BscConstant.USDT;\\r\\n        } else if (chainId == EthConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return EthConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return EthConstant.USDT;\\r\\n        } else if (chainId == MaticConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return MaticConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return MaticConstant.USDT;\\r\\n        }\\r\\n        return address(0);\\r\\n    }\\r\\n\\r\\n    function getTestTokenAddress(Const.TokenID _tokenId) internal view returns (address) {\\r\\n        uint chainId = getChainID();\\r\\n        if (chainId == AuroraConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AuroraConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AuroraConstantTest.USDT;\\r\\n        } else if (chainId == AvaxConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AvaxConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AvaxConstantTest.USDT;\\r\\n        } else if (chainId == BscConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return BscConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return BscConstantTest.USDT;\\r\\n        } else if (chainId == EthConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return EthConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return EthConstantTest.USDT;\\r\\n        } else if (chainId == FtmConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return FtmConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return FtmConstantTest.USDT;\\r\\n        } else if (chainId == MaticConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return MaticConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return MaticConstantTest.USDT;\\r\\n        }\\r\\n        return address(0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0f1b9bf679aa442dbda325b11ab40f935af4c3aa99787fb0c5e1ef4b3077a6ed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506136ad806100206000396000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c80638855c91a11610146578063c54e44eb116100c3578063e5e1977611610087578063e5e197761461056f578063e63cfa3b14610582578063e9e81a6a146105a9578063f2fde38b146105bc578063f851a440146105cf578063ffec4eb1146105e257600080fd5b8063c54e44eb14610513578063c89d5b8b14610526578063cc2a9a5b1461052e578063da454e6114610541578063db2e21bc1461056757600080fd5b8063aae092361161010a578063aae09236146104ac578063ac25f689146104c3578063b47c6a27146104d9578063bd244af4146104f8578063bdf1c4a11461050057600080fd5b80638855c91a146104595780638da5cb5b146104625780639b86088214610473578063a8c62e7614610486578063a9d98f591461049957600080fd5b8063486ff0cd116101df578063582712b1116101a3578063582712b1146103fa5780635c975abb1461040d5780636628f94514610418578063704b6c021461042b578063715018a61461043e5780637da0a8771461044657600080fd5b8063486ff0cd146103775780634e71d92d1461039a5780634fb02c95146103a25780634fc97cdf146103b5578063572b6c05146103c857600080fd5b806325b074f61161022657806325b074f6146102f05780632630c12f14610313578063264489ce1461033e57806333a100ca1461035157806345d207ec1461036457600080fd5b806304fe09ee14610263578063057feb991461028557806309b056f8146102b35780630d8b76a8146102bd57806319dac5af146102d0575b600080fd5b61026b6105eb565b604080519283526020830191909152015b60405180910390f35b6102a5610293366004612aff565b60d16020526000908152604090205481565b60405190815260200161027c565b6102bb610646565b005b6102bb6102cb366004612b2d565b61071a565b6102a56102de366004612b2d565b60d06020526000908152604090205481565b6102f8610785565b6040805193845260208401929092529082015260600161027c565b60cc54610326906001600160a01b031681565b6040516001600160a01b03909116815260200161027c565b6102bb61034c366004612b2d565b61081b565b6102bb61035f366004612b2d565b610885565b6102bb610372366004612b4a565b61098e565b60408051808201825260018152603160f81b6020820152905161027c9190612bab565b6102bb610a0a565b6102f86103b0366004612b2d565b610a42565b6102bb6103c3366004612b2d565b610ad3565b6103ea6103d6366004612b2d565b6000546001600160a01b0391821691161490565b604051901515815260200161027c565b6102bb610408366004612d18565b610b44565b60655460ff166103ea565b6102bb610426366004612b2d565b610bd7565b6102bb610439366004612b2d565b610c42565b6102bb610cad565b600054610326906001600160a01b031681565b6102a560ce5481565b6097546001600160a01b0316610326565b6102bb610481366004612d96565b610d02565b60cb54610326906001600160a01b031681565b6102a56104a7366004612aff565b611045565b6104b46110cf565b60405161027c93929190612e6e565b6104cb6112c3565b60405161027c929190612ea7565b6104e1611358565b6040805192835260ff90911660208301520161027c565b6102a56113da565b60d254610326906001600160a01b031681565b60c954610326906001600160a01b031681565b6102a56113fd565b6102bb61053c366004612ed5565b61147f565b61055461054f366004612b2d565b611660565b60405161027c9796959493929190612f57565b6102bb61178e565b6102bb61057d366004612d18565b611848565b61026b610590366004612aff565b60cf602052600090815260409020805460019091015482565b6102bb6105b7366004612b4a565b6118df565b6102bb6105ca366004612b2d565b611944565b60ca54610326906001600160a01b031681565b6102a560cd5481565b606554469060009060ff166106085750670de0b6b3a76400009091565b6000806106136119fb565b90925090506106228183613004565b61063483670de0b6b3a764000061301c565b61063e919061303b565b925050509091565b6097546001600160a01b0316331480610669575060ca546001600160a01b031633145b61068e5760405162461bcd60e51b81526004016106859061305d565b60405180910390fd5b60655460ff166106b05760405162461bcd60e51b81526004016106859061308a565b60cb60009054906101000a90046001600160a01b03166001600160a01b03166309b056f86040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561070057600080fd5b505af1158015610714573d6000803e3d6000fd5b50505050565b610722611b29565b6001600160a01b031661073d6097546001600160a01b031690565b6001600160a01b0316146107635760405162461bcd60e51b8152600401610685906130b8565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080600060cb60009054906101000a90046001600160a01b03166001600160a01b03166325b074f66040518163ffffffff1660e01b815260040160606040518083038186803b1580156107d857600080fd5b505afa1580156107ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081091906130ed565b925092509250909192565b60d2546001600160a01b031633146108455760405162461bcd60e51b81526004016106859061311b565b600260015414156108685760405162461bcd60e51b81526004016106859061313f565b600260015561087e81610879611b29565b611b33565b5060018055565b61088d611b29565b6001600160a01b03166108a86097546001600160a01b031690565b6001600160a01b0316146108ce5760405162461bcd60e51b8152600401610685906130b8565b60cb80546001600160a01b0319166001600160a01b0383811691821790925560c954604051636eb1769f60e11b815230600482015260248101929092529091169063dd62ed3e9060440160206040518083038186803b15801561093057600080fd5b505afa158015610944573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109689190613176565b61098b5760cb5460c95461098b916001600160a01b039182169116600019611bd7565b50565b6097546001600160a01b03163314806109b1575060ca546001600160a01b031633145b6109cd5760405162461bcd60e51b81526004016106859061305d565b600260015414156109f05760405162461bcd60e51b81526004016106859061313f565b6002600155610a0183808484611d2e565b50506001805550565b60026001541415610a2d5760405162461bcd60e51b81526004016106859061313f565b6002600155610a3c3380611b33565b60018055565b60cb54604051634fb02c9560e01b81526001600160a01b0383811660048301526000928392839290911690634fb02c959060240160606040518083038186803b158015610a8e57600080fd5b505afa158015610aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac691906130ed565b9250925092509193909250565b6097546001600160a01b0316331480610af6575060ca546001600160a01b031633145b610b125760405162461bcd60e51b81526004016106859061305d565b60026001541415610b355760405162461bcd60e51b81526004016106859061313f565b600260015561087e8180611b33565b60d2546001600160a01b03163314610b6e5760405162461bcd60e51b81526004016106859061311b565b60026001541415610b915760405162461bcd60e51b81526004016106859061313f565b600260015560655460ff1615610bb95760405162461bcd60e51b81526004016106859061318f565b610bcd84610bc5611b29565b858585612104565b5050600180555050565b610bdf611b29565b6001600160a01b0316610bfa6097546001600160a01b031690565b6001600160a01b031614610c205760405162461bcd60e51b8152600401610685906130b8565b60d280546001600160a01b0319166001600160a01b0392909216919091179055565b610c4a611b29565b6001600160a01b0316610c656097546001600160a01b031690565b6001600160a01b031614610c8b5760405162461bcd60e51b8152600401610685906130b8565b60ca80546001600160a01b0319166001600160a01b0392909216919091179055565b610cb5611b29565b6001600160a01b0316610cd06097546001600160a01b031690565b6001600160a01b031614610cf65760405162461bcd60e51b8152600401610685906130b8565b610d0060006123ff565b565b6097546001600160a01b0316331480610d25575060ca546001600160a01b031633145b610d415760405162461bcd60e51b81526004016106859061305d565b60655460ff16610d635760405162461bcd60e51b81526004016106859061308a565b815181518114610dae5760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b6044820152606401610685565b600080610db9610785565b509092509050610dc98183613004565b15610e275760405162461bcd60e51b815260206004820152602860248201527f4e65656420746f20636c61696d20656d657267656e6379207769746864726177604482015267185b08199a5c9cdd60c21b6064820152608401610685565b610e2f612451565b60c9546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610e7357600080fd5b505afa158015610e87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eab9190613176565b9050801561103d576000805b85811015610ef857868181518110610ed157610ed16131b9565b602002602001015182610ee49190613004565b915080610ef0816131cf565b915050610eb7565b5060008567ffffffffffffffff811115610f1457610f14612bde565b604051908082528060200260200182016040528015610f3d578160200160208202803683370190505b50905060005b86811015610faa578284898381518110610f5f57610f5f6131b9565b6020026020010151610f71919061301c565b610f7b919061303b565b828281518110610f8d57610f8d6131b9565b602090810291909101015280610fa2816131cf565b915050610f43565b5060cb54604051634dc3044160e11b81526001600160a01b0390911690639b86088290610fdd908b908590600401612ea7565b600060405180830381600087803b158015610ff757600080fd5b505af115801561100b573d6000803e3d6000fd5b50506040518592507fc13e24d2b0a3bacd5d1a7c514125a1e27323abf7c86f6d36597f8752bbd7eed79150600090a250505b505050505050565b600060cd546000146110c15760cd5482101561106357506000919050565b60ce5482116110c157815b60cd5481106110bf57600081815260cf602090815260409182902082518084019093528054835260010154908201819052156110ac57519392505050565b50806110b7816131ea565b91505061106e565b505b6110c96113da565b92915050565b606080606060cb60009054906101000a90046001600160a01b03166001600160a01b031663aae092366040518163ffffffff1660e01b815260040160006040518083038186803b15801561112257600080fd5b505afa158015611136573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261115e91908101906132c0565b80519193509150468167ffffffffffffffff81111561117f5761117f612bde565b6040519080825280602002602001820160405280156111a8578160200160208202803683370190505b50945060005b828110156111e657818682815181106111c9576111c96131b9565b6020908102919091010152806111de816131cf565b9150506111ae565b5060c9546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561122b57600080fd5b505afa15801561123f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112639190613176565b90506000811180156112755750600083115b156112bb5760c954611290906001600160a01b0316826124c3565b846000815181106112a3576112a36131b9565b602002602001018181516112b79190613004565b9052505b505050909192565b60608060cb60009054906101000a90046001600160a01b03166001600160a01b0316634631b2466040518163ffffffff1660e01b815260040160006040518083038186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261135091908101906132c0565b915091509091565b60cc5460c95460405163b3596f0760e01b81526001600160a01b0391821660048201526000928392169063b3596f0790602401604080518083038186803b1580156113a257600080fd5b505afa1580156113b6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611350919061332b565b60008060006113e76119fb565b90925090506113f68183613004565b9250505090565b60cb546040805163c89d5b8b60e01b815290516000926001600160a01b03169163c89d5b8b916004808301926020929190829003018186803b15801561144257600080fd5b505afa158015611456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147a9190613176565b905090565b600061148b60016125f8565b905080156114a7576000805460ff60a81b1916600160a81b1790555b6114af612698565b60ca80546001600160a01b03199081166001600160a01b038a81169190911790925560d28054821689841617905560008054821688841617905560cb8054821687841617905560cc8054821686841617905560c9805490911691841691821790556040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b15801561154657600080fd5b505afa15801561155a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157e9190613357565b60c9805460ff60a01b1916600160a01b60ff93841681029190911791829055900416600611156115f05760405162461bcd60e51b815260206004820152601760248201527f5553445420646563696d616c73206d757374203e3d20360000000000000000006044820152606401610685565b60cb5460c95461160f916001600160a01b039182169116600019611bd7565b8015611657576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b60cb5460405163da454e6160e01b81526001600160a01b038381166004830152606092839283928392839283928392169063da454e619060240160006040518083038186803b1580156116b257600080fd5b505afa1580156116c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116ee9190810190613372565b8551959b50939950919750955093509150468167ffffffffffffffff81111561171957611719612bde565b604051908082528060200260200182016040528015611742578160200160208202803683370190505b50985060005b8281101561178057818a8281518110611763576117636131b9565b602090810291909101015280611778816131cf565b915050611748565b505050919395979092949650565b6097546001600160a01b03163314806117b1575060ca546001600160a01b031633145b6117cd5760405162461bcd60e51b81526004016106859061305d565b60655460ff16156117f05760405162461bcd60e51b81526004016106859061318f565b6117f86126c9565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663db2e21bc6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561070057600080fd5b6097546001600160a01b031633148061186b575060ca546001600160a01b031633145b6118875760405162461bcd60e51b81526004016106859061305d565b600260015414156118aa5760405162461bcd60e51b81526004016106859061313f565b600260015560655460ff16156118d25760405162461bcd60e51b81526004016106859061318f565b610bcd8485858585612104565b60d2546001600160a01b031633146119095760405162461bcd60e51b81526004016106859061311b565b6002600154141561192c5760405162461bcd60e51b81526004016106859061313f565b6002600155610a018361193d611b29565b8484611d2e565b61194c611b29565b6001600160a01b03166119676097546001600160a01b031690565b6001600160a01b03161461198d5760405162461bcd60e51b8152600401610685906130b8565b6001600160a01b0381166119f25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610685565b61098b816123ff565b60c9546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a082319060240160206040518083038186803b158015611a4357600080fd5b505afa158015611a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7b9190613176565b90508015611a9c5760c954611a99906001600160a01b0316826124c3565b92505b60cb60009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b158015611aea57600080fd5b505afa158015611afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b229190613176565b9150509091565b600061147a612722565b60cb54604051630f41a04d60e11b81526001600160a01b0384811660048301526000921690631e83409a90602401602060405180830381600087803b158015611b7b57600080fd5b505af1158015611b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb39190613176565b90508015611bd25760c954611bd2906001600160a01b03168383612756565b505050565b801580611c605750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611c2657600080fd5b505afa158015611c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5e9190613176565b155b611ccb5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610685565b6040516001600160a01b038316602482015260448101829052611bd290849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612786565b60008211611d735760405162461bcd60e51b81526020600482015260126024820152710536861726550657263206d757374203e20360741b6044820152606401610685565b670de0b6b3a7640000821115611db75760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b6044820152606401610685565b600080611dc26119fb565b90925090506000611dd38284613004565b90506000670de0b6b3a7640000611dea878461301c565b611df4919061303b565b6001600160a01b038916600090815260d060205260409020549091508511611e505760405162461bcd60e51b815260206004820152600f60248201526e139bdb98d9481a5cc818995a1a5b99608a1b6044820152606401610685565b6001600160a01b038816600090815260d06020908152604080832088905587835260d19091529020819055611e858583612858565b6000848211611f285760c9546040516370a0823160e01b8152306004820152869184916001600160a01b03909116906370a082319060240160206040518083038186803b158015611ed557600080fd5b505afa158015611ee9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0d9190613176565b611f17919061301c565b611f21919061303b565b905061208c565b60655460ff166120445760cb546001600160a01b031663d38d5fc48a86611f4f8987613467565b611f6190670de0b6b3a764000061301c565b611f6b919061303b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015611fb157600080fd5b505af1158015611fc5573d6000803e3d6000fd5b505060c9546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a08231915060240160206040518083038186803b15801561200c57600080fd5b505afa158015612020573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f219190613176565b60405162461bcd60e51b815260206004820152601760248201527f526574727920616674657220616c6c20636c61696d65640000000000000000006044820152606401610685565b80156120a95760c9546120a9906001600160a01b03168983612756565b60c954604080516001600160a01b038b81168252602082018b9052928316928592908d16917f919fc3589577d8ba8023ca13d0b64eaeb6af31c331b4b81c0d42d66423603077910160405180910390a4505050505050505050565b6001600160a01b03851661214c5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081858d8dbdd5b9d608a1b6044820152606401610685565b8251825181146121975760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b6044820152606401610685565b60c9546000906121b390600690600160a01b900460ff1661347e565b6121be90600a613585565b90506000805b8381101561224857828682815181106121df576121df6131b9565b60200260200101516121f1919061301c565b868281518110612203576122036131b9565b602002602001018181525050858181518110612221576122216131b9565b6020026020010151826122349190613004565b915080612240816131cf565b9150506121c4565b506000811161228c5760405162461bcd60e51b815260206004820152601060248201526f0416d6f756e7473206d757374203e20360841b6044820152606401610685565b6001600160a01b038816600090815260d0602052604090205484116122e55760405162461bcd60e51b815260206004820152600f60248201526e139bdb98d9481a5cc818995a1a5b99608a1b6044820152606401610685565b6001600160a01b03808916600090815260d06020526040902085905560c95461230f9116826124c3565b600085815260d1602052604090205561232f8461232a6113da565b612858565b60c954612347906001600160a01b03168830846128a8565b60cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b71906123799089908990600401612ea7565b600060405180830381600087803b15801561239357600080fd5b505af11580156123a7573d6000803e3d6000fd5b505060c9546040516001600160a01b038b811682529182169350849250908b16907f364bb76a44233df8584c690de6da7810626a5e77192f3ebc942c35bcb1add24f9060200160405180910390a45050505050505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff166124735760405162461bcd60e51b81526004016106859061308a565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6124a6611b29565b6040516001600160a01b03909116815260200160405180910390a1565b60cc5460405163b3596f0760e01b81526001600160a01b038481166004830152600092839283929091169063b3596f0790602401604080518083038186803b15801561250e57600080fd5b505afa158015612522573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612546919061332b565b915091506000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561258557600080fd5b505afa158015612599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bd9190613357565b90506125ca82600a613585565b836125da878460ff1660126128e0565b6125e4919061301c565b6125ee919061303b565b9695505050505050565b60008054600160a81b900460ff1615612641578160ff16600114801561261d5750303b155b6126395760405162461bcd60e51b815260040161068590613594565b506000919050565b60005460ff808416600160a01b909204161061266f5760405162461bcd60e51b815260040161068590613594565b506000805460ff909216600160a01b0260ff60a01b19909216919091179055600190565b919050565b600054600160a81b900460ff166126c15760405162461bcd60e51b8152600401610685906135e2565b610d00612945565b60655460ff16156126ec5760405162461bcd60e51b81526004016106859061318f565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586124a6611b29565b60006018361080159061273f57506000546001600160a01b031633145b15612751575060131936013560601c90565b503390565b6040516001600160a01b038316602482015260448101829052611bd290849063a9059cbb60e01b90606401611cf7565b60006127db826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661297e9092919063ffffffff16565b805190915015611bd257808060200190518101906127f9919061362d565b611bd25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610685565b604080518082018252828152426020808301918252600086815260cf9091529290922090518155905160019091015560cd546128945760cd8290555b8160ce5410156128a45760ce8290555b5050565b6040516001600160a01b03808516602483015283166044820152606481018290526107149085906323b872dd60e01b90608401611cf7565b6000818314156128f157508261293e565b8183101561291f576129038383613467565b61290e90600a61364f565b612918908561301c565b905061293e565b6129298284613467565b61293490600a61364f565b612918908561303b565b9392505050565b600054600160a81b900460ff1661296e5760405162461bcd60e51b8152600401610685906135e2565b610d00612979611b29565b6123ff565b606061298d8484600085612995565b949350505050565b6060824710156129f65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610685565b6001600160a01b0385163b612a4d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610685565b600080866001600160a01b03168587604051612a69919061365b565b60006040518083038185875af1925050503d8060008114612aa6576040519150601f19603f3d011682016040523d82523d6000602084013e612aab565b606091505b5091509150612abb828286612ac6565b979650505050505050565b60608315612ad557508161293e565b825115612ae55782518084602001fd5b8160405162461bcd60e51b81526004016106859190612bab565b600060208284031215612b1157600080fd5b5035919050565b6001600160a01b038116811461098b57600080fd5b600060208284031215612b3f57600080fd5b813561293e81612b18565b600080600060608486031215612b5f57600080fd5b8335612b6a81612b18565b95602085013595506040909401359392505050565b60005b83811015612b9a578181015183820152602001612b82565b838111156107145750506000910152565b6020815260008251806020840152612bca816040850160208701612b7f565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612c1d57612c1d612bde565b604052919050565b600067ffffffffffffffff821115612c3f57612c3f612bde565b5060051b60200190565b600082601f830112612c5a57600080fd5b81356020612c6f612c6a83612c25565b612bf4565b82815260059290921b84018101918181019086841115612c8e57600080fd5b8286015b84811015612cb2578035612ca581612b18565b8352918301918301612c92565b509695505050505050565b600082601f830112612cce57600080fd5b81356020612cde612c6a83612c25565b82815260059290921b84018101918181019086841115612cfd57600080fd5b8286015b84811015612cb25780358352918301918301612d01565b60008060008060808587031215612d2e57600080fd5b8435612d3981612b18565b9350602085013567ffffffffffffffff80821115612d5657600080fd5b612d6288838901612c49565b94506040870135915080821115612d7857600080fd5b50612d8587828801612cbd565b949793965093946060013593505050565b60008060408385031215612da957600080fd5b823567ffffffffffffffff80821115612dc157600080fd5b612dcd86838701612c49565b93506020850135915080821115612de357600080fd5b50612df085828601612cbd565b9150509250929050565b600081518084526020808501945080840160005b83811015612e2a57815187529582019590820190600101612e0e565b509495945050505050565b600081518084526020808501945080840160005b83811015612e2a5781516001600160a01b031687529582019590820190600101612e49565b606081526000612e816060830186612dfa565b8281036020840152612e938186612e35565b905082810360408401526125ee8185612dfa565b604081526000612eba6040830185612e35565b8281036020840152612ecc8185612dfa565b95945050505050565b60008060008060008060c08789031215612eee57600080fd5b8635612ef981612b18565b95506020870135612f0981612b18565b94506040870135612f1981612b18565b93506060870135612f2981612b18565b92506080870135612f3981612b18565b915060a0870135612f4981612b18565b809150509295509295509295565b60e081526000612f6a60e083018a612dfa565b8281036020840152612f7c818a612e35565b90508281036040840152612f908189612dfa565b90508281036060840152612fa48188612dfa565b90508281036080840152612fb88187612dfa565b905082810360a0840152612fcc8186612dfa565b905082810360c0840152612fe08185612dfa565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561301757613017612fee565b500190565b600081600019048311821515161561303657613036612fee565b500290565b60008261305857634e487b7160e01b600052601260045260246000fd5b500490565b60208082526013908201527227b7363c9037bbb732b91037b91030b236b4b760691b604082015260600190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008060006060848603121561310257600080fd5b8351925060208401519150604084015190509250925092565b6020808252600a908201526913db9b1e481859d95b9d60b21b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020828403121561318857600080fd5b5051919050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156131e3576131e3612fee565b5060010190565b6000816131f9576131f9612fee565b506000190190565b600082601f83011261321257600080fd5b81516020613222612c6a83612c25565b82815260059290921b8401810191818101908684111561324157600080fd5b8286015b84811015612cb257805161325881612b18565b8352918301918301613245565b600082601f83011261327657600080fd5b81516020613286612c6a83612c25565b82815260059290921b840181019181810190868411156132a557600080fd5b8286015b84811015612cb257805183529183019183016132a9565b600080604083850312156132d357600080fd5b825167ffffffffffffffff808211156132eb57600080fd5b6132f786838701613201565b9350602085015191508082111561330d57600080fd5b50612df085828601613265565b805160ff8116811461269357600080fd5b6000806040838503121561333e57600080fd5b8251915061334e6020840161331a565b90509250929050565b60006020828403121561336957600080fd5b61293e8261331a565b60008060008060008060c0878903121561338b57600080fd5b865167ffffffffffffffff808211156133a357600080fd5b6133af8a838b01613201565b975060208901519150808211156133c557600080fd5b6133d18a838b01613265565b965060408901519150808211156133e757600080fd5b6133f38a838b01613265565b9550606089015191508082111561340957600080fd5b6134158a838b01613265565b9450608089015191508082111561342b57600080fd5b6134378a838b01613265565b935060a089015191508082111561344d57600080fd5b5061345a89828a01613265565b9150509295509295509295565b60008282101561347957613479612fee565b500390565b600060ff821660ff84168082101561349857613498612fee565b90039392505050565b600181815b808511156134dc5781600019048211156134c2576134c2612fee565b808516156134cf57918102915b93841c93908002906134a6565b509250929050565b6000826134f3575060016110c9565b81613500575060006110c9565b816001811461351657600281146135205761353c565b60019150506110c9565b60ff84111561353157613531612fee565b50506001821b6110c9565b5060208310610133831016604e8410600b841016171561355f575081810a6110c9565b61356983836134a1565b806000190482111561357d5761357d612fee565b029392505050565b600061293e60ff8416836134e4565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561363f57600080fd5b8151801515811461293e57600080fd5b600061293e83836134e4565b6000825161366d818460208701612b7f565b919091019291505056fea2646970667358221220c4def2ec2f08645a2616be53cfa4a6ddae9f4d0b9aabbb3ffd8c0f2451d9250e64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025e5760003560e01c80638855c91a11610146578063c54e44eb116100c3578063e5e1977611610087578063e5e197761461056f578063e63cfa3b14610582578063e9e81a6a146105a9578063f2fde38b146105bc578063f851a440146105cf578063ffec4eb1146105e257600080fd5b8063c54e44eb14610513578063c89d5b8b14610526578063cc2a9a5b1461052e578063da454e6114610541578063db2e21bc1461056757600080fd5b8063aae092361161010a578063aae09236146104ac578063ac25f689146104c3578063b47c6a27146104d9578063bd244af4146104f8578063bdf1c4a11461050057600080fd5b80638855c91a146104595780638da5cb5b146104625780639b86088214610473578063a8c62e7614610486578063a9d98f591461049957600080fd5b8063486ff0cd116101df578063582712b1116101a3578063582712b1146103fa5780635c975abb1461040d5780636628f94514610418578063704b6c021461042b578063715018a61461043e5780637da0a8771461044657600080fd5b8063486ff0cd146103775780634e71d92d1461039a5780634fb02c95146103a25780634fc97cdf146103b5578063572b6c05146103c857600080fd5b806325b074f61161022657806325b074f6146102f05780632630c12f14610313578063264489ce1461033e57806333a100ca1461035157806345d207ec1461036457600080fd5b806304fe09ee14610263578063057feb991461028557806309b056f8146102b35780630d8b76a8146102bd57806319dac5af146102d0575b600080fd5b61026b6105eb565b604080519283526020830191909152015b60405180910390f35b6102a5610293366004612aff565b60d16020526000908152604090205481565b60405190815260200161027c565b6102bb610646565b005b6102bb6102cb366004612b2d565b61071a565b6102a56102de366004612b2d565b60d06020526000908152604090205481565b6102f8610785565b6040805193845260208401929092529082015260600161027c565b60cc54610326906001600160a01b031681565b6040516001600160a01b03909116815260200161027c565b6102bb61034c366004612b2d565b61081b565b6102bb61035f366004612b2d565b610885565b6102bb610372366004612b4a565b61098e565b60408051808201825260018152603160f81b6020820152905161027c9190612bab565b6102bb610a0a565b6102f86103b0366004612b2d565b610a42565b6102bb6103c3366004612b2d565b610ad3565b6103ea6103d6366004612b2d565b6000546001600160a01b0391821691161490565b604051901515815260200161027c565b6102bb610408366004612d18565b610b44565b60655460ff166103ea565b6102bb610426366004612b2d565b610bd7565b6102bb610439366004612b2d565b610c42565b6102bb610cad565b600054610326906001600160a01b031681565b6102a560ce5481565b6097546001600160a01b0316610326565b6102bb610481366004612d96565b610d02565b60cb54610326906001600160a01b031681565b6102a56104a7366004612aff565b611045565b6104b46110cf565b60405161027c93929190612e6e565b6104cb6112c3565b60405161027c929190612ea7565b6104e1611358565b6040805192835260ff90911660208301520161027c565b6102a56113da565b60d254610326906001600160a01b031681565b60c954610326906001600160a01b031681565b6102a56113fd565b6102bb61053c366004612ed5565b61147f565b61055461054f366004612b2d565b611660565b60405161027c9796959493929190612f57565b6102bb61178e565b6102bb61057d366004612d18565b611848565b61026b610590366004612aff565b60cf602052600090815260409020805460019091015482565b6102bb6105b7366004612b4a565b6118df565b6102bb6105ca366004612b2d565b611944565b60ca54610326906001600160a01b031681565b6102a560cd5481565b606554469060009060ff166106085750670de0b6b3a76400009091565b6000806106136119fb565b90925090506106228183613004565b61063483670de0b6b3a764000061301c565b61063e919061303b565b925050509091565b6097546001600160a01b0316331480610669575060ca546001600160a01b031633145b61068e5760405162461bcd60e51b81526004016106859061305d565b60405180910390fd5b60655460ff166106b05760405162461bcd60e51b81526004016106859061308a565b60cb60009054906101000a90046001600160a01b03166001600160a01b03166309b056f86040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561070057600080fd5b505af1158015610714573d6000803e3d6000fd5b50505050565b610722611b29565b6001600160a01b031661073d6097546001600160a01b031690565b6001600160a01b0316146107635760405162461bcd60e51b8152600401610685906130b8565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080600060cb60009054906101000a90046001600160a01b03166001600160a01b03166325b074f66040518163ffffffff1660e01b815260040160606040518083038186803b1580156107d857600080fd5b505afa1580156107ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081091906130ed565b925092509250909192565b60d2546001600160a01b031633146108455760405162461bcd60e51b81526004016106859061311b565b600260015414156108685760405162461bcd60e51b81526004016106859061313f565b600260015561087e81610879611b29565b611b33565b5060018055565b61088d611b29565b6001600160a01b03166108a86097546001600160a01b031690565b6001600160a01b0316146108ce5760405162461bcd60e51b8152600401610685906130b8565b60cb80546001600160a01b0319166001600160a01b0383811691821790925560c954604051636eb1769f60e11b815230600482015260248101929092529091169063dd62ed3e9060440160206040518083038186803b15801561093057600080fd5b505afa158015610944573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109689190613176565b61098b5760cb5460c95461098b916001600160a01b039182169116600019611bd7565b50565b6097546001600160a01b03163314806109b1575060ca546001600160a01b031633145b6109cd5760405162461bcd60e51b81526004016106859061305d565b600260015414156109f05760405162461bcd60e51b81526004016106859061313f565b6002600155610a0183808484611d2e565b50506001805550565b60026001541415610a2d5760405162461bcd60e51b81526004016106859061313f565b6002600155610a3c3380611b33565b60018055565b60cb54604051634fb02c9560e01b81526001600160a01b0383811660048301526000928392839290911690634fb02c959060240160606040518083038186803b158015610a8e57600080fd5b505afa158015610aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac691906130ed565b9250925092509193909250565b6097546001600160a01b0316331480610af6575060ca546001600160a01b031633145b610b125760405162461bcd60e51b81526004016106859061305d565b60026001541415610b355760405162461bcd60e51b81526004016106859061313f565b600260015561087e8180611b33565b60d2546001600160a01b03163314610b6e5760405162461bcd60e51b81526004016106859061311b565b60026001541415610b915760405162461bcd60e51b81526004016106859061313f565b600260015560655460ff1615610bb95760405162461bcd60e51b81526004016106859061318f565b610bcd84610bc5611b29565b858585612104565b5050600180555050565b610bdf611b29565b6001600160a01b0316610bfa6097546001600160a01b031690565b6001600160a01b031614610c205760405162461bcd60e51b8152600401610685906130b8565b60d280546001600160a01b0319166001600160a01b0392909216919091179055565b610c4a611b29565b6001600160a01b0316610c656097546001600160a01b031690565b6001600160a01b031614610c8b5760405162461bcd60e51b8152600401610685906130b8565b60ca80546001600160a01b0319166001600160a01b0392909216919091179055565b610cb5611b29565b6001600160a01b0316610cd06097546001600160a01b031690565b6001600160a01b031614610cf65760405162461bcd60e51b8152600401610685906130b8565b610d0060006123ff565b565b6097546001600160a01b0316331480610d25575060ca546001600160a01b031633145b610d415760405162461bcd60e51b81526004016106859061305d565b60655460ff16610d635760405162461bcd60e51b81526004016106859061308a565b815181518114610dae5760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b6044820152606401610685565b600080610db9610785565b509092509050610dc98183613004565b15610e275760405162461bcd60e51b815260206004820152602860248201527f4e65656420746f20636c61696d20656d657267656e6379207769746864726177604482015267185b08199a5c9cdd60c21b6064820152608401610685565b610e2f612451565b60c9546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610e7357600080fd5b505afa158015610e87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eab9190613176565b9050801561103d576000805b85811015610ef857868181518110610ed157610ed16131b9565b602002602001015182610ee49190613004565b915080610ef0816131cf565b915050610eb7565b5060008567ffffffffffffffff811115610f1457610f14612bde565b604051908082528060200260200182016040528015610f3d578160200160208202803683370190505b50905060005b86811015610faa578284898381518110610f5f57610f5f6131b9565b6020026020010151610f71919061301c565b610f7b919061303b565b828281518110610f8d57610f8d6131b9565b602090810291909101015280610fa2816131cf565b915050610f43565b5060cb54604051634dc3044160e11b81526001600160a01b0390911690639b86088290610fdd908b908590600401612ea7565b600060405180830381600087803b158015610ff757600080fd5b505af115801561100b573d6000803e3d6000fd5b50506040518592507fc13e24d2b0a3bacd5d1a7c514125a1e27323abf7c86f6d36597f8752bbd7eed79150600090a250505b505050505050565b600060cd546000146110c15760cd5482101561106357506000919050565b60ce5482116110c157815b60cd5481106110bf57600081815260cf602090815260409182902082518084019093528054835260010154908201819052156110ac57519392505050565b50806110b7816131ea565b91505061106e565b505b6110c96113da565b92915050565b606080606060cb60009054906101000a90046001600160a01b03166001600160a01b031663aae092366040518163ffffffff1660e01b815260040160006040518083038186803b15801561112257600080fd5b505afa158015611136573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261115e91908101906132c0565b80519193509150468167ffffffffffffffff81111561117f5761117f612bde565b6040519080825280602002602001820160405280156111a8578160200160208202803683370190505b50945060005b828110156111e657818682815181106111c9576111c96131b9565b6020908102919091010152806111de816131cf565b9150506111ae565b5060c9546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561122b57600080fd5b505afa15801561123f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112639190613176565b90506000811180156112755750600083115b156112bb5760c954611290906001600160a01b0316826124c3565b846000815181106112a3576112a36131b9565b602002602001018181516112b79190613004565b9052505b505050909192565b60608060cb60009054906101000a90046001600160a01b03166001600160a01b0316634631b2466040518163ffffffff1660e01b815260040160006040518083038186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261135091908101906132c0565b915091509091565b60cc5460c95460405163b3596f0760e01b81526001600160a01b0391821660048201526000928392169063b3596f0790602401604080518083038186803b1580156113a257600080fd5b505afa1580156113b6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611350919061332b565b60008060006113e76119fb565b90925090506113f68183613004565b9250505090565b60cb546040805163c89d5b8b60e01b815290516000926001600160a01b03169163c89d5b8b916004808301926020929190829003018186803b15801561144257600080fd5b505afa158015611456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147a9190613176565b905090565b600061148b60016125f8565b905080156114a7576000805460ff60a81b1916600160a81b1790555b6114af612698565b60ca80546001600160a01b03199081166001600160a01b038a81169190911790925560d28054821689841617905560008054821688841617905560cb8054821687841617905560cc8054821686841617905560c9805490911691841691821790556040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b15801561154657600080fd5b505afa15801561155a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157e9190613357565b60c9805460ff60a01b1916600160a01b60ff93841681029190911791829055900416600611156115f05760405162461bcd60e51b815260206004820152601760248201527f5553445420646563696d616c73206d757374203e3d20360000000000000000006044820152606401610685565b60cb5460c95461160f916001600160a01b039182169116600019611bd7565b8015611657576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b60cb5460405163da454e6160e01b81526001600160a01b038381166004830152606092839283928392839283928392169063da454e619060240160006040518083038186803b1580156116b257600080fd5b505afa1580156116c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116ee9190810190613372565b8551959b50939950919750955093509150468167ffffffffffffffff81111561171957611719612bde565b604051908082528060200260200182016040528015611742578160200160208202803683370190505b50985060005b8281101561178057818a8281518110611763576117636131b9565b602090810291909101015280611778816131cf565b915050611748565b505050919395979092949650565b6097546001600160a01b03163314806117b1575060ca546001600160a01b031633145b6117cd5760405162461bcd60e51b81526004016106859061305d565b60655460ff16156117f05760405162461bcd60e51b81526004016106859061318f565b6117f86126c9565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663db2e21bc6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561070057600080fd5b6097546001600160a01b031633148061186b575060ca546001600160a01b031633145b6118875760405162461bcd60e51b81526004016106859061305d565b600260015414156118aa5760405162461bcd60e51b81526004016106859061313f565b600260015560655460ff16156118d25760405162461bcd60e51b81526004016106859061318f565b610bcd8485858585612104565b60d2546001600160a01b031633146119095760405162461bcd60e51b81526004016106859061311b565b6002600154141561192c5760405162461bcd60e51b81526004016106859061313f565b6002600155610a018361193d611b29565b8484611d2e565b61194c611b29565b6001600160a01b03166119676097546001600160a01b031690565b6001600160a01b03161461198d5760405162461bcd60e51b8152600401610685906130b8565b6001600160a01b0381166119f25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610685565b61098b816123ff565b60c9546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a082319060240160206040518083038186803b158015611a4357600080fd5b505afa158015611a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7b9190613176565b90508015611a9c5760c954611a99906001600160a01b0316826124c3565b92505b60cb60009054906101000a90046001600160a01b03166001600160a01b031663bd244af46040518163ffffffff1660e01b815260040160206040518083038186803b158015611aea57600080fd5b505afa158015611afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b229190613176565b9150509091565b600061147a612722565b60cb54604051630f41a04d60e11b81526001600160a01b0384811660048301526000921690631e83409a90602401602060405180830381600087803b158015611b7b57600080fd5b505af1158015611b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb39190613176565b90508015611bd25760c954611bd2906001600160a01b03168383612756565b505050565b801580611c605750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611c2657600080fd5b505afa158015611c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5e9190613176565b155b611ccb5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610685565b6040516001600160a01b038316602482015260448101829052611bd290849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612786565b60008211611d735760405162461bcd60e51b81526020600482015260126024820152710536861726550657263206d757374203e20360741b6044820152606401610685565b670de0b6b3a7640000821115611db75760405162461bcd60e51b81526020600482015260096024820152684f766572203130302560b81b6044820152606401610685565b600080611dc26119fb565b90925090506000611dd38284613004565b90506000670de0b6b3a7640000611dea878461301c565b611df4919061303b565b6001600160a01b038916600090815260d060205260409020549091508511611e505760405162461bcd60e51b815260206004820152600f60248201526e139bdb98d9481a5cc818995a1a5b99608a1b6044820152606401610685565b6001600160a01b038816600090815260d06020908152604080832088905587835260d19091529020819055611e858583612858565b6000848211611f285760c9546040516370a0823160e01b8152306004820152869184916001600160a01b03909116906370a082319060240160206040518083038186803b158015611ed557600080fd5b505afa158015611ee9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0d9190613176565b611f17919061301c565b611f21919061303b565b905061208c565b60655460ff166120445760cb546001600160a01b031663d38d5fc48a86611f4f8987613467565b611f6190670de0b6b3a764000061301c565b611f6b919061303b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015611fb157600080fd5b505af1158015611fc5573d6000803e3d6000fd5b505060c9546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a08231915060240160206040518083038186803b15801561200c57600080fd5b505afa158015612020573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f219190613176565b60405162461bcd60e51b815260206004820152601760248201527f526574727920616674657220616c6c20636c61696d65640000000000000000006044820152606401610685565b80156120a95760c9546120a9906001600160a01b03168983612756565b60c954604080516001600160a01b038b81168252602082018b9052928316928592908d16917f919fc3589577d8ba8023ca13d0b64eaeb6af31c331b4b81c0d42d66423603077910160405180910390a4505050505050505050565b6001600160a01b03851661214c5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081858d8dbdd5b9d608a1b6044820152606401610685565b8251825181146121975760405162461bcd60e51b815260206004820152601660248201527509cdee840dac2e8c6d040c2e4e4c2f240d8cadccee8d60531b6044820152606401610685565b60c9546000906121b390600690600160a01b900460ff1661347e565b6121be90600a613585565b90506000805b8381101561224857828682815181106121df576121df6131b9565b60200260200101516121f1919061301c565b868281518110612203576122036131b9565b602002602001018181525050858181518110612221576122216131b9565b6020026020010151826122349190613004565b915080612240816131cf565b9150506121c4565b506000811161228c5760405162461bcd60e51b815260206004820152601060248201526f0416d6f756e7473206d757374203e20360841b6044820152606401610685565b6001600160a01b038816600090815260d0602052604090205484116122e55760405162461bcd60e51b815260206004820152600f60248201526e139bdb98d9481a5cc818995a1a5b99608a1b6044820152606401610685565b6001600160a01b03808916600090815260d06020526040902085905560c95461230f9116826124c3565b600085815260d1602052604090205561232f8461232a6113da565b612858565b60c954612347906001600160a01b03168830846128a8565b60cb546040516326b89b7160e01b81526001600160a01b03909116906326b89b71906123799089908990600401612ea7565b600060405180830381600087803b15801561239357600080fd5b505af11580156123a7573d6000803e3d6000fd5b505060c9546040516001600160a01b038b811682529182169350849250908b16907f364bb76a44233df8584c690de6da7810626a5e77192f3ebc942c35bcb1add24f9060200160405180910390a45050505050505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff166124735760405162461bcd60e51b81526004016106859061308a565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6124a6611b29565b6040516001600160a01b03909116815260200160405180910390a1565b60cc5460405163b3596f0760e01b81526001600160a01b038481166004830152600092839283929091169063b3596f0790602401604080518083038186803b15801561250e57600080fd5b505afa158015612522573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612546919061332b565b915091506000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561258557600080fd5b505afa158015612599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bd9190613357565b90506125ca82600a613585565b836125da878460ff1660126128e0565b6125e4919061301c565b6125ee919061303b565b9695505050505050565b60008054600160a81b900460ff1615612641578160ff16600114801561261d5750303b155b6126395760405162461bcd60e51b815260040161068590613594565b506000919050565b60005460ff808416600160a01b909204161061266f5760405162461bcd60e51b815260040161068590613594565b506000805460ff909216600160a01b0260ff60a01b19909216919091179055600190565b919050565b600054600160a81b900460ff166126c15760405162461bcd60e51b8152600401610685906135e2565b610d00612945565b60655460ff16156126ec5760405162461bcd60e51b81526004016106859061318f565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586124a6611b29565b60006018361080159061273f57506000546001600160a01b031633145b15612751575060131936013560601c90565b503390565b6040516001600160a01b038316602482015260448101829052611bd290849063a9059cbb60e01b90606401611cf7565b60006127db826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661297e9092919063ffffffff16565b805190915015611bd257808060200190518101906127f9919061362d565b611bd25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610685565b604080518082018252828152426020808301918252600086815260cf9091529290922090518155905160019091015560cd546128945760cd8290555b8160ce5410156128a45760ce8290555b5050565b6040516001600160a01b03808516602483015283166044820152606481018290526107149085906323b872dd60e01b90608401611cf7565b6000818314156128f157508261293e565b8183101561291f576129038383613467565b61290e90600a61364f565b612918908561301c565b905061293e565b6129298284613467565b61293490600a61364f565b612918908561303b565b9392505050565b600054600160a81b900460ff1661296e5760405162461bcd60e51b8152600401610685906135e2565b610d00612979611b29565b6123ff565b606061298d8484600085612995565b949350505050565b6060824710156129f65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610685565b6001600160a01b0385163b612a4d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610685565b600080866001600160a01b03168587604051612a69919061365b565b60006040518083038185875af1925050503d8060008114612aa6576040519150601f19603f3d011682016040523d82523d6000602084013e612aab565b606091505b5091509150612abb828286612ac6565b979650505050505050565b60608315612ad557508161293e565b825115612ae55782518084602001fd5b8160405162461bcd60e51b81526004016106859190612bab565b600060208284031215612b1157600080fd5b5035919050565b6001600160a01b038116811461098b57600080fd5b600060208284031215612b3f57600080fd5b813561293e81612b18565b600080600060608486031215612b5f57600080fd5b8335612b6a81612b18565b95602085013595506040909401359392505050565b60005b83811015612b9a578181015183820152602001612b82565b838111156107145750506000910152565b6020815260008251806020840152612bca816040850160208701612b7f565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612c1d57612c1d612bde565b604052919050565b600067ffffffffffffffff821115612c3f57612c3f612bde565b5060051b60200190565b600082601f830112612c5a57600080fd5b81356020612c6f612c6a83612c25565b612bf4565b82815260059290921b84018101918181019086841115612c8e57600080fd5b8286015b84811015612cb2578035612ca581612b18565b8352918301918301612c92565b509695505050505050565b600082601f830112612cce57600080fd5b81356020612cde612c6a83612c25565b82815260059290921b84018101918181019086841115612cfd57600080fd5b8286015b84811015612cb25780358352918301918301612d01565b60008060008060808587031215612d2e57600080fd5b8435612d3981612b18565b9350602085013567ffffffffffffffff80821115612d5657600080fd5b612d6288838901612c49565b94506040870135915080821115612d7857600080fd5b50612d8587828801612cbd565b949793965093946060013593505050565b60008060408385031215612da957600080fd5b823567ffffffffffffffff80821115612dc157600080fd5b612dcd86838701612c49565b93506020850135915080821115612de357600080fd5b50612df085828601612cbd565b9150509250929050565b600081518084526020808501945080840160005b83811015612e2a57815187529582019590820190600101612e0e565b509495945050505050565b600081518084526020808501945080840160005b83811015612e2a5781516001600160a01b031687529582019590820190600101612e49565b606081526000612e816060830186612dfa565b8281036020840152612e938186612e35565b905082810360408401526125ee8185612dfa565b604081526000612eba6040830185612e35565b8281036020840152612ecc8185612dfa565b95945050505050565b60008060008060008060c08789031215612eee57600080fd5b8635612ef981612b18565b95506020870135612f0981612b18565b94506040870135612f1981612b18565b93506060870135612f2981612b18565b92506080870135612f3981612b18565b915060a0870135612f4981612b18565b809150509295509295509295565b60e081526000612f6a60e083018a612dfa565b8281036020840152612f7c818a612e35565b90508281036040840152612f908189612dfa565b90508281036060840152612fa48188612dfa565b90508281036080840152612fb88187612dfa565b905082810360a0840152612fcc8186612dfa565b905082810360c0840152612fe08185612dfa565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561301757613017612fee565b500190565b600081600019048311821515161561303657613036612fee565b500290565b60008261305857634e487b7160e01b600052601260045260246000fd5b500490565b60208082526013908201527227b7363c9037bbb732b91037b91030b236b4b760691b604082015260600190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008060006060848603121561310257600080fd5b8351925060208401519150604084015190509250925092565b6020808252600a908201526913db9b1e481859d95b9d60b21b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020828403121561318857600080fd5b5051919050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156131e3576131e3612fee565b5060010190565b6000816131f9576131f9612fee565b506000190190565b600082601f83011261321257600080fd5b81516020613222612c6a83612c25565b82815260059290921b8401810191818101908684111561324157600080fd5b8286015b84811015612cb257805161325881612b18565b8352918301918301613245565b600082601f83011261327657600080fd5b81516020613286612c6a83612c25565b82815260059290921b840181019181810190868411156132a557600080fd5b8286015b84811015612cb257805183529183019183016132a9565b600080604083850312156132d357600080fd5b825167ffffffffffffffff808211156132eb57600080fd5b6132f786838701613201565b9350602085015191508082111561330d57600080fd5b50612df085828601613265565b805160ff8116811461269357600080fd5b6000806040838503121561333e57600080fd5b8251915061334e6020840161331a565b90509250929050565b60006020828403121561336957600080fd5b61293e8261331a565b60008060008060008060c0878903121561338b57600080fd5b865167ffffffffffffffff808211156133a357600080fd5b6133af8a838b01613201565b975060208901519150808211156133c557600080fd5b6133d18a838b01613265565b965060408901519150808211156133e757600080fd5b6133f38a838b01613265565b9550606089015191508082111561340957600080fd5b6134158a838b01613265565b9450608089015191508082111561342b57600080fd5b6134378a838b01613265565b935060a089015191508082111561344d57600080fd5b5061345a89828a01613265565b9150509295509295509295565b60008282101561347957613479612fee565b500390565b600060ff821660ff84168082101561349857613498612fee565b90039392505050565b600181815b808511156134dc5781600019048211156134c2576134c2612fee565b808516156134cf57918102915b93841c93908002906134a6565b509250929050565b6000826134f3575060016110c9565b81613500575060006110c9565b816001811461351657600281146135205761353c565b60019150506110c9565b60ff84111561353157613531612fee565b50506001821b6110c9565b5060208310610133831016604e8410600b841016171561355f575081810a6110c9565b61356983836134a1565b806000190482111561357d5761357d612fee565b029392505050565b600061293e60ff8416836134e4565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561363f57600080fd5b8151801515811461293e57600080fd5b600061293e83836134e4565b6000825161366d818460208701612b7f565b919091019291505056fea2646970667358221220c4def2ec2f08645a2616be53cfa4a6ddae9f4d0b9aabbb3ffd8c0f2451d9250e64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositByAdmin(address,address[],uint256[],uint256)": {
        "params": {
          "_USDT6Amts": "amounts of USDT should be deposited to each pools. It's 6 decimals"
        }
      },
      "getUSDTPriceInUSD()": {
        "returns": {
          "_0": "the price of USDT in USD."
        }
      },
      "getWithdrawableSharePerc()": {
        "returns": {
          "chainID": "is the ID of the current chain",
          "sharePerc": "is percentage of the value in the vault of the total value. It's useful for calculating the withdrawable share under emergency status."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawPercByAdmin(address,uint256,uint256)": {
        "params": {
          "_sharePerc": "percentage of assets which should be withdrawn. It's 18 decimals"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositByAdmin(address,address[],uint256[],uint256)": {
        "notice": "The length of array is based on token count. And the lengths should be same on the arraies."
      },
      "isTrustedForwarder(address)": {
        "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 70220,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 713,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 716,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 973,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1017,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3292,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 869,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 958,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 593,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 705,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 47470,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "USDT",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IERC20UpgradeableExt)69635"
      },
      {
        "astId": 47472,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "usdtDecimals",
        "offset": 20,
        "slot": "201",
        "type": "t_uint8"
      },
      {
        "astId": 47474,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "admin",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 47477,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "strategy",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IStrategy)47448"
      },
      {
        "astId": 47480,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "priceOracle",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(IPriceOracle)12144"
      },
      {
        "astId": 47482,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "firstOperationNonce",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 47484,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "lastOperationNonce",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 47489,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "poolAtNonce",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_uint256,t_struct(PoolSnapshot)47467_storage)"
      },
      {
        "astId": 47493,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "userLastOperationNonce",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 47497,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "operationAmounts",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 47499,
        "contract": "contracts/sti/STIVault.sol:STIVault",
        "label": "userAgent",
        "offset": 0,
        "slot": "210",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20UpgradeableExt)69635": {
        "encoding": "inplace",
        "label": "contract IERC20UpgradeableExt",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)12144": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IStrategy)47448": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(PoolSnapshot)47467_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct STIVault.PoolSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolSnapshot)47467_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PoolSnapshot)47467_storage": {
        "encoding": "inplace",
        "label": "struct STIVault.PoolSnapshot",
        "members": [
          {
            "astId": 47464,
            "contract": "contracts/sti/STIVault.sol:STIVault",
            "label": "poolInUSD",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 47466,
            "contract": "contracts/sti/STIVault.sol:STIVault",
            "label": "ts",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}