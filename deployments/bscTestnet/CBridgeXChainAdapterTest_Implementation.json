{
  "address": "0x4F771Abf158a39A02a81E202e3C7beBf3e808FE2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "messageBus",
          "type": "address"
        }
      ],
      "name": "MessageBusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Receive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Refund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLIENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_targetContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_targetCallValue",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_targetCallData",
          "type": "bytes"
        }
      ],
      "name": "calcCallFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calcTransferFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_targetContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_targetCallValue",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_targetCallData",
          "type": "bytes"
        }
      ],
      "name": "call",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_sender",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "executeMessage",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "executeMessage",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransfer",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransferFallback",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransferRefund",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fallbacks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fromChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "handled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        }
      ],
      "name": "initialize1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSlippage",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageBus",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_maxSlippage",
          "type": "uint32"
        }
      ],
      "name": "setMaxSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        }
      ],
      "name": "setMessageBus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_chainIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_peers",
          "type": "address[]"
        }
      ],
      "name": "setPeers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_toChainIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_toAddresses",
          "type": "address[]"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfers",
      "outputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "enum CBridgeXChainAdapter.TransferStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb845e2854997f0c8d5caba94aba2f41efd8663173ff542aadf8d9fb3b71dc474",
  "receipt": {
    "to": null,
    "from": "0xd91Fbc9b431464D737E1BC4e76900D43405a639b",
    "contractAddress": "0x4F771Abf158a39A02a81E202e3C7beBf3e808FE2",
    "transactionIndex": 30,
    "gasUsed": "3229488",
    "logsBloom": "0x
    "blockHash": "0x48190dd4db6ebeb2a2d0f7fd7d28a055c3818ad0216a5a256f0c37f76ae1d539",
    "transactionHash": "0xb845e2854997f0c8d5caba94aba2f41efd8663173ff542aadf8d9fb3b71dc474",
    "logs": [],
    "blockNumber": 22430429,
    "cumulativeGasUsed": "6200262",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d804abab90110ec1311aab4f18ffccdd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messageBus\",\"type\":\"address\"}],\"name\":\"MessageBusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Receive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLIENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_targetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetCallValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_targetCallData\",\"type\":\"bytes\"}],\"name\":\"calcCallFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_targetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetCallValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_targetCallData\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_sender\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransfer\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransferFallback\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransferRefund\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fallbacks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"handled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"name\":\"initialize1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSlippage\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_maxSlippage\",\"type\":\"uint32\"}],\"name\":\"setMaxSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"name\":\"setMessageBus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_peers\",\"type\":\"address[]\"}],\"name\":\"setPeers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_toChainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_toAddresses\",\"type\":\"address[]\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"enum CBridgeXChainAdapter.TransferStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)\":{\"notice\":\"This functions won't be called because executeMessageWithTransfer always returns Success.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol\":\"CBridgeXChainAdapterTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1976ce0aadaa551a0fecab9930a7f4956252fa40594c8d165f682020f0e826c0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/bni/constant/AuroraConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AuroraConstant {\\n    uint internal constant CHAINID = 1313161554;\\n\\n    address internal constant BSTN = 0x9f1F933C660a1DC856F0E0Fe058435879c5CCEf0;\\n    address internal constant META = 0xc21Ff01229e982d7c8b8691163B0A3Cb8F357453;\\n    address internal constant stNEAR = 0x07F9F7f963C5cD2BBFFd30CcfB964Be114332E30;\\n    address internal constant USDC = 0xB12BFcA5A55806AaF64E99521918A4bf0fC40802;\\n    address internal constant USDT = 0x4988a896b1227218e4A686fdE5EabdcAbd91571f;\\n    address internal constant WETH = 0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB;\\n    address internal constant WNEAR = 0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d;\\n}\\n\",\"keccak256\":\"0xb4c50615e5b8672de4e3918c881272987794a28f3cc00f680f04bdfddc21dba8\",\"license\":\"MIT\"},\"contracts/bni/constant/AuroraConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AuroraConstantTest {\\n    uint internal constant CHAINID = 1313161555;\\n\\n    address internal constant BSTN = 0x9f1F933C660a1DC856F0E0Fe058435879c5CCEf0; // Should be replaced with testnet address\\n    address internal constant META = 0xc21Ff01229e982d7c8b8691163B0A3Cb8F357453; // Should be replaced with testnet address\\n    address internal constant stNEAR = 0x2137df2e54abd6bF1c1a8c1739f2EA6A8C15F144;\\n    address internal constant USDC = 0xCcECA5C4A3355F8e7a0B7d2a7251eec012Be7c58;\\n    address internal constant USDT = 0xF9C249974c1Acf96a59e5757Cc9ba7035cE489B1;\\n    address internal constant WETH = 0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB; // Should be replaced with testnet address\\n    address internal constant WNEAR = 0x4861825E75ab14553E5aF711EbbE6873d369d146;\\n}\\n\",\"keccak256\":\"0x2c142ce864cd38aa02fa7e50f069b88c73a06d913be71355858f34396c30c048\",\"license\":\"MIT\"},\"contracts/bni/constant/AvaxConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AvaxConstant {\\n    uint internal constant CHAINID = 43114;\\n\\n    address internal constant USDC = 0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664;\\n    address internal constant USDT = 0xc7198437980c041c805A1EDcbA50c1Ce5db95118;\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    address internal constant aAVAXb = 0x6C6f910A79639dcC94b4feEF59Ff507c2E843929;\\n}\\n\",\"keccak256\":\"0x53216c58dd6d77a9fa18b7ea121a2a8aa8c3ae6577577e8c332747bd0d74fde2\",\"license\":\"MIT\"},\"contracts/bni/constant/AvaxConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary AvaxConstantTest {\\n    uint internal constant CHAINID = 43113;\\n\\n    address internal constant USDC = 0x7aCdaba7Ee51c1c3F7C6D605CC26b1c9aAB0495A;\\n    address internal constant USDT = 0x78ae2880bd1672b49a33cF796CF53FE6db0aB01D;\\n    address internal constant WAVAX = 0xd00ae08403B9bbb9124bB305C09058E32C39A48c;\\n\\n    address internal constant aAVAXb = 0xBd97c29aa3E83C523C9714edCA8DB8881841a593;\\n}\\n\",\"keccak256\":\"0x11c2007f9c851ef591ac5f7d8b2540bfbcde5091044f5bc2a02645fc13230c3e\",\"license\":\"MIT\"},\"contracts/bni/constant/BscConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary BscConstant {\\n    uint internal constant CHAINID = 56;\\n\\n    address internal constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address internal constant CAKE = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82;\\n    address internal constant USDC = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\\n    address internal constant USDT = 0x55d398326f99059fF775485246999027B3197955;\\n    address internal constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    address internal constant aBNBb = 0xBb1Aa6e59E5163D8722a122cd66EBA614b59df0d;\\n}\\n\",\"keccak256\":\"0xd0c4c785ade0a75733c82781329443ec20ba40754d99575689064ac9e7196adf\",\"license\":\"MIT\"},\"contracts/bni/constant/BscConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary BscConstantTest {\\n    uint internal constant CHAINID = 97;\\n\\n    address internal constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // Should be replaced with testnet address\\n    address internal constant CAKE = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82; // Should be replaced with testnet address\\n    address internal constant USDC = 0xda14d11D2C7d79F167b6057DE3D9cc25C2c488d5;\\n    address internal constant USDT = 0x1F326a8CA5399418a76eA0efa0403Cbb00790C67;\\n    address internal constant WBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd;\\n\\n    address internal constant aBNBb = 0xaB56897fE4e9f0757e02B54C27E81B9ddd6A30AE;\\n}\\n\",\"keccak256\":\"0x9ca5b6fb202a1748ffa97c55a155bd7e1fd5bb4bde9fb276bb0a5c42d2539e0b\",\"license\":\"MIT\"},\"contracts/bni/constant/EthConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary EthConstant {\\n    uint internal constant CHAINID = 1;\\n\\n    address internal constant MATIC = 0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0;\\n    address internal constant stETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\n    address internal constant stMATIC = 0x9ee91F9f426fA633d227f7a9b000E28b9dfd8599;\\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n}\\n\",\"keccak256\":\"0x7d278bbafd2c0dae080f4aea2c853ec12ea88f767de21cdaa1ddd4be393143e1\",\"license\":\"MIT\"},\"contracts/bni/constant/EthConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary EthConstantTest {\\n    uint internal constant CHAINID = 4;\\n\\n    address internal constant MATIC = 0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0; // Should be replaced with testnet address\\n    address internal constant stETH = 0xF4242f9d78DB7218Ad72Ee3aE14469DBDE8731eD;\\n    address internal constant stMATIC = 0x9ee91F9f426fA633d227f7a9b000E28b9dfd8599; // Should be replaced with testnet address\\n    address internal constant USDC = 0xDf5324ebe6F6b852Ff5cBf73627eE137e9075276;\\n    address internal constant USDT = 0x21e48034753E490ff04f2f75f7CAEdF081B320d5;\\n    address internal constant WETH = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\\n}\\n\",\"keccak256\":\"0x2711954dbd697694829429f6b66d704bb80b214e8f5077f8c79554c2af901a38\",\"license\":\"MIT\"},\"contracts/bni/constant/MaticConstant.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary MaticConstant {\\n    uint internal constant CHAINID = 137;\\n\\n    address internal constant USDC = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n    address internal constant USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\\n    address internal constant WMATIC = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\\n}\\n\",\"keccak256\":\"0x0503964316f40535769a8e59b212628df2799c1bbde38dae6f0fce5f250f0ba2\",\"license\":\"MIT\"},\"contracts/bni/constant/MaticConstantTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nlibrary MaticConstantTest {\\n    uint internal constant CHAINID = 80001;\\n\\n    address internal constant USDC = 0x6600BeC324CCDd12c70297311AEfB37fafB1D689;\\n    address internal constant USDT = 0x7e4C234B1d634DB790592d1550816b19E862F744;\\n    address internal constant WMATIC = 0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889;\\n}\\n\",\"keccak256\":\"0x454ef5183082f4cbadd6166b4b5f56ad6b1b3406c0c39132e12177229cb66b48\",\"license\":\"MIT\"},\"contracts/xchain/BasicXChainAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../../libs/Const.sol\\\";\\nimport \\\"./IXChainAdapter.sol\\\";\\n\\ncontract BasicXChainAdapter is IXChainAdapter,\\n    AccessControlEnumerableUpgradeable,\\n    OwnableUpgradeable\\n{\\n    bytes32 public constant CLIENT_ROLE = keccak256(\\\"CLIENT_ROLE\\\");\\n\\n    // Map of message peers (chainId => peer). Because anyone can send messages, it needs to verify the sender.\\n    mapping(uint => address) public peers;\\n\\n    function initialize() public virtual initializer {\\n        __Ownable_init_unchained();\\n        _setupRole(DEFAULT_ADMIN_ROLE, owner());\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _revokeRole(DEFAULT_ADMIN_ROLE, owner());\\n        super.transferOwnership(newOwner);\\n        _setupRole(DEFAULT_ADMIN_ROLE, newOwner);\\n    }\\n\\n    function setPeers(uint[] memory _chainIds, address[] memory _peers) external onlyOwner {\\n        uint length = _chainIds.length;\\n        for (uint i = 0; i < length; i++) {\\n            uint chainId = _chainIds[i];\\n            require(chainId != 0, \\\"Invalid chainID\\\");\\n            peers[chainId] = _peers[i];\\n        }\\n    }\\n\\n    function transfer(\\n        address, // _token\\n        uint[] memory, // _amounts\\n        uint[] memory, // _toChainIds\\n        address[] memory // _toAddresses\\n    ) external payable virtual onlyRole(CLIENT_ROLE) {\\n    }\\n\\n    function call(\\n        uint, // _toChainId\\n        address, // _targetContract\\n        uint, // _targetCallValue\\n        bytes memory // _targetCallData\\n    ) external payable virtual onlyRole(CLIENT_ROLE) {\\n    }\\n\\n    function calcTransferFee() public view virtual returns (uint) {\\n        return 0;\\n    }\\n\\n    function calcCallFee(\\n        uint, // _toChainId\\n        address, // _targetContract,\\n        uint, // _targetCallValue\\n        bytes memory // _targetCallData\\n    ) public view virtual returns (uint) {\\n        return 0;\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0893df15d74f1f489f7385bc017c2ed70aabde1c4d1f7b59f62b54ed530b2b\",\"license\":\"MIT\"},\"contracts/xchain/IXChainAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface IXChainAdapter {\\r\\n\\r\\n    function transfer(\\r\\n        address _token,\\r\\n        uint[] memory _amounts,\\r\\n        uint[] memory _toChainIds,\\r\\n        address[] memory _toAddresses\\r\\n    ) external payable;\\r\\n\\r\\n    function call(\\r\\n        uint _toChainId,\\r\\n        address _targetContract,\\r\\n        uint _targetCallValue,\\r\\n        bytes memory _targetCallData\\r\\n    ) external payable;\\r\\n\\r\\n    function calcTransferFee() external view returns (uint);\\r\\n\\r\\n    function calcCallFee(\\r\\n        uint _toChainId,\\r\\n        address _targetContract,\\r\\n        uint _targetCallValue,\\r\\n        bytes memory _targetCallData\\r\\n    ) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xc0a9c6a3fc5a61f34d24ee35f13e33778af96e42d6abb374060dbd32ab09fef7\",\"license\":\"MIT\"},\"contracts/xchain/agent/IUserAgent.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\ninterface IUserAgent {\\n    function onRefunded(uint _nonce, address _token, uint amount, uint _toChainId, address _to) external;\\n}\\n\",\"keccak256\":\"0xa79a92777f4e340ae6b68cf071003374c23c75d548781289ff8550f1848c5131\",\"license\":\"MIT\"},\"contracts/xchain/cbridge/CBridgeXChainAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"sgn-v2-contracts/contracts/message/interfaces/IMessageBus.sol\\\";\\nimport \\\"sgn-v2-contracts/contracts/message/libraries/MsgDataTypes.sol\\\";\\nimport \\\"../BasicXChainAdapter.sol\\\";\\nimport \\\"../agent/IUserAgent.sol\\\";\\nimport \\\"./MessageReceiverApp.sol\\\";\\nimport \\\"./MessageSenderApp.sol\\\";\\n\\ncontract CBridgeXChainAdapter is MessageSenderApp, MessageReceiverApp, BasicXChainAdapter {\\n    using AddressUpgradeable for address;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    enum TransferStatus {\\n        Null,\\n        Success,\\n        Refund\\n    }\\n\\n    struct TransferEntry {\\n        address from;\\n        TransferStatus status;\\n    }\\n\\n    struct TransferRequest {\\n        uint nonce;\\n        uint toChainId;\\n        address to;\\n    }\\n\\n    struct FallbackEntry {\\n        uint fromChainId;\\n        uint nonce;\\n        address token;\\n        uint amount;\\n        uint toChainId;\\n        address to;\\n        bool handled;\\n    }\\n\\n    uint32 public maxSlippage;\\n    uint public nonce; // It starts from 0.\\n    // Map of transfer entries (nonce => TransferEntry)\\n    mapping(uint => TransferEntry) public transfers;\\n    FallbackEntry[] public fallbacks;\\n\\n    event Transfer(uint nonce, address from, address indexed token, uint indexed amount, uint indexed toChainId, address to);\\n    event Receive(uint indexed fromChainId, uint nonce, address indexed token, uint indexed amount, address to);\\n    event Refund(uint nonce, address from, address indexed token, uint indexed amount, uint indexed toChainId, address to);\\n\\n    function initialize1(address _messageBus) external virtual initializer {\\n        super.initialize();\\n        messageBus = _messageBus;\\n        maxSlippage = 5_0000; // 5%\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual override(BasicXChainAdapter, OwnableUpgradeable) onlyOwner {\\n        BasicXChainAdapter.transferOwnership(newOwner);\\n    }\\n\\n    function setMaxSlippage(uint32 _maxSlippage) external onlyOwner {\\n        require(_maxSlippage <= 100_0000, \\\"Invalid maxSlippage\\\");\\n        maxSlippage = _maxSlippage;\\n    }\\n\\n    // ============== functions on source chain ==============\\n\\n    // called on source chain for handling of bridge failures (bad liquidity, bad slippage, etc...)\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address // executor\\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\\n        TransferRequest memory req = abi.decode((_message), (TransferRequest));\\n        uint _nonce = req.nonce;\\n        uint _toChainId = req.toChainId;\\n        address _to = req.to;\\n\\n        require(transfers[_nonce].status != TransferStatus.Refund, \\\"Already refunded\\\");\\n        transfers[_nonce].status = TransferStatus.Refund;\\n        address from = transfers[_nonce].from;\\n\\n        IERC20Upgradeable(_token).safeTransfer(from, _amount);\\n        if (from.isContract()) {\\n            IUserAgent(from).onRefunded(_nonce, _token, _amount, _toChainId, _to);\\n        }\\n\\n        emit Refund(_nonce, from, _token, _amount, _toChainId, _to);\\n        return ExecutionStatus.Success;\\n    }\\n\\n    // ============== functions on destination chain ==============\\n\\n    // handler function required by MsgReceiverApp\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes memory _message,\\n        address // executor\\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\\n        require(peers[_srcChainId] == _sender, \\\"Wrong sender\\\");\\n\\n        (address targetContract, uint targetCallValue, bytes memory targetCallData)\\n            = abi.decode(_message, (address, uint, bytes));\\n        (bool success,) = targetContract.call{value: targetCallValue}(targetCallData);\\n        return (success == true) ? ExecutionStatus.Success : ExecutionStatus.Fail;\\n    }\\n\\n    // handler function required by MsgReceiverApp\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes memory _message,\\n        address // executor\\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\\n        require(peers[_srcChainId] == _sender, \\\"Wrong sender\\\");\\n\\n        TransferRequest memory req = abi.decode((_message), (TransferRequest));\\n        IERC20Upgradeable(_token).safeTransfer(req.to, _amount);\\n\\n        emit Receive(_srcChainId, req.nonce, _token, _amount, req.to);\\n        return ExecutionStatus.Success;\\n    }\\n\\n    ///@notice This functions won't be called because executeMessageWithTransfer always returns Success.\\n    // handler function required by MsgReceiverApp\\n    // called only if handleMessageWithTransfer above was reverted\\n    function executeMessageWithTransferFallback(\\n        address, // _sender\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes memory _message,\\n        address // executor\\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\\n        TransferRequest memory req = abi.decode((_message), (TransferRequest));\\n        fallbacks.push(FallbackEntry({\\n            fromChainId: _srcChainId,\\n            nonce: req.nonce,\\n            token: _token,\\n            amount: _amount,\\n            toChainId: req.toChainId,\\n            to: req.to,\\n            handled: false\\n        }));\\n        return ExecutionStatus.Success;\\n    }\\n\\n    function transfer(\\n        address _token,\\n        uint[] memory _amounts,\\n        uint[] memory _toChainIds,\\n        address[] memory _toAddresses\\n    ) external payable override onlyRole(CLIENT_ROLE) {\\n        uint count = _amounts.length;\\n        uint fee = calcTransferFee();\\n        require(msg.value >= (fee * count), \\\"No enough fee\\\");\\n        address from = _msgSender();\\n\\n        uint amount;\\n        for (uint i = 0; i < count; i++) {\\n            amount += _amounts[i];\\n        }\\n        IERC20Upgradeable(_token).safeTransferFrom(from, address(this), amount);\\n\\n        for (uint i = 0; i < count; i++) {\\n            _transfer(from, _token, _amounts[i], _toChainIds[i], _toAddresses[i], fee);\\n        }\\n    }\\n\\n    function _transfer(\\n        address _from,\\n        address _token,\\n        uint _amount,\\n        uint _toChainId,\\n        address _to,\\n        uint _fee\\n    ) internal {\\n        address peer = peers[_toChainId];\\n        require(peer != address(0), \\\"No peer\\\");\\n        uint _nonce = nonce;\\n\\n        transfers[_nonce] = TransferEntry({\\n            from: _from,\\n            status: TransferStatus.Null\\n        });\\n\\n        bytes memory message = abi.encode(TransferRequest({\\n            nonce: _nonce,\\n            toChainId: _toChainId,\\n            to: _to\\n        }));\\n\\n        // MsgSenderApp util function\\n        sendMessageWithTransfer(\\n            peer,\\n            _token,\\n            _amount,\\n            uint64(_toChainId),\\n            uint64(_nonce),\\n            maxSlippage,\\n            message,\\n            MsgDataTypes.BridgeSendType.Liquidity,\\n            _fee\\n        );\\n        nonce ++;\\n        emit Transfer(_nonce, msg.sender, _token, _amount, _toChainId, _to);\\n    }\\n\\n    function call(\\n        uint _toChainId,\\n        address _targetContract,\\n        uint _targetCallValue,\\n        bytes memory _targetCallData\\n    ) external payable override onlyRole(CLIENT_ROLE) {\\n        address peer = peers[_toChainId];\\n        require(peer != address(0), \\\"No peer\\\");\\n\\n        bytes memory data = abi.encode(_targetContract, _targetCallValue, _targetCallData);\\n        sendMessage(peer, uint64(_toChainId), data, msg.value);\\n    }\\n\\n    function calcTransferFee() public view override returns (uint) {\\n        bytes memory message = abi.encode(TransferRequest({\\n            nonce: nonce,\\n            toChainId: 0,\\n            to: address(0)\\n        }));\\n        return IMessageBus(messageBus).calcFee(message);\\n    }\\n\\n    function calcCallFee(\\n        uint, // _toChainId\\n        address _targetContract,\\n        uint _targetCallValue,\\n        bytes memory _targetCallData\\n    ) public view override returns (uint) {\\n        bytes memory message = abi.encode(_targetContract, _targetCallValue, _targetCallData);\\n        return IMessageBus(messageBus).calcFee(message);\\n    }\\n}\\n\",\"keccak256\":\"0xa78fe6efe710a62aae19e2394e45bdbeea479003ec536c9de600a9a64cc8fe3a\",\"license\":\"MIT\"},\"contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity  0.8.9;\\n\\nimport \\\"./CBridgeXChainAdapter.sol\\\";\\n\\ncontract CBridgeXChainAdapterTest is CBridgeXChainAdapter {\\n}\\n\",\"keccak256\":\"0x25a9dcfc8279de5d6bade07240469458bf5561009d06da5ec082bf7a23a8140b\",\"license\":\"MIT\"},\"contracts/xchain/cbridge/MessageBusAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity  0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract MessageBusAddress is OwnableUpgradeable {\\n    event MessageBusUpdated(address messageBus);\\n\\n    address public messageBus;\\n\\n    function __MessageBusAddress_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function setMessageBus(address _messageBus) public onlyOwner {\\n        messageBus = _messageBus;\\n        emit MessageBusUpdated(messageBus);\\n    }\\n}\\n\",\"keccak256\":\"0x72d6189121c7c44c986efd6e10aab67f550800a989390e7b9d6aecbd7335f20a\",\"license\":\"GPL-3.0-only\"},\"contracts/xchain/cbridge/MessageReceiverApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.9;\\n\\nimport \\\"sgn-v2-contracts/contracts/message/interfaces/IMessageReceiverApp.sol\\\";\\nimport \\\"./MessageBusAddress.sol\\\";\\n\\nabstract contract MessageReceiverApp is IMessageReceiverApp, MessageBusAddress {\\n\\n    modifier onlyMessageBus() {\\n        require(msg.sender == messageBus, \\\"caller is not message bus\\\");\\n        _;\\n    }\\n\\n    function __MessageReceiverApp_init() internal onlyInitializing {\\n        __MessageBusAddress_init();\\n    }\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Only called by MessageBus (MessageBusReceiver) if\\n     *         1. executeMessageWithTransfer reverts, or\\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver)\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    // execute message from non-evm chain with bytes for sender address,\\n    // otherwise same as above.\\n    function executeMessage(\\n        bytes calldata _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual onlyMessageBus returns (ExecutionStatus) {}\\n}\\n\",\"keccak256\":\"0x007929a84e73db59945c4e343c8a30a3452fdc0f7321e99db074163beee21162\",\"license\":\"GPL-3.0-only\"},\"contracts/xchain/cbridge/MessageSenderApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"sgn-v2-contracts/contracts/message/libraries/MsgDataTypes.sol\\\";\\nimport \\\"sgn-v2-contracts/contracts/message/libraries/MessageSenderLib.sol\\\";\\nimport \\\"sgn-v2-contracts/contracts/message/messagebus/MessageBus.sol\\\";\\nimport \\\"../../../libs/Token.sol\\\";\\nimport \\\"./MessageBusAddress.sol\\\";\\n\\nabstract contract MessageSenderApp is MessageBusAddress {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // ============== Utility functions called by apps ==============\\n    function __MessageSenderApp_init() internal onlyInitializing {\\n        __MessageBusAddress_init();\\n    }\\n\\n    /**\\n     * @notice Sends a message to a contract on another chain.\\n     * Sender needs to make sure the uniqueness of the message Id, which is computed as\\n     * hash(type.MessageOnly, sender, receiver, srcChainId, srcTxHash, dstChainId, message).\\n     * If messages with the same Id are sent, only one of them will succeed at dst chain.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        uint256 _fee\\n    ) internal {\\n        MessageSenderLib.sendMessage(_receiver, _dstChainId, _message, messageBus, _fee);\\n    }\\n\\n    // Send message to non-evm chain with bytes for receiver address,\\n    // otherwise same as above.\\n    function sendMessage(\\n        bytes calldata _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        uint256 _fee\\n    ) internal {\\n        MessageSenderLib.sendMessage(Token.bytesToAddress(_receiver), _dstChainId, _message, messageBus, _fee);\\n    }\\n\\n    /**\\n     * @notice Sends a message associated with a transfer to a contract on another chain.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     *        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least\\n     *        (100% - max slippage percentage) * amount or the transfer can be refunded.\\n     *        Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     *        If message is empty, only the token transfer will be sent\\n     * @param _bridgeSendType One of the {BridgeSendType} enum.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        return\\n            MessageSenderLib.sendMessageWithTransfer(\\n                _receiver,\\n                _token,\\n                _amount,\\n                _dstChainId,\\n                _nonce,\\n                _maxSlippage,\\n                _message,\\n                _bridgeSendType,\\n                messageBus,\\n                _fee\\n            );\\n    }\\n\\n    /**\\n     * @notice Sends a token transfer via a bridge.\\n     * @dev sendMessageWithTransfer with empty message\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     *        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least\\n     *        (100% - max slippage percentage) * amount or the transfer can be refunded.\\n     *        Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\\n     * @param _bridgeSendType One of the {BridgeSendType} enum.\\n     */\\n    function sendTokenTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        MsgDataTypes.BridgeSendType _bridgeSendType\\n    ) internal returns (bytes32) {\\n        return\\n            MessageSenderLib.sendMessageWithTransfer(\\n                _receiver,\\n                _token,\\n                _amount,\\n                _dstChainId,\\n                _nonce,\\n                _maxSlippage,\\n                \\\"\\\", // empty message, which will not trigger sendMessage\\n                _bridgeSendType,\\n                messageBus,\\n                0\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x8a7c0eede45d205f08a97750d7a07c9e437fe59e4c13cd82ea47e2adae660e43\",\"license\":\"GPL-3.0-only\"},\"libs/Const.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary Const {\\r\\n\\r\\n    uint internal constant DENOMINATOR = 10000;\\r\\n\\r\\n    uint internal constant APR_SCALE = 1e18;\\r\\n    \\r\\n    uint internal constant YEAR_IN_SEC = 365 days;\\r\\n\\r\\n    address internal constant NATIVE_ASSET = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n\\r\\n    enum TokenID { USDT, USDC }\\r\\n}\\r\\n\",\"keccak256\":\"0xecdadc52a09a3242feae68d278fd152ab66e18c81c6aeca076ee1bb7d29a3fd7\",\"license\":\"MIT\"},\"libs/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../contracts/bni/constant/AuroraConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/AuroraConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/AvaxConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/AvaxConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/BscConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/BscConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/EthConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/EthConstantTest.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/MaticConstant.sol\\\";\\r\\nimport \\\"../contracts/bni/constant/MaticConstantTest.sol\\\";\\r\\nimport \\\"./Const.sol\\\";\\r\\n\\r\\nlibrary Token {\\r\\n    function changeDecimals(uint amount, uint curDecimals, uint newDecimals) internal pure returns(uint) {\\r\\n        if (curDecimals == newDecimals) {\\r\\n            return amount;\\r\\n        } else if (curDecimals < newDecimals) {\\r\\n            return amount * (10 ** (newDecimals - curDecimals));\\r\\n        } else {\\r\\n            return amount / (10 ** (curDecimals - newDecimals));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, \\\"ETH transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function getChainID() internal view returns (uint256 id) {\\r\\n        assembly {\\r\\n            id := chainid()\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bytesToAddress(bytes memory bys) internal pure returns (address addr) {\\r\\n        assembly {\\r\\n            addr := mload(add(bys, 20))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTokenAddress(Const.TokenID _tokenId) internal view returns (address) {\\r\\n        uint chainId = getChainID();\\r\\n        if (chainId == AuroraConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AuroraConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AuroraConstant.USDT;\\r\\n        } else if (chainId == AvaxConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AvaxConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AvaxConstant.USDT;\\r\\n        } else if (chainId == BscConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return BscConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return BscConstant.USDT;\\r\\n        } else if (chainId == EthConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return EthConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return EthConstant.USDT;\\r\\n        } else if (chainId == MaticConstant.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return MaticConstant.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return MaticConstant.USDT;\\r\\n        }\\r\\n        return address(0);\\r\\n    }\\r\\n\\r\\n    function getTestTokenAddress(Const.TokenID _tokenId) internal view returns (address) {\\r\\n        uint chainId = getChainID();\\r\\n        if (chainId == AuroraConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AuroraConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AuroraConstantTest.USDT;\\r\\n        } else if (chainId == AvaxConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return AvaxConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return AvaxConstantTest.USDT;\\r\\n        } else if (chainId == BscConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return BscConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return BscConstantTest.USDT;\\r\\n        } else if (chainId == EthConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return EthConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return EthConstantTest.USDT;\\r\\n        } else if (chainId == MaticConstantTest.CHAINID) {\\r\\n            if (_tokenId == Const.TokenID.USDC) return MaticConstantTest.USDC;\\r\\n            else if (_tokenId == Const.TokenID.USDT) return MaticConstantTest.USDT;\\r\\n        }\\r\\n        return address(0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8e74cf52d93d604a8f059c78bda6c4c59d4340f94c0c4590b30279a7cb3ef3e1\",\"license\":\"MIT\"},\"sgn-v2-contracts/contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IBridge {\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external;\\n\\n    function relay(\\n        bytes calldata _relayRequest,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function transfers(bytes32 transferId) external view returns (bool);\\n\\n    function withdraws(bytes32 withdrawId) external view returns (bool);\\n\\n    function withdraw(\\n        bytes calldata _wdmsg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x5f5ba7dedac51bcc2cb40e4a39caa18d46704b659a576b6be36ed68e657c8251\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/interfaces/IOriginalTokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVault {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\\n     * @param _request The serialized Withdraw protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8b4e940c16d960a4f8f0516951c52afbeb31c9b8bbbda7523650aadee2d72369\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/interfaces/IOriginalTokenVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVaultV2 {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\\n     * @param _request The serialized Withdraw protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc3d522d350cd42dc296fdea6ae75d7fe39244638161aadd1cbc70de13e34380d\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/interfaces/IPeggedTokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridge {\\n    /**\\n     * @notice Burn tokens to trigger withdrawal at a remote chain's OriginalTokenVault\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _withdrawAccount account who withdraw original tokens on the remote chain\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        address _withdrawAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5adc3e5f1c8767c9f4580b499b16aba25f41934a2f945e9f0227b28d4b0405ae\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/interfaces/IPeggedTokenBridgeV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridgeV2 {\\n    /**\\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\\n     * OriginalTokenVault, or mint at another remote chain\\n     * @param _token The pegged token address.\\n     * @param _amount The amount to burn.\\n     * @param _toChainId If zero, withdraw from original vault; otherwise, the remote chain to mint tokens.\\n     * @param _toAccount The account to receive tokens on the remote chain\\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    // same with `burn` above, use openzeppelin ERC20Burnable interface\\n    function burnFrom(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xea5828630c131a1c7017360d4c1729c71bdeb5eaf366a30c9637c82795cea9d5\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/interfaces/ISigsVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface ISigsVerifier {\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x0d0b090d078a5f50ea7b751331614785e536fc09bcff28bfe08a60613ebca1ae\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/message/interfaces/IMessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../libraries/MsgDataTypes.sol\\\";\\n\\ninterface IMessageBus {\\n    function liquidityBridge() external view returns (address);\\n\\n    function pegBridge() external view returns (address);\\n\\n    function pegBridgeV2() external view returns (address);\\n\\n    function pegVault() external view returns (address);\\n\\n    function pegVaultV2() external view returns (address);\\n\\n    /**\\n     * @notice Calculates the required fee for the message.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     @ @return The required fee.\\n     */\\n    function calcFee(bytes calldata _message) external view returns (uint256);\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native gas token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _srcBridge The bridge contract to send the transfer with.\\n     * @param _srcTransferId The transfer ID.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdrawFee(\\n        address _account,\\n        uint256 _cumulativeFee,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Execute a message with a successful transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransfer(\\n        bytes calldata _message,\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message with a refunded transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransferRefund(\\n        bytes calldata _message, // the same message associated with the original transfer\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message not associated with a transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessage(\\n        bytes calldata _message,\\n        MsgDataTypes.RouteInfo calldata _route,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x17d7b296165800697f311fb52f0f0f149fc7ebcc200d4b557981aa258aa1e7c8\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/message/interfaces/IMessageReceiverApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageReceiverApp {\\n    enum ExecutionStatus {\\n        Fail, // execution failed, finalized\\n        Success, // execution succeeded, finalized\\n        Retry // execution rejected, can retry later\\n    }\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Only called by MessageBus (MessageBusReceiver) if\\n     *         1. executeMessageWithTransfer reverts, or\\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver)\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n}\\n\",\"keccak256\":\"0x9e4d6ec7303c40c1a8c897655c3d6ef6ae1f9fa7e8c806e7c6878ff01b51e67b\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/message/libraries/MessageSenderLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../interfaces/IBridge.sol\\\";\\nimport \\\"../../interfaces/IOriginalTokenVault.sol\\\";\\nimport \\\"../../interfaces/IOriginalTokenVaultV2.sol\\\";\\nimport \\\"../../interfaces/IPeggedTokenBridge.sol\\\";\\nimport \\\"../../interfaces/IPeggedTokenBridgeV2.sol\\\";\\nimport \\\"../interfaces/IMessageBus.sol\\\";\\nimport \\\"./MsgDataTypes.sol\\\";\\n\\nlibrary MessageSenderLib {\\n    using SafeERC20 for IERC20;\\n\\n    // ============== Internal library functions called by apps ==============\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal {\\n        IMessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded. Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\\n            return\\n                sendMessageWithLiquidityBridgeTransfer(\\n                    _receiver,\\n                    _token,\\n                    _amount,\\n                    _dstChainId,\\n                    _nonce,\\n                    _maxSlippage,\\n                    _message,\\n                    _messageBus,\\n                    _fee\\n                );\\n        } else if (\\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit ||\\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit\\n        ) {\\n            return\\n                sendMessageWithPegVaultDeposit(\\n                    _bridgeSendType,\\n                    _receiver,\\n                    _token,\\n                    _amount,\\n                    _dstChainId,\\n                    _nonce,\\n                    _message,\\n                    _messageBus,\\n                    _fee\\n                );\\n        } else if (\\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn ||\\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn\\n        ) {\\n            return\\n                sendMessageWithPegBridgeBurn(\\n                    _bridgeSendType,\\n                    _receiver,\\n                    _token,\\n                    _amount,\\n                    _dstChainId,\\n                    _nonce,\\n                    _message,\\n                    _messageBus,\\n                    _fee\\n                );\\n        } else {\\n            revert(\\\"bridge type not supported\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated liquidity bridge transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithLiquidityBridgeTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        address bridge = IMessageBus(_messageBus).liquidityBridge();\\n        IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n        IBridge(bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n        bytes32 transferId = keccak256(\\n            abi.encodePacked(address(this), _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\\n        );\\n        IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\\n            _receiver,\\n            _dstChainId,\\n            bridge,\\n            transferId,\\n            _message\\n        );\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated OriginalTokenVault deposit.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithPegVaultDeposit(\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        address pegVault;\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\\n            pegVault = IMessageBus(_messageBus).pegVault();\\n        } else {\\n            pegVault = IMessageBus(_messageBus).pegVaultV2();\\n        }\\n        IERC20(_token).safeIncreaseAllowance(pegVault, _amount);\\n        bytes32 transferId;\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\\n            IOriginalTokenVault(pegVault).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n            transferId = keccak256(\\n                abi.encodePacked(address(this), _token, _amount, _dstChainId, _receiver, _nonce, uint64(block.chainid))\\n            );\\n        } else {\\n            transferId = IOriginalTokenVaultV2(pegVault).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        }\\n        IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\\n            _receiver,\\n            _dstChainId,\\n            pegVault,\\n            transferId,\\n            _message\\n        );\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated PeggedTokenBridge burn.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithPegBridgeBurn(\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        address pegBridge;\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\\n            pegBridge = IMessageBus(_messageBus).pegBridge();\\n        } else {\\n            pegBridge = IMessageBus(_messageBus).pegBridgeV2();\\n        }\\n        IERC20(_token).safeIncreaseAllowance(pegBridge, _amount);\\n        bytes32 transferId;\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\\n            IPeggedTokenBridge(pegBridge).burn(_token, _amount, _receiver, _nonce);\\n            transferId = keccak256(\\n                abi.encodePacked(address(this), _token, _amount, _receiver, _nonce, uint64(block.chainid))\\n            );\\n        } else {\\n            transferId = IPeggedTokenBridgeV2(pegBridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\\n        }\\n        // handle cases where certain tokens do not spend allowance for role-based burn\\n        IERC20(_token).safeApprove(pegBridge, 0);\\n        IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\\n            _receiver,\\n            _dstChainId,\\n            pegBridge,\\n            transferId,\\n            _message\\n        );\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Sends a token transfer via a bridge.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     */\\n    function sendTokenTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _bridge\\n    ) internal {\\n        IERC20(_token).safeIncreaseAllowance(_bridge, _amount);\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\\n            IBridge(_bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\\n            IOriginalTokenVault(_bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\\n            IPeggedTokenBridge(_bridge).burn(_token, _amount, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(_bridge, 0);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit) {\\n            IOriginalTokenVaultV2(_bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn) {\\n            IPeggedTokenBridgeV2(_bridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(_bridge, 0);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2BurnFrom) {\\n            IPeggedTokenBridgeV2(_bridge).burnFrom(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(_bridge, 0);\\n        } else {\\n            revert(\\\"bridge type not supported\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd7e93a0efe4e607d69feb173cf7d2cf7785375ad56053f6ad3413ceda9fc2687\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/message/libraries/MsgDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nlibrary MsgDataTypes {\\n    // bridge operation type at the sender side (src chain)\\n    enum BridgeSendType {\\n        Null,\\n        Liquidity,\\n        PegDeposit,\\n        PegBurn,\\n        PegV2Deposit,\\n        PegV2Burn,\\n        PegV2BurnFrom\\n    }\\n\\n    // bridge operation type at the receiver side (dst chain)\\n    enum TransferType {\\n        Null,\\n        LqRelay, // relay through liquidity bridge\\n        LqWithdraw, // withdraw from liquidity bridge\\n        PegMint, // mint through pegged token bridge\\n        PegWithdraw, // withdraw from original token vault\\n        PegV2Mint, // mint through pegged token bridge v2\\n        PegV2Withdraw // withdraw from original token vault v2\\n    }\\n\\n    enum MsgType {\\n        MessageWithTransfer,\\n        MessageOnly\\n    }\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail,\\n        Fallback,\\n        Pending // transient state within a transaction\\n    }\\n\\n    struct TransferInfo {\\n        TransferType t;\\n        address sender;\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        uint64 wdseq; // only needed for LqWithdraw (refund)\\n        uint64 srcChainId;\\n        bytes32 refId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct RouteInfo {\\n        address sender;\\n        address receiver;\\n        uint64 srcChainId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct MsgWithTransferExecutionParams {\\n        bytes message;\\n        TransferInfo transfer;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n\\n    struct BridgeTransferParams {\\n        bytes request;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n}\\n\",\"keccak256\":\"0x4ac9e6e5be92e3e58adbcab75ef765458d37fd4908d764477a0f32a96f9ecbba\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/message/messagebus/MessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./MessageBusSender.sol\\\";\\nimport \\\"./MessageBusReceiver.sol\\\";\\n\\ncontract MessageBus is MessageBusSender, MessageBusReceiver {\\n    constructor(\\n        ISigsVerifier _sigsVerifier,\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault,\\n        address _pegBridgeV2,\\n        address _pegVaultV2\\n    )\\n        MessageBusSender(_sigsVerifier)\\n        MessageBusReceiver(_liquidityBridge, _pegBridge, _pegVault, _pegBridgeV2, _pegVaultV2)\\n    {}\\n\\n    // this is only to be called by Proxy via delegateCall as initOwner will require _owner is 0.\\n    // so calling init on this contract directly will guarantee to fail\\n    function init(\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault,\\n        address _pegBridgeV2,\\n        address _pegVaultV2\\n    ) external {\\n        // MUST manually call ownable init and must only call once\\n        initOwner();\\n        // we don't need sender init as _sigsVerifier is immutable so already in the deployed code\\n        initReceiver(_liquidityBridge, _pegBridge, _pegVault, _pegBridgeV2, _pegVaultV2);\\n    }\\n}\\n\",\"keccak256\":\"0x53f186341ed503c54f70ef9ca96a405b1d221721590ea611463fe88477a325a9\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/message/messagebus/MessageBusReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../libraries/MsgDataTypes.sol\\\";\\nimport \\\"../interfaces/IMessageReceiverApp.sol\\\";\\nimport \\\"../interfaces/IMessageBus.sol\\\";\\nimport \\\"../../interfaces/IBridge.sol\\\";\\nimport \\\"../../interfaces/IOriginalTokenVault.sol\\\";\\nimport \\\"../../interfaces/IOriginalTokenVaultV2.sol\\\";\\nimport \\\"../../interfaces/IPeggedTokenBridge.sol\\\";\\nimport \\\"../../interfaces/IPeggedTokenBridgeV2.sol\\\";\\nimport \\\"../../safeguard/Ownable.sol\\\";\\n\\ncontract MessageBusReceiver is Ownable {\\n    mapping(bytes32 => MsgDataTypes.TxStatus) public executedMessages;\\n\\n    address public liquidityBridge; // liquidity bridge address\\n    address public pegBridge; // peg bridge address\\n    address public pegVault; // peg original vault address\\n    address public pegBridgeV2; // peg bridge address\\n    address public pegVaultV2; // peg original vault address\\n\\n    // minimum amount of gas needed by this contract before it tries to\\n    // deliver a message to the target contract.\\n    uint256 public preExecuteMessageGasUsage;\\n\\n    event Executed(\\n        MsgDataTypes.MsgType msgType,\\n        bytes32 msgId,\\n        MsgDataTypes.TxStatus status,\\n        address indexed receiver,\\n        uint64 srcChainId,\\n        bytes32 srcTxHash\\n    );\\n    event NeedRetry(MsgDataTypes.MsgType msgType, bytes32 msgId, uint64 srcChainId, bytes32 srcTxHash);\\n    event CallReverted(string reason); // help debug\\n\\n    event LiquidityBridgeUpdated(address liquidityBridge);\\n    event PegBridgeUpdated(address pegBridge);\\n    event PegVaultUpdated(address pegVault);\\n    event PegBridgeV2Updated(address pegBridgeV2);\\n    event PegVaultV2Updated(address pegVaultV2);\\n\\n    constructor(\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault,\\n        address _pegBridgeV2,\\n        address _pegVaultV2\\n    ) {\\n        liquidityBridge = _liquidityBridge;\\n        pegBridge = _pegBridge;\\n        pegVault = _pegVault;\\n        pegBridgeV2 = _pegBridgeV2;\\n        pegVaultV2 = _pegVaultV2;\\n    }\\n\\n    function initReceiver(\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault,\\n        address _pegBridgeV2,\\n        address _pegVaultV2\\n    ) internal {\\n        require(liquidityBridge == address(0), \\\"liquidityBridge already set\\\");\\n        liquidityBridge = _liquidityBridge;\\n        pegBridge = _pegBridge;\\n        pegVault = _pegVault;\\n        pegBridgeV2 = _pegBridgeV2;\\n        pegVaultV2 = _pegVaultV2;\\n    }\\n\\n    // ============== functions called by executor ==============\\n\\n    /**\\n     * @notice Execute a message with a successful transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransfer(\\n        bytes calldata _message,\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) public payable {\\n        // For message with token transfer, message Id is computed through transfer info\\n        // in order to guarantee that each transfer can only be used once.\\n        bytes32 messageId = verifyTransfer(_transfer);\\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \\\"transfer already executed\\\");\\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\\n\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"MessageWithTransfer\\\"));\\n        IBridge(liquidityBridge).verifySigs(\\n            abi.encodePacked(domain, messageId, _message, _transfer.srcTxHash),\\n            _sigs,\\n            _signers,\\n            _powers\\n        );\\n        MsgDataTypes.TxStatus status;\\n        IMessageReceiverApp.ExecutionStatus est = executeMessageWithTransfer(_transfer, _message);\\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\\n            status = MsgDataTypes.TxStatus.Success;\\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\\n            emit NeedRetry(\\n                MsgDataTypes.MsgType.MessageWithTransfer,\\n                messageId,\\n                _transfer.srcChainId,\\n                _transfer.srcTxHash\\n            );\\n            return;\\n        } else {\\n            est = executeMessageWithTransferFallback(_transfer, _message);\\n            if (est == IMessageReceiverApp.ExecutionStatus.Success) {\\n                status = MsgDataTypes.TxStatus.Fallback;\\n            } else {\\n                status = MsgDataTypes.TxStatus.Fail;\\n            }\\n        }\\n        executedMessages[messageId] = status;\\n        emitMessageWithTransferExecutedEvent(messageId, status, _transfer);\\n    }\\n\\n    /**\\n     * @notice Execute a message with a refunded transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransferRefund(\\n        bytes calldata _message, // the same message associated with the original transfer\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) public payable {\\n        // similar to executeMessageWithTransfer\\n        bytes32 messageId = verifyTransfer(_transfer);\\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \\\"transfer already executed\\\");\\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\\n\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"MessageWithTransferRefund\\\"));\\n        IBridge(liquidityBridge).verifySigs(\\n            abi.encodePacked(domain, messageId, _message, _transfer.srcTxHash),\\n            _sigs,\\n            _signers,\\n            _powers\\n        );\\n        MsgDataTypes.TxStatus status;\\n        IMessageReceiverApp.ExecutionStatus est = executeMessageWithTransferRefund(_transfer, _message);\\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\\n            status = MsgDataTypes.TxStatus.Success;\\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\\n            emit NeedRetry(\\n                MsgDataTypes.MsgType.MessageWithTransfer,\\n                messageId,\\n                _transfer.srcChainId,\\n                _transfer.srcTxHash\\n            );\\n            return;\\n        } else {\\n            status = MsgDataTypes.TxStatus.Fail;\\n        }\\n        executedMessages[messageId] = status;\\n        emitMessageWithTransferExecutedEvent(messageId, status, _transfer);\\n    }\\n\\n    /**\\n     * @notice Execute a message not associated with a transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessage(\\n        bytes calldata _message,\\n        MsgDataTypes.RouteInfo calldata _route,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable {\\n        // For message without associated token transfer, message Id is computed through message info,\\n        // in order to guarantee that each message can only be applied once\\n        bytes32 messageId = computeMessageOnlyId(_route, _message);\\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \\\"message already executed\\\");\\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\\n\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"Message\\\"));\\n        IBridge(liquidityBridge).verifySigs(abi.encodePacked(domain, messageId), _sigs, _signers, _powers);\\n        MsgDataTypes.TxStatus status;\\n        IMessageReceiverApp.ExecutionStatus est = executeMessage(_route, _message);\\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\\n            status = MsgDataTypes.TxStatus.Success;\\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\\n            emit NeedRetry(MsgDataTypes.MsgType.MessageOnly, messageId, _route.srcChainId, _route.srcTxHash);\\n            return;\\n        } else {\\n            status = MsgDataTypes.TxStatus.Fail;\\n        }\\n        executedMessages[messageId] = status;\\n        emitMessageOnlyExecutedEvent(messageId, status, _route);\\n    }\\n\\n    // ================= utils (to avoid stack too deep) =================\\n\\n    function emitMessageWithTransferExecutedEvent(\\n        bytes32 _messageId,\\n        MsgDataTypes.TxStatus _status,\\n        MsgDataTypes.TransferInfo calldata _transfer\\n    ) private {\\n        emit Executed(\\n            MsgDataTypes.MsgType.MessageWithTransfer,\\n            _messageId,\\n            _status,\\n            _transfer.receiver,\\n            _transfer.srcChainId,\\n            _transfer.srcTxHash\\n        );\\n    }\\n\\n    function emitMessageOnlyExecutedEvent(\\n        bytes32 _messageId,\\n        MsgDataTypes.TxStatus _status,\\n        MsgDataTypes.RouteInfo calldata _route\\n    ) private {\\n        emit Executed(\\n            MsgDataTypes.MsgType.MessageOnly,\\n            _messageId,\\n            _status,\\n            _route.receiver,\\n            _route.srcChainId,\\n            _route.srcTxHash\\n        );\\n    }\\n\\n    function executeMessageWithTransfer(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\\n        private\\n        returns (IMessageReceiverApp.ExecutionStatus)\\n    {\\n        uint256 gasLeftBeforeExecution = gasleft();\\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\\n            abi.encodeWithSelector(\\n                IMessageReceiverApp.executeMessageWithTransfer.selector,\\n                _transfer.sender,\\n                _transfer.token,\\n                _transfer.amount,\\n                _transfer.srcChainId,\\n                _message,\\n                msg.sender\\n            )\\n        );\\n        if (ok) {\\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\\n        }\\n        handleExecutionRevert(gasLeftBeforeExecution, res);\\n        return IMessageReceiverApp.ExecutionStatus.Fail;\\n    }\\n\\n    function executeMessageWithTransferFallback(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\\n        private\\n        returns (IMessageReceiverApp.ExecutionStatus)\\n    {\\n        uint256 gasLeftBeforeExecution = gasleft();\\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\\n            abi.encodeWithSelector(\\n                IMessageReceiverApp.executeMessageWithTransferFallback.selector,\\n                _transfer.sender,\\n                _transfer.token,\\n                _transfer.amount,\\n                _transfer.srcChainId,\\n                _message,\\n                msg.sender\\n            )\\n        );\\n        if (ok) {\\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\\n        }\\n        handleExecutionRevert(gasLeftBeforeExecution, res);\\n        return IMessageReceiverApp.ExecutionStatus.Fail;\\n    }\\n\\n    function executeMessageWithTransferRefund(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\\n        private\\n        returns (IMessageReceiverApp.ExecutionStatus)\\n    {\\n        uint256 gasLeftBeforeExecution = gasleft();\\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\\n            abi.encodeWithSelector(\\n                IMessageReceiverApp.executeMessageWithTransferRefund.selector,\\n                _transfer.token,\\n                _transfer.amount,\\n                _message,\\n                msg.sender\\n            )\\n        );\\n        if (ok) {\\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\\n        }\\n        handleExecutionRevert(gasLeftBeforeExecution, res);\\n        return IMessageReceiverApp.ExecutionStatus.Fail;\\n    }\\n\\n    function verifyTransfer(MsgDataTypes.TransferInfo calldata _transfer) private view returns (bytes32) {\\n        bytes32 transferId;\\n        address bridgeAddr;\\n        if (_transfer.t == MsgDataTypes.TransferType.LqRelay) {\\n            transferId = keccak256(\\n                abi.encodePacked(\\n                    _transfer.sender,\\n                    _transfer.receiver,\\n                    _transfer.token,\\n                    _transfer.amount,\\n                    _transfer.srcChainId,\\n                    uint64(block.chainid),\\n                    _transfer.refId\\n                )\\n            );\\n            bridgeAddr = liquidityBridge;\\n            require(IBridge(bridgeAddr).transfers(transferId) == true, \\\"bridge relay not exist\\\");\\n        } else if (_transfer.t == MsgDataTypes.TransferType.LqWithdraw) {\\n            transferId = keccak256(\\n                abi.encodePacked(\\n                    uint64(block.chainid),\\n                    _transfer.wdseq,\\n                    _transfer.receiver,\\n                    _transfer.token,\\n                    _transfer.amount\\n                )\\n            );\\n            bridgeAddr = liquidityBridge;\\n            require(IBridge(bridgeAddr).withdraws(transferId) == true, \\\"bridge withdraw not exist\\\");\\n        } else if (\\n            _transfer.t == MsgDataTypes.TransferType.PegMint || _transfer.t == MsgDataTypes.TransferType.PegWithdraw\\n        ) {\\n            transferId = keccak256(\\n                abi.encodePacked(\\n                    _transfer.receiver,\\n                    _transfer.token,\\n                    _transfer.amount,\\n                    _transfer.sender,\\n                    _transfer.srcChainId,\\n                    _transfer.refId\\n                )\\n            );\\n            if (_transfer.t == MsgDataTypes.TransferType.PegMint) {\\n                bridgeAddr = pegBridge;\\n                require(IPeggedTokenBridge(bridgeAddr).records(transferId) == true, \\\"mint record not exist\\\");\\n            } else {\\n                // _transfer.t == MsgDataTypes.TransferType.PegWithdraw\\n                bridgeAddr = pegVault;\\n                require(IOriginalTokenVault(bridgeAddr).records(transferId) == true, \\\"withdraw record not exist\\\");\\n            }\\n        } else if (\\n            _transfer.t == MsgDataTypes.TransferType.PegV2Mint || _transfer.t == MsgDataTypes.TransferType.PegV2Withdraw\\n        ) {\\n            if (_transfer.t == MsgDataTypes.TransferType.PegV2Mint) {\\n                bridgeAddr = pegBridgeV2;\\n            } else {\\n                // MsgDataTypes.TransferType.PegV2Withdraw\\n                bridgeAddr = pegVaultV2;\\n            }\\n            transferId = keccak256(\\n                abi.encodePacked(\\n                    _transfer.receiver,\\n                    _transfer.token,\\n                    _transfer.amount,\\n                    _transfer.sender,\\n                    _transfer.srcChainId,\\n                    _transfer.refId,\\n                    bridgeAddr\\n                )\\n            );\\n            if (_transfer.t == MsgDataTypes.TransferType.PegV2Mint) {\\n                require(IPeggedTokenBridgeV2(bridgeAddr).records(transferId) == true, \\\"mint record not exist\\\");\\n            } else {\\n                // MsgDataTypes.TransferType.PegV2Withdraw\\n                require(IOriginalTokenVaultV2(bridgeAddr).records(transferId) == true, \\\"withdraw record not exist\\\");\\n            }\\n        }\\n        return keccak256(abi.encodePacked(MsgDataTypes.MsgType.MessageWithTransfer, bridgeAddr, transferId));\\n    }\\n\\n    function computeMessageOnlyId(MsgDataTypes.RouteInfo calldata _route, bytes calldata _message)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    MsgDataTypes.MsgType.MessageOnly,\\n                    _route.sender,\\n                    _route.receiver,\\n                    _route.srcChainId,\\n                    _route.srcTxHash,\\n                    uint64(block.chainid),\\n                    _message\\n                )\\n            );\\n    }\\n\\n    function executeMessage(MsgDataTypes.RouteInfo calldata _route, bytes calldata _message)\\n        private\\n        returns (IMessageReceiverApp.ExecutionStatus)\\n    {\\n        uint256 gasLeftBeforeExecution = gasleft();\\n        (bool ok, bytes memory res) = address(_route.receiver).call{value: msg.value}(\\n            abi.encodeWithSelector(\\n                IMessageReceiverApp.executeMessage.selector,\\n                _route.sender,\\n                _route.srcChainId,\\n                _message,\\n                msg.sender\\n            )\\n        );\\n        if (ok) {\\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\\n        }\\n        handleExecutionRevert(gasLeftBeforeExecution, res);\\n        return IMessageReceiverApp.ExecutionStatus.Fail;\\n    }\\n\\n    function handleExecutionRevert(uint256 _gasLeftBeforeExecution, bytes memory _returnData) private {\\n        uint256 gasLeftAfterExecution = gasleft();\\n        uint256 maxTargetGasLimit = block.gaslimit - preExecuteMessageGasUsage;\\n        if (_gasLeftBeforeExecution < maxTargetGasLimit && gasLeftAfterExecution <= _gasLeftBeforeExecution / 64) {\\n            // if this happens, the executor must have not provided sufficient gas limit,\\n            // then the tx should revert instead of recording a non-retryable failure status\\n            // https://github.com/wolflo/evm-opcodes/blob/main/gas.md#aa-f-gas-to-send-with-call-operations\\n            assembly {\\n                invalid()\\n            }\\n        }\\n        emit CallReverted(getRevertMsg(_returnData));\\n    }\\n\\n    // https://ethereum.stackexchange.com/a/83577\\n    // https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/base/Multicall.sol\\n    function getRevertMsg(bytes memory _returnData) private pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    // ================= helper functions =====================\\n\\n    /**\\n     * @notice combine bridge transfer and msg execution calls into a single tx\\n     * @dev caller needs to get the required input params from SGN\\n     * @param _transferParams params to call bridge transfer\\n     * @param _msgParams params to execute message\\n     */\\n    function transferAndExecuteMsg(\\n        MsgDataTypes.BridgeTransferParams calldata _transferParams,\\n        MsgDataTypes.MsgWithTransferExecutionParams calldata _msgParams\\n    ) external {\\n        _bridgeTransfer(_msgParams.transfer.t, _transferParams);\\n        executeMessageWithTransfer(\\n            _msgParams.message,\\n            _msgParams.transfer,\\n            _msgParams.sigs,\\n            _msgParams.signers,\\n            _msgParams.powers\\n        );\\n    }\\n\\n    /**\\n     * @notice combine bridge refund and msg execution calls into a single tx\\n     * @dev caller needs to get the required input params from SGN\\n     * @param _transferParams params to call bridge transfer for refund\\n     * @param _msgParams params to execute message for refund\\n     */\\n    function refundAndExecuteMsg(\\n        MsgDataTypes.BridgeTransferParams calldata _transferParams,\\n        MsgDataTypes.MsgWithTransferExecutionParams calldata _msgParams\\n    ) external {\\n        _bridgeTransfer(_msgParams.transfer.t, _transferParams);\\n        executeMessageWithTransferRefund(\\n            _msgParams.message,\\n            _msgParams.transfer,\\n            _msgParams.sigs,\\n            _msgParams.signers,\\n            _msgParams.powers\\n        );\\n    }\\n\\n    function _bridgeTransfer(MsgDataTypes.TransferType t, MsgDataTypes.BridgeTransferParams calldata _transferParams)\\n        private\\n    {\\n        if (t == MsgDataTypes.TransferType.LqRelay) {\\n            IBridge(liquidityBridge).relay(\\n                _transferParams.request,\\n                _transferParams.sigs,\\n                _transferParams.signers,\\n                _transferParams.powers\\n            );\\n        } else if (t == MsgDataTypes.TransferType.LqWithdraw) {\\n            IBridge(liquidityBridge).withdraw(\\n                _transferParams.request,\\n                _transferParams.sigs,\\n                _transferParams.signers,\\n                _transferParams.powers\\n            );\\n        } else if (t == MsgDataTypes.TransferType.PegMint) {\\n            IPeggedTokenBridge(pegBridge).mint(\\n                _transferParams.request,\\n                _transferParams.sigs,\\n                _transferParams.signers,\\n                _transferParams.powers\\n            );\\n        } else if (t == MsgDataTypes.TransferType.PegV2Mint) {\\n            IPeggedTokenBridgeV2(pegBridgeV2).mint(\\n                _transferParams.request,\\n                _transferParams.sigs,\\n                _transferParams.signers,\\n                _transferParams.powers\\n            );\\n        } else if (t == MsgDataTypes.TransferType.PegWithdraw) {\\n            IOriginalTokenVault(pegVault).withdraw(\\n                _transferParams.request,\\n                _transferParams.sigs,\\n                _transferParams.signers,\\n                _transferParams.powers\\n            );\\n        } else if (t == MsgDataTypes.TransferType.PegV2Withdraw) {\\n            IOriginalTokenVaultV2(pegVaultV2).withdraw(\\n                _transferParams.request,\\n                _transferParams.sigs,\\n                _transferParams.signers,\\n                _transferParams.powers\\n            );\\n        }\\n    }\\n\\n    // ================= contract config =================\\n\\n    function setLiquidityBridge(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        liquidityBridge = _addr;\\n        emit LiquidityBridgeUpdated(liquidityBridge);\\n    }\\n\\n    function setPegBridge(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        pegBridge = _addr;\\n        emit PegBridgeUpdated(pegBridge);\\n    }\\n\\n    function setPegVault(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        pegVault = _addr;\\n        emit PegVaultUpdated(pegVault);\\n    }\\n\\n    function setPegBridgeV2(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        pegBridgeV2 = _addr;\\n        emit PegBridgeV2Updated(pegBridgeV2);\\n    }\\n\\n    function setPegVaultV2(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        pegVaultV2 = _addr;\\n        emit PegVaultV2Updated(pegVaultV2);\\n    }\\n\\n    function setPreExecuteMessageGasUsage(uint256 _usage) public onlyOwner {\\n        preExecuteMessageGasUsage = _usage;\\n    }\\n}\\n\",\"keccak256\":\"0xbb0c4d132d3860f9f48326558d3b032185a97d565ffc449e6b97ec2d10e27bc0\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/message/messagebus/MessageBusSender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../safeguard/Ownable.sol\\\";\\nimport \\\"../../interfaces/ISigsVerifier.sol\\\";\\n\\ncontract MessageBusSender is Ownable {\\n    ISigsVerifier public immutable sigsVerifier;\\n\\n    uint256 public feeBase;\\n    uint256 public feePerByte;\\n    mapping(address => uint256) public withdrawnFees;\\n\\n    event Message(address indexed sender, address receiver, uint256 dstChainId, bytes message, uint256 fee);\\n\\n    event MessageWithTransfer(\\n        address indexed sender,\\n        address receiver,\\n        uint256 dstChainId,\\n        address bridge,\\n        bytes32 srcTransferId,\\n        bytes message,\\n        uint256 fee\\n    );\\n\\n    event FeeBaseUpdated(uint256 feeBase);\\n    event FeePerByteUpdated(uint256 feePerByte);\\n\\n    constructor(ISigsVerifier _sigsVerifier) {\\n        sigsVerifier = _sigsVerifier;\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native gas token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable {\\n        require(_dstChainId != block.chainid, \\\"Invalid chainId\\\");\\n        uint256 minFee = calcFee(_message);\\n        require(msg.value >= minFee, \\\"Insufficient fee\\\");\\n        emit Message(msg.sender, _receiver, _dstChainId, _message, msg.value);\\n    }\\n\\n    /**\\n     * @notice Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _srcBridge The bridge contract to send the transfer with.\\n     * @param _srcTransferId The transfer ID.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable {\\n        require(_dstChainId != block.chainid, \\\"Invalid chainId\\\");\\n        uint256 minFee = calcFee(_message);\\n        require(msg.value >= minFee, \\\"Insufficient fee\\\");\\n        // SGN needs to verify\\n        // 1. msg.sender matches sender of the src transfer\\n        // 2. dstChainId matches dstChainId of the src transfer\\n        // 3. bridge is either liquidity bridge, peg src vault, or peg dst bridge\\n        emit MessageWithTransfer(msg.sender, _receiver, _dstChainId, _srcBridge, _srcTransferId, _message, msg.value);\\n    }\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdrawFee(\\n        address _account,\\n        uint256 _cumulativeFee,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external {\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"withdrawFee\\\"));\\n        sigsVerifier.verifySigs(abi.encodePacked(domain, _account, _cumulativeFee), _sigs, _signers, _powers);\\n        uint256 amount = _cumulativeFee - withdrawnFees[_account];\\n        require(amount > 0, \\\"No new amount to withdraw\\\");\\n        withdrawnFees[_account] = _cumulativeFee;\\n        (bool sent, ) = _account.call{value: amount, gas: 50000}(\\\"\\\");\\n        require(sent, \\\"failed to withdraw fee\\\");\\n    }\\n\\n    /**\\n     * @notice Calculates the required fee for the message.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     @ @return The required fee.\\n     */\\n    function calcFee(bytes calldata _message) public view returns (uint256) {\\n        return feeBase + _message.length * feePerByte;\\n    }\\n\\n    // -------------------- Admin --------------------\\n\\n    function setFeePerByte(uint256 _fee) external onlyOwner {\\n        feePerByte = _fee;\\n        emit FeePerByteUpdated(feePerByte);\\n    }\\n\\n    function setFeeBase(uint256 _fee) external onlyOwner {\\n        feeBase = _fee;\\n        emit FeeBaseUpdated(feeBase);\\n    }\\n}\\n\",\"keccak256\":\"0x0b7418b4a791e6b69fbd788b64b01af78f136c2fe1c5be0372ceef74c458e8aa\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\n * renounceOwnership. So we can support Proxy based upgradable contract\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\n     * because constructor sets _owner in contract state.\\n     */\\n    function initOwner() internal {\\n        require(_owner == address(0), \\\"owner already set\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x2a92103195b8dce0f34fdf9bf7f94ddf38bf8edf0c0fd4be21323c47016687e9\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613976806100206000396000f3fe6080604052600436106101f25760003560e01c80638c04166f1161010d578063ad3ea037116100a0578063ca15c8731161006f578063ca15c873146105df578063d547741f146105ff578063df7171381461061f578063eae6f6521461063f578063f2fde38b1461067357600080fd5b8063ad3ea03714610552578063affed0e014610572578063be4f3e8f14610589578063bebc4f71146105bf57600080fd5b80639377d711116100dc5780639377d711146104b95780639c649fdf1461050a578063a1a227fa1461051d578063a217fddf1461053d57600080fd5b80638c04166f146104145780638da5cb5b146104475780639010d07c1461047957806391d148541461049957600080fd5b806336568abe11610185578063715018a611610154578063715018a6146103c457806377cae758146103d95780637cd2bffc146103ec5780638129fc1c146103ff57600080fd5b806336568abe1461035c5780633b11ca511461037c578063547cad12146103915780635ab7afc6146103b157600080fd5b8063219d5ca5116101c1578063219d5ca5146102c9578063248a9ca3146102de5780632de2c8ad1461031c5780632f2ff15d1461033c57600080fd5b806301ffc9a7146101fe578063063ce4e5146102335780630bcb4982146102535780630d13b65d1461026657600080fd5b366101f957005b600080fd5b34801561020a57600080fd5b5061021e610219366004612da4565b610693565b60405190151581526020015b60405180910390f35b610246610241366004612e42565b6106be565b60405161022a9190612f0b565b610246610261366004612f1e565b6106fe565b34801561027257600080fd5b50610286610281366004612f91565b6108ee565b6040805197885260208801969096526001600160a01b0394851695870195909552606086019290925260808501521660a0830152151560c082015260e00161022a565b6102dc6102d736600461310a565b61094e565b005b3480156102ea57600080fd5b5061030e6102f9366004612f91565b60009081526065602052604090206001015490565b60405190815260200161022a565b34801561032857600080fd5b506102dc6103373660046131a4565b610aad565b34801561034857600080fd5b506102dc610357366004613207565b610ba7565b34801561036857600080fd5b506102dc610377366004613207565b610bd1565b34801561038857600080fd5b5061030e610c4f565b34801561039d57600080fd5b506102dc6103ac366004613237565b610d2b565b6102466103bf3660046132cc565b610daa565b3480156103d057600080fd5b506102dc610f89565b6102dc6103e736600461334d565b610fbf565b6102466103fa3660046132cc565b611075565b34801561040b57600080fd5b506102dc6111ad565b34801561042057600080fd5b5061012e546104329063ffffffff1681565b60405163ffffffff909116815260200161022a565b34801561045357600080fd5b5060c9546001600160a01b03165b6040516001600160a01b03909116815260200161022a565b34801561048557600080fd5b506104616104943660046133a3565b61123a565b3480156104a557600080fd5b5061021e6104b4366004613207565b611259565b3480156104c557600080fd5b506104fc6104d4366004612f91565b610130602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b60405161022a9291906133c5565b6102466105183660046133eb565b611284565b34801561052957600080fd5b5060fb54610461906001600160a01b031681565b34801561054957600080fd5b5061030e600081565b34801561055e57600080fd5b506102dc61056d36600461345d565b6113b5565b34801561057e57600080fd5b5061030e61012f5481565b34801561059557600080fd5b506104616105a4366004612f91565b60fc602052600090815260409020546001600160a01b031681565b3480156105cb57600080fd5b5061030e6105da36600461334d565b61144b565b3480156105eb57600080fd5b5061030e6105fa366004612f91565b6114f2565b34801561060b57600080fd5b506102dc61061a366004613207565b611509565b34801561062b57600080fd5b506102dc61063a366004613237565b61152e565b34801561064b57600080fd5b5061030e7fa5ff3ec7a96cdbba4d2d5172d66bbc73c6db3885f29b21be5da9fa7a7c02523281565b34801561067f57600080fd5b506102dc61068e366004613237565b6115d2565b60006001600160e01b03198216635a05180f60e01b14806106b857506106b882611605565b92915050565b60fb546000906001600160a01b031633146106f45760405162461bcd60e51b81526004016106eb90613483565b60405180910390fd5b9695505050505050565b60fb546000906001600160a01b0316331461072b5760405162461bcd60e51b81526004016106eb90613483565b6000610739848601866134ba565b8051602082015160408301519293509091600260008481526101306020526040902054600160a01b900460ff16600281111561077757610777612ed7565b14156107b85760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c99599d5b99195960821b60448201526064016106eb565b6000838152610130602052604090208054600160a11b60ff60a01b198216179091556001600160a01b03908116906107f3908c16828c61163a565b6001600160a01b0381163b1561087c5760405163472c38ff60e01b8152600481018590526001600160a01b038c81166024830152604482018c905260648201859052838116608483015282169063472c38ff9060a401600060405180830381600087803b15801561086357600080fd5b505af1158015610877573d6000803e3d6000fd5b505050505b828a8c6001600160a01b03167f63d0308ee4588438305445042ecb87ef5b77c2068e39365290d3212bad242e418785876040516108d5939291909283526001600160a01b03918216602084015216604082015260600190565b60405180910390a45060019a9950505050505050505050565b61013181815481106108ff57600080fd5b600091825260209091206006909102018054600182015460028301546003840154600485015460059095015493955091936001600160a01b03918216939091811690600160a01b900460ff1687565b7fa5ff3ec7a96cdbba4d2d5172d66bbc73c6db3885f29b21be5da9fa7a7c0252326109788161169d565b83516000610984610c4f565b90506109908282613512565b3410156109cf5760405162461bcd60e51b815260206004820152600d60248201526c4e6f20656e6f7567682066656560981b60448201526064016106eb565b336000805b84811015610a15578881815181106109ee576109ee613531565b602002602001015182610a019190613547565b915080610a0d8161355f565b9150506109d4565b50610a2b6001600160a01b038a168330846116a7565b60005b84811015610aa157610a8f838b8b8481518110610a4d57610a4d613531565b60200260200101518b8581518110610a6757610a67613531565b60200260200101518b8681518110610a8157610a81613531565b6020026020010151896116df565b80610a998161355f565b915050610a2e565b50505050505050505050565b60c9546001600160a01b03163314610ad75760405162461bcd60e51b81526004016106eb9061357a565b815160005b81811015610ba1576000848281518110610af857610af8613531565b602002602001015190508060001415610b455760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9251608a1b60448201526064016106eb565b838281518110610b5757610b57613531565b602090810291909101810151600092835260fc909152604090912080546001600160a01b0319166001600160a01b0390921691909117905580610b998161355f565b915050610adc565b50505050565b600082815260656020526040902060010154610bc28161169d565b610bcc83836118c1565b505050565b6001600160a01b0381163314610c415760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106eb565b610c4b82826118e3565b5050565b604080516060808201835261012f5480835260006020808501828152948601828152865191820193909352935194840194909452516001600160a01b031690820152819060800160408051601f198184030181529082905260fb5463299aee5160e11b83529092506001600160a01b031690635335dca290610cd5908490600401613607565b60206040518083038186803b158015610ced57600080fd5b505afa158015610d01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d25919061361a565b91505090565b60c9546001600160a01b03163314610d555760405162461bcd60e51b81526004016106eb9061357a565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527f3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e906020015b60405180910390a150565b60fb546000906001600160a01b03163314610dd75760405162461bcd60e51b81526004016106eb90613483565b600083806020019051810190610ded9190613633565b6040805160e0810182526001600160401b03979097168752815160208089019182526001600160a01b039a8b1689840190815260608a019a8b529084015160808a0190815293909201518a1660a08901908152600060c08a01818152610131805460018082018355919093529a517fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db7360069093029283015592517fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db7482015592517fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db75840180546001600160a01b031916918d1691909117905598517fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db7683015591517fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db7782015596517fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db7890970180549151979098166001600160a81b031990911617600160a01b96151596909602959095179095555090949350505050565b60c9546001600160a01b03163314610fb35760405162461bcd60e51b81526004016106eb9061357a565b610fbd6000611905565b565b7fa5ff3ec7a96cdbba4d2d5172d66bbc73c6db3885f29b21be5da9fa7a7c025232610fe98161169d565b600085815260fc60205260409020546001600160a01b0316806110385760405162461bcd60e51b81526020600482015260076024820152662737903832b2b960c91b60448201526064016106eb565b600085858560405160200161104f93929190613669565b604051602081830303815290604052905061106c82888334611957565b50505050505050565b60fb546000906001600160a01b031633146110a25760405162461bcd60e51b81526004016106eb90613483565b6001600160401b038416600090815260fc60205260409020546001600160a01b038881169116146111045760405162461bcd60e51b815260206004820152600c60248201526b2bb937b7339039b2b73232b960a11b60448201526064016106eb565b60008380602001905181019061111a9190613633565b6040810151909150611137906001600160a01b038916908861163a565b85876001600160a01b0316866001600160401b03167fbf57462ba9b000305d6dc3fccd3bde576baffe803a6abf73974617798568506a846000015185604001516040516111979291909182526001600160a01b0316602082015260400190565b60405180910390a4506001979650505050505050565b60006111b96001611973565b905080156111d1576000805461ff0019166101001790555b6111d9611a00565b6111f560006111f060c9546001600160a01b031690565b611a74565b8015611237576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610d9f565b50565b60008281526097602052604081206112529083611a7e565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60fb546000906001600160a01b031633146112b15760405162461bcd60e51b81526004016106eb90613483565b6001600160401b038416600090815260fc60205260409020546001600160a01b038681169116146113135760405162461bcd60e51b815260206004820152600c60248201526b2bb937b7339039b2b73232b960a11b60448201526064016106eb565b60008060008580602001905181019061132c9190613699565b9250925092506000836001600160a01b0316838360405161134d919061372e565b60006040518083038185875af1925050503d806000811461138a576040519150601f19603f3d011682016040523d82523d6000602084013e61138f565b606091505b50909150506001811515146113a55760006113a8565b60015b9998505050505050505050565b60c9546001600160a01b031633146113df5760405162461bcd60e51b81526004016106eb9061357a565b620f42408163ffffffff16111561142e5760405162461bcd60e51b8152602060048201526013602482015272496e76616c6964206d6178536c69707061676560681b60448201526064016106eb565b61012e805463ffffffff191663ffffffff92909216919091179055565b60008084848460405160200161146393929190613669565b60408051601f198184030181529082905260fb5463299aee5160e11b83529092506001600160a01b031690635335dca2906114a2908490600401613607565b60206040518083038186803b1580156114ba57600080fd5b505afa1580156114ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f4919061361a565b60008181526097602052604081206106b890611a8a565b6000828152606560205260409020600101546115248161169d565b610bcc83836118e3565b600061153a6001611973565b90508015611552576000805461ff0019166101001790555b61155a6111ad565b60fb80546001600160a01b0384166001600160a01b031990911617905561012e805463ffffffff191661c3501790558015610c4b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9546001600160a01b031633146115fc5760405162461bcd60e51b81526004016106eb9061357a565b61123781611a94565b60006001600160e01b03198216637965db0b60e01b14806106b857506301ffc9a760e01b6001600160e01b03198316146106b8565b6040516001600160a01b038316602482015260448101829052610bcc90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611aee565b6112378133611bc0565b6040516001600160a01b0380851660248301528316604482015260648101829052610ba19085906323b872dd60e01b90608401611666565b600083815260fc60205260409020546001600160a01b03168061172e5760405162461bcd60e51b81526020600482015260076024820152662737903832b2b960c91b60448201526064016106eb565b61012f54604080518082019091526001600160a01b03891681526020810160009052600082815261013060209081526040909120825181546001600160a01b039091166001600160a01b031982168117835592840151919283916001600160a81b03191617600160a01b8360028111156117aa576117aa612ed7565b0217905550506040805160608101825283815260208082018990526001600160a01b03881682840152915160009350611808920181518152602080830151908201526040918201516001600160a01b03169181019190915260600190565b604051602081830303815290604052905061183e838989898661012e60009054906101000a900463ffffffff168760018c611c24565b5061012f80549060006118508361355f565b91905055508587896001600160a01b03167f277f8efab4a541542121eec9cf9858f44e9f7b133d07da793167fd9781a29ff985338a6040516118ae939291909283526001600160a01b03918216602084015216604082015260600190565b60405180910390a4505050505050505050565b6118cb8282611c5b565b6000828152609760205260409020610bcc9082611ce1565b6118ed8282611cf6565b6000828152609760205260409020610bcc9082611d5d565b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60fb54610ba1908590859085906001600160a01b031685611d72565b60008054610100900460ff16156119ba578160ff1660011480156119965750303b155b6119b25760405162461bcd60e51b81526004016106eb9061374a565b506000919050565b60005460ff8084169116106119e15760405162461bcd60e51b81526004016106eb9061374a565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16611a6b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106eb565b610fbd33611905565b610c4b82826118c1565b60006112528383611dd1565b60006106b8825490565b60c9546001600160a01b03163314611abe5760405162461bcd60e51b81526004016106eb9061357a565b611ada6000611ad560c9546001600160a01b031690565b6118e3565b611ae381611dfb565b611237600082611a74565b6000611b43826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e939092919063ffffffff16565b805190915015610bcc5780806020019051810190611b619190613798565b610bcc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106eb565b611bca8282611259565b610c4b57611be2816001600160a01b03166014611eaa565b611bed836020611eaa565b604051602001611bfe9291906137ba565b60408051601f198184030181529082905262461bcd60e51b82526106eb91600401613607565b6000611c4d8a8a8a8a8a8a8a8a60fb60009054906101000a90046001600160a01b03168b612045565b9a9950505050505050505050565b611c658282611259565b610c4b5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611c9d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611252836001600160a01b03841661214f565b611d008282611259565b15610c4b5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611252836001600160a01b03841661219e565b604051634f9e72ad60e11b81526001600160a01b03831690639f3ce55a908390611da49089908990899060040161382f565b6000604051808303818588803b158015611dbd57600080fd5b505af1158015610aa1573d6000803e3d6000fd5b6000826000018281548110611de857611de8613531565b9060005260206000200154905092915050565b60c9546001600160a01b03163314611e255760405162461bcd60e51b81526004016106eb9061357a565b6001600160a01b038116611e8a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106eb565b61123781611905565b6060611ea28484600085612291565b949350505050565b60606000611eb9836002613512565b611ec4906002613547565b6001600160401b03811115611edb57611edb612faa565b6040519080825280601f01601f191660200182016040528015611f05576020820181803683370190505b509050600360fc1b81600081518110611f2057611f20613531565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f4f57611f4f613531565b60200101906001600160f81b031916908160001a9053506000611f73846002613512565b611f7e906001613547565b90505b6001811115611ff6576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611fb257611fb2613531565b1a60f81b828281518110611fc857611fc8613531565b60200101906001600160f81b031916908160001a90535060049490941c93611fef81613862565b9050611f81565b5083156112525760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106eb565b6000600184600681111561205b5761205b612ed7565b1415612079576120728b8b8b8b8b8b8b8a8a6123c2565b9050611c4d565b600284600681111561208d5761208d612ed7565b14806120aa575060048460068111156120a8576120a8612ed7565b145b156120c057612072848c8c8c8c8c8b8a8a6125ca565b60038460068111156120d4576120d4612ed7565b14806120f1575060058460068111156120ef576120ef612ed7565b145b1561210757612072848c8c8c8c8c8b8a8a6128be565b60405162461bcd60e51b815260206004820152601960248201527f6272696467652074797065206e6f7420737570706f727465640000000000000060448201526064016106eb565b6000818152600183016020526040812054612196575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106b8565b5060006106b8565b600081815260018301602052604081205480156122875760006121c2600183613879565b85549091506000906121d690600190613879565b905081811461223b5760008660000182815481106121f6576121f6613531565b906000526020600020015490508087600001848154811061221957612219613531565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061224c5761224c613890565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106b8565b60009150506106b8565b6060824710156122f25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106eb565b6001600160a01b0385163b6123495760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106eb565b600080866001600160a01b03168587604051612365919061372e565b60006040518083038185875af1925050503d80600081146123a2576040519150601f19603f3d011682016040523d82523d6000602084013e6123a7565b606091505b50915091506123b7828286612b86565b979650505050505050565b600080836001600160a01b03166382980dc46040518163ffffffff1660e01b815260040160206040518083038186803b1580156123fe57600080fd5b505afa158015612412573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243691906138a6565b905061244c6001600160a01b038b16828b612bbf565b60405163a5977fbb60e01b81526001600160a01b038c811660048301528b81166024830152604482018b90526001600160401b03808b1660648401528916608483015263ffffffff881660a483015282169063a5977fbb9060c401600060405180830381600087803b1580156124c157600080fd5b505af11580156124d5573d6000803e3d6000fd5b50506040516001600160601b031930606090811b821660208401528f811b821660348401528e901b166048820152605c81018c90526001600160c01b031960c08c811b8216607c8401528b811b8216608484015246901b16608c820152600092506094019050604051602081830303815290604052805190602001209050846001600160a01b0316634289fbb3858e8c86868c6040518763ffffffff1660e01b81526004016125889594939291906138c3565b6000604051808303818588803b1580156125a157600080fd5b505af11580156125b5573d6000803e3d6000fd5b50939f9e505050505050505050505050505050565b60008060028b60068111156125e1576125e1612ed7565b141561265f57836001600160a01b031663d8257d176040518163ffffffff1660e01b815260040160206040518083038186803b15801561262057600080fd5b505afa158015612634573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265891906138a6565b90506126d3565b836001600160a01b031663c66a9c5a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561269857600080fd5b505afa1580156126ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d091906138a6565b90505b6126e76001600160a01b038a16828a612bbf565b600060028c60068111156126fd576126fd612ed7565b14156127ff57816001600160a01b031663234636248b8b8b8f8c6040518663ffffffff1660e01b8152600401612737959493929190613905565b600060405180830381600087803b15801561275157600080fd5b505af1158015612765573d6000803e3d6000fd5b50505050308a8a8a8e8b466040516020016127e29796959493929190606097881b6001600160601b0319908116825296881b87166014820152602881019590955260c093841b6001600160c01b031990811660488701529290961b909416605084015292811b831660648301529290921b16606c82015260740190565b604051602081830303815290604052805190602001209050612888565b816001600160a01b031663234636248b8b8b8f8c6040518663ffffffff1660e01b8152600401612833959493929190613905565b602060405180830381600087803b15801561284d57600080fd5b505af1158015612861573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612885919061361a565b90505b604051634289fbb360e01b81526001600160a01b03861690634289fbb3908690612588908f908d90889088908e906004016138c3565b60008060038b60068111156128d5576128d5612ed7565b141561295357836001600160a01b031663dfa2dbaf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561291457600080fd5b505afa158015612928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294c91906138a6565b90506129c7565b836001600160a01b03166395b12c276040518163ffffffff1660e01b815260040160206040518083038186803b15801561298c57600080fd5b505afa1580156129a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c491906138a6565b90505b6129db6001600160a01b038a16828a612bbf565b600060038c60068111156129f1576129f1612ed7565b1415612ae857604051636f3c863f60e11b81526001600160a01b038b81166004830152602482018b90528c811660448301526001600160401b038916606483015283169063de790c7e90608401600060405180830381600087803b158015612a5857600080fd5b505af1158015612a6c573d6000803e3d6000fd5b50506040516001600160601b031930606090811b821660208401528e811b82166034840152604883018e90528f901b1660688201526001600160c01b031960c08b811b8216607c84015246901b166084820152608c019150612acb9050565b604051602081830303815290604052805190602001209050612b71565b816001600160a01b031663a00293018b8b8b8f8c6040518663ffffffff1660e01b8152600401612b1c959493929190613905565b602060405180830381600087803b158015612b3657600080fd5b505af1158015612b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b6e919061361a565b90505b6128886001600160a01b038b16836000612c80565b60608315612b95575081611252565b825115612ba55782518084602001fd5b8160405162461bcd60e51b81526004016106eb9190613607565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b158015612c0b57600080fd5b505afa158015612c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c43919061361a565b612c4d9190613547565b6040516001600160a01b038516602482015260448101829052909150610ba190859063095ea7b360e01b90606401611666565b801580612d095750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612ccf57600080fd5b505afa158015612ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d07919061361a565b155b612d745760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106eb565b6040516001600160a01b038316602482015260448101829052610bcc90849063095ea7b360e01b90606401611666565b600060208284031215612db657600080fd5b81356001600160e01b03198116811461125257600080fd5b60008083601f840112612de057600080fd5b5081356001600160401b03811115612df757600080fd5b602083019150836020828501011115612e0f57600080fd5b9250929050565b80356001600160401b03811681146119fb57600080fd5b6001600160a01b038116811461123757600080fd5b60008060008060008060808789031215612e5b57600080fd5b86356001600160401b0380821115612e7257600080fd5b612e7e8a838b01612dce565b9098509650869150612e9260208a01612e16565b95506040890135915080821115612ea857600080fd5b50612eb589828a01612dce565b9094509250506060870135612ec981612e2d565b809150509295509295509295565b634e487b7160e01b600052602160045260246000fd5b6003811061123757634e487b7160e01b600052602160045260246000fd5b60208101612f1883612eed565b91905290565b600080600080600060808688031215612f3657600080fd5b8535612f4181612e2d565b94506020860135935060408601356001600160401b03811115612f6357600080fd5b612f6f88828901612dce565b9094509250506060860135612f8381612e2d565b809150509295509295909350565b600060208284031215612fa357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715612fe257612fe2612faa565b60405290565b604051601f8201601f191681016001600160401b038111828210171561301057613010612faa565b604052919050565b60006001600160401b0382111561303157613031612faa565b5060051b60200190565b600082601f83011261304c57600080fd5b8135602061306161305c83613018565b612fe8565b82815260059290921b8401810191818101908684111561308057600080fd5b8286015b8481101561309b5780358352918301918301613084565b509695505050505050565b600082601f8301126130b757600080fd5b813560206130c761305c83613018565b82815260059290921b840181019181810190868411156130e657600080fd5b8286015b8481101561309b5780356130fd81612e2d565b83529183019183016130ea565b6000806000806080858703121561312057600080fd5b843561312b81612e2d565b935060208501356001600160401b038082111561314757600080fd5b6131538883890161303b565b9450604087013591508082111561316957600080fd5b6131758883890161303b565b9350606087013591508082111561318b57600080fd5b50613198878288016130a6565b91505092959194509250565b600080604083850312156131b757600080fd5b82356001600160401b03808211156131ce57600080fd5b6131da8683870161303b565b935060208501359150808211156131f057600080fd5b506131fd858286016130a6565b9150509250929050565b6000806040838503121561321a57600080fd5b82359150602083013561322c81612e2d565b809150509250929050565b60006020828403121561324957600080fd5b813561125281612e2d565b60006001600160401b0382111561326d5761326d612faa565b50601f01601f191660200190565b600082601f83011261328c57600080fd5b813561329a61305c82613254565b8181528460208386010111156132af57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c087890312156132e557600080fd5b86356132f081612e2d565b9550602087013561330081612e2d565b94506040870135935061331560608801612e16565b925060808701356001600160401b0381111561333057600080fd5b61333c89828a0161327b565b92505060a0870135612ec981612e2d565b6000806000806080858703121561336357600080fd5b84359350602085013561337581612e2d565b92506040850135915060608501356001600160401b0381111561339757600080fd5b6131988782880161327b565b600080604083850312156133b657600080fd5b50508035926020909101359150565b6001600160a01b0383168152604081016133de83612eed565b8260208301529392505050565b6000806000806080858703121561340157600080fd5b843561340c81612e2d565b935061341a60208601612e16565b925060408501356001600160401b0381111561343557600080fd5b6134418782880161327b565b925050606085013561345281612e2d565b939692955090935050565b60006020828403121561346f57600080fd5b813563ffffffff8116811461125257600080fd5b60208082526019908201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604082015260600190565b6000606082840312156134cc57600080fd5b6134d4612fc0565b823581526020830135602082015260408301356134f081612e2d565b60408201529392505050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561352c5761352c6134fc565b500290565b634e487b7160e01b600052603260045260246000fd5b6000821982111561355a5761355a6134fc565b500190565b6000600019821415613573576135736134fc565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60005b838110156135ca5781810151838201526020016135b2565b83811115610ba15750506000910152565b600081518084526135f38160208601602086016135af565b601f01601f19169290920160200192915050565b60208152600061125260208301846135db565b60006020828403121561362c57600080fd5b5051919050565b60006060828403121561364557600080fd5b61364d612fc0565b825181526020830151602082015260408301516134f081612e2d565b60018060a01b038416815282602082015260606040820152600061369060608301846135db565b95945050505050565b6000806000606084860312156136ae57600080fd5b83516136b981612e2d565b6020850151604086015191945092506001600160401b038111156136dc57600080fd5b8401601f810186136136ed57600080fd5b80516136fb61305c82613254565b81815287602083850101111561371057600080fd5b6137218260208301602086016135af565b8093505050509250925092565b600082516137408184602087016135af565b9190910192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000602082840312156137aa57600080fd5b8151801515811461125257600080fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516137f28160178501602088016135af565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516138238160288401602088016135af565b01602801949350505050565b6001600160a01b03841681526001600160401b0383166020820152606060408201819052600090613690908301846135db565b600081613871576138716134fc565b506000190190565b60008282101561388b5761388b6134fc565b500390565b634e487b7160e01b600052603160045260246000fd5b6000602082840312156138b857600080fd5b815161125281612e2d565b6001600160a01b0386811682526001600160401b0386166020830152841660408201526060810183905260a0608082018190526000906123b7908301846135db565b6001600160a01b03958616815260208101949094526001600160401b0392831660408501529316606083015291909116608082015260a0019056fea2646970667358221220604e206e40e534e5f86c95bc4eeae057a7a180194ed77b9634961362a532e04264736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101f25760003560e01c80638c04166f1161010d578063ad3ea037116100a0578063ca15c8731161006f578063ca15c873146105df578063d547741f146105ff578063df7171381461061f578063eae6f6521461063f578063f2fde38b1461067357600080fd5b8063ad3ea03714610552578063affed0e014610572578063be4f3e8f14610589578063bebc4f71146105bf57600080fd5b80639377d711116100dc5780639377d711146104b95780639c649fdf1461050a578063a1a227fa1461051d578063a217fddf1461053d57600080fd5b80638c04166f146104145780638da5cb5b146104475780639010d07c1461047957806391d148541461049957600080fd5b806336568abe11610185578063715018a611610154578063715018a6146103c457806377cae758146103d95780637cd2bffc146103ec5780638129fc1c146103ff57600080fd5b806336568abe1461035c5780633b11ca511461037c578063547cad12146103915780635ab7afc6146103b157600080fd5b8063219d5ca5116101c1578063219d5ca5146102c9578063248a9ca3146102de5780632de2c8ad1461031c5780632f2ff15d1461033c57600080fd5b806301ffc9a7146101fe578063063ce4e5146102335780630bcb4982146102535780630d13b65d1461026657600080fd5b366101f957005b600080fd5b34801561020a57600080fd5b5061021e610219366004612da4565b610693565b60405190151581526020015b60405180910390f35b610246610241366004612e42565b6106be565b60405161022a9190612f0b565b610246610261366004612f1e565b6106fe565b34801561027257600080fd5b50610286610281366004612f91565b6108ee565b6040805197885260208801969096526001600160a01b0394851695870195909552606086019290925260808501521660a0830152151560c082015260e00161022a565b6102dc6102d736600461310a565b61094e565b005b3480156102ea57600080fd5b5061030e6102f9366004612f91565b60009081526065602052604090206001015490565b60405190815260200161022a565b34801561032857600080fd5b506102dc6103373660046131a4565b610aad565b34801561034857600080fd5b506102dc610357366004613207565b610ba7565b34801561036857600080fd5b506102dc610377366004613207565b610bd1565b34801561038857600080fd5b5061030e610c4f565b34801561039d57600080fd5b506102dc6103ac366004613237565b610d2b565b6102466103bf3660046132cc565b610daa565b3480156103d057600080fd5b506102dc610f89565b6102dc6103e736600461334d565b610fbf565b6102466103fa3660046132cc565b611075565b34801561040b57600080fd5b506102dc6111ad565b34801561042057600080fd5b5061012e546104329063ffffffff1681565b60405163ffffffff909116815260200161022a565b34801561045357600080fd5b5060c9546001600160a01b03165b6040516001600160a01b03909116815260200161022a565b34801561048557600080fd5b506104616104943660046133a3565b61123a565b3480156104a557600080fd5b5061021e6104b4366004613207565b611259565b3480156104c557600080fd5b506104fc6104d4366004612f91565b610130602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b60405161022a9291906133c5565b6102466105183660046133eb565b611284565b34801561052957600080fd5b5060fb54610461906001600160a01b031681565b34801561054957600080fd5b5061030e600081565b34801561055e57600080fd5b506102dc61056d36600461345d565b6113b5565b34801561057e57600080fd5b5061030e61012f5481565b34801561059557600080fd5b506104616105a4366004612f91565b60fc602052600090815260409020546001600160a01b031681565b3480156105cb57600080fd5b5061030e6105da36600461334d565b61144b565b3480156105eb57600080fd5b5061030e6105fa366004612f91565b6114f2565b34801561060b57600080fd5b506102dc61061a366004613207565b611509565b34801561062b57600080fd5b506102dc61063a366004613237565b61152e565b34801561064b57600080fd5b5061030e7fa5ff3ec7a96cdbba4d2d5172d66bbc73c6db3885f29b21be5da9fa7a7c02523281565b34801561067f57600080fd5b506102dc61068e366004613237565b6115d2565b60006001600160e01b03198216635a05180f60e01b14806106b857506106b882611605565b92915050565b60fb546000906001600160a01b031633146106f45760405162461bcd60e51b81526004016106eb90613483565b60405180910390fd5b9695505050505050565b60fb546000906001600160a01b0316331461072b5760405162461bcd60e51b81526004016106eb90613483565b6000610739848601866134ba565b8051602082015160408301519293509091600260008481526101306020526040902054600160a01b900460ff16600281111561077757610777612ed7565b14156107b85760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c99599d5b99195960821b60448201526064016106eb565b6000838152610130602052604090208054600160a11b60ff60a01b198216179091556001600160a01b03908116906107f3908c16828c61163a565b6001600160a01b0381163b1561087c5760405163472c38ff60e01b8152600481018590526001600160a01b038c81166024830152604482018c905260648201859052838116608483015282169063472c38ff9060a401600060405180830381600087803b15801561086357600080fd5b505af1158015610877573d6000803e3d6000fd5b505050505b828a8c6001600160a01b03167f63d0308ee4588438305445042ecb87ef5b77c2068e39365290d3212bad242e418785876040516108d5939291909283526001600160a01b03918216602084015216604082015260600190565b60405180910390a45060019a9950505050505050505050565b61013181815481106108ff57600080fd5b600091825260209091206006909102018054600182015460028301546003840154600485015460059095015493955091936001600160a01b03918216939091811690600160a01b900460ff1687565b7fa5ff3ec7a96cdbba4d2d5172d66bbc73c6db3885f29b21be5da9fa7a7c0252326109788161169d565b83516000610984610c4f565b90506109908282613512565b3410156109cf5760405162461bcd60e51b815260206004820152600d60248201526c4e6f20656e6f7567682066656560981b60448201526064016106eb565b336000805b84811015610a15578881815181106109ee576109ee613531565b602002602001015182610a019190613547565b915080610a0d8161355f565b9150506109d4565b50610a2b6001600160a01b038a168330846116a7565b60005b84811015610aa157610a8f838b8b8481518110610a4d57610a4d613531565b60200260200101518b8581518110610a6757610a67613531565b60200260200101518b8681518110610a8157610a81613531565b6020026020010151896116df565b80610a998161355f565b915050610a2e565b50505050505050505050565b60c9546001600160a01b03163314610ad75760405162461bcd60e51b81526004016106eb9061357a565b815160005b81811015610ba1576000848281518110610af857610af8613531565b602002602001015190508060001415610b455760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9251608a1b60448201526064016106eb565b838281518110610b5757610b57613531565b602090810291909101810151600092835260fc909152604090912080546001600160a01b0319166001600160a01b0390921691909117905580610b998161355f565b915050610adc565b50505050565b600082815260656020526040902060010154610bc28161169d565b610bcc83836118c1565b505050565b6001600160a01b0381163314610c415760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106eb565b610c4b82826118e3565b5050565b604080516060808201835261012f5480835260006020808501828152948601828152865191820193909352935194840194909452516001600160a01b031690820152819060800160408051601f198184030181529082905260fb5463299aee5160e11b83529092506001600160a01b031690635335dca290610cd5908490600401613607565b60206040518083038186803b158015610ced57600080fd5b505afa158015610d01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d25919061361a565b91505090565b60c9546001600160a01b03163314610d555760405162461bcd60e51b81526004016106eb9061357a565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527f3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e906020015b60405180910390a150565b60fb546000906001600160a01b03163314610dd75760405162461bcd60e51b81526004016106eb90613483565b600083806020019051810190610ded9190613633565b6040805160e0810182526001600160401b03979097168752815160208089019182526001600160a01b039a8b1689840190815260608a019a8b529084015160808a0190815293909201518a1660a08901908152600060c08a01818152610131805460018082018355919093529a517fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db7360069093029283015592517fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db7482015592517fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db75840180546001600160a01b031916918d1691909117905598517fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db7683015591517fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db7782015596517fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db7890970180549151979098166001600160a81b031990911617600160a01b96151596909602959095179095555090949350505050565b60c9546001600160a01b03163314610fb35760405162461bcd60e51b81526004016106eb9061357a565b610fbd6000611905565b565b7fa5ff3ec7a96cdbba4d2d5172d66bbc73c6db3885f29b21be5da9fa7a7c025232610fe98161169d565b600085815260fc60205260409020546001600160a01b0316806110385760405162461bcd60e51b81526020600482015260076024820152662737903832b2b960c91b60448201526064016106eb565b600085858560405160200161104f93929190613669565b604051602081830303815290604052905061106c82888334611957565b50505050505050565b60fb546000906001600160a01b031633146110a25760405162461bcd60e51b81526004016106eb90613483565b6001600160401b038416600090815260fc60205260409020546001600160a01b038881169116146111045760405162461bcd60e51b815260206004820152600c60248201526b2bb937b7339039b2b73232b960a11b60448201526064016106eb565b60008380602001905181019061111a9190613633565b6040810151909150611137906001600160a01b038916908861163a565b85876001600160a01b0316866001600160401b03167fbf57462ba9b000305d6dc3fccd3bde576baffe803a6abf73974617798568506a846000015185604001516040516111979291909182526001600160a01b0316602082015260400190565b60405180910390a4506001979650505050505050565b60006111b96001611973565b905080156111d1576000805461ff0019166101001790555b6111d9611a00565b6111f560006111f060c9546001600160a01b031690565b611a74565b8015611237576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610d9f565b50565b60008281526097602052604081206112529083611a7e565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60fb546000906001600160a01b031633146112b15760405162461bcd60e51b81526004016106eb90613483565b6001600160401b038416600090815260fc60205260409020546001600160a01b038681169116146113135760405162461bcd60e51b815260206004820152600c60248201526b2bb937b7339039b2b73232b960a11b60448201526064016106eb565b60008060008580602001905181019061132c9190613699565b9250925092506000836001600160a01b0316838360405161134d919061372e565b60006040518083038185875af1925050503d806000811461138a576040519150601f19603f3d011682016040523d82523d6000602084013e61138f565b606091505b50909150506001811515146113a55760006113a8565b60015b9998505050505050505050565b60c9546001600160a01b031633146113df5760405162461bcd60e51b81526004016106eb9061357a565b620f42408163ffffffff16111561142e5760405162461bcd60e51b8152602060048201526013602482015272496e76616c6964206d6178536c69707061676560681b60448201526064016106eb565b61012e805463ffffffff191663ffffffff92909216919091179055565b60008084848460405160200161146393929190613669565b60408051601f198184030181529082905260fb5463299aee5160e11b83529092506001600160a01b031690635335dca2906114a2908490600401613607565b60206040518083038186803b1580156114ba57600080fd5b505afa1580156114ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f4919061361a565b60008181526097602052604081206106b890611a8a565b6000828152606560205260409020600101546115248161169d565b610bcc83836118e3565b600061153a6001611973565b90508015611552576000805461ff0019166101001790555b61155a6111ad565b60fb80546001600160a01b0384166001600160a01b031990911617905561012e805463ffffffff191661c3501790558015610c4b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60c9546001600160a01b031633146115fc5760405162461bcd60e51b81526004016106eb9061357a565b61123781611a94565b60006001600160e01b03198216637965db0b60e01b14806106b857506301ffc9a760e01b6001600160e01b03198316146106b8565b6040516001600160a01b038316602482015260448101829052610bcc90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611aee565b6112378133611bc0565b6040516001600160a01b0380851660248301528316604482015260648101829052610ba19085906323b872dd60e01b90608401611666565b600083815260fc60205260409020546001600160a01b03168061172e5760405162461bcd60e51b81526020600482015260076024820152662737903832b2b960c91b60448201526064016106eb565b61012f54604080518082019091526001600160a01b03891681526020810160009052600082815261013060209081526040909120825181546001600160a01b039091166001600160a01b031982168117835592840151919283916001600160a81b03191617600160a01b8360028111156117aa576117aa612ed7565b0217905550506040805160608101825283815260208082018990526001600160a01b03881682840152915160009350611808920181518152602080830151908201526040918201516001600160a01b03169181019190915260600190565b604051602081830303815290604052905061183e838989898661012e60009054906101000a900463ffffffff168760018c611c24565b5061012f80549060006118508361355f565b91905055508587896001600160a01b03167f277f8efab4a541542121eec9cf9858f44e9f7b133d07da793167fd9781a29ff985338a6040516118ae939291909283526001600160a01b03918216602084015216604082015260600190565b60405180910390a4505050505050505050565b6118cb8282611c5b565b6000828152609760205260409020610bcc9082611ce1565b6118ed8282611cf6565b6000828152609760205260409020610bcc9082611d5d565b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60fb54610ba1908590859085906001600160a01b031685611d72565b60008054610100900460ff16156119ba578160ff1660011480156119965750303b155b6119b25760405162461bcd60e51b81526004016106eb9061374a565b506000919050565b60005460ff8084169116106119e15760405162461bcd60e51b81526004016106eb9061374a565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16611a6b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106eb565b610fbd33611905565b610c4b82826118c1565b60006112528383611dd1565b60006106b8825490565b60c9546001600160a01b03163314611abe5760405162461bcd60e51b81526004016106eb9061357a565b611ada6000611ad560c9546001600160a01b031690565b6118e3565b611ae381611dfb565b611237600082611a74565b6000611b43826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e939092919063ffffffff16565b805190915015610bcc5780806020019051810190611b619190613798565b610bcc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106eb565b611bca8282611259565b610c4b57611be2816001600160a01b03166014611eaa565b611bed836020611eaa565b604051602001611bfe9291906137ba565b60408051601f198184030181529082905262461bcd60e51b82526106eb91600401613607565b6000611c4d8a8a8a8a8a8a8a8a60fb60009054906101000a90046001600160a01b03168b612045565b9a9950505050505050505050565b611c658282611259565b610c4b5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611c9d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611252836001600160a01b03841661214f565b611d008282611259565b15610c4b5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611252836001600160a01b03841661219e565b604051634f9e72ad60e11b81526001600160a01b03831690639f3ce55a908390611da49089908990899060040161382f565b6000604051808303818588803b158015611dbd57600080fd5b505af1158015610aa1573d6000803e3d6000fd5b6000826000018281548110611de857611de8613531565b9060005260206000200154905092915050565b60c9546001600160a01b03163314611e255760405162461bcd60e51b81526004016106eb9061357a565b6001600160a01b038116611e8a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106eb565b61123781611905565b6060611ea28484600085612291565b949350505050565b60606000611eb9836002613512565b611ec4906002613547565b6001600160401b03811115611edb57611edb612faa565b6040519080825280601f01601f191660200182016040528015611f05576020820181803683370190505b509050600360fc1b81600081518110611f2057611f20613531565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f4f57611f4f613531565b60200101906001600160f81b031916908160001a9053506000611f73846002613512565b611f7e906001613547565b90505b6001811115611ff6576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611fb257611fb2613531565b1a60f81b828281518110611fc857611fc8613531565b60200101906001600160f81b031916908160001a90535060049490941c93611fef81613862565b9050611f81565b5083156112525760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106eb565b6000600184600681111561205b5761205b612ed7565b1415612079576120728b8b8b8b8b8b8b8a8a6123c2565b9050611c4d565b600284600681111561208d5761208d612ed7565b14806120aa575060048460068111156120a8576120a8612ed7565b145b156120c057612072848c8c8c8c8c8b8a8a6125ca565b60038460068111156120d4576120d4612ed7565b14806120f1575060058460068111156120ef576120ef612ed7565b145b1561210757612072848c8c8c8c8c8b8a8a6128be565b60405162461bcd60e51b815260206004820152601960248201527f6272696467652074797065206e6f7420737570706f727465640000000000000060448201526064016106eb565b6000818152600183016020526040812054612196575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106b8565b5060006106b8565b600081815260018301602052604081205480156122875760006121c2600183613879565b85549091506000906121d690600190613879565b905081811461223b5760008660000182815481106121f6576121f6613531565b906000526020600020015490508087600001848154811061221957612219613531565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061224c5761224c613890565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106b8565b60009150506106b8565b6060824710156122f25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106eb565b6001600160a01b0385163b6123495760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106eb565b600080866001600160a01b03168587604051612365919061372e565b60006040518083038185875af1925050503d80600081146123a2576040519150601f19603f3d011682016040523d82523d6000602084013e6123a7565b606091505b50915091506123b7828286612b86565b979650505050505050565b600080836001600160a01b03166382980dc46040518163ffffffff1660e01b815260040160206040518083038186803b1580156123fe57600080fd5b505afa158015612412573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243691906138a6565b905061244c6001600160a01b038b16828b612bbf565b60405163a5977fbb60e01b81526001600160a01b038c811660048301528b81166024830152604482018b90526001600160401b03808b1660648401528916608483015263ffffffff881660a483015282169063a5977fbb9060c401600060405180830381600087803b1580156124c157600080fd5b505af11580156124d5573d6000803e3d6000fd5b50506040516001600160601b031930606090811b821660208401528f811b821660348401528e901b166048820152605c81018c90526001600160c01b031960c08c811b8216607c8401528b811b8216608484015246901b16608c820152600092506094019050604051602081830303815290604052805190602001209050846001600160a01b0316634289fbb3858e8c86868c6040518763ffffffff1660e01b81526004016125889594939291906138c3565b6000604051808303818588803b1580156125a157600080fd5b505af11580156125b5573d6000803e3d6000fd5b50939f9e505050505050505050505050505050565b60008060028b60068111156125e1576125e1612ed7565b141561265f57836001600160a01b031663d8257d176040518163ffffffff1660e01b815260040160206040518083038186803b15801561262057600080fd5b505afa158015612634573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265891906138a6565b90506126d3565b836001600160a01b031663c66a9c5a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561269857600080fd5b505afa1580156126ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d091906138a6565b90505b6126e76001600160a01b038a16828a612bbf565b600060028c60068111156126fd576126fd612ed7565b14156127ff57816001600160a01b031663234636248b8b8b8f8c6040518663ffffffff1660e01b8152600401612737959493929190613905565b600060405180830381600087803b15801561275157600080fd5b505af1158015612765573d6000803e3d6000fd5b50505050308a8a8a8e8b466040516020016127e29796959493929190606097881b6001600160601b0319908116825296881b87166014820152602881019590955260c093841b6001600160c01b031990811660488701529290961b909416605084015292811b831660648301529290921b16606c82015260740190565b604051602081830303815290604052805190602001209050612888565b816001600160a01b031663234636248b8b8b8f8c6040518663ffffffff1660e01b8152600401612833959493929190613905565b602060405180830381600087803b15801561284d57600080fd5b505af1158015612861573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612885919061361a565b90505b604051634289fbb360e01b81526001600160a01b03861690634289fbb3908690612588908f908d90889088908e906004016138c3565b60008060038b60068111156128d5576128d5612ed7565b141561295357836001600160a01b031663dfa2dbaf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561291457600080fd5b505afa158015612928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294c91906138a6565b90506129c7565b836001600160a01b03166395b12c276040518163ffffffff1660e01b815260040160206040518083038186803b15801561298c57600080fd5b505afa1580156129a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c491906138a6565b90505b6129db6001600160a01b038a16828a612bbf565b600060038c60068111156129f1576129f1612ed7565b1415612ae857604051636f3c863f60e11b81526001600160a01b038b81166004830152602482018b90528c811660448301526001600160401b038916606483015283169063de790c7e90608401600060405180830381600087803b158015612a5857600080fd5b505af1158015612a6c573d6000803e3d6000fd5b50506040516001600160601b031930606090811b821660208401528e811b82166034840152604883018e90528f901b1660688201526001600160c01b031960c08b811b8216607c84015246901b166084820152608c019150612acb9050565b604051602081830303815290604052805190602001209050612b71565b816001600160a01b031663a00293018b8b8b8f8c6040518663ffffffff1660e01b8152600401612b1c959493929190613905565b602060405180830381600087803b158015612b3657600080fd5b505af1158015612b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b6e919061361a565b90505b6128886001600160a01b038b16836000612c80565b60608315612b95575081611252565b825115612ba55782518084602001fd5b8160405162461bcd60e51b81526004016106eb9190613607565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b158015612c0b57600080fd5b505afa158015612c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c43919061361a565b612c4d9190613547565b6040516001600160a01b038516602482015260448101829052909150610ba190859063095ea7b360e01b90606401611666565b801580612d095750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612ccf57600080fd5b505afa158015612ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d07919061361a565b155b612d745760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106eb565b6040516001600160a01b038316602482015260448101829052610bcc90849063095ea7b360e01b90606401611666565b600060208284031215612db657600080fd5b81356001600160e01b03198116811461125257600080fd5b60008083601f840112612de057600080fd5b5081356001600160401b03811115612df757600080fd5b602083019150836020828501011115612e0f57600080fd5b9250929050565b80356001600160401b03811681146119fb57600080fd5b6001600160a01b038116811461123757600080fd5b60008060008060008060808789031215612e5b57600080fd5b86356001600160401b0380821115612e7257600080fd5b612e7e8a838b01612dce565b9098509650869150612e9260208a01612e16565b95506040890135915080821115612ea857600080fd5b50612eb589828a01612dce565b9094509250506060870135612ec981612e2d565b809150509295509295509295565b634e487b7160e01b600052602160045260246000fd5b6003811061123757634e487b7160e01b600052602160045260246000fd5b60208101612f1883612eed565b91905290565b600080600080600060808688031215612f3657600080fd5b8535612f4181612e2d565b94506020860135935060408601356001600160401b03811115612f6357600080fd5b612f6f88828901612dce565b9094509250506060860135612f8381612e2d565b809150509295509295909350565b600060208284031215612fa357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715612fe257612fe2612faa565b60405290565b604051601f8201601f191681016001600160401b038111828210171561301057613010612faa565b604052919050565b60006001600160401b0382111561303157613031612faa565b5060051b60200190565b600082601f83011261304c57600080fd5b8135602061306161305c83613018565b612fe8565b82815260059290921b8401810191818101908684111561308057600080fd5b8286015b8481101561309b5780358352918301918301613084565b509695505050505050565b600082601f8301126130b757600080fd5b813560206130c761305c83613018565b82815260059290921b840181019181810190868411156130e657600080fd5b8286015b8481101561309b5780356130fd81612e2d565b83529183019183016130ea565b6000806000806080858703121561312057600080fd5b843561312b81612e2d565b935060208501356001600160401b038082111561314757600080fd5b6131538883890161303b565b9450604087013591508082111561316957600080fd5b6131758883890161303b565b9350606087013591508082111561318b57600080fd5b50613198878288016130a6565b91505092959194509250565b600080604083850312156131b757600080fd5b82356001600160401b03808211156131ce57600080fd5b6131da8683870161303b565b935060208501359150808211156131f057600080fd5b506131fd858286016130a6565b9150509250929050565b6000806040838503121561321a57600080fd5b82359150602083013561322c81612e2d565b809150509250929050565b60006020828403121561324957600080fd5b813561125281612e2d565b60006001600160401b0382111561326d5761326d612faa565b50601f01601f191660200190565b600082601f83011261328c57600080fd5b813561329a61305c82613254565b8181528460208386010111156132af57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c087890312156132e557600080fd5b86356132f081612e2d565b9550602087013561330081612e2d565b94506040870135935061331560608801612e16565b925060808701356001600160401b0381111561333057600080fd5b61333c89828a0161327b565b92505060a0870135612ec981612e2d565b6000806000806080858703121561336357600080fd5b84359350602085013561337581612e2d565b92506040850135915060608501356001600160401b0381111561339757600080fd5b6131988782880161327b565b600080604083850312156133b657600080fd5b50508035926020909101359150565b6001600160a01b0383168152604081016133de83612eed565b8260208301529392505050565b6000806000806080858703121561340157600080fd5b843561340c81612e2d565b935061341a60208601612e16565b925060408501356001600160401b0381111561343557600080fd5b6134418782880161327b565b925050606085013561345281612e2d565b939692955090935050565b60006020828403121561346f57600080fd5b813563ffffffff8116811461125257600080fd5b60208082526019908201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604082015260600190565b6000606082840312156134cc57600080fd5b6134d4612fc0565b823581526020830135602082015260408301356134f081612e2d565b60408201529392505050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561352c5761352c6134fc565b500290565b634e487b7160e01b600052603260045260246000fd5b6000821982111561355a5761355a6134fc565b500190565b6000600019821415613573576135736134fc565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60005b838110156135ca5781810151838201526020016135b2565b83811115610ba15750506000910152565b600081518084526135f38160208601602086016135af565b601f01601f19169290920160200192915050565b60208152600061125260208301846135db565b60006020828403121561362c57600080fd5b5051919050565b60006060828403121561364557600080fd5b61364d612fc0565b825181526020830151602082015260408301516134f081612e2d565b60018060a01b038416815282602082015260606040820152600061369060608301846135db565b95945050505050565b6000806000606084860312156136ae57600080fd5b83516136b981612e2d565b6020850151604086015191945092506001600160401b038111156136dc57600080fd5b8401601f810186136136ed57600080fd5b80516136fb61305c82613254565b81815287602083850101111561371057600080fd5b6137218260208301602086016135af565b8093505050509250925092565b600082516137408184602087016135af565b9190910192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000602082840312156137aa57600080fd5b8151801515811461125257600080fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516137f28160178501602088016135af565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516138238160288401602088016135af565b01602801949350505050565b6001600160a01b03841681526001600160401b0383166020820152606060408201819052600090613690908301846135db565b600081613871576138716134fc565b506000190190565b60008282101561388b5761388b6134fc565b500390565b634e487b7160e01b600052603160045260246000fd5b6000602082840312156138b857600080fd5b815161125281612e2d565b6001600160a01b0386811682526001600160401b0386166020830152841660408201526060810183905260a0608082018190526000906123b7908301846135db565b6001600160a01b03958616815260208101949094526001600160401b0392831660408501529316606083015291909116608082015260a0019056fea2646970667358221220604e206e40e534e5f86c95bc4eeae057a7a180194ed77b9634961362a532e04264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)": {
        "notice": "This functions won't be called because executeMessageWithTransfer always returns Success."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 713,
        "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 716,
        "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3292,
        "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3946,
        "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 483,
        "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33,
        "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4359_storage)"
      },
      {
        "astId": 143,
        "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 593,
        "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
        "label": "_owner",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 705,
        "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 65869,
        "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
        "label": "messageBus",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 56007,
        "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
        "label": "peers",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 56164,
        "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 65149,
        "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
        "label": "maxSlippage",
        "offset": 0,
        "slot": "302",
        "type": "t_uint32"
      },
      {
        "astId": 65151,
        "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
        "label": "nonce",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      },
      {
        "astId": 65156,
        "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
        "label": "transfers",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_uint256,t_struct(TransferEntry)65125_storage)"
      },
      {
        "astId": 65160,
        "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
        "label": "fallbacks",
        "offset": 0,
        "slot": "305",
        "type": "t_array(t_struct(FallbackEntry)65147_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(FallbackEntry)65147_storage)dyn_storage": {
        "base": "t_struct(FallbackEntry)65147_storage",
        "encoding": "dynamic_array",
        "label": "struct CBridgeXChainAdapter.FallbackEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(TransferStatus)65119": {
        "encoding": "inplace",
        "label": "enum CBridgeXChainAdapter.TransferStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4359_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4359_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TransferEntry)65125_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CBridgeXChainAdapter.TransferEntry)",
        "numberOfBytes": "32",
        "value": "t_struct(TransferEntry)65125_storage"
      },
      "t_struct(AddressSet)4359_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 4358,
            "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4058_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(FallbackEntry)65147_storage": {
        "encoding": "inplace",
        "label": "struct CBridgeXChainAdapter.FallbackEntry",
        "members": [
          {
            "astId": 65134,
            "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
            "label": "fromChainId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 65136,
            "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
            "label": "nonce",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 65138,
            "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
            "label": "token",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 65140,
            "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 65142,
            "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
            "label": "toChainId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 65144,
            "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
            "label": "to",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 65146,
            "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
            "label": "handled",
            "offset": 20,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4058_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 4053,
            "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4057,
            "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TransferEntry)65125_storage": {
        "encoding": "inplace",
        "label": "struct CBridgeXChainAdapter.TransferEntry",
        "members": [
          {
            "astId": 65121,
            "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
            "label": "from",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 65124,
            "contract": "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol:CBridgeXChainAdapterTest",
            "label": "status",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(TransferStatus)65119"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}