{
  "language": "Solidity",
  "sources": {
    "contracts/bni/BNI.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.8.9;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\n\r\ncontract BNI is ERC20Upgradeable, OwnableUpgradeable {\r\n\r\n  address private _minter;\r\n\r\n  function initialize() external initializer {\r\n    __Ownable_init();\r\n    __ERC20_init(\"Blockchain Network Index\", \"BNI\");\r\n  }\r\n\r\n  modifier onlyMinter() {\r\n    require(_minter == msg.sender, \"Mintable: caller is not the minter\");\r\n    _;\r\n  }\r\n\r\n  function setMinter( address minter_ ) external onlyOwner() returns ( bool ) {\r\n    _minter = minter_;\r\n    return true;\r\n  }\r\n\r\n  function minter() public view returns (address) {\r\n    return _minter;\r\n  }\r\n\r\n  function mint(address account_, uint256 amount_) external onlyMinter() {\r\n    _mint(account_, amount_);\r\n  }\r\n\r\n  function burn(uint256 amount) public virtual {\r\n    _burn(msg.sender, amount);\r\n  }\r\n\r\n  function burnFrom(address account, uint256 amount) public virtual {\r\n    if (msg.sender != _minter) {\r\n      _spendAllowance(account, msg.sender, amount);\r\n    }\r\n    _burn(account, amount);\r\n  }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/stVaults/BasicStVaultTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\nimport \"../bni/priceOracle/IPriceOracle.sol\";\nimport \"../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../interfaces/IStVault.sol\";\nimport \"../../interfaces/IStVaultNFT.sol\";\nimport \"../../libs/Const.sol\";\nimport \"../../libs/Token.sol\";\n\ncontract BasicStVaultTest is IStVault,\n    ERC20Upgradeable,\n    PausableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    OwnableUpgradeable\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint public yieldFee;\n    uint public watermark;\n    uint public fees;\n\n    address public treasuryWallet;\n    address public admin;\n    IPriceOracle public priceOracle;\n    IStVaultNFT public nft;\n\n    IERC20Upgradeable public token;\n    IERC20Upgradeable public stToken;\n    uint8 internal tokenDecimals;\n    uint8 internal stTokenDecimals;\n    uint internal oneToken;\n    uint internal oneStToken;\n\n    uint public bufferedDeposits;\n    uint public pendingWithdrawals;\n    uint public pendingRedeems;\n    uint internal emergencyUnbondings;\n\n    uint public unbondingPeriod;\n    uint public minInvestAmount;\n    uint public minRedeemAmount;\n\n    uint public lastInvestTs;\n    uint public investInterval;\n    uint public lastRedeemTs;\n    uint public redeemInterval;\n    uint public lastCollectProfitTs;\n    uint public oneEpoch;\n\n    mapping(address => uint) depositedBlock;\n    mapping(uint => WithdrawRequest) nft2WithdrawRequest;\n\n    uint baseApr;\n    uint baseTokenRate;\n    uint baseAprLastUpdate;\n\n    event Deposit(address user, uint amount, uint shares);\n    event Withdraw(address user, uint shares, uint amount, uint reqId, uint pendingAmount);\n    event Claim(address user, uint reqId, uint amount);\n    event ClaimMulti(address user, uint amount, uint claimedCount);\n    event Invest(uint amount);\n    event Redeem(uint stAmount);\n    event EmergencyWithdraw(uint stAmount);\n    event CollectProfitAndUpdateWatermark(uint currentWatermark, uint lastWatermark, uint fee);\n    event AdjustWatermark(uint currentWatermark, uint lastWatermark);\n    event TransferredOutFees(uint fees, address token);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(\n        string memory _name, string memory _symbol,\n        address _treasury, address _admin,\n        address _priceOracle,\n        address _token, address _stToken\n    ) public virtual initializer {\n        require(_treasury != address(0), \"treasury invalid\");\n\n        __Ownable_init_unchained();\n        __ReentrancyGuard_init_unchained();\n        __ERC20_init_unchained(_name, _symbol);\n\n        yieldFee = 2000; //20%\n        treasuryWallet = _treasury;\n        admin = _admin;\n        priceOracle = IPriceOracle(_priceOracle);\n\n        token = IERC20Upgradeable(_token);\n        stToken = IERC20Upgradeable(_stToken);\n        // tokenDecimals = _assetDecimals(address(token));\n        // stTokenDecimals = IERC20UpgradeableExt(address(stToken)).decimals();\n        oneToken = 10**tokenDecimals;\n        oneStToken = 10**stTokenDecimals;\n\n        minInvestAmount = 1;\n        minRedeemAmount = 1;\n\n        _updateApr();\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < 3001, \"Yield Fee cannot > 30%\");\n        yieldFee = _yieldFeePerc;\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        admin = _newAdmin;\n    }\n\n    function setNFT(address _nft) external onlyOwner {\n        require(address(nft) == address(0), \"Already set\");\n        nft = IStVaultNFT(_nft);\n    }\n\n    function setStakingPeriods(\n        uint _unbondingPeriod,\n        uint _investInterval,\n        uint _redeemInterval,\n        uint _oneEpoch\n    ) external onlyOwner {\n        unbondingPeriod = _unbondingPeriod;\n        investInterval = _investInterval;\n        redeemInterval = _redeemInterval;\n        oneEpoch = _oneEpoch;\n    }\n\n    function setStakingAmounts(uint _minInvestAmount, uint _minRedeemAmount) external virtual onlyOwner {\n        require(_minInvestAmount > 0, \"minInvestAmount must be > 0\");\n        require(_minRedeemAmount > 0, \"minRedeemAmount must be > 0\");\n        minInvestAmount = _minInvestAmount;\n        minRedeemAmount = _minRedeemAmount;\n    }\n\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        _deposit(msg.sender, _amount);\n    }\n\n    function depositETH() external payable nonReentrant whenNotPaused{\n        _deposit(msg.sender, msg.value);\n    }\n\n    function _deposit(address _account, uint _amount) internal {\n        // require(_amount > 0, \"Invalid amount\");\n        // depositedBlock[_account] = block.number;\n\n        // if (address(token) != Const.NATIVE_ASSET) {\n        //     token.safeTransferFrom(_account, address(this), _amount);\n        // } else {\n        //     // The native asset is already received.\n        // }\n        // bufferedDeposits += _amount;\n\n        // uint pool = getAllPool() - _amount;\n        // uint _totalSupply = totalSupply();\n        // uint _shares = (pool == 0 || _totalSupply == 0) ? _amount : _amount * _totalSupply / pool;\n\n        // _mint(_account, _shares);\n        // adjustWatermark(_amount, true);\n        // emit Deposit(_account, _amount, _shares);\n    }\n\n    function withdraw(uint _shares) external nonReentrant returns (uint _amount, uint _reqId) {\n        // require(_shares > 0, \"Invalid Amount\");\n        // require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        // require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        // uint withdrawAmt = getPoolByShares(_shares);\n        // _burn(msg.sender, _shares);\n        // adjustWatermark(withdrawAmt, false);\n\n        // uint _bufferedDeposits = getBufferedDeposits();\n        // uint _fees = fees;\n        // uint _buffered = (_bufferedDeposits <= _fees) ? 0 : _bufferedDeposits - fees;\n\n        // if (_buffered >= withdrawAmt) {\n        //     _amount = withdrawAmt;\n        //     withdrawAmt = 0;\n        // } else {\n        //     _amount = _buffered;\n        //     withdrawAmt -= _buffered;\n        // }\n\n        // bufferedDeposits = _bufferedDeposits - _amount;\n\n        // if (withdrawAmt > 0) {\n        //     uint tokenPerStToken = getPooledTokenByStToken(oneStToken);\n        //     uint stTokenAmt = oneStToken * withdrawAmt / tokenPerStToken;\n        //     (uint withdrawnStAmount, uint withdrawnAmount) = withdrawStToken(stTokenAmt);\n        //     if (withdrawnStAmount > 0) {\n        //         _amount += withdrawnAmount;\n        //         stTokenAmt -= withdrawnStAmount;\n        //     }\n        //     withdrawAmt = tokenPerStToken * stTokenAmt / oneStToken;\n\n        //     if (stTokenAmt > 0) {\n        //         pendingWithdrawals += withdrawAmt;\n        //         if (paused() == false) {\n        //             pendingRedeems += stTokenAmt;\n        //         } else {\n        //             // We reduce the emergency bonding because the share is burnt.\n        //             uint _emergencyUnbondings = getEmergencyUnbondings();\n        //             emergencyUnbondings = (_emergencyUnbondings <= stTokenAmt) ? 0 : _emergencyUnbondings - stTokenAmt;\n        //         }\n\n        //         _reqId = nft.mint(msg.sender);\n        //         nft2WithdrawRequest[_reqId] = WithdrawRequest({\n        //             tokenAmt: withdrawAmt,\n        //             stTokenAmt: stTokenAmt,\n        //             requestTs: block.timestamp\n        //         });\n        //     }\n        // }\n\n        // if (_amount > 0) {\n        //     _transferOutToken(msg.sender, _amount);\n        // }\n        // emit Withdraw(msg.sender, _shares, _amount, _reqId, withdrawAmt);\n    }\n\n    function withdrawStToken(uint _stAmountToWithdraw) internal virtual returns (\n        uint _withdrawnStAmount,\n        uint _withdrawnAmount\n    ) {\n    }\n\n    function claim(uint _reqId) external nonReentrant returns (uint _amount) {\n        // require(nft.isApprovedOrOwner(msg.sender, _reqId), \"Not owner\");\n        // WithdrawRequest memory usersRequest = nft2WithdrawRequest[_reqId];\n\n        // require(block.timestamp >= (usersRequest.requestTs + unbondingPeriod), \"Not able to claim yet\");\n\n        // uint tokenAmt = usersRequest.tokenAmt;\n        // _amount = _getClaimableAmount(bufferedWithdrawals(), tokenAmt);\n        // require(_amount > 0, \"No enough token\");\n\n        // nft.burn(_reqId);\n        // pendingWithdrawals -= tokenAmt;\n\n        // _transferOutToken(msg.sender, _amount);\n        // emit Claim(msg.sender, _reqId, _amount);\n    }\n\n    function claimMulti(uint[] memory _reqIds) external nonReentrant returns (\n        uint _amount,\n        uint _claimedCount,\n        bool[] memory _claimed\n    ) {\n        // uint buffered = bufferedWithdrawals();\n        // uint amount;\n        // uint length = _reqIds.length;\n        // _claimed = new bool[](length);\n\n        // for (uint i = 0; i < length; i++) {\n        //     uint _reqId = _reqIds[i];\n        //     if (nft.isApprovedOrOwner(msg.sender, _reqId) == false) continue;\n\n        //     WithdrawRequest memory usersRequest = nft2WithdrawRequest[_reqId];\n        //     if (block.timestamp < (usersRequest.requestTs + unbondingPeriod)) continue;\n\n        //     uint tokenAmt = usersRequest.tokenAmt;\n        //     amount = _getClaimableAmount(buffered, tokenAmt);\n        //     if (amount == 0) continue;\n\n        //     _amount += amount;\n        //     buffered -= amount;\n        //     pendingWithdrawals -= tokenAmt;\n\n        //     nft.burn(_reqId);\n        //     _claimedCount ++;\n        //     _claimed[i] = true;\n        // }\n\n        // if (_amount > 0) {\n        //     _transferOutToken(msg.sender, _amount);\n        //     emit ClaimMulti(msg.sender, _amount, _claimedCount);\n        // }\n    }\n\n    function invest() external onlyOwnerOrAdmin whenNotPaused {\n        _investInternal();\n    }\n\n    function _investInternal() internal {\n        // _collectProfitAndUpdateWatermark();\n        // uint _buffered = _transferOutFees();\n        // if (_buffered >= minInvestAmount && block.timestamp >= (lastInvestTs + investInterval)) {\n        //     uint _invested = _invest(_buffered);\n        //     bufferedDeposits = _buffered - _invested;\n        //     lastInvestTs = block.timestamp;\n        //     emit Invest(_invested);\n        // }\n    }\n\n    function _invest(uint _amount) internal virtual returns (uint _invested) {}\n\n    function redeem() external onlyOwnerOrAdmin whenNotPaused {\n        uint redeemed = _redeemInternal(pendingRedeems);\n        pendingRedeems -= redeemed;\n    }\n\n    function _redeemInternal(uint _stAmount) internal returns (uint _redeemed) {\n        // require(_stAmount >= minRedeemAmount, \"too small\");\n        // require(block.timestamp >= (lastRedeemTs + redeemInterval), \"Not able to redeem yet\");\n\n        // _redeemed = _redeem(_stAmount);\n        // emit Redeem(_redeemed);\n    }\n\n    function _redeem(uint _stAmount) internal virtual returns (uint _redeemed) {}\n\n    function claimUnbonded() external onlyOwnerOrAdmin {\n        // _claimUnbonded();\n    }\n\n    function _claimUnbonded() internal virtual {}\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\n        _pause();\n        _yield();\n\n        _emergencyWithdrawInternal();\n    }\n\n    function _emergencyWithdrawInternal() internal {\n        // uint _pendingRedeems = pendingRedeems;\n        // uint redeemed = _emergencyWithdraw(_pendingRedeems);\n        // pendingRedeems = (_pendingRedeems <= redeemed) ? 0 : _pendingRedeems - redeemed;\n        // emit EmergencyWithdraw(redeemed);\n    }\n\n    function _emergencyWithdraw(uint _pendingRedeems) internal virtual returns (uint _redeemed) {}\n\n    function emergencyPendingRedeems() external view returns (uint _redeems) {\n        // if (paused()) {\n        //     _redeems = stToken.balanceOf(address(this));\n        // }\n    }\n\n    function emergencyRedeem() external onlyOwnerOrAdmin whenPaused {\n        _emergencyWithdrawInternal();\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        require(getEmergencyUnbondings() == 0, \"Emergency unbonding is not finished\");\n        require(getTokenUnbonded() == 0, \"claimUnbonded should be called\");\n        _unpause();\n\n        emergencyUnbondings = 0;\n        _investInternal();\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        _yield();\n    }\n\n    function _yield() internal virtual {}\n\n    function collectProfitAndUpdateWatermark() external onlyOwnerOrAdmin whenNotPaused {\n        _collectProfitAndUpdateWatermark();\n    }\n\n    function _collectProfitAndUpdateWatermark() private {\n        // uint currentWatermark = getAllPool();\n        // uint lastWatermark = watermark;\n        // uint fee;\n        // if (currentWatermark > lastWatermark) {\n        //     uint profit = currentWatermark - lastWatermark;\n        //     fee = profit * yieldFee / Const.DENOMINATOR;\n        //     fees += fee;\n        //     watermark = currentWatermark - fee;\n        // }\n        // lastCollectProfitTs = block.timestamp;\n        // emit CollectProfitAndUpdateWatermark(currentWatermark, lastWatermark, fee);\n    }\n\n    /// @param signs True for positive, false for negative\n    function adjustWatermark(uint amount, bool signs) private {\n        // uint lastWatermark = watermark;\n        // watermark = signs == true\n        //             ? watermark + amount\n        //             : (watermark > amount) ? watermark - amount : 0;\n        // emit AdjustWatermark(watermark, lastWatermark);\n    }\n\n    function withdrawFees() external onlyOwnerOrAdmin {\n        _transferOutFees();\n    }\n\n    function _transferOutFees() internal returns (uint _tokenAmt) {\n        // _tokenAmt = getBufferedDeposits();\n        // uint _fees = fees;\n        // if (_fees != 0 && _tokenAmt != 0) {\n        //     uint feeAmt = _fees;\n        //     if (feeAmt < _tokenAmt) {\n        //         _fees = 0;\n        //         _tokenAmt -= feeAmt;\n        //     } else {\n        //         _fees -= _tokenAmt;\n        //         feeAmt = _tokenAmt;\n        //         _tokenAmt = 0;\n        //     }\n        //     fees = _fees;\n        //     bufferedDeposits = _tokenAmt;\n\n        //     _transferOutToken(treasuryWallet, feeAmt);\n        //     emit TransferredOutFees(feeAmt, address(token)); // Decimal follows token\n        // }\n    }\n\n    function _transferOutToken(address _to, uint _amount) internal {\n        _to;\n        _amount;\n        // (address(token) != Const.NATIVE_ASSET)\n        //     ? token.safeTransfer(_to, _amount)\n        //     : Token.safeTransferETH(_to, _amount);\n    }\n\n    function _tokenBalanceOf(address _account) internal view returns (uint) {\n        _account;\n        return 0;\n        // return (address(token) != Const.NATIVE_ASSET)\n        //     ? token.balanceOf(_account)\n        //     : _account.balance;\n    }\n\n    function _assetDecimals(address _asset) internal view returns (uint8 _decimals) {\n        _decimals = (_asset == Const.NATIVE_ASSET) ? 18 : IERC20UpgradeableExt(_asset).decimals();\n    }\n\n    function _getFreeBufferedDeposits() internal view returns (uint _buffered) {\n        uint balance = _tokenBalanceOf(address(this));\n        uint _pendingWithdrawals = pendingWithdrawals;\n        // While unbonding, the balance could be less than pendingWithdrawals.\n        // After unbonded, the balance could be greater than pendingWithdrawals\n        //  because the rewards are accumulated in unbonding period on some staking pools.\n        //  In this case, the _buffered can be greater than bufferedDeposits.\n        // And also if the emergency withdrawal is unbonded, the _buffered will be greater than bufferedDeposits.\n        _buffered = (balance > _pendingWithdrawals) ? balance - _pendingWithdrawals : 0;\n    }\n\n    function getBufferedDeposits() public virtual view returns (uint) {\n        return MathUpgradeable.max(bufferedDeposits, _getFreeBufferedDeposits());\n    }\n\n    function bufferedWithdrawals() public view returns (uint) {\n        return _tokenBalanceOf(address(this)) - bufferedDeposits;\n    }\n\n    function getEmergencyUnbondings() public virtual view returns (uint) {\n        return emergencyUnbondings;\n    }\n\n    function getInvestedStTokens() public virtual view returns (uint _stAmount) {\n        return 0;\n    }\n\n    ///@param _amount Amount of tokens\n    function getStTokenByPooledToken(uint _amount) public virtual view returns(uint) {\n        return Token.changeDecimals(_amount, tokenDecimals, stTokenDecimals);\n    }\n\n    ///@param _stAmount Amount of stTokens\n    function getPooledTokenByStToken(uint _stAmount) public virtual view returns(uint) {\n        return _stAmount * oneToken / getStTokenByPooledToken(oneToken);\n    }\n\n    ///@dev it doesn't include the unbonding stTokens according to the burnt shares.\n    function getAllPool() public virtual view returns (uint _pool) {\n        return 0;\n        // if (paused() == false) {\n        //     uint stBalance = stToken.balanceOf(address(this))\n        //                     + getInvestedStTokens()\n        //                     - pendingRedeems;\n        //     if (stBalance > 0) {\n        //         _pool = getPooledTokenByStToken(stBalance);\n        //     }\n        //     _pool += bufferedDeposits;\n        //     _pool -= fees;\n        // } else {\n        //     uint stBalance = stToken.balanceOf(address(this))\n        //                     + getInvestedStTokens()\n        //                     + getEmergencyUnbondings()\n        //                     - pendingRedeems;\n        //     if (stBalance > 0) {\n        //         _pool = getPooledTokenByStToken(stBalance);\n        //     }\n        //     // If the emergency withdrawal is unbonded,\n        //     //  then getEmergencyUnbondings() is less than emergencyUnbondings,\n        //     //  and _getFreeBufferedDeposits will be greater than bufferedDeposits.\n        //     _pool += _getFreeBufferedDeposits();\n        //     _pool -= fees;\n        // }\n    }\n\n    function getSharesByPool(uint _amount) public view returns (uint) {\n        uint pool = getAllPool();\n        return (pool == 0) ? _amount : _amount * totalSupply() / pool;\n    }\n\n    function getPoolByShares(uint _shares) public view returns (uint) {\n        uint _totalSupply = totalSupply();\n        return (_totalSupply == 0) ? _shares : _shares * getAllPool() / _totalSupply;\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint pool = getAllPool();\n        return getValueInUSD(address(token), pool);\n    }\n\n    ///@return the value in USD. it's scaled by 1e18;\n    function getValueInUSD(address _asset, uint _amount) internal view returns (uint) {\n        _asset;\n        _amount;\n        return 0;\n        // (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(_asset);\n        // uint8 _decimals = _assetDecimals(_asset);\n        // return Token.changeDecimals(_amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\n    }\n\n    ///@notice Returns the pending rewards in USD.\n    function getPendingRewards() public virtual view returns (uint) {\n        return 0;\n    }\n\n    function getAPR() public virtual view returns (uint) {\n        (uint _baseApr,,) = getBaseApr();\n        return _baseApr;\n    }\n\n    function resetApr() external onlyOwner {\n        _resetApr();\n        _updateApr();\n    }\n\n    function _resetApr() internal virtual {\n        baseApr = 0;\n        baseTokenRate = 0;\n        baseAprLastUpdate = 0;\n    }\n\n    function _updateApr() internal virtual {\n        (uint _baseApr, uint _baseTokenRate, bool _update) = getBaseApr();\n        if (_update) {\n            baseApr = _baseApr;\n            baseTokenRate = _baseTokenRate;\n            baseAprLastUpdate = block.timestamp;\n        }\n    }\n\n    function getBaseApr() public view returns (uint, uint, bool) {\n        uint _baseApr = baseApr;\n        uint _baseTokenRate = baseTokenRate;\n        uint _baseAprLastUpdate = baseAprLastUpdate;\n\n        if (_baseApr == 0 || (_baseAprLastUpdate + 1 weeks) <= block.timestamp) {\n            uint newTokenRate = getPoolByShares(1e18);\n            if (0 < _baseTokenRate && _baseTokenRate < newTokenRate) {\n                uint newApr = (newTokenRate-_baseTokenRate) * Const.YEAR_IN_SEC * Const.APR_SCALE\n                            / (_baseTokenRate * (block.timestamp-_baseAprLastUpdate));\n                return (newApr, newTokenRate, true);\n            } else {\n                return (0, newTokenRate, true);\n            }\n        } else {\n            return (_baseApr, _baseTokenRate, false);\n        }\n    }\n\n    function getBaseAprData() public view returns (uint, uint, uint) {\n        return (baseApr, baseTokenRate, baseAprLastUpdate);\n    }\n\n    function getWithdrawRequest(uint _reqId) external view returns (\n        bool _claimable,\n        uint _tokenAmt, uint _stTokenAmt,\n        uint _requestTs, uint _waitForTs\n    ) {\n        WithdrawRequest memory usersRequest = nft2WithdrawRequest[_reqId];\n        _tokenAmt = usersRequest.tokenAmt;\n        _stTokenAmt = usersRequest.stTokenAmt;\n        _requestTs = usersRequest.requestTs;\n\n        uint endTs = _requestTs + unbondingPeriod;\n        if (endTs > block.timestamp) {\n            _waitForTs = endTs - block.timestamp;\n        } else if (_getClaimableAmount(bufferedWithdrawals(), _tokenAmt) > 0) {\n            _claimable = true;\n        }\n    }\n\n    function _getClaimableAmount(uint _buffered, uint _withdrawAmt) internal view returns (uint) {\n        // The tokens withdrawn from the staking pool can be slightly less than the calculated withdrawAmt.\n        uint minWithdrawAmt = _withdrawAmt * (1e8 - 1) / 1e8;\n        return (_buffered < minWithdrawAmt) ? 0 : MathUpgradeable.min(_buffered, _withdrawAmt);\n    }\n\n    function getTokenUnbonded() public virtual view returns (uint) {\n        return 0;\n    }\n\n    receive() external payable {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[20] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "contracts/bni/priceOracle/IPriceOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity  0.8.9;\r\n\r\ninterface IPriceOracle {\r\n\r\n    /**\r\n     * @notice Sets or replaces price sources of assets\r\n     * @param assets The addresses of the assets\r\n     * @param sources The addresses of the price sources\r\n     */\r\n    function setAssetSources(address[] memory assets, address[] memory sources) external;\r\n\r\n    /**\r\n     * @notice Returns the address of the source for an asset address\r\n     * @param asset The address of the asset\r\n     * @return The address of the source\r\n     */\r\n    function getSourceOfAsset(address asset) external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns a list of prices from a list of assets addresses\r\n     * @param assets The list of assets addresses\r\n     * @return prices The prices of the given assets\r\n     */\r\n    function getAssetsPrices(address[] memory assets) external view returns (uint[] memory prices, uint8[] memory decimalsArray);\r\n\r\n    /**\r\n     * @notice Returns a list of prices from a list of assets addresses\r\n     * @param asset The asset address\r\n     * @return price The prices of the given assets\r\n     */\r\n    function getAssetPrice(address asset) external view returns (uint price, uint8 decimals);\r\n}"
    },
    "interfaces/IERC20UpgradeableExt.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\n\r\ninterface IERC20UpgradeableExt is IERC20Upgradeable {\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
    },
    "interfaces/IStVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\n\r\ninterface IStVault is IERC20Upgradeable {\r\n\r\n    struct WithdrawRequest {\r\n        uint tokenAmt;\r\n        uint stTokenAmt;\r\n        uint requestTs;\r\n    }\r\n\r\n    // fee percentage that treasury takes from rewards.\r\n    function yieldFee() external view returns(uint);\r\n    // treasury wallet address.\r\n    function treasuryWallet() external view returns(address);\r\n    // administrator address.\r\n    function admin() external view returns(address);\r\n\r\n    // underlying token such as ETH, WMATIC, and so on.\r\n    function token() external view returns(IERC20Upgradeable);\r\n    // staked token such as stETH, stMATIC, and so on.\r\n    function stToken() external view returns(IERC20Upgradeable);\r\n\r\n    // the buffered deposit token amount that is not yet staked into the staking pool.\r\n    function bufferedDeposits() external view returns(uint);\r\n    // On some staking pools, the rewards are accumulated until unbonded even though redeem is requested. This function considers it.\r\n    function getBufferedDeposits() external view returns(uint);\r\n    // the buffered withdrawal token amount that is unstaked from the staking pool but not yet withdrawn from the user.\r\n    function bufferedWithdrawals() external view returns(uint);\r\n    // the token amount that shares is already burnt but not withdrawn.\r\n    function pendingWithdrawals() external view returns(uint);\r\n    // the total amount of withdrawal stToken that is not yet requested to the staking pool.\r\n    function pendingRedeems() external view returns(uint);\r\n    // the amount of stToken that is emergency unbonding, and shares according to them are not burnt yet.\r\n    function getEmergencyUnbondings() external view returns(uint);\r\n    // the amount of stToken that has invested into L2 vaults to get extra benefit.\r\n    function getInvestedStTokens() external view returns(uint);\r\n    \r\n    // the seconds to wait for unbonded since withdarwal requested. For example, 30 days in case of unstaking stDOT to get xcDOT\r\n    function unbondingPeriod() external view returns(uint);\r\n    // the minimum amount of token to invest.\r\n    function minInvestAmount() external view returns(uint);\r\n    // the minimum amount of stToken to redeem.\r\n    function minRedeemAmount() external view returns(uint);\r\n\r\n    // the timestamp that the last investment was executed on.\r\n    function lastInvestTs() external view returns(uint);\r\n    // minimum seconds to wait before next investment. For example, MetaPool's stNEAR buffer is replenished every 5 minutes.\r\n    function investInterval() external view returns(uint);\r\n    // the timestamp that the last redeem was requested on.\r\n    function lastRedeemTs() external view returns(uint);\r\n    // minimum seconds to wait before next redeem. For example, Lido have up to 20 redeem requests to stDOT in parallel. Therefore, the next redeem should be requested after about 1 day.\r\n    function redeemInterval() external view returns(uint);\r\n    // the timestamp that the profit last collected on.\r\n    function lastCollectProfitTs() external view returns(uint);\r\n    // the timestamp of one epoch. Each epoch, the stToken price or balance will increase as staking-rewards are added to the pool.\r\n    function oneEpoch() external view returns(uint);\r\n\r\n    ///@return the total amount of tokens in the vault.\r\n    function getAllPool() external view returns (uint);\r\n    ///@return the amount of shares that corresponds to `_amount` of token.\r\n    function getSharesByPool(uint _amount) external view returns (uint);\r\n    ///@return the amount of token that corresponds to `_shares` of shares.\r\n    function getPoolByShares(uint _shares) external view returns (uint);\r\n    ///@return the total USD value of tokens in the vault.\r\n    function getAllPoolInUSD() external view returns (uint);\r\n    ///@return the USD value of rewards that is avilable to claim. It's scaled by 1e18.\r\n    function getPendingRewards() external view returns (uint);\r\n    ///@return the APR in the vault. It's scaled by 1e18.\r\n    function getAPR() external view returns (uint);\r\n    ///@return _claimable specifys whether user can claim tokens for it.\r\n    ///@return _tokenAmt is amount of token to claim.\r\n    ///@return _stTokenAmt is amount of stToken to redeem.\r\n    ///@return _requestTs is timestmap when withdrawal requested.\r\n    ///@return _waitForTs is timestamp to wait for.\r\n    function getWithdrawRequest(uint _reqId) external view returns (\r\n        bool _claimable,\r\n        uint _tokenAmt, uint _stTokenAmt,\r\n        uint _requestTs, uint _waitForTs\r\n    );\r\n    ///@return the unbonded token amount that is claimable from the staking pool.\r\n    function getTokenUnbonded() external view returns (uint);\r\n\r\n    ///@dev deposit `_amount` of token.\r\n    function deposit(uint _amount) external;\r\n    ///@dev deposit the native asset.\r\n    function depositETH() external payable;\r\n    ///@dev request a withdrawal that corresponds to `_shares` of shares.\r\n    ///@return _amount is the amount of withdrawn token.\r\n    ///@return _reqId is the NFT token id indicating the request for rest of withdrawal. 0 if no request is made.\r\n    function withdraw(uint _shares) external returns (uint _amount, uint _reqId);\r\n    ///@dev claim token with NFT token\r\n    ///@return _amount is the amount of claimed token.\r\n    function claim(uint _reqId) external returns (uint _amount);\r\n    ///@dev claim token with NFT tokens\r\n    ///@return _amount is the amount of claimed token.\r\n    ///@return _claimedCount is the count of reqIds that are claimed.\r\n    ///@return _claimed is the flag indicating whether the token is claimed.\r\n    function claimMulti(uint[] memory _reqIds) external returns (uint _amount, uint _claimedCount, bool[] memory _claimed);\r\n    ///@dev stake the buffered deposits into the staking pool. It's called by admin.\r\n    function invest() external;\r\n    ///@dev redeem the requested withdrawals from the staking pool. It's called by admin.\r\n    function redeem() external;\r\n    ///@dev claim the unbonded tokens from the staking pool. It's called by admin.\r\n    function claimUnbonded() external;\r\n    ///@dev request a withdrawal for all staked tokens. It's called by admin.\r\n    function emergencyWithdraw() external;\r\n    ///@dev the total amount of emergency withdrawal stToken that is not yet requested to the staking pool.\r\n    function emergencyPendingRedeems() external view returns (uint _redeems);\r\n    ///@dev In emergency mode, redeem the rest of stTokens. Especially it's needed for stNEAR because the MetaPool has a buffer limit.\r\n    function emergencyRedeem() external;\r\n    ///@dev reinvest the tokens, and set the vault status as normal. It's called by admin.\r\n    function reinvest() external;\r\n    ///@dev take rewards and reinvest them. It's called by admin.\r\n    function yield() external;\r\n    ///@dev collect profit and update the watermark\r\n    function collectProfitAndUpdateWatermark() external;\r\n    ///@dev transfer out fees.\r\n    function withdrawFees() external;\r\n}\r\n"
    },
    "interfaces/IStVaultNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\n\ninterface IStVaultNFT is IERC721Upgradeable {\n\n    function mint(address _to) external returns (uint);\n    function burn(uint _tokenId) external;\n    function totalSupply() external view returns (uint);\n    function isApprovedOrOwner(address _spender, uint _tokenId) external view returns (bool);\n    function exists(uint _tokenId) external view returns (bool);\n\n    function setStVault(address _stVault) external;\n}"
    },
    "libs/Const.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nlibrary Const {\r\n\r\n    uint internal constant DENOMINATOR = 10000;\r\n\r\n    uint internal constant APR_SCALE = 1e18;\r\n    \r\n    uint internal constant YEAR_IN_SEC = 365 days;\r\n\r\n    address internal constant NATIVE_ASSET = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    enum TokenID { USDT, USDC }\r\n}\r\n"
    },
    "libs/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nimport \"../contracts/bni/constant/AuroraConstant.sol\";\r\nimport \"../contracts/bni/constant/AuroraConstantTest.sol\";\r\nimport \"../contracts/bni/constant/AvaxConstant.sol\";\r\nimport \"../contracts/bni/constant/AvaxConstantTest.sol\";\r\nimport \"../contracts/bni/constant/BscConstant.sol\";\r\nimport \"../contracts/bni/constant/BscConstantTest.sol\";\r\nimport \"../contracts/bni/constant/EthConstant.sol\";\r\nimport \"../contracts/bni/constant/EthConstantTest.sol\";\r\nimport \"../contracts/bni/constant/MaticConstant.sol\";\r\nimport \"../contracts/bni/constant/MaticConstantTest.sol\";\r\nimport \"./Const.sol\";\r\n\r\nlibrary Token {\r\n    function changeDecimals(uint amount, uint curDecimals, uint newDecimals) internal pure returns(uint) {\r\n        if (curDecimals == newDecimals) {\r\n            return amount;\r\n        } else if (curDecimals < newDecimals) {\r\n            return amount * (10 ** (newDecimals - curDecimals));\r\n        } else {\r\n            return amount / (10 ** (curDecimals - newDecimals));\r\n        }\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \"ETH transfer failed\");\r\n    }\r\n\r\n    function getChainID() internal view returns (uint256 id) {\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) internal pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n    function getTokenAddress(Const.TokenID _tokenId) internal view returns (address) {\r\n        uint chainId = getChainID();\r\n        if (chainId == AuroraConstant.CHAINID) {\r\n            if (_tokenId == Const.TokenID.USDC) return AuroraConstant.USDC;\r\n            else if (_tokenId == Const.TokenID.USDT) return AuroraConstant.USDT;\r\n        } else if (chainId == AvaxConstant.CHAINID) {\r\n            if (_tokenId == Const.TokenID.USDC) return AvaxConstant.USDC;\r\n            else if (_tokenId == Const.TokenID.USDT) return AvaxConstant.USDT;\r\n        } else if (chainId == BscConstant.CHAINID) {\r\n            if (_tokenId == Const.TokenID.USDC) return BscConstant.USDC;\r\n            else if (_tokenId == Const.TokenID.USDT) return BscConstant.USDT;\r\n        } else if (chainId == EthConstant.CHAINID) {\r\n            if (_tokenId == Const.TokenID.USDC) return EthConstant.USDC;\r\n            else if (_tokenId == Const.TokenID.USDT) return EthConstant.USDT;\r\n        } else if (chainId == MaticConstant.CHAINID) {\r\n            if (_tokenId == Const.TokenID.USDC) return MaticConstant.USDC;\r\n            else if (_tokenId == Const.TokenID.USDT) return MaticConstant.USDT;\r\n        }\r\n        return address(0);\r\n    }\r\n\r\n    function getTestTokenAddress(Const.TokenID _tokenId) internal view returns (address) {\r\n        uint chainId = getChainID();\r\n        if (chainId == AuroraConstantTest.CHAINID) {\r\n            if (_tokenId == Const.TokenID.USDC) return AuroraConstantTest.USDC;\r\n            else if (_tokenId == Const.TokenID.USDT) return AuroraConstantTest.USDT;\r\n        } else if (chainId == AvaxConstantTest.CHAINID) {\r\n            if (_tokenId == Const.TokenID.USDC) return AvaxConstantTest.USDC;\r\n            else if (_tokenId == Const.TokenID.USDT) return AvaxConstantTest.USDT;\r\n        } else if (chainId == BscConstantTest.CHAINID) {\r\n            if (_tokenId == Const.TokenID.USDC) return BscConstantTest.USDC;\r\n            else if (_tokenId == Const.TokenID.USDT) return BscConstantTest.USDT;\r\n        } else if (chainId == EthConstantTest.CHAINID) {\r\n            if (_tokenId == Const.TokenID.USDC) return EthConstantTest.USDC;\r\n            else if (_tokenId == Const.TokenID.USDT) return EthConstantTest.USDT;\r\n        } else if (chainId == MaticConstantTest.CHAINID) {\r\n            if (_tokenId == Const.TokenID.USDC) return MaticConstantTest.USDC;\r\n            else if (_tokenId == Const.TokenID.USDT) return MaticConstantTest.USDT;\r\n        }\r\n        return address(0);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/bni/constant/AuroraConstant.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nlibrary AuroraConstant {\n    uint internal constant CHAINID = 1313161554;\n\n    address internal constant BSTN = 0x9f1F933C660a1DC856F0E0Fe058435879c5CCEf0;\n    address internal constant META = 0xc21Ff01229e982d7c8b8691163B0A3Cb8F357453;\n    address internal constant stNEAR = 0x07F9F7f963C5cD2BBFFd30CcfB964Be114332E30;\n    address internal constant USDC = 0xB12BFcA5A55806AaF64E99521918A4bf0fC40802;\n    address internal constant USDT = 0x4988a896b1227218e4A686fdE5EabdcAbd91571f;\n    address internal constant WETH = 0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB;\n    address internal constant WNEAR = 0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d;\n}\n"
    },
    "contracts/bni/constant/AuroraConstantTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nlibrary AuroraConstantTest {\n    uint internal constant CHAINID = 1313161555;\n\n    address internal constant BSTN = 0x9f1F933C660a1DC856F0E0Fe058435879c5CCEf0; // Should be replaced with testnet address\n    address internal constant META = 0xc21Ff01229e982d7c8b8691163B0A3Cb8F357453; // Should be replaced with testnet address\n    address internal constant stNEAR = 0x2137df2e54abd6bF1c1a8c1739f2EA6A8C15F144;\n    address internal constant USDC = 0xCcECA5C4A3355F8e7a0B7d2a7251eec012Be7c58;\n    address internal constant USDT = 0xF9C249974c1Acf96a59e5757Cc9ba7035cE489B1;\n    address internal constant WETH = 0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB; // Should be replaced with testnet address\n    address internal constant WNEAR = 0x4861825E75ab14553E5aF711EbbE6873d369d146;\n}\n"
    },
    "contracts/bni/constant/AvaxConstant.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nlibrary AvaxConstant {\n    uint internal constant CHAINID = 43114;\n\n    address internal constant USDC = 0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664;\n    address internal constant USDT = 0xc7198437980c041c805A1EDcbA50c1Ce5db95118;\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n\n    address internal constant aAVAXb = 0x6C6f910A79639dcC94b4feEF59Ff507c2E843929;\n}\n"
    },
    "contracts/bni/constant/AvaxConstantTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nlibrary AvaxConstantTest {\n    uint internal constant CHAINID = 43113;\n\n    address internal constant USDC = 0x7aCdaba7Ee51c1c3F7C6D605CC26b1c9aAB0495A;\n    address internal constant USDT = 0x78ae2880bd1672b49a33cF796CF53FE6db0aB01D;\n    address internal constant WAVAX = 0xd00ae08403B9bbb9124bB305C09058E32C39A48c;\n\n    address internal constant aAVAXb = 0xBd97c29aa3E83C523C9714edCA8DB8881841a593;\n}\n"
    },
    "contracts/bni/constant/BscConstant.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nlibrary BscConstant {\n    uint internal constant CHAINID = 56;\n\n    address internal constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\n    address internal constant CAKE = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82;\n    address internal constant USDC = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\n    address internal constant USDT = 0x55d398326f99059fF775485246999027B3197955;\n    address internal constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n\n    address internal constant aBNBb = 0xBb1Aa6e59E5163D8722a122cd66EBA614b59df0d;\n}\n"
    },
    "contracts/bni/constant/BscConstantTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nlibrary BscConstantTest {\n    uint internal constant CHAINID = 97;\n\n    address internal constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // Should be replaced with testnet address\n    address internal constant CAKE = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82; // Should be replaced with testnet address\n    address internal constant USDC = 0xda14d11D2C7d79F167b6057DE3D9cc25C2c488d5;\n    address internal constant USDT = 0x1F326a8CA5399418a76eA0efa0403Cbb00790C67;\n    address internal constant WBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd;\n\n    address internal constant aBNBb = 0xaB56897fE4e9f0757e02B54C27E81B9ddd6A30AE;\n}\n"
    },
    "contracts/bni/constant/EthConstant.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nlibrary EthConstant {\n    uint internal constant CHAINID = 1;\n\n    address internal constant MATIC = 0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0;\n    address internal constant stETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\n    address internal constant stMATIC = 0x9ee91F9f426fA633d227f7a9b000E28b9dfd8599;\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n}\n"
    },
    "contracts/bni/constant/EthConstantTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nlibrary EthConstantTest {\n    uint internal constant CHAINID = 4;\n\n    address internal constant MATIC = 0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0; // Should be replaced with testnet address\n    address internal constant stETH = 0xF4242f9d78DB7218Ad72Ee3aE14469DBDE8731eD;\n    address internal constant stMATIC = 0x9ee91F9f426fA633d227f7a9b000E28b9dfd8599; // Should be replaced with testnet address\n    address internal constant USDC = 0xDf5324ebe6F6b852Ff5cBf73627eE137e9075276;\n    address internal constant USDT = 0x21e48034753E490ff04f2f75f7CAEdF081B320d5;\n    address internal constant WETH = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n}\n"
    },
    "contracts/bni/constant/MaticConstant.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nlibrary MaticConstant {\n    uint internal constant CHAINID = 137;\n\n    address internal constant USDC = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\n    address internal constant USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\n    address internal constant WMATIC = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\n}\n"
    },
    "contracts/bni/constant/MaticConstantTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nlibrary MaticConstantTest {\n    uint internal constant CHAINID = 80001;\n\n    address internal constant USDC = 0x6600BeC324CCDd12c70297311AEfB37fafB1D689;\n    address internal constant USDT = 0x7e4C234B1d634DB790592d1550816b19E862F744;\n    address internal constant WMATIC = 0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889;\n}\n"
    },
    "contracts/stVaults/lido/EthStMATICVaultTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\n//\n///@notice The EthStMATICVault contract stakes MATIC tokens into stMATIC on Ethereum.\n///@dev https://docs.polygon.lido.fi/contracts/st-matic\n//\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../BasicStVaultTest.sol\";\nimport \"../../bni/constant/EthConstantTest.sol\";\n\ncontract EthStMATICVaultTest is BasicStVaultTest {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    mapping(uint => uint) public tokenIds;\n    uint public first;\n    uint public last;\n\n    function initialize1(\n        address _treasury, address _admin,\n        address _priceOracle\n    ) public initializer {\n        super.initialize(\n            \"STI Staking MATIC\", \"stiStMATIC\",\n            _treasury, _admin,\n            _priceOracle,\n            EthConstantTest.MATIC,\n            EthConstantTest.stMATIC\n        );\n\n        unbondingPeriod = 4 days;\n        oneEpoch = 24 hours;\n\n        first = 1;\n        last = 0;\n\n        // token.safeApprove(address(stToken), type(uint).max);\n    }\n}\n"
    },
    "contracts/xchain/agent/STIUserAgentTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"../../../libs/Const.sol\";\nimport \"../../../libs/Token.sol\";\nimport \"../../bni/constant/EthConstantTest.sol\";\nimport \"../../sti/ISTIMinter.sol\";\nimport \"../../sti/ISTIVault.sol\";\nimport \"../../swap/ISwap.sol\";\nimport \"./STIUserAgent.sol\";\nimport \"./BasicUserAgent.sol\";\n\ncontract STIUserAgentTest is STIUserAgent {\n\n    function initialize1(\n        address _subImpl,\n        address _admin,\n        ISwap _swap,\n        IXChainAdapter _multichainAdapter, IXChainAdapter _cbridgeAdapter,\n        ISTIMinter _stiMinter, ISTIVault _stiVault\n    ) external override initializer {\n        __Ownable_init_unchained();\n        _setupRole(DEFAULT_ADMIN_ROLE, owner());\n        __GnosisSafe_init();\n\n        USDC = IERC20Upgradeable(Token.getTestTokenAddress(Const.TokenID.USDC));\n        USDT = IERC20Upgradeable(Token.getTestTokenAddress(Const.TokenID.USDT));\n\n        admin = _admin;\n        swap = _swap;\n        setMultichainAdapter(_multichainAdapter);\n        setCBridgeAdapter(_cbridgeAdapter);\n\n        subImpl = _subImpl;\n        uint chainId = Token.getChainID();\n        chainIdOnLP = EthConstantTest.CHAINID;\n        isLPChain = (chainIdOnLP == chainId);\n\n        stiMinter = _stiMinter;\n        setSTIVault(_stiVault);\n    }\n\n    function initDeposit(uint _pool, uint _USDT6Amt, bytes calldata _signature) external payable override whenNotPaused returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _pool, _USDT6Amt)), _signature);\n\n        if (isLPChain) {\n            stiMinter.initDepositByAdmin(account, _pool, _USDT6Amt);\n        } else {\n            // NOTE: cBridge is not supported on Rinkeby \n            _feeAmt = 0;\n        }\n        nonces[account] = _nonce + 1;\n    }\n\n    function transfer(\n        uint[] memory _amounts,\n        uint[] memory _toChainIds,\n        AdapterType[] memory _adapterTypes,\n        bytes calldata _signature\n    ) external payable override whenNotPaused returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _amounts, _toChainIds, _adapterTypes)), _signature);\n\n        transferIn(account, _amounts, _toChainIds, _adapterTypes);\n        // NOTE: cBridge doesn't support liquidity on testnets\n        _feeAmt = 0;\n        nonces[account] = _nonce + 1;\n    }\n\n}\n"
    },
    "contracts/sti/ISTIMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ISTIMinter {\n    function initDepositByAdmin(address _account, uint _pool, uint _USDT6Amt) external;\n    function mintByAdmin(address _account, uint _USDT6Amt) external;\n    function burnByAdmin(address _account, uint _pool, uint _share) external;\n    function exitWithdrawalByAdmin(address _account) external;\n}"
    },
    "contracts/sti/ISTIVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ISTIVault {\n    function depositByAdmin(address _account, address[] memory _tokens, uint[] memory _USDTAmts, uint _nonce) external;\n    function depositByAgent(address _account, address[] memory _tokens, uint[] memory _USDTAmts, uint _nonce) external;\n    function withdrawPercByAdmin(address _account, uint _sharePerc, uint _nonce) external;\n    function withdrawPercByAgent(address _account, uint _sharePerc, uint _nonce) external;\n    function claimByAdmin(address _account) external;\n    function claimByAgent(address _account) external;\n}"
    },
    "contracts/swap/ISwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface ISwap {\n    function swapExactTokensForTokens(address _tokenA, address _tokenB, uint _amt, uint _minAmount) external returns (uint);\n    function swapExactTokensForTokens2(address _tokenA, address _tokenB, uint _amt, uint _minAmount) external returns (uint);\n\n    function swapExactETHForTokens(address _tokenB, uint _amt, uint _minAmount) external payable returns (uint);\n    function swapTokensForExactETH(address _tokenA, uint _amountInMax, uint _amountOut) external returns (uint _spentTokenAmount);\n    function swapExactTokensForETH(address _tokenA, uint _amt, uint _minAmount) external returns (uint);\n\n    function getAmountsInForETH(address _tokenA, uint _amountOut) external view returns (uint);\n}\n"
    },
    "contracts/xchain/agent/STIUserAgent.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../../../libs/Const.sol\";\nimport \"../../../libs/Token.sol\";\nimport \"../../bni/constant/AvaxConstant.sol\";\nimport \"../../sti/ISTIMinter.sol\";\nimport \"../../sti/ISTIVault.sol\";\nimport \"../../swap/ISwap.sol\";\nimport \"./BasicUserAgent.sol\";\nimport \"./STIUserAgentBase.sol\";\n\ncontract STIUserAgent is STIUserAgentBase, BasicUserAgent {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    function initialize1(\n        address _subImpl,\n        address _admin,\n        ISwap _swap,\n        IXChainAdapter _multichainAdapter, IXChainAdapter _cbridgeAdapter,\n        ISTIMinter _stiMinter, ISTIVault _stiVault\n    ) external virtual initializer {\n        super.initialize(_admin, _swap, _multichainAdapter, _cbridgeAdapter);\n\n        subImpl = _subImpl;\n        uint chainId = Token.getChainID();\n        chainIdOnLP = AvaxConstant.CHAINID;\n        isLPChain = (chainIdOnLP == chainId);\n\n        stiMinter = _stiMinter;\n        setSTIVault(_stiVault);\n    }\n\n    function transferOwnership(address newOwner) public virtual override(BasicUserAgent, OwnableUpgradeable) onlyOwner {\n        BasicUserAgent.transferOwnership(newOwner);\n    }\n\n    function setSTIMinter(ISTIMinter _stiMinter) external onlyOwner {\n        stiMinter = _stiMinter;\n    }\n\n    function setSTIVault(ISTIVault _stiVault) public onlyOwner {\n        require(address(_stiVault) != address(0), \"Invalid vault\");\n\n        address oldVault = address(stiVault);\n        if (oldVault != address(0)) {\n            USDT.safeApprove(oldVault, 0);\n            USDC.safeApprove(oldVault, 0);\n        }\n\n        stiVault = _stiVault;\n        if (USDT.allowance(address(this), address(_stiVault)) == 0) {\n            USDT.safeApprove(address(_stiVault), type(uint).max);\n        }\n        if (USDC.allowance(address(this), address(_stiVault)) == 0) {\n            USDC.safeApprove(address(_stiVault), type(uint).max);\n        }\n    }\n\n    /// @dev It calls initDepositByAdmin of STIMinter.\n    /// @param _pool total pool in USD\n    /// @param _USDT6Amt USDT with 6 decimals to be deposited\n    function initDeposit(uint _pool, uint _USDT6Amt, bytes calldata _signature) external payable virtual whenNotPaused returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _pool, _USDT6Amt)), _signature);\n\n        if (isLPChain) {\n            stiMinter.initDepositByAdmin(account, _pool, _USDT6Amt);\n        } else {\n            bytes memory _targetCallData = abi.encodeWithSelector(\n                STIUserAgent.initDepositByAdmin.selector,\n                account, _pool, _USDT6Amt\n            );\n            _feeAmt = _call(chainIdOnLP, userAgents[chainIdOnLP], 0, _targetCallData, false);\n        }\n        nonces[account] = _nonce + 1;\n    }\n\n    function initDepositByAdmin(address _account, uint _pool, uint _USDT6Amt) external onlyRole(ADAPTER_ROLE) {\n        stiMinter.initDepositByAdmin(_account, _pool, _USDT6Amt);\n    }\n\n    /// @dev It transfers tokens to user agents\n    function transfer(\n        uint[] memory _amounts,\n        uint[] memory _toChainIds,\n        AdapterType[] memory _adapterTypes,\n        bytes calldata _signature\n    ) external payable virtual whenNotPaused returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _amounts, _toChainIds, _adapterTypes)), _signature);\n\n        (address[] memory toAddresses, uint lengthOut) = transferIn(account, _amounts, _toChainIds, _adapterTypes);\n        if (lengthOut > 0) {\n            _feeAmt = _transfer(account, Const.TokenID.USDT, _amounts, _toChainIds, toAddresses, _adapterTypes, lengthOut, false);\n        }\n        nonces[account] = _nonce + 1;\n    }\n\n    function transferIn(\n        address account,\n        uint[] memory _amounts,\n        uint[] memory _toChainIds,\n        AdapterType[] memory _adapterTypes\n    ) internal returns (address[] memory _toAddresses, uint _lengthOut) {\n        uint length = _amounts.length;\n        _toAddresses = new address[](length);\n        uint chainId = Token.getChainID();\n        uint amountOn;\n        uint amountOut;\n        for (uint i = 0; i < length; i ++) {\n            uint amount = _amounts[i];\n            uint toChainId = _toChainIds[i];\n            if (toChainId == chainId) {\n                amountOn += amount;\n            } else {\n                if (_lengthOut != i) {\n                    _amounts[_lengthOut] = amount;\n                    _toChainIds[_lengthOut] = toChainId;\n                    _adapterTypes[_lengthOut] = _adapterTypes[i];\n\n                    address toUserAgent = userAgents[toChainId];\n                    require(toUserAgent != address(0), \"Invalid user agent\");\n                    _toAddresses[_lengthOut] = toUserAgent;\n                }\n                _lengthOut ++;\n                amountOut += amount;\n            }\n        }\n\n        USDT.safeTransferFrom(account, address(this), amountOn + amountOut);\n        usdtBalances[account] += amountOn;\n    }\n\n    /// @dev It calls depositByAdmin of STIVaults.\n    function deposit(\n        uint[] memory _toChainIds,\n        address[] memory _tokens,\n        uint[] memory _USDTAmts,\n        uint _minterNonce,\n        bytes calldata _signature\n    ) external payable virtual returns (uint _feeAmt) {\n        _toChainIds;\n        _tokens;\n        _USDTAmts;\n        _minterNonce;\n        _signature;\n        _feeAmt;\n        delegateAndReturn();\n    }\n\n    function depositByAgent(\n        address _account,\n        address[] memory _tokens,\n        uint[] memory _USDTAmts,\n        uint _minterNonce\n    ) external {\n        _account;\n        _tokens;\n        _USDTAmts;\n        _minterNonce;\n        delegateAndReturn();\n    }\n\n    /// @dev It calls mintByAdmin of STIMinter.\n    function mint(uint _USDT6Amt, bytes calldata _signature) external payable virtual returns (uint _feeAmt) {\n        _USDT6Amt;\n        _signature;\n        _feeAmt;\n        delegateAndReturn();\n    }\n\n    function mintByAdmin(address _account, uint _USDT6Amt) external {\n        _account;\n        _USDT6Amt;\n        delegateAndReturn();\n    }\n\n    /// @dev It calls burnByAdmin of STIMinter.\n    /// @param _pool total pool in USD\n    /// @param _share amount of shares\n    function burn(uint _pool, uint _share, bytes calldata _signature) external payable virtual returns (uint _feeAmt) {\n        _pool;\n        _share;\n        _signature;\n        _feeAmt;\n        delegateAndReturn();\n    }\n\n    function burnByAdmin(address _account, uint _pool, uint _share) external {\n        _account;\n        _pool;\n        _share;\n        delegateAndReturn();\n    }\n\n    /// @dev It calls withdrawPercByAdmin of STIVaults.\n    function withdraw(\n        uint[] memory _chainIds, uint _sharePerc, uint _minterNonce, bytes calldata _signature\n    ) external payable returns (uint _feeAmt) {\n        _chainIds;\n        _sharePerc;\n        _minterNonce;\n        _signature;\n        _feeAmt;\n        delegateAndReturn();\n    }\n\n    function withdrawPercByAgent(\n        address _account, uint _sharePerc, uint _minterNonce\n    ) external virtual {\n        _account;\n        _sharePerc;\n        _minterNonce;\n        delegateAndReturn();\n    }\n\n    /// @dev It gathers withdrawn tokens of the user from user agents.\n    function gather(\n        uint[] memory _fromChainIds,\n        AdapterType[] memory _adapterTypes,\n        bytes calldata _signature\n    ) external payable virtual returns (uint _feeAmt) {\n        _fromChainIds;\n        _adapterTypes;\n        _signature;\n        _feeAmt;\n        delegateAndReturn();\n    }\n\n    function gatherByAdmin(\n        address _account, uint _toChainId, AdapterType _adapterType\n    ) external {\n        _account;\n        _toChainId;\n        _adapterType;\n        delegateAndReturn();\n    }\n\n    /// @dev It calls exitWithdrawalByAdmin of STIMinter.\n    /// @param _gatheredAmount is the amount of token that is gathered.\n    /// @notice _gatheredAmount doesn't include the balance which is withdrawan in this agent.\n    function exitWithdrawal(uint _gatheredAmount, bytes calldata _signature) external payable returns (uint _feeAmt) {\n        _gatheredAmount;\n        _signature;\n        _feeAmt;\n        delegateAndReturn();\n    }\n\n    function exitWithdrawalByAdmin(address _account) external {\n        _account;\n        delegateAndReturn();\n    }\n\n    /// @dev It calls claimByAdmin of STIVaults.\n    function claim(\n        uint[] memory _chainIds, bytes calldata _signature\n    ) external payable returns (uint _feeAmt) {\n        _chainIds;\n        _signature;\n        _feeAmt;\n        delegateAndReturn();\n    }\n\n    function claimByAgent(address _account) external {\n        _account;\n        delegateAndReturn();\n    }\n\n    /// @dev It takes out tokens from this agent.\n    /// @param _gatheredAmount is the amount of token that is gathered.\n    /// @notice _gatheredAmount doesn't include the balance which is withdrawan in this agent.\n    function takeOut(uint _gatheredAmount, bytes calldata _signature) external {\n        _gatheredAmount;\n        _signature;\n        delegateAndReturn();\n    }\n\n    /**\n     * @dev Delegate to sub contract\n     */\n    function setSubImpl(address _subImpl) external onlyOwner {\n        require(_subImpl != address(0), \"Invalid address\");\n        subImpl = _subImpl;\n    }\n\n    function delegateAndReturn() private returns (bytes memory) {\n        (bool success, ) = subImpl.delegatecall(msg.data);\n\n        assembly {\n            let free_mem_ptr := mload(0x40)\n            returndatacopy(free_mem_ptr, 0, returndatasize())\n\n            switch success\n            case 0 { revert(free_mem_ptr, returndatasize()) }\n            default { return(free_mem_ptr, returndatasize()) }\n        }\n    }\n\n}\n"
    },
    "contracts/xchain/agent/BasicUserAgent.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../../../libs/BaseRelayRecipient.sol\";\nimport \"../../../libs/Const.sol\";\nimport \"../../../libs/Token.sol\";\nimport \"../../swap/ISwap.sol\";\nimport \"../IXChainAdapter.sol\";\nimport \"./BasicUserAgentBase.sol\";\nimport \"./IUserAgent.sol\";\n\ncontract BasicUserAgent is IUserAgent, BasicUserAgentBase {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    modifier onlyCBridgeAdapter {\n        require(msg.sender == address(cbridgeAdapter), \"Only cBridge\");\n        _;\n    }\n\n    function initialize(\n        address _admin,\n        ISwap _swap,\n        IXChainAdapter _multichainAdapter, IXChainAdapter _cbridgeAdapter\n    ) public virtual initializer {\n        __Ownable_init_unchained();\n        _setupRole(DEFAULT_ADMIN_ROLE, owner());\n        __GnosisSafe_init();\n\n        USDC = IERC20Upgradeable(Token.getTokenAddress(Const.TokenID.USDC));\n        USDT = IERC20Upgradeable(Token.getTokenAddress(Const.TokenID.USDT));\n\n        admin = _admin;\n        swap = _swap;\n        setMultichainAdapter(_multichainAdapter);\n        setCBridgeAdapter(_cbridgeAdapter);\n    }\n\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _revokeRole(DEFAULT_ADMIN_ROLE, owner());\n        super.transferOwnership(newOwner);\n        _setupRole(DEFAULT_ADMIN_ROLE, newOwner);\n    }\n\n    function pause() external virtual onlyOwner whenNotPaused {\n        _pause();\n        USDT.safeApprove(address(multichainAdapter), 0);\n        USDC.safeApprove(address(multichainAdapter), 0);\n        USDT.safeApprove(address(cbridgeAdapter), 0);\n        USDC.safeApprove(address(cbridgeAdapter), 0);\n    }\n\n    function unpause() external virtual onlyOwner whenPaused {\n        _unpause();\n        if (USDT.allowance(address(this), address(multichainAdapter)) == 0) {\n            USDT.safeApprove(address(multichainAdapter), type(uint).max);\n        }\n        if (USDC.allowance(address(this), address(multichainAdapter)) == 0) {\n            USDC.safeApprove(address(multichainAdapter), type(uint).max);\n        }\n        if (USDT.allowance(address(this), address(cbridgeAdapter)) == 0) {\n            USDT.safeApprove(address(cbridgeAdapter), type(uint).max);\n        }\n        if (USDC.allowance(address(this), address(cbridgeAdapter)) == 0) {\n            USDC.safeApprove(address(cbridgeAdapter), type(uint).max);\n        }\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        admin = _admin;\n    }\n\n    function setBiconomy(address _biconomy) external onlyOwner {\n        trustedForwarder = _biconomy;\n    }\n\n    function setMultichainAdapter(IXChainAdapter _multichainAdapter) public onlyOwner {\n        onChangeAdapter(address(multichainAdapter), address(_multichainAdapter));\n        multichainAdapter = _multichainAdapter;\n    }\n\n    function setCBridgeAdapter(IXChainAdapter _cbridgeAdapter) public onlyOwner {\n        onChangeAdapter(address(cbridgeAdapter), address(_cbridgeAdapter));\n        cbridgeAdapter = _cbridgeAdapter;\n    }\n\n    function onChangeAdapter(address oldAdapter, address newAdapter) internal {\n        if (oldAdapter == newAdapter) return;\n\n        if (oldAdapter != address(0)) {\n            _revokeRole(ADAPTER_ROLE, oldAdapter);\n            USDT.safeApprove(oldAdapter, 0);\n            USDC.safeApprove(oldAdapter, 0);\n        }\n        if (newAdapter != address(0)) {\n            _setupRole(ADAPTER_ROLE, newAdapter);\n            USDC.safeApprove(newAdapter, type(uint).max);\n            USDT.safeApprove(newAdapter, type(uint).max);\n        }\n    }\n\n    function setUserAgents(uint[] memory _chainIds, address[] memory _userAgents) external onlyOwner {\n        uint length = _chainIds.length;\n        for (uint i = 0; i < length; i++) {\n            uint chainId = _chainIds[i];\n            require(chainId != 0, \"Invalid chainID\");\n            userAgents[chainId] = _userAgents[i];\n        }\n    }\n\n    function setCallAdapterTypes(uint[] memory _chainIds, AdapterType[] memory _adapterTypes) external onlyOwner {\n        uint length = _chainIds.length;\n        for (uint i = 0; i < length; i++) {\n            uint chainId = _chainIds[i];\n            require(chainId != 0, \"Invalid chainID\");\n            callAdapterTypes[chainId] = _adapterTypes[i];\n        }\n    }\n\n    ///@notice Never revert in this function. If not, cbridgeAdapter.executeMessageWithTransferRefund will be failed.\n    function onRefunded(\n        uint _cbridgeNonce,\n        address _token,\n        uint amount,\n        uint, // _toChainId\n        address // _to\n    ) external onlyCBridgeAdapter {\n        address sender = cbridgeSenders[_cbridgeNonce];\n        if (_token == address(USDT)) usdtBalances[sender] += amount;\n        else if (_token == address(USDC)) usdcBalances[sender] += amount;\n    }\n}\n"
    },
    "contracts/xchain/agent/STIUserAgentBase.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"../../sti/ISTIMinter.sol\";\nimport \"../../sti/ISTIVault.sol\";\nimport \"./BasicUserAgentBase.sol\";\n\ncontract STIUserAgentBase is BasicUserAgentBase {\n\n    uint public chainIdOnLP;\n    bool public isLPChain;\n\n    ISTIMinter public stiMinter;\n    ISTIVault public stiVault;\n\n    // Address of sub-implementation contract\n    address public subImpl;\n}\n"
    },
    "libs/BaseRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity 0.8.9;\n\nimport \"../interfaces/IRelayRecipient.sol\";\n\n/**\n * A base contract to be inherited by any contract that want to receive relayed transactions\n * A subclass must use \"_msgSender()\" instead of \"msg.sender\"\n */\nabstract contract BaseRelayRecipient is IRelayRecipient {\n\n    /*\n     * Forwarder singleton we accept calls from\n     */\n    address public trustedForwarder;\n\n    /*\n     * require a function to be called through GSN only\n     */\n    modifier trustedForwarderOnly() {\n        require(msg.sender == address(trustedForwarder), \"Function can only be called through the trusted Forwarder\");\n        _;\n    }\n\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\n        return forwarder == trustedForwarder;\n    }\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, return the original sender.\n     * otherwise, return `msg.sender`.\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal override virtual view returns (address ret) {\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            assembly {\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\n            }\n        } else {\n            return msg.sender;\n        }\n    }\n}"
    },
    "contracts/xchain/IXChainAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nimport \"../../libs/Const.sol\";\r\n\r\ninterface IXChainAdapter {\r\n\r\n    function transfer(\r\n        Const.TokenID _tokenId,\r\n        uint[] memory _amounts,\r\n        uint[] memory _toChainIds,\r\n        address[] memory _toAddresses\r\n    ) external payable;\r\n\r\n    function call(\r\n        uint _toChainId,\r\n        address _targetContract,\r\n        uint _targetCallValue,\r\n        bytes memory _targetCallData\r\n    ) external payable;\r\n\r\n    function calcTransferFee() external view returns (uint);\r\n\r\n    function calcCallFee(\r\n        uint _toChainId,\r\n        address _targetContract,\r\n        uint _targetCallValue,\r\n        bytes memory _targetCallData\r\n    ) external view returns (uint);\r\n}\r\n"
    },
    "contracts/xchain/agent/BasicUserAgentBase.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"../../../libs/multiSig/GnosisSafeUpgradeable.sol\";\nimport \"../../../libs/BaseRelayRecipient.sol\";\nimport \"../../../libs/Const.sol\";\nimport \"../../swap/ISwap.sol\";\nimport \"../IXChainAdapter.sol\";\n\ninterface ICBridgeAdapter is IXChainAdapter {\n    function nonce() external view returns (uint);\n}\n\ncontract BasicUserAgentBase is\n    BaseRelayRecipient,\n    GnosisSafeUpgradeable,\n    AccessControlEnumerableUpgradeable,\n    PausableUpgradeable,\n    OwnableUpgradeable\n{\n    enum AdapterType {\n        CBridge,\n        Multichain\n    }\n\n    bytes32 public constant ADAPTER_ROLE = keccak256(\"ADAPTER_ROLE\");\n\n    address public admin;\n    mapping(address => uint) public nonces;\n\n    ISwap swap;\n    IERC20Upgradeable public USDC;\n    IERC20Upgradeable public USDT;\n    // These stores the balance that is deposited directly, not cross-transferred.\n    // And these also store the refunded amount.\n    mapping(address => uint) public usdcBalances;\n    mapping(address => uint) public usdtBalances;\n\n    IXChainAdapter public multichainAdapter;\n    IXChainAdapter public cbridgeAdapter;\n    // Map of transfer addresses (cbridgeAdapter's nonce => sender)\n    mapping(uint => address) public cbridgeSenders;\n\n    // Map of user agents (chainId => userAgent).\n    mapping(uint => address) public userAgents;\n\n    // Map of adapter types for calling (chainId => AdapterType).\n    // AdapterType.CBridge is the default adapter because it is 0.\n    mapping(uint => AdapterType) public callAdapterTypes;\n\n    event Transfer(\n        address indexed from,\n        address token,\n        uint indexed amount,\n        uint fromChainId,\n        uint indexed toChainId,\n        address to,\n        AdapterType adapterType,\n        uint nonce\n    );\n\n    function _msgSender() internal override(ContextUpgradeable, BaseRelayRecipient) view returns (address) {\n        return BaseRelayRecipient._msgSender();\n    }\n\n    function versionRecipient() external pure override returns (string memory) {\n        return \"1\";\n    }\n\n    function checkSignature(bytes32 data, bytes calldata _signature) view internal {\n        require(isValidSignature(admin, abi.encodePacked(data), _signature), \"Invalid signature\");\n    }\n\n    function _transfer(\n        address _from,\n        Const.TokenID _tokenId,\n        uint[] memory _amounts,\n        uint[] memory _toChainIds,\n        address[] memory _toAddresses,\n        AdapterType[] memory _adapterTypes,\n        uint _length,\n        bool _skim // It's a flag to calculate fee without execution\n    ) internal returns (uint _feeAmt) {\n        (uint[] memory mchainAmounts, uint[] memory mchainToChainIds, address[] memory mchainToAddresses,\n        uint[] memory cbridgeAmounts, uint[] memory cbridgeToChainIds, address[] memory cbridgeToAddresses)\n            = splitTranfersPerAdapter(_amounts, _toChainIds, _toAddresses, _adapterTypes, _length);\n\n        if (_skim == false && mchainAmounts.length > 0) {\n            transferThroughMultichain(_from, _tokenId, mchainAmounts, mchainToChainIds, mchainToAddresses);\n        }\n        if (cbridgeAmounts.length > 0) {\n            _feeAmt = transferThroughCBridge(_from, _tokenId, cbridgeAmounts, cbridgeToChainIds, cbridgeToAddresses, _skim);\n        }\n    }\n\n    function transferThroughMultichain (\n        address _from,\n        Const.TokenID _tokenId,\n        uint[] memory _mchainAmounts,\n        uint[] memory _mchainToChainIds,\n        address[] memory _mchainToAddresses\n    ) private {\n        uint mchainReqCount = _mchainAmounts.length;\n        multichainAdapter.transfer(_tokenId, _mchainAmounts, _mchainToChainIds, _mchainToAddresses);\n\n        uint chainId = Token.getChainID();\n        for (uint i = 0; i < mchainReqCount; i ++) {\n            emit Transfer(_from, address(USDT), _mchainAmounts[i], chainId, _mchainToChainIds[i], _mchainToAddresses[i], AdapterType.Multichain, 0);\n        }\n    }\n\n    function transferThroughCBridge (\n        address _from,\n        Const.TokenID _tokenId,\n        uint[] memory _cbridgeAmounts,\n        uint[] memory _cbridgeToChainIds,\n        address[] memory _cbridgeToAddresses,\n        bool _skim // It's a flag to calculate fee without execution\n    ) private returns (uint _feeAmt) {\n        uint cbridgeReqCount = _cbridgeAmounts.length;\n        _feeAmt = cbridgeAdapter.calcTransferFee() * cbridgeReqCount;\n\n        if (_skim == false && address(this).balance >= _feeAmt) {\n            uint cbridgeNonce = ICBridgeAdapter(address(cbridgeAdapter)).nonce();\n            cbridgeAdapter.transfer{value: _feeAmt}(_tokenId, _cbridgeAmounts, _cbridgeToChainIds, _cbridgeToAddresses);\n\n            uint chainId = Token.getChainID();\n            for (uint i = 0; i < cbridgeReqCount; i ++) {\n                uint nonce = cbridgeNonce + i;\n                cbridgeSenders[nonce] = _from;\n                emit Transfer(_from, address(USDT), _cbridgeAmounts[i], chainId, _cbridgeToChainIds[i], _cbridgeToAddresses[i], AdapterType.CBridge, nonce);\n            }\n        }\n    }\n\n    function splitTranfersPerAdapter (\n        uint[] memory _amounts,\n        uint[] memory _toChainIds,\n        address[] memory _toAddresses,\n        AdapterType[] memory _adapterTypes,\n        uint length\n    ) private pure returns (\n        uint[] memory _mchainAmounts,\n        uint[] memory _mchainToChainIds,\n        address[] memory _mchainToAddresses,\n        uint[] memory _cbridgeAmounts,\n        uint[] memory _cbridgeToChainIds,\n        address[] memory _cbridgeToAddresses\n    ){\n        uint mchainReqCount;\n        uint cbridgeReqCount;\n        for (uint i = 0; i < length; i ++) {\n            if (_adapterTypes[i] == AdapterType.Multichain) mchainReqCount ++;\n            else if (_adapterTypes[i] == AdapterType.CBridge) cbridgeReqCount ++;\n        }\n\n        _mchainAmounts = new uint[](mchainReqCount);\n        _mchainToChainIds = new uint[](mchainReqCount);\n        _mchainToAddresses = new address[](mchainReqCount);\n        _cbridgeAmounts = new uint[](cbridgeReqCount);\n        _cbridgeToChainIds = new uint[](cbridgeReqCount);\n        _cbridgeToAddresses = new address[](cbridgeReqCount);\n\n        mchainReqCount = 0;\n        cbridgeReqCount = 0;\n        for (uint i = 0; i < length; i ++) {\n            if (_adapterTypes[i] == AdapterType.Multichain) {\n                _mchainAmounts[mchainReqCount] = _amounts[i];\n                _mchainToChainIds[mchainReqCount] = _toChainIds[i];\n                _mchainToAddresses[mchainReqCount] = _toAddresses[i];\n                mchainReqCount ++;\n            } else if (_adapterTypes[i] == AdapterType.CBridge) {\n                _cbridgeAmounts[cbridgeReqCount] = _amounts[i];\n                _cbridgeToChainIds[cbridgeReqCount] = _toChainIds[i];\n                _cbridgeToAddresses[cbridgeReqCount] = _toAddresses[i];\n                cbridgeReqCount ++;\n            } else {\n                revert(\"Invalid adapter type\");\n            }\n        }\n    }\n\n    function _call(\n        uint _toChainId,\n        address _targetContract,\n        uint _targetCallValue,\n        bytes memory _targetCallData,\n        bool _skim // It's a flag to calculate fee without execution\n    ) internal returns (uint _feeAmt) {\n        require(_targetContract != address(0), \"Invalid targetContract\");\n        IXChainAdapter adapter = (callAdapterTypes[_toChainId] == AdapterType.Multichain) ? multichainAdapter : cbridgeAdapter;\n\n        _feeAmt = adapter.calcCallFee(_toChainId, _targetContract, _targetCallValue, _targetCallData);\n        if (_skim == false && address(this).balance >= _feeAmt) {\n            adapter.call{value: _feeAmt}(_toChainId, _targetContract, _targetCallValue, _targetCallData);\n        }\n    }\n\n    receive() external payable {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[39] private __gap;\n}\n"
    },
    "contracts/xchain/agent/IUserAgent.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\ninterface IUserAgent {\n    function onRefunded(uint _nonce, address _token, uint amount, uint _toChainId, address _to) external;\n}\n"
    },
    "interfaces/IRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity 0.8.9;\n\n/**\n * a contract must implement this interface in order to support relayed transaction.\n * It is better to inherit the BaseRelayRecipient as its implementation.\n */\nabstract contract IRelayRecipient {\n\n    /**\n     * return if the forwarder is trusted to forward relayed transactions to us.\n     * the forwarder is required to verify the sender's signature, and verify\n     * the call is not a replay.\n     */\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\n     * of the msg.data.\n     * otherwise, return `msg.sender`\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal virtual view returns (address);\n\n    function versionRecipient() external virtual view returns (string memory);\n}"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "libs/multiSig/GnosisSafeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport \"../../interfaces/IGnosisSafe.sol\";\r\nimport \"../Token.sol\";\r\nimport \"./Signature.sol\";\r\n\r\ncontract GnosisSafeUpgradeable is Initializable {\r\n    using AddressUpgradeable for address;\r\n\r\n    // keccak256(\"EIP712Domain(uint256 chainId,address verifyingContract)\")\r\n    bytes32 constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\r\n\r\n    bytes32 separator;\r\n\r\n    function __GnosisSafe_init() internal onlyInitializing {\r\n        separator = domainSeparator();\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\r\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\r\n     * @param data That should be signed (this is passed to an external validator contract)\r\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\r\n     */\r\n    function checkSignatures(\r\n        IGnosisSafe safe,\r\n        bytes32 dataHash,\r\n        bytes memory data,\r\n        bytes memory signatures\r\n    ) internal view returns (bool) {\r\n        // Load threshold to avoid multiple storage loads\r\n        uint256 _threshold = safe.getThreshold();\r\n        // Check that a threshold is set\r\n        if (_threshold == 0) return false;\r\n        return checkNSignatures(safe, dataHash, data, signatures, _threshold);\r\n    }\r\n\r\n    function isAddressIncluded(address[] memory items, address item) internal pure returns (bool) {\r\n        uint length = items.length;\r\n        for (uint i = 0; i < length; i++) {\r\n            if (items[i] == item) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\r\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\r\n     * @param data That should be signed (this is passed to an external validator contract)\r\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\r\n     * @param requiredSignatures Amount of required valid signatures.\r\n     */\r\n    function checkNSignatures(\r\n        IGnosisSafe safe,\r\n        bytes32 dataHash,\r\n        bytes memory data,\r\n        bytes memory signatures,\r\n        uint256 requiredSignatures\r\n    ) internal view returns (bool) {\r\n        // Check that the provided signature data is not too short\r\n        if (signatures.length < (requiredSignatures*65)) return false;\r\n        address currentOwner;\r\n        address[] memory owners = safe.getOwners();\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint256 i;\r\n\r\n        for (i = 0; i < requiredSignatures; i++) {\r\n            (v, r, s) = Signature.signatureSplit(signatures, i);\r\n            if (v == 0) {\r\n                // If v is 0 then it is a contract signature\r\n                // When handling contract signatures the address of the contract is encoded into r\r\n                currentOwner = address(uint160(uint256(r)));\r\n\r\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\r\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\r\n                // Here we only check that the pointer is not pointing inside the part that is being processed\r\n                if (uint256(s) < (requiredSignatures*65)) return false;\r\n\r\n                // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\r\n                if((uint256(s) + 32) > signatures.length) return false;\r\n\r\n                // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\r\n                uint256 contractSignatureLen;\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    contractSignatureLen := mload(add(add(signatures, s), 0x20))\r\n                }\r\n                if((uint256(s) + 32 + contractSignatureLen) > signatures.length) return false;\r\n\r\n                // Check signature\r\n                bytes memory contractSignature;\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\r\n                    contractSignature := add(add(signatures, s), 0x20)\r\n                }\r\n                if (_isValidSignature(IGnosisSafe(currentOwner), data, contractSignature) == false) return false;\r\n            } else {\r\n                // Default is the ecrecover flow with the provided data hash\r\n                // Use ecrecover with the messageHash for EOA signatures\r\n                currentOwner = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", dataHash)), v, r, s);\r\n            }\r\n            if (isAddressIncluded(owners, currentOwner) == false) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)\r\n     * @dev Should return whether the signature provided is valid for the provided data.\r\n     * @param _data Arbitrary length data signed on the behalf of address(msg.sender)\r\n     * @param _signature Signature byte array associated with _data\r\n     * @return a bool upon valid or invalid signature with corresponding _data\r\n     */\r\n    function _isValidSignature(IGnosisSafe _safe, bytes memory _data, bytes memory _signature) internal view returns (bool) {\r\n        bytes32 dataHash = getMessageHashForSafe(_data);\r\n        return checkSignatures(_safe, dataHash, _data, _signature);\r\n    }\r\n\r\n    function isValidSignature(address _account, bytes memory _data, bytes calldata _signature) public view returns (bool) {\r\n        bytes32 dataHash = getMessageHashForSafe(_data);\r\n        if (_account.isContract()) {\r\n            return checkSignatures(IGnosisSafe(_account), dataHash, _data, _signature);\r\n        } else {\r\n            (uint8 v, bytes32 r, bytes32 s) = Signature.signatureSplit(_signature, 0);\r\n            bytes32 messageDigest = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", dataHash));\r\n            address signer = ecrecover(messageDigest, v, r, s);\r\n            return (signer == _account);\r\n        }\r\n    }\r\n\r\n\r\n    /// @dev Returns hash of a message that can be signed by owners.\r\n    /// @param message Message that should be hashed\r\n    /// @return Message hash.\r\n    function getMessageHashForSafe(bytes memory message) public view returns (bytes32) {\r\n        bytes32 safeMessageHash = keccak256(message);\r\n        return keccak256(abi.encodePacked(bytes1(0x19), bytes1(0x01), separator, safeMessageHash));\r\n    }\r\n\r\n    function domainSeparator() internal view returns (bytes32) {\r\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, Token.getChainID(), address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "interfaces/IGnosisSafe.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity  0.8.9;\r\n\r\ninterface IGnosisSafe {\r\n    function getThreshold() external view returns (uint);\r\n    function isOwner(address owner) external view returns (bool);\r\n    function getOwners() external view returns (address[] memory);\r\n}\r\n"
    },
    "libs/multiSig/Signature.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nlibrary Signature {\r\n\r\n    /// @dev divides bytes signature into `uint8 v, bytes32 r, bytes32 s`.\r\n    /// @notice Make sure to perform a bounds check for @param pos, to avoid out of bounds access on @param signatures\r\n    /// @param pos which signature to read. A prior bounds check of this parameter should be performed, to avoid out of bounds access\r\n    /// @param signatures concatenated rsv signatures\r\n    function signatureSplit(bytes memory signatures, uint256 pos) internal pure returns (\r\n        uint8 v, bytes32 r, bytes32 s\r\n    ) {\r\n        // The signature format is a compact form of:\r\n        //   {bytes32 r}{bytes32 s}{uint8 v}\r\n        // Compact means, uint8 is not padded to 32 bytes.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let signaturePos := mul(0x41, pos)\r\n            r := mload(add(signatures, add(signaturePos, 0x20)))\r\n            s := mload(add(signatures, add(signaturePos, 0x40)))\r\n            // Here we are loading the last 32 bytes, including 31 bytes\r\n            // of 's'. There is no 'mload8' to do this.\r\n            //\r\n            // 'byte' is not working due to the Solidity parser, so lets\r\n            // use the second best option, 'and'\r\n            v := and(mload(add(signatures, add(signaturePos, 0x41))), 0xff)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/xchain/agent/STIUserAgentSub.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../libs/Const.sol\";\nimport \"../../../libs/Token.sol\";\nimport \"../../sti/ISTIMinter.sol\";\nimport \"../../sti/ISTIVault.sol\";\nimport \"./STIUserAgentBase.sol\";\n\ncontract STIUserAgentSub is STIUserAgentBase {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    /// @dev It calls depositByAgent of STIVaults.\n    function deposit(\n        uint[] memory _toChainIds,\n        address[] memory _tokens,\n        uint[] memory _USDT6Amts,\n        uint _minterNonce,\n        bytes calldata _signature\n    ) external payable whenNotPaused returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _toChainIds, _tokens, _USDT6Amts, _minterNonce)), _signature);\n\n        (uint toChainId, address[] memory subTokens, uint[] memory subUSDTAmts, uint newPos)\n            = nextDepositData(_toChainIds, _tokens, _USDT6Amts, 0);\n        while (toChainId != 0) {\n            _feeAmt += _deposit(account, toChainId, subTokens, subUSDTAmts, _minterNonce);\n            (toChainId, subTokens, subUSDTAmts, newPos) = nextDepositData(_toChainIds, _tokens, _USDT6Amts, newPos);\n        }\n\n        nonces[account] = _nonce + 1;\n    }\n\n    function nextDepositData (\n        uint[] memory _toChainIds,\n        address[] memory _tokens,\n        uint[] memory _USDT6Amts,\n        uint pos\n    ) private pure returns (\n        uint _toChainId,\n        address[] memory _subTokens,\n        uint[] memory _subUSDTAmts,\n        uint _newPos\n    ) {\n        uint length = _toChainIds.length;\n        uint count;\n        for (uint i = pos; i < length; i ++) {\n            if (_toChainId == 0) {\n                _toChainId = _toChainIds[i];\n            } else if (_toChainId != _toChainIds[i]) {\n                break;\n            }\n            count ++;\n        }\n\n        _newPos = pos + count;\n        if (count > 0) {\n            _subTokens = new address[](count);\n            _subUSDTAmts = new uint[](count);\n            count = 0;\n            for (uint i = pos; i < _newPos; i ++) {\n                _subTokens[count] = _tokens[i];\n                _subUSDTAmts[count] = _USDT6Amts[i];\n                count ++;\n            }\n        }\n    }\n\n    function _deposit(\n        address _account,\n        uint _toChainId,\n        address[] memory _tokens,\n        uint[] memory _USDT6Amts,\n        uint _minterNonce\n    ) internal virtual returns (uint _feeAmt) {\n        if (_toChainId == Token.getChainID()) {\n            uint balance = usdtBalances[_account];\n            uint amountSum;\n            for (uint i = 0; i < _USDT6Amts.length; i ++) {\n                amountSum += _USDT6Amts[i];\n            }\n            amountSum = amountSum * (10 ** (IERC20UpgradeableExt(address(USDT)).decimals() - 6));\n            require(balance >= amountSum, \"Insufficient balance\");\n            usdtBalances[_account] = balance - amountSum;\n\n            stiVault.depositByAgent(_account, _tokens, _USDT6Amts, _minterNonce);\n        } else {\n            bytes memory _targetCallData = abi.encodeWithSelector(\n                STIUserAgentSub.depositByAgent.selector,\n                _account, _tokens, _USDT6Amts, _minterNonce\n            );\n            _feeAmt = _call(_toChainId, userAgents[_toChainId], 0, _targetCallData, false);\n        }\n    }\n\n    function depositByAgent(\n        address _account,\n        address[] memory _tokens,\n        uint[] memory _USDT6Amts,\n        uint _minterNonce\n    ) external onlyRole(ADAPTER_ROLE) {\n        stiVault.depositByAgent(_account, _tokens, _USDT6Amts, _minterNonce);\n    }\n\n    /// @dev It calls mintByAdmin of STIMinter.\n    function mint(uint _USDT6Amt, bytes calldata _signature) external payable virtual whenNotPaused returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _USDT6Amt)), _signature);\n\n        if (isLPChain) {\n            stiMinter.mintByAdmin(account, _USDT6Amt);\n        } else {\n            bytes memory _targetCallData = abi.encodeWithSelector(\n                STIUserAgentSub.mintByAdmin.selector,\n                account, _USDT6Amt\n            );\n            _feeAmt = _call(chainIdOnLP, userAgents[chainIdOnLP], 0, _targetCallData, false);\n        }\n        nonces[account] = _nonce + 1;\n    }\n\n    function mintByAdmin(address _account, uint _USDT6Amt) external onlyRole(ADAPTER_ROLE) {\n        stiMinter.mintByAdmin(_account, _USDT6Amt);\n    }\n\n    /// @dev It calls burnByAdmin of STIMinter.\n    /// @param _pool total pool in USD\n    /// @param _share amount of shares\n    function burn(uint _pool, uint _share, bytes calldata _signature) external payable virtual returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _pool, _share)), _signature);\n\n        if (isLPChain) {\n            stiMinter.burnByAdmin(account, _pool, _share);\n        } else {\n            bytes memory _targetCallData = abi.encodeWithSelector(\n                STIUserAgentSub.burnByAdmin.selector,\n                account, _pool, _share\n            );\n            _feeAmt = _call(chainIdOnLP, userAgents[chainIdOnLP], 0, _targetCallData, false);\n        }\n        nonces[account] = _nonce + 1;\n    }\n\n    function burnByAdmin(address _account, uint _pool, uint _share) external onlyRole(ADAPTER_ROLE) {\n        stiMinter.burnByAdmin(_account, _pool, _share);\n    }\n\n    /// @dev It calls withdrawPercByAgent of STIVaults.\n    function withdraw(\n        uint[] memory _chainIds, uint _sharePerc, uint _minterNonce, bytes calldata _signature\n    ) external payable returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _chainIds, _sharePerc, _minterNonce)), _signature);\n\n        for (uint i = 0; i < _chainIds.length; i ++) {\n            _feeAmt += _withdraw(account, _chainIds[i], _sharePerc, _minterNonce);\n        }\n        nonces[account] = _nonce + 1;\n    }\n\n    function _withdraw(\n        address _account, uint _chainId, uint _sharePerc, uint _minterNonce\n    ) internal virtual returns (uint _feeAmt) {\n        if (_chainId == Token.getChainID()) {\n            _withdrawFromVault(stiVault, _account, _sharePerc, _minterNonce);\n        } else {\n            bytes memory _targetCallData = abi.encodeWithSelector(\n                STIUserAgentSub.withdrawPercByAgent.selector,\n                _account, _sharePerc, _minterNonce\n            );\n            _feeAmt = _call(_chainId, userAgents[_chainId], 0, _targetCallData, false);\n        }\n    }\n\n    function withdrawPercByAgent(\n        address _account, uint _sharePerc, uint _minterNonce\n    ) external onlyRole(ADAPTER_ROLE) {\n        _withdrawFromVault(stiVault, _account, _sharePerc, _minterNonce);\n    }\n\n    function _withdrawFromVault(\n        ISTIVault _stiVault, address _account, uint _sharePerc, uint _minterNonce\n    ) internal {\n        uint balanceBefore = USDT.balanceOf(address(this));\n        _stiVault.withdrawPercByAgent(_account, _sharePerc, _minterNonce);\n        usdtBalances[_account] += (USDT.balanceOf(address(this)) - balanceBefore);\n    }\n\n    /// @dev It gathers withdrawn tokens of the user from user agents.\n    function gather(\n        uint[] memory _fromChainIds,\n        AdapterType[] memory _adapterTypes,\n        bytes calldata _signature\n    ) external payable virtual returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _fromChainIds, _adapterTypes)), _signature);\n\n        for (uint i = 0; i < _fromChainIds.length; i ++) {\n            _feeAmt += _gather(account, _fromChainIds[i], _adapterTypes[i]);\n        }\n        nonces[account] = _nonce + 1;\n    }\n\n    function _gather(\n        address _account, uint _fromChainId, AdapterType _adapterType\n    ) private returns (uint _feeAmt) {\n        uint chainId = Token.getChainID();\n        if (_fromChainId != chainId) {\n            bytes memory _targetCallData = abi.encodeWithSelector(\n                STIUserAgentSub.gatherByAdmin.selector,\n                _account, chainId, _adapterType\n            );\n            _feeAmt = _call(_fromChainId, userAgents[_fromChainId], 0, _targetCallData, false);\n        }\n    }\n\n    function gatherByAdmin(\n        address _account, uint _toChainId, AdapterType _adapterType\n    ) external onlyRole(ADAPTER_ROLE) {\n        uint balance = usdtBalances[_account];\n        if (balance > 0) {\n            address toUserAgent = userAgents[_toChainId];\n            require(toUserAgent != address(0), \"Invalid user agent\");\n\n            uint[] memory amounts = new uint[](1);\n            amounts[0] = balance;\n            uint[] memory toChainIds = new uint[](1);\n            toChainIds[0] = _toChainId;\n            address[] memory toAddresses = new address[](1);\n            toAddresses[0] = toUserAgent;\n            AdapterType[] memory adapterTypes = new AdapterType[](1);\n            adapterTypes[0] = _adapterType;\n\n            uint feeAmt = _transfer(_account, Const.TokenID.USDT, amounts, toChainIds, toAddresses, adapterTypes, 1, true);\n            uint tokensForFee = swap.getAmountsInForETH(address(USDT), feeAmt);\n            if (balance > tokensForFee) {\n                uint spentTokenAmount = swap.swapTokensForExactETH(address(USDT), tokensForFee, feeAmt);\n                amounts[0] = balance - spentTokenAmount;\n                usdtBalances[_account] = 0;\n\n                _transfer(_account, Const.TokenID.USDT, amounts, toChainIds, toAddresses, adapterTypes, 1, false);\n            }\n        }\n    }\n\n    /// @dev It calls exitWithdrawalByAdmin of STIMinter.\n    /// @param _gatheredAmount is the amount of token that is gathered.\n    /// @notice _gatheredAmount doesn't include the balance which is withdrawan in this agent.\n    function exitWithdrawal(uint _gatheredAmount, bytes calldata _signature) external payable virtual returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _gatheredAmount)), _signature);\n\n        if (isLPChain) {\n            stiMinter.exitWithdrawalByAdmin(account);\n        } else {\n            bytes memory _targetCallData = abi.encodeWithSelector(\n                STIUserAgentSub.exitWithdrawalByAdmin.selector,\n                account\n            );\n            _feeAmt = _call(chainIdOnLP, userAgents[chainIdOnLP], 0, _targetCallData, false);\n        }\n\n        uint amount = _gatheredAmount + usdtBalances[account];\n        usdtBalances[account] = 0;\n        USDT.safeTransfer(account, amount);\n\n        nonces[account] = _nonce + 1;\n    }\n\n    function exitWithdrawalByAdmin(address _account) external onlyRole(ADAPTER_ROLE) {\n        stiMinter.exitWithdrawalByAdmin(_account);\n    }\n\n    /// @dev It calls claimByAgent of STIVaults.\n    function claim(\n        uint[] memory _chainIds, bytes calldata _signature\n    ) external payable virtual returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _chainIds)), _signature);\n\n        for (uint i = 0; i < _chainIds.length; i ++) {\n            _feeAmt += _claim(account, _chainIds[i]);\n        }\n        nonces[account] = _nonce + 1;\n    }\n\n    function _claim(address _account, uint _chainId) private returns (uint _feeAmt) {\n        if (_chainId == Token.getChainID()) {\n            stiVault.claimByAgent(_account);\n        } else {\n            bytes memory _targetCallData = abi.encodeWithSelector(\n                STIUserAgentSub.claimByAgent.selector,\n                _account\n            );\n            _feeAmt = _call(_chainId, userAgents[_chainId], 0, _targetCallData, false);\n        }\n    }\n\n    function claimByAgent(address _account) external onlyRole(ADAPTER_ROLE) {\n        uint balanceBefore = USDT.balanceOf(address(this));\n        stiVault.claimByAgent(_account);\n        usdtBalances[_account] += (USDT.balanceOf(address(this)) - balanceBefore);\n    }\n\n    /// @dev It takes out tokens from this agent.\n    /// @param _gatheredAmount is the amount of token that is gathered.\n    /// @notice _gatheredAmount doesn't include the balance which is withdrawan in this agent.\n    function takeOut(uint _gatheredAmount, bytes calldata _signature) external {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _gatheredAmount)), _signature);\n\n        uint amount = _gatheredAmount + usdtBalances[account];\n        usdtBalances[account] = 0;\n        USDT.safeTransfer(account, amount);\n\n        nonces[account] = _nonce + 1;\n    }\n}\n"
    },
    "contracts/xchain/agent/STIUserAgentSubTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../libs/Const.sol\";\nimport \"../../../libs/Token.sol\";\nimport \"../../sti/ISTIMinter.sol\";\nimport \"../../sti/ISTIVault.sol\";\nimport \"./STIUserAgentSub.sol\";\n\ncontract STIUserAgentSubTest is STIUserAgentSub {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    function _deposit(\n        address _account,\n        uint _toChainId,\n        address[] memory _tokens,\n        uint[] memory _USDT6Amts,\n        uint _minterNonce\n    ) internal override returns (uint _feeAmt) {\n        if (_toChainId == Token.getChainID()) {\n            uint balance = usdtBalances[_account];\n            uint amountSum;\n            for (uint i = 0; i < _USDT6Amts.length; i ++) {\n                amountSum += _USDT6Amts[i];\n            }\n            amountSum = amountSum * (10 ** (IERC20UpgradeableExt(address(USDT)).decimals() - 6));\n            require(balance >= amountSum, \"Insufficient balance\");\n            usdtBalances[_account] = balance - amountSum;\n\n            stiVault.depositByAgent(_account, _tokens, _USDT6Amts, _minterNonce);\n        } else {\n            // NOTE: cBridge doesn't support liquidity on testnets\n            _feeAmt = 0;\n        }\n    }\n\n    function mint(uint _USDT6Amt, bytes calldata _signature) external payable override whenNotPaused returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _USDT6Amt)), _signature);\n\n        if (isLPChain) {\n            stiMinter.mintByAdmin(account, _USDT6Amt);\n        } else {\n            // NOTE: cBridge is not supported on Rinkeby\n            _feeAmt = 0;\n        }\n        nonces[account] = _nonce + 1;\n    }\n\n    function burn(uint _pool, uint _share, bytes calldata _signature) external payable override returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _pool, _share)), _signature);\n\n        if (isLPChain) {\n            stiMinter.burnByAdmin(account, _pool, _share);\n        } else {\n            // NOTE: cBridge is not supported on Rinkeby\n            _feeAmt = 0;\n        }\n        nonces[account] = _nonce + 1;\n    }\n\n    function _withdraw(\n        address _account, uint _chainId, uint _sharePerc, uint _minterNonce\n    ) internal override returns (uint _feeAmt) {\n        if (_chainId == Token.getChainID()) {\n            _withdrawFromVault(stiVault, _account, _sharePerc, _minterNonce);\n        } else {\n            // NOTE: cBridge doesn't support liquidity on testnets\n            _feeAmt = 0;\n        }\n    }\n\n    function gather(\n        uint[] memory _fromChainIds,\n        AdapterType[] memory _adapterTypes,\n        bytes calldata _signature\n    ) external payable override returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _fromChainIds, _adapterTypes)), _signature);\n\n        // NOTE: cBridge doesn't support liquidity on testnets\n        _feeAmt = 0;\n        nonces[account] = _nonce + 1;\n    }\n\n    function exitWithdrawal(uint _gatheredAmount, bytes calldata _signature) external payable override returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _gatheredAmount)), _signature);\n\n        if (isLPChain) {\n            stiMinter.exitWithdrawalByAdmin(account);\n        } else {\n            // NOTE: cBridge is not supported on Rinkeby\n            _feeAmt = 0;\n        }\n\n        uint amount = _gatheredAmount + usdtBalances[account];\n        usdtBalances[account] = 0;\n        USDT.safeTransfer(account, amount);\n\n        nonces[account] = _nonce + 1;\n    }\n\n    function claim(\n        uint[] memory _chainIds, bytes calldata _signature\n    ) external payable override returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _chainIds)), _signature);\n\n        // NOTE: cBridge doesn't support liquidity on testnets\n        _feeAmt = 0;\n        nonces[account] = _nonce + 1;\n    }\n\n}\n"
    },
    "contracts/sti/STIVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../bni/priceOracle/IPriceOracle.sol\";\nimport \"../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../libs/Const.sol\";\nimport \"../../libs/Token.sol\";\nimport \"../../libs/BaseRelayRecipient.sol\";\nimport \"./ISTIVault.sol\";\n\ninterface IStrategy {\n    function invest(address[] memory tokens, uint[] memory USDTAmts) external;\n    function withdrawPerc(address claimer, uint sharePerc) external;\n    function claim(address _claimer) external returns (uint USDTAmt);\n    function emergencyWithdraw() external;\n    function claimEmergencyWithdrawal() external;\n    function reinvest(address[] memory tokens, uint[] memory USDTAmts) external;\n    function getEmergencyWithdrawalUnbonded() external view returns (uint waitingInUSD, uint unbondedInUSD, uint waitForTs);\n    function getPoolsUnbonded(address _claimer) external view returns (\n        address[] memory tokens,\n        uint[] memory waitings,\n        uint[] memory waitingInUSDs,\n        uint[] memory unbondeds,\n        uint[] memory unbondedInUSDs,\n        uint[] memory waitForTses\n    );\n    function getAllUnbonded(address _claimer) external view returns (uint waitingInUSD, uint unbondedInUSD, uint waitForTs);\n    function getPoolCount() external view returns (uint);\n    function getEachPoolInUSD() external view returns (address[] memory tokens, uint[] memory pools);\n    function getAllPoolInUSD() external view returns (uint);\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages);\n    function getAPR() external view returns (uint);\n}\n\ncontract STIVault is\n    ISTIVault,\n    BaseRelayRecipient,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable,\n    OwnableUpgradeable\n{\n    using SafeERC20Upgradeable for IERC20UpgradeableExt;\n\n    struct PoolSnapshot {\n        uint poolInUSD;\n        uint ts;\n    }\n\n    IERC20UpgradeableExt public USDT;\n    uint8 usdtDecimals;\n\n    address public admin;\n    IStrategy public strategy;\n    IPriceOracle public priceOracle;\n\n    uint public firstOperationNonce;\n    uint public lastOperationNonce;\n    mapping(uint => PoolSnapshot) public poolAtNonce;\n    mapping(address => uint) public userLastOperationNonce;\n    mapping(uint => uint) public operationAmounts; // value in USD scaled by 10^18\n\n    address public userAgent;\n\n    event Deposit(address indexed caller, uint indexed amtDeposit, address indexed tokenDeposit);\n    event Withdraw(address indexed caller, uint indexed amtWithdraw, address indexed tokenWithdraw, uint sharePerc);\n    event Reinvest(uint indexed amount);\n    \n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == address(admin), \"Only owner or admin\");\n        _;\n    }\n\n    modifier onlyAgent {\n        require(msg.sender == address(userAgent), \"Only agent\");\n        _;\n    }\n\n    function initialize(\n        address _admin, address _userAgent, address _biconomy,\n        address _strategy, address _priceOracle,\n        address _USDT\n    ) external initializer {\n        __Ownable_init();\n        admin = _admin;\n        userAgent = _userAgent;\n\n        trustedForwarder = _biconomy;\n        strategy = IStrategy(_strategy);\n        priceOracle = IPriceOracle(_priceOracle);\n\n        USDT = IERC20UpgradeableExt(_USDT);\n        usdtDecimals = USDT.decimals();\n        require(6 <= usdtDecimals, \"USDT decimals must >= 6\");\n\n        USDT.safeApprove(address(strategy), type(uint).max);\n    }\n\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\n    /// @param _USDT6Amts amounts of USDT should be deposited to each pools. It's 6 decimals\n    function depositByAdmin(\n        address _account, address[] memory _tokens, uint[] memory _USDT6Amts, uint _nonce\n    ) external onlyOwnerOrAdmin nonReentrant whenNotPaused {\n        _deposit(_account, _account, _tokens, _USDT6Amts, _nonce);\n    }\n\n    function depositByAgent(\n        address _account, address[] memory _tokens, uint[] memory _USDT6Amts, uint _nonce\n    ) external onlyAgent nonReentrant whenNotPaused {\n        _deposit(_account, _msgSender(), _tokens, _USDT6Amts, _nonce);\n    }\n\n    function _deposit(\n        address _account, address _from, address[] memory _tokens, uint[] memory _USDT6Amts, uint _nonce\n    ) private {\n        require(_account != address(0), \"Invalid account\");\n        uint poolCnt = _tokens.length;\n        require(poolCnt == _USDT6Amts.length, \"Not match array length\");\n\n        uint k = 10 ** (usdtDecimals - 6);\n        uint USDTAmt;\n        for (uint i = 0; i < poolCnt; i ++) {\n            _USDT6Amts[i] = _USDT6Amts[i] * k;\n            USDTAmt += _USDT6Amts[i];\n        }\n        require(USDTAmt > 0, \"Amounts must > 0\");\n\n        require(userLastOperationNonce[_account] < _nonce, \"Nonce is behind\");\n        userLastOperationNonce[_account] = _nonce;\n        operationAmounts[_nonce] = getValueInUSD(address(USDT), USDTAmt);\n        _snapshotPool(_nonce, getAllPoolInUSD());\n\n        USDT.safeTransferFrom(_from, address(this), USDTAmt);\n        strategy.invest(_tokens, _USDT6Amts);\n        emit Deposit(_account, USDTAmt, address(USDT));\n    }\n\n    /// @param _sharePerc percentage of assets which should be withdrawn. It's 18 decimals\n    function withdrawPercByAdmin(\n        address _account, uint _sharePerc, uint _nonce\n    ) external onlyOwnerOrAdmin nonReentrant {\n        _withdraw(_account, _account, _sharePerc, _nonce);\n    }\n\n    function withdrawPercByAgent(\n        address _account, uint _sharePerc, uint _nonce\n    ) external onlyAgent nonReentrant {\n        _withdraw(_account, _msgSender(), _sharePerc, _nonce);\n    }\n\n    function _withdraw(\n        address _account, address _to, uint _sharePerc, uint _nonce\n    ) private {\n        require(_sharePerc > 0, \"SharePerc must > 0\");\n        require(_sharePerc <= 1e18, \"Over 100%\");\n\n        (uint vaultPool, uint strategyPool) = _getAllPoolInUSD();\n        uint pool = vaultPool + strategyPool;\n        uint withdrawAmt = pool * _sharePerc / 1e18;\n\n        require(userLastOperationNonce[_account] < _nonce, \"Nonce is behind\");\n        userLastOperationNonce[_account] = _nonce;\n        operationAmounts[_nonce] = withdrawAmt;\n        _snapshotPool(_nonce, pool);\n\n        uint USDTAmt;\n        if (withdrawAmt <= vaultPool) {\n            USDTAmt = USDT.balanceOf(address(this)) * withdrawAmt / vaultPool;\n        } else {\n            if (paused() == false) {\n                strategy.withdrawPerc(_account, 1e18 * (withdrawAmt - vaultPool) / strategyPool);\n                USDTAmt = USDT.balanceOf(address(this));\n            } else {\n                require(false, \"Retry after all claimed\");\n            }\n        }\n\n        if (USDTAmt > 0) {\n            USDT.safeTransfer(_to, USDTAmt);\n        }\n        emit Withdraw(_account, withdrawAmt, address(USDT), _sharePerc);\n    }\n\n    function _snapshotPool(uint _nonce, uint _pool) internal {\n        poolAtNonce[_nonce] = PoolSnapshot({\n            poolInUSD: _pool,\n            ts: block.timestamp\n        });\n\n        if (firstOperationNonce == 0) {\n            firstOperationNonce = _nonce;\n        }\n        if (lastOperationNonce < _nonce) {\n            lastOperationNonce = _nonce;\n        }\n    }\n\n    function claim() external nonReentrant {\n        _claimAllAndTransfer(msg.sender, msg.sender);\n    }\n\n    function claimByAdmin(address _account) external onlyOwnerOrAdmin nonReentrant {\n        _claimAllAndTransfer(_account, _account);\n    }\n\n    function claimByAgent(address _account) external onlyAgent nonReentrant {\n        _claimAllAndTransfer(_account, _msgSender());\n    }\n\n    function _claimAllAndTransfer(address _account, address _to) internal {\n        uint USDTAmt = strategy.claim(_account);\n        if (USDTAmt > 0) {\n            USDT.safeTransfer(_to, USDTAmt);\n        }\n    }\n\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\n        _pause();\n        strategy.emergencyWithdraw();\n    }\n\n    function claimEmergencyWithdrawal() external onlyOwnerOrAdmin whenPaused {\n        strategy.claimEmergencyWithdrawal();\n    }\n\n    function reinvest(address[] memory _tokens, uint[] memory _perc) external onlyOwnerOrAdmin whenPaused {\n        uint poolCnt = _tokens.length;\n        require(poolCnt == _perc.length, \"Not match array length\");\n\n        (uint waitingInUSD, uint unbondedInUSD,) = getEmergencyWithdrawalUnbonded();\n        require(waitingInUSD + unbondedInUSD == 0, \"Need to claim emergency withdrawal first\");\n\n        _unpause();\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (USDTAmt > 0) {\n            uint totalPerc;\n            for (uint i = 0; i < poolCnt; i ++) {\n                totalPerc += _perc[i];\n            }\n\n            uint[] memory USMTAmts = new uint[](poolCnt);\n            for (uint i = 0; i < poolCnt; i ++) {\n                USMTAmts[i] = _perc[i] * USDTAmt / totalPerc;\n            }\n\n            strategy.reinvest(_tokens, USMTAmts);\n            emit Reinvest(USDTAmt);\n        }\n    }\n\n    function setStrategy(address _strategy) external onlyOwner {\n        strategy = IStrategy(_strategy);\n\n        if (USDT.allowance(address(this), address(strategy)) == 0) {\n            USDT.safeApprove(address(strategy), type(uint).max);\n        }\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        admin = _admin;\n    }\n\n    function setUserAgent(address _userAgent) external onlyOwner {\n        userAgent = _userAgent;\n    }\n\n    function setBiconomy(address _biconomy) external onlyOwner {\n        trustedForwarder = _biconomy;\n    }\n\n    function _msgSender() internal override(ContextUpgradeable, BaseRelayRecipient) view returns (address) {\n        return BaseRelayRecipient._msgSender();\n    }\n\n    function versionRecipient() external pure override returns (string memory) {\n        return \"1\";\n    }\n\n    function getPoolsUnbonded(address _account) external view returns (\n        uint[] memory chainIDs,\n        address[] memory tokens,\n        uint[] memory waitings,\n        uint[] memory waitingInUSDs,\n        uint[] memory unbondeds,\n        uint[] memory unbondedInUSDs,\n        uint[] memory waitForTses\n    ) {\n        (tokens, waitings, waitingInUSDs, unbondeds, unbondedInUSDs, waitForTses) = strategy.getPoolsUnbonded(_account);\n\n        uint poolCnt = tokens.length;\n        uint chainID = Token.getChainID();\n        chainIDs = new uint[](poolCnt);\n        for (uint _pid = 0; _pid < poolCnt; _pid ++) {\n            chainIDs[_pid] = chainID;\n        }\n    }\n\n    function getAllUnbonded(address _account) external view returns (\n        uint waitingInUSD, uint unbondedInUSD, uint waitForTs\n    ) {\n        return strategy.getAllUnbonded(_account);\n    }\n\n    function getEmergencyWithdrawalUnbonded() public view returns (\n        uint waitingInUSD, uint unbondedInUSD, uint waitForTs\n    ) {\n        return strategy.getEmergencyWithdrawalUnbonded();\n    }\n\n    ///@return chainID is the ID of the current chain\n    ///@return sharePerc is percentage of the value in the vault of the total value. It's useful for calculating the withdrawable share under emergency status.\n    function getWithdrawableSharePerc() public view returns (uint chainID, uint sharePerc) {\n        chainID = Token.getChainID();\n        if (paused() == false) {\n            sharePerc = 1e18;\n        } else {\n            // In emergency mode, the unclaimed assets can not be withdrawn.\n            (uint vaultPool, uint strategyPool) = _getAllPoolInUSD();\n            sharePerc = 1e18 * vaultPool / (vaultPool + strategyPool);\n        }\n    }\n\n    ///@return the price of USDT in USD.\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\n        return priceOracle.getAssetPrice(address(USDT));\n    }\n\n    ///@return the value in USD. it's scaled by 1e18;\n    function getValueInUSD(address _asset, uint _amount) internal view returns (uint) {\n        (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(_asset);\n        uint8 _decimals = IERC20UpgradeableExt(_asset).decimals();\n        return Token.changeDecimals(_amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\n    }\n\n    function getEachPoolInUSD() public view returns (uint[] memory chainIDs, address[] memory tokens, uint[] memory pools) {\n        (tokens, pools) = strategy.getEachPoolInUSD();\n        uint poolCnt = pools.length;\n        uint chainID = Token.getChainID();\n        chainIDs = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            chainIDs[i] = chainID;\n        }\n\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if(USDTAmt > 0 && poolCnt > 0) {\n            pools[0] += getValueInUSD(address(USDT), USDTAmt);\n        }\n        return (chainIDs, tokens, pools);\n    }\n\n    function getAllPoolInUSD() public view returns (uint allPool) {\n        (uint vaultPool, uint strategyPool) = _getAllPoolInUSD();\n        allPool = vaultPool + strategyPool;\n    }\n\n    function _getAllPoolInUSD() internal view returns (uint vaultPool, uint strategyPool) {\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (USDTAmt > 0) {\n            vaultPool = getValueInUSD(address(USDT), USDTAmt);\n        }\n        strategyPool = strategy.getAllPoolInUSD();\n    }\n\n    function getAllPoolInUSDAtNonce(uint _nonce) public view returns (uint) {\n        if (firstOperationNonce != 0) {\n            if (_nonce < firstOperationNonce) {\n                return 0;\n            }\n            if (_nonce <= lastOperationNonce) {\n                for (uint i = _nonce; i >= firstOperationNonce; i --) {\n                    PoolSnapshot memory snapshot = poolAtNonce[i];\n                    if (snapshot.ts > 0) {\n                        return snapshot.poolInUSD;\n                    }\n                }\n            }\n        }\n        return getAllPoolInUSD();\n    }\n\n    function getCurrentCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        return strategy.getCurrentTokenCompositionPerc();\n    }\n\n    function getAPR() external view returns (uint) {\n        return strategy.getAPR();\n    }\n\n}\n"
    },
    "contracts/xchain/agent/BNIUserAgentBase.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"../../bni/IBNIMinter.sol\";\nimport \"../../bni/IBNIVault.sol\";\nimport \"./BasicUserAgentBase.sol\";\n\ncontract BNIUserAgentBase is BasicUserAgentBase {\n\n    uint public chainIdOnLP;\n    bool public isLPChain;\n\n    IBNIMinter public bniMinter;\n    IBNIVault public bniVault;\n\n    // Address of sub-implementation contract\n    address public subImpl;\n}\n"
    },
    "contracts/bni/IBNIMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IBNIMinter {\n    function initDepositByAdmin(address _account, uint _pool, uint _USDT6Amt) external;\n    function mintByAdmin(address _account, uint _USDT6Amt) external;\n    function burnByAdmin(address _account, uint _pool, uint _share) external;\n    function exitWithdrawalByAdmin(address _account) external;\n}"
    },
    "contracts/bni/IBNIVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IBNIVault {\n    function depositByAdmin(address _account, address[] memory _tokens, uint[] memory _USDTAmts, uint _nonce) external;\n    function depositByAgent(address _account, address[] memory _tokens, uint[] memory _USDTAmts, uint _nonce) external;\n    function withdrawPercByAdmin(address _account, uint _sharePerc, uint _nonce) external;\n    function withdrawPercByAgent(address _account, uint _sharePerc, uint _nonce) external;\n}"
    },
    "contracts/xchain/agent/BNIUserAgentSub.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../libs/Const.sol\";\nimport \"../../../libs/Token.sol\";\nimport \"../../bni/IBNIMinter.sol\";\nimport \"../../bni/IBNIVault.sol\";\nimport \"./BNIUserAgentBase.sol\";\n\ncontract BNIUserAgentSub is BNIUserAgentBase {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    /// @dev It calls depositByAgent of BNIVaults.\n    function deposit(\n        uint[] memory _toChainIds,\n        address[] memory _tokens,\n        uint[] memory _USDT6Amts,\n        uint _minterNonce,\n        bytes calldata _signature\n    ) external payable whenNotPaused returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _toChainIds, _tokens, _USDT6Amts, _minterNonce)), _signature);\n\n        (uint toChainId, address[] memory subTokens, uint[] memory subUSDTAmts, uint newPos)\n            = nextDepositData(_toChainIds, _tokens, _USDT6Amts, 0);\n        while (toChainId != 0) {\n            _feeAmt += _deposit(account, toChainId, subTokens, subUSDTAmts, _minterNonce);\n            (toChainId, subTokens, subUSDTAmts, newPos) = nextDepositData(_toChainIds, _tokens, _USDT6Amts, newPos);\n        }\n\n        nonces[account] = _nonce + 1;\n    }\n\n    function nextDepositData (\n        uint[] memory _toChainIds,\n        address[] memory _tokens,\n        uint[] memory _USDT6Amts,\n        uint pos\n    ) private pure returns (\n        uint _toChainId,\n        address[] memory _subTokens,\n        uint[] memory _subUSDTAmts,\n        uint _newPos\n    ) {\n        uint length = _toChainIds.length;\n        uint count;\n        for (uint i = pos; i < length; i ++) {\n            if (_toChainId == 0) {\n                _toChainId = _toChainIds[i];\n            } else if (_toChainId != _toChainIds[i]) {\n                break;\n            }\n            count ++;\n        }\n\n        _newPos = pos + count;\n        if (count > 0) {\n            _subTokens = new address[](count);\n            _subUSDTAmts = new uint[](count);\n            count = 0;\n            for (uint i = pos; i < _newPos; i ++) {\n                _subTokens[count] = _tokens[i];\n                _subUSDTAmts[count] = _USDT6Amts[i];\n                count ++;\n            }\n        }\n    }\n\n    function _deposit(\n        address _account,\n        uint _toChainId,\n        address[] memory _tokens,\n        uint[] memory _USDT6Amts,\n        uint _minterNonce\n    ) internal virtual returns (uint _feeAmt) {\n        if (_toChainId == Token.getChainID()) {\n            uint balance = usdtBalances[_account];\n            uint amountSum;\n            for (uint i = 0; i < _USDT6Amts.length; i ++) {\n                amountSum += _USDT6Amts[i];\n            }\n            amountSum = amountSum * (10 ** (IERC20UpgradeableExt(address(USDT)).decimals() - 6));\n            require(balance >= amountSum, \"Insufficient balance\");\n            usdtBalances[_account] = balance - amountSum;\n\n            bniVault.depositByAgent(_account, _tokens, _USDT6Amts, _minterNonce);\n        } else {\n            bytes memory _targetCallData = abi.encodeWithSelector(\n                BNIUserAgentSub.depositByAgent.selector,\n                _account, _tokens, _USDT6Amts, _minterNonce\n            );\n            _feeAmt = _call(_toChainId, userAgents[_toChainId], 0, _targetCallData, false);\n        }\n    }\n\n    function depositByAgent(\n        address _account,\n        address[] memory _tokens,\n        uint[] memory _USDT6Amts,\n        uint _minterNonce\n    ) external onlyRole(ADAPTER_ROLE) {\n        bniVault.depositByAgent(_account, _tokens, _USDT6Amts, _minterNonce);\n    }\n\n    /// @dev It calls mintByAdmin of BNIMinter.\n    function mint(uint _USDT6Amt, bytes calldata _signature) external payable virtual whenNotPaused returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _USDT6Amt)), _signature);\n\n        if (isLPChain) {\n            bniMinter.mintByAdmin(account, _USDT6Amt);\n        } else {\n            bytes memory _targetCallData = abi.encodeWithSelector(\n                BNIUserAgentSub.mintByAdmin.selector,\n                account, _USDT6Amt\n            );\n            _feeAmt = _call(chainIdOnLP, userAgents[chainIdOnLP], 0, _targetCallData, false);\n        }\n        nonces[account] = _nonce + 1;\n    }\n\n    function mintByAdmin(address _account, uint _USDT6Amt) external onlyRole(ADAPTER_ROLE) {\n        bniMinter.mintByAdmin(_account, _USDT6Amt);\n    }\n\n    /// @dev It calls burnByAdmin of BNIMinter.\n    /// @param _pool total pool in USD\n    /// @param _share amount of shares\n    function burn(uint _pool, uint _share, bytes calldata _signature) external payable virtual returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _pool, _share)), _signature);\n\n        if (isLPChain) {\n            bniMinter.burnByAdmin(account, _pool, _share);\n        } else {\n            bytes memory _targetCallData = abi.encodeWithSelector(\n                BNIUserAgentSub.burnByAdmin.selector,\n                account, _pool, _share\n            );\n            _feeAmt = _call(chainIdOnLP, userAgents[chainIdOnLP], 0, _targetCallData, false);\n        }\n        nonces[account] = _nonce + 1;\n    }\n\n    function burnByAdmin(address _account, uint _pool, uint _share) external onlyRole(ADAPTER_ROLE) {\n        bniMinter.burnByAdmin(_account, _pool, _share);\n    }\n\n    /// @dev It calls withdrawPercByAgent of BNIVaults.\n    function withdraw(\n        uint[] memory _chainIds, uint _sharePerc, uint _minterNonce, bytes calldata _signature\n    ) external payable returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _chainIds, _sharePerc, _minterNonce)), _signature);\n\n        for (uint i = 0; i < _chainIds.length; i ++) {\n            _feeAmt += _withdraw(account, _chainIds[i], _sharePerc, _minterNonce);\n        }\n        nonces[account] = _nonce + 1;\n    }\n\n    function _withdraw(\n        address _account, uint _chainId, uint _sharePerc, uint _minterNonce\n    ) internal virtual returns (uint _feeAmt) {\n        if (_chainId == Token.getChainID()) {\n            _withdrawFromVault(bniVault, _account, _sharePerc, _minterNonce);\n        } else {\n            bytes memory _targetCallData = abi.encodeWithSelector(\n                BNIUserAgentSub.withdrawPercByAgent.selector,\n                _account, _sharePerc, _minterNonce\n            );\n            _feeAmt = _call(_chainId, userAgents[_chainId], 0, _targetCallData, false);\n        }\n    }\n\n    function withdrawPercByAgent(\n        address _account, uint _sharePerc, uint _minterNonce\n    ) external onlyRole(ADAPTER_ROLE) {\n        _withdrawFromVault(bniVault, _account, _sharePerc, _minterNonce);\n    }\n\n    function _withdrawFromVault(\n        IBNIVault _bniVault, address _account, uint _sharePerc, uint _minterNonce\n    ) internal {\n        uint balanceBefore = USDT.balanceOf(address(this));\n        _bniVault.withdrawPercByAgent(_account, _sharePerc, _minterNonce);\n        usdtBalances[_account] += (USDT.balanceOf(address(this)) - balanceBefore);\n    }\n\n    /// @dev It gathers withdrawn tokens of the user from user agents.\n    function gather(\n        uint[] memory _fromChainIds,\n        AdapterType[] memory _adapterTypes,\n        bytes calldata _signature\n    ) external payable virtual returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _fromChainIds, _adapterTypes)), _signature);\n\n        for (uint i = 0; i < _fromChainIds.length; i ++) {\n            _feeAmt += _gather(account, _fromChainIds[i], _adapterTypes[i]);\n        }\n        nonces[account] = _nonce + 1;\n    }\n\n    function _gather(\n        address _account, uint _fromChainId, AdapterType _adapterType\n    ) private returns (uint _feeAmt) {\n        uint chainId = Token.getChainID();\n        if (_fromChainId != chainId) {\n            bytes memory _targetCallData = abi.encodeWithSelector(\n                BNIUserAgentSub.gatherByAdmin.selector,\n                _account, chainId, _adapterType\n            );\n            _feeAmt = _call(_fromChainId, userAgents[_fromChainId], 0, _targetCallData, false);\n        }\n    }\n\n    function gatherByAdmin(\n        address _account, uint _toChainId, AdapterType _adapterType\n    ) external onlyRole(ADAPTER_ROLE) {\n        uint balance = usdtBalances[_account];\n        if (balance > 0) {\n            address toUserAgent = userAgents[_toChainId];\n            require(toUserAgent != address(0), \"Invalid user agent\");\n\n            uint[] memory amounts = new uint[](1);\n            amounts[0] = balance;\n            uint[] memory toChainIds = new uint[](1);\n            toChainIds[0] = _toChainId;\n            address[] memory toAddresses = new address[](1);\n            toAddresses[0] = toUserAgent;\n            AdapterType[] memory adapterTypes = new AdapterType[](1);\n            adapterTypes[0] = _adapterType;\n\n            uint feeAmt = _transfer(_account, Const.TokenID.USDT, amounts, toChainIds, toAddresses, adapterTypes, 1, true);\n            uint tokensForFee = swap.getAmountsInForETH(address(USDT), feeAmt);\n            if (balance > tokensForFee) {\n                uint spentTokenAmount = swap.swapTokensForExactETH(address(USDT), tokensForFee, feeAmt);\n                amounts[0] = balance - spentTokenAmount;\n                usdtBalances[_account] = 0;\n\n                _transfer(_account, Const.TokenID.USDT, amounts, toChainIds, toAddresses, adapterTypes, 1, false);\n            }\n        }\n    }\n\n    /// @dev It calls exitWithdrawalByAdmin of BNIMinter.\n    /// @param _gatheredAmount is the amount of token that is gathered.\n    /// @notice _gatheredAmount doesn't include the balance which is withdrawan in this agent.\n    function exitWithdrawal(uint _gatheredAmount, bytes calldata _signature) external payable virtual returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _gatheredAmount)), _signature);\n\n        if (isLPChain) {\n            bniMinter.exitWithdrawalByAdmin(account);\n        } else {\n            bytes memory _targetCallData = abi.encodeWithSelector(\n                BNIUserAgentSub.exitWithdrawalByAdmin.selector,\n                account\n            );\n            _feeAmt = _call(chainIdOnLP, userAgents[chainIdOnLP], 0, _targetCallData, false);\n        }\n\n        uint amount = _gatheredAmount + usdtBalances[account];\n        usdtBalances[account] = 0;\n        USDT.safeTransfer(account, amount);\n\n        nonces[account] = _nonce + 1;\n    }\n\n    function exitWithdrawalByAdmin(address _account) external onlyRole(ADAPTER_ROLE) {\n        bniMinter.exitWithdrawalByAdmin(_account);\n    }\n\n    /// @dev It takes out tokens from this agent.\n    /// @param _gatheredAmount is the amount of token that is gathered.\n    /// @notice _gatheredAmount doesn't include the balance which is withdrawan in this agent.\n    function takeOut(uint _gatheredAmount, bytes calldata _signature) external {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _gatheredAmount)), _signature);\n\n        uint amount = _gatheredAmount + usdtBalances[account];\n        usdtBalances[account] = 0;\n        USDT.safeTransfer(account, amount);\n\n        nonces[account] = _nonce + 1;\n    }\n}\n"
    },
    "contracts/xchain/agent/BNIUserAgentSubTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../libs/Const.sol\";\nimport \"../../../libs/Token.sol\";\nimport \"../../bni/IBNIMinter.sol\";\nimport \"../../bni/IBNIVault.sol\";\nimport \"./BNIUserAgentSub.sol\";\n\ncontract BNIUserAgentSubTest is BNIUserAgentSub {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    function _deposit(\n        address _account,\n        uint _toChainId,\n        address[] memory _tokens,\n        uint[] memory _USDT6Amts,\n        uint _minterNonce\n    ) internal override returns (uint _feeAmt) {\n        if (_toChainId == Token.getChainID()) {\n            uint balance = usdtBalances[_account];\n            uint amountSum;\n            for (uint i = 0; i < _USDT6Amts.length; i ++) {\n                amountSum += _USDT6Amts[i];\n            }\n            amountSum = amountSum * (10 ** (IERC20UpgradeableExt(address(USDT)).decimals() - 6));\n            require(balance >= amountSum, \"Insufficient balance\");\n            usdtBalances[_account] = balance - amountSum;\n\n            bniVault.depositByAgent(_account, _tokens, _USDT6Amts, _minterNonce);\n        } else {\n            // NOTE: cBridge doesn't support liquidity on testnets\n            _feeAmt = 0;\n        }\n    }\n\n    function _withdraw(\n        address _account, uint _chainId, uint _sharePerc, uint _minterNonce\n    ) internal override returns (uint _feeAmt) {\n        if (_chainId == Token.getChainID()) {\n            _withdrawFromVault(bniVault, _account, _sharePerc, _minterNonce);\n        } else {\n            // NOTE: cBridge doesn't support liquidity on testnets\n            _feeAmt = 0;\n        }\n    }\n\n    function gather(\n        uint[] memory _fromChainIds,\n        AdapterType[] memory _adapterTypes,\n        bytes calldata _signature\n    ) external payable override returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _fromChainIds, _adapterTypes)), _signature);\n\n        // NOTE: cBridge doesn't support liquidity on testnets\n        _feeAmt = 0;\n        nonces[account] = _nonce + 1;\n    }\n\n}\n"
    },
    "contracts/xchain/agent/BNIUserAgentTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"../../../libs/Const.sol\";\nimport \"../../../libs/Token.sol\";\nimport \"../../bni/constant/AvaxConstantTest.sol\";\nimport \"../../bni/IBNIMinter.sol\";\nimport \"../../bni/IBNIVault.sol\";\nimport \"../../swap/ISwap.sol\";\nimport \"./BNIUserAgent.sol\";\nimport \"./BasicUserAgent.sol\";\n\ncontract BNIUserAgentTest is BNIUserAgent {\n\n    function initialize1(\n        address _subImpl,\n        address _admin,\n        ISwap _swap,\n        IXChainAdapter _multichainAdapter, IXChainAdapter _cbridgeAdapter,\n        IBNIMinter _bniMinter, IBNIVault _bniVault\n    ) external override initializer {\n        __Ownable_init_unchained();\n        _setupRole(DEFAULT_ADMIN_ROLE, owner());\n        __GnosisSafe_init();\n\n        USDC = IERC20Upgradeable(Token.getTestTokenAddress(Const.TokenID.USDC));\n        USDT = IERC20Upgradeable(Token.getTestTokenAddress(Const.TokenID.USDT));\n\n        admin = _admin;\n        swap = _swap;\n        setMultichainAdapter(_multichainAdapter);\n        setCBridgeAdapter(_cbridgeAdapter);\n\n        subImpl = _subImpl;\n        uint chainId = Token.getChainID();\n        chainIdOnLP = AvaxConstant.CHAINID;\n        isLPChain = (chainIdOnLP == chainId);\n\n        bniMinter = _bniMinter;\n        setBNIVault(_bniVault);\n    }\n\n    function transfer(\n        uint[] memory _amounts,\n        uint[] memory _toChainIds,\n        AdapterType[] memory _adapterTypes,\n        bytes calldata _signature\n    ) external payable override whenNotPaused returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _amounts, _toChainIds, _adapterTypes)), _signature);\n\n        transferIn(account, _amounts, _toChainIds, _adapterTypes);\n        // NOTE: cBridge doesn't support liquidity on testnets\n        _feeAmt = 0;\n        nonces[account] = _nonce + 1;\n    }\n}\n"
    },
    "contracts/xchain/agent/BNIUserAgent.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../../../libs/Const.sol\";\nimport \"../../../libs/Token.sol\";\nimport \"../../bni/constant/AvaxConstant.sol\";\nimport \"../../bni/IBNIMinter.sol\";\nimport \"../../bni/IBNIVault.sol\";\nimport \"../../swap/ISwap.sol\";\nimport \"./BasicUserAgent.sol\";\nimport \"./BNIUserAgentBase.sol\";\n\ncontract BNIUserAgent is BNIUserAgentBase, BasicUserAgent {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    function initialize1(\n        address _subImpl,\n        address _admin,\n        ISwap _swap,\n        IXChainAdapter _multichainAdapter, IXChainAdapter _cbridgeAdapter,\n        IBNIMinter _bniMinter, IBNIVault _bniVault\n    ) external virtual initializer {\n        super.initialize(_admin, _swap, _multichainAdapter, _cbridgeAdapter);\n\n        subImpl = _subImpl;\n        uint chainId = Token.getChainID();\n        chainIdOnLP = AvaxConstant.CHAINID;\n        isLPChain = (chainIdOnLP == chainId);\n\n        bniMinter = _bniMinter;\n        setBNIVault(_bniVault);\n    }\n\n    function transferOwnership(address newOwner) public virtual override(BasicUserAgent, OwnableUpgradeable) onlyOwner {\n        BasicUserAgent.transferOwnership(newOwner);\n    }\n\n    function setBNIMinter(IBNIMinter _bniMinter) external onlyOwner {\n        bniMinter = _bniMinter;\n    }\n\n    function setBNIVault(IBNIVault _bniVault) public onlyOwner {\n        require(address(_bniVault) != address(0), \"Invalid vault\");\n\n        address oldVault = address(bniVault);\n        if (oldVault != address(0)) {\n            USDT.safeApprove(oldVault, 0);\n            USDC.safeApprove(oldVault, 0);\n        }\n\n        bniVault = _bniVault;\n        if (USDT.allowance(address(this), address(_bniVault)) == 0) {\n            USDT.safeApprove(address(_bniVault), type(uint).max);\n        }\n        if (USDC.allowance(address(this), address(_bniVault)) == 0) {\n            USDC.safeApprove(address(_bniVault), type(uint).max);\n        }\n    }\n\n    /// @dev It calls initDepositByAdmin of BNIMinter.\n    /// @param _pool total pool in USD\n    /// @param _USDT6Amt USDT with 6 decimals to be deposited\n    function initDeposit(uint _pool, uint _USDT6Amt, bytes calldata _signature) external payable virtual whenNotPaused returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _pool, _USDT6Amt)), _signature);\n\n        if (isLPChain) {\n            bniMinter.initDepositByAdmin(account, _pool, _USDT6Amt);\n        } else {\n            bytes memory _targetCallData = abi.encodeWithSelector(\n                BNIUserAgent.initDepositByAdmin.selector,\n                account, _pool, _USDT6Amt\n            );\n            _feeAmt = _call(chainIdOnLP, userAgents[chainIdOnLP], 0, _targetCallData, false);\n        }\n        nonces[account] = _nonce + 1;\n    }\n\n    function initDepositByAdmin(address _account, uint _pool, uint _USDT6Amt) external onlyRole(ADAPTER_ROLE) {\n        bniMinter.initDepositByAdmin(_account, _pool, _USDT6Amt);\n    }\n\n    /// @dev It transfers tokens to user agents\n    function transfer(\n        uint[] memory _amounts,\n        uint[] memory _toChainIds,\n        AdapterType[] memory _adapterTypes,\n        bytes calldata _signature\n    ) external payable virtual whenNotPaused returns (uint _feeAmt) {\n        address account = _msgSender();\n        uint _nonce = nonces[account];\n        checkSignature(keccak256(abi.encodePacked(account, _nonce, _amounts, _toChainIds, _adapterTypes)), _signature);\n\n        (address[] memory toAddresses, uint lengthOut) = transferIn(account, _amounts, _toChainIds, _adapterTypes);\n        if (lengthOut > 0) {\n            _feeAmt = _transfer(account, Const.TokenID.USDT, _amounts, _toChainIds, toAddresses, _adapterTypes, lengthOut, false);\n        }\n        nonces[account] = _nonce + 1;\n    }\n\n    function transferIn(\n        address account,\n        uint[] memory _amounts,\n        uint[] memory _toChainIds,\n        AdapterType[] memory _adapterTypes\n    ) internal returns (address[] memory _toAddresses, uint _lengthOut) {\n        uint length = _amounts.length;\n        _toAddresses = new address[](length);\n        uint chainId = Token.getChainID();\n        uint amountOn;\n        uint amountOut;\n        for (uint i = 0; i < length; i ++) {\n            uint amount = _amounts[i];\n            uint toChainId = _toChainIds[i];\n            if (toChainId == chainId) {\n                amountOn += amount;\n            } else {\n                if (_lengthOut != i) {\n                    _amounts[_lengthOut] = amount;\n                    _toChainIds[_lengthOut] = toChainId;\n                    _adapterTypes[_lengthOut] = _adapterTypes[i];\n\n                    address toUserAgent = userAgents[toChainId];\n                    require(toUserAgent != address(0), \"Invalid user agent\");\n                    _toAddresses[_lengthOut] = toUserAgent;\n                }\n                _lengthOut ++;\n                amountOut += amount;\n            }\n        }\n\n        USDT.safeTransferFrom(account, address(this), amountOn + amountOut);\n        usdtBalances[account] += amountOn;\n    }\n\n    /// @dev It calls depositByAdmin of BNIVaults.\n    function deposit(\n        uint[] memory _toChainIds,\n        address[] memory _tokens,\n        uint[] memory _USDTAmts,\n        uint _minterNonce,\n        bytes calldata _signature\n    ) external payable returns (uint _feeAmt) {\n        _toChainIds;\n        _tokens;\n        _USDTAmts;\n        _minterNonce;\n        _signature;\n        _feeAmt;\n        delegateAndReturn();\n    }\n\n    function depositByAgent(\n        address _account,\n        address[] memory _tokens,\n        uint[] memory _USDTAmts,\n        uint _minterNonce\n    ) external {\n        _account;\n        _tokens;\n        _USDTAmts;\n        _minterNonce;\n        delegateAndReturn();\n    }\n\n    /// @dev It calls mintByAdmin of BNIMinter.\n    function mint(uint _USDT6Amt, bytes calldata _signature) external payable returns (uint _feeAmt) {\n        _USDT6Amt;\n        _signature;\n        _feeAmt;\n        delegateAndReturn();\n    }\n\n    function mintByAdmin(address _account, uint _USDT6Amt) external {\n        _account;\n        _USDT6Amt;\n        delegateAndReturn();\n    }\n\n    /// @dev It calls burnByAdmin of BNIMinter.\n    /// @param _pool total pool in USD\n    /// @param _share amount of shares\n    function burn(uint _pool, uint _share, bytes calldata _signature) external payable returns (uint _feeAmt) {\n        _pool;\n        _share;\n        _signature;\n        _feeAmt;\n        delegateAndReturn();\n    }\n\n    function burnByAdmin(address _account, uint _pool, uint _share) external {\n        _account;\n        _pool;\n        _share;\n        delegateAndReturn();\n    }\n\n    /// @dev It calls withdrawPercByAdmin of BNIVaults.\n    function withdraw(\n        uint[] memory _chainIds, uint _sharePerc, uint _minterNonce, bytes calldata _signature\n    ) external payable returns (uint _feeAmt) {\n        _chainIds;\n        _sharePerc;\n        _minterNonce;\n        _signature;\n        _feeAmt;\n        delegateAndReturn();\n    }\n\n    function withdrawPercByAgent(\n        address _account, uint _sharePerc, uint _minterNonce\n    ) external {\n        _account;\n        _sharePerc;\n        _minterNonce;\n        delegateAndReturn();\n    }\n\n    /// @dev It gathers withdrawn tokens of the user from user agents.\n    function gather(\n        uint[] memory _fromChainIds,\n        AdapterType[] memory _adapterTypes,\n        bytes calldata _signature\n    ) external payable returns (uint _feeAmt) {\n        _fromChainIds;\n        _adapterTypes;\n        _signature;\n        _feeAmt;\n        delegateAndReturn();\n    }\n\n    function gatherByAdmin(\n        address _account, uint _toChainId, AdapterType _adapterType\n    ) external {\n        _account;\n        _toChainId;\n        _adapterType;\n        delegateAndReturn();\n    }\n\n    /// @dev It calls exitWithdrawalByAdmin of BNIMinter.\n    /// @param _gatheredAmount is the amount of token that is gathered.\n    /// @notice _gatheredAmount doesn't include the balance which is withdrawan in this agent.\n    function exitWithdrawal(uint _gatheredAmount, bytes calldata _signature) external payable returns (uint _feeAmt) {\n        _gatheredAmount;\n        _signature;\n        _feeAmt;\n        delegateAndReturn();\n    }\n\n    function exitWithdrawalByAdmin(address _account) external {\n        _account;\n        delegateAndReturn();\n    }\n\n    /// @dev It takes out tokens from this agent.\n    /// @param _gatheredAmount is the amount of token that is gathered.\n    /// @notice _gatheredAmount doesn't include the balance which is withdrawan in this agent.\n    function takeOut(uint _gatheredAmount, bytes calldata _signature) external {\n        _gatheredAmount;\n        _signature;\n        delegateAndReturn();\n    }\n\n    /**\n     * @dev Delegate to sub contract\n     */\n    function setSubImpl(address _subImpl) external onlyOwner {\n        require(_subImpl != address(0), \"Invalid address\");\n        subImpl = _subImpl;\n    }\n\n    function delegateAndReturn() private returns (bytes memory) {\n        (bool success, ) = subImpl.delegatecall(msg.data);\n\n        assembly {\n            let free_mem_ptr := mload(0x40)\n            returndatacopy(free_mem_ptr, 0, returndatasize())\n\n            switch success\n            case 0 { revert(free_mem_ptr, returndatasize()) }\n            default { return(free_mem_ptr, returndatasize()) }\n        }\n    }\n\n}\n"
    },
    "contracts/xchain/multichain/MultichainXChainAdapter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../../../libs/Const.sol\";\nimport \"../../../libs/Token.sol\";\nimport \"../BasicXChainAdapter.sol\";\nimport \"./AnyswapMap.sol\";\nimport \"./IAnycallV6Proxy.sol\";\nimport \"./IAnyswapV6Router.sol\";\n\ncontract MultichainXChainAdapter is BasicXChainAdapter {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IAnycallV6Proxy constant anycallRouter = IAnycallV6Proxy(0xC10Ef9F491C9B59f936957026020C321651ac078);\n    uint constant FLAG_PAY_FEE_ON_SRC = 0x1 << 1;\n\n    // Map of anyswap entries (tokenId => chainId => entry)\n    mapping(Const.TokenID => mapping(uint => AnyswapMap.Entry)) public anyswapMap;\n\n    IAnycallExecutor public anycallExecutor;\n\n    event Transfer(address from, address indexed token, uint indexed amount, uint indexed toChainId, address to);\n\n    function initialize() public virtual override initializer {\n        super.initialize();\n\n        AnyswapMap.initMap(anyswapMap);\n        \n        uint chainId = Token.getChainID();\n        AnyswapMap.Entry memory entry;\n        entry = anyswapMap[Const.TokenID.USDT][chainId];\n        IERC20Upgradeable(entry.underlying).safeApprove(entry.router, type(uint).max);\n        entry = anyswapMap[Const.TokenID.USDC][chainId];\n        IERC20Upgradeable(entry.underlying).safeApprove(entry.router, type(uint).max);\n\n        anycallExecutor = IAnycallExecutor(anycallRouter.executor());\n    }\n\n    function setAnyswapEntry(\n        Const.TokenID _tokenId, uint _chainId,\n        address _router, address _unterlying, address _anyToken,\n        uint8 _underlyingDecimals, uint8 _anyTokenDecimals, uint _minimumSwap\n    ) external onlyOwner {\n        anyswapMap[_tokenId][_chainId] = AnyswapMap.Entry({\n            router: _router,\n            underlying: _unterlying,\n            anyToken: _anyToken,\n            underlyingDecimals: _underlyingDecimals,\n            anyTokenDecimals: _anyTokenDecimals,\n            minimumSwap: _minimumSwap\n        });\n        if (IERC20Upgradeable(_unterlying).allowance(address(this), address(_router)) == 0) {\n            IERC20Upgradeable(_unterlying).safeApprove(_router, type(uint).max);\n        }\n    }\n\n    ///@dev The function to receive message from anycall router. The syntax must not be changed.\n    function anyExecute(bytes calldata data) external returns (bool success, bytes memory result) {\n        (address from, uint fromChainId,) = anycallExecutor.context();\n        require(peers[fromChainId] == from, \"Wrong context\");\n\n        (address targetContract, uint targetCallValue, bytes memory targetCallData)\n            = abi.decode(data, (address, uint, bytes));\n        (success, result) = targetContract.call{value: targetCallValue}(targetCallData);\n    }\n\n    function transfer(\n        Const.TokenID _tokenId,\n        uint[] memory _amounts,\n        uint[] memory _toChainIds,\n        address[] memory _toAddresses\n    ) external payable override onlyRole(CLIENT_ROLE) {\n        require(msg.value == 0, \"No fee needed\");\n        uint count = _amounts.length;\n        uint chainId = Token.getChainID();\n        address from = _msgSender();\n\n        uint amount;\n        for (uint i = 0; i < count; i++) {\n            amount += _amounts[i];\n        }\n        IERC20Upgradeable(anyswapMap[_tokenId][chainId].underlying).safeTransferFrom(from, address(this), amount);\n\n        for (uint i = 0; i < count; i++) {\n            _transfer(_tokenId, _amounts[i], chainId, _toChainIds[i], _toAddresses[i]);\n        }\n    }\n\n    function _transfer(\n        Const.TokenID _tokenId,\n        uint _amount,\n        uint _chainId,\n        uint _toChainId,\n        address _to\n    ) internal {\n        AnyswapMap.Entry memory entry = anyswapMap[_tokenId][_chainId];\n        require(_amount >= (anyswapMap[_tokenId][_toChainId].minimumSwap * (10 ** entry.underlyingDecimals)), \"Too small amount\");\n\n        IAnyswapV6Router(entry.router).anySwapOutUnderlying(entry.anyToken, _to, _amount, _toChainId);\n        emit Transfer(msg.sender, entry.underlying, _amount, _toChainId, _to);\n    }\n\n    function call(\n        uint _toChainId,\n        address _targetContract,\n        uint _targetCallValue,\n        bytes memory _targetCallData\n    ) external payable virtual override onlyRole(CLIENT_ROLE) {\n        address peer = peers[_toChainId];\n        require(peer != address(0), \"No peer\");\n\n        bytes memory message = abi.encode(_targetContract, _targetCallValue, _targetCallData);\n        anycallRouter.anyCall{value: msg.value}(peer, message, address(0), _toChainId, FLAG_PAY_FEE_ON_SRC);\n    }\n\n    function calcCallFee(\n        uint _toChainId,\n        address _targetContract,\n        uint _targetCallValue,\n        bytes memory _targetCallData\n    ) public view virtual override returns (uint) {\n        bytes memory message = abi.encode(_targetContract, _targetCallValue, _targetCallData);\n        return anycallRouter.calcSrcFees(\"\", _toChainId, message.length);\n    }\n}\n"
    },
    "contracts/xchain/BasicXChainAdapter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../../libs/Const.sol\";\nimport \"./IXChainAdapter.sol\";\n\ncontract BasicXChainAdapter is IXChainAdapter,\n    AccessControlEnumerableUpgradeable,\n    OwnableUpgradeable\n{\n    bytes32 public constant CLIENT_ROLE = keccak256(\"CLIENT_ROLE\");\n\n    // Map of message peers (chainId => peer). Because anyone can send messages, it needs to verify the sender.\n    mapping(uint => address) public peers;\n\n    function initialize() public virtual initializer {\n        __Ownable_init_unchained();\n        _setupRole(DEFAULT_ADMIN_ROLE, owner());\n    }\n\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _revokeRole(DEFAULT_ADMIN_ROLE, owner());\n        super.transferOwnership(newOwner);\n        _setupRole(DEFAULT_ADMIN_ROLE, newOwner);\n    }\n\n    function setPeers(uint[] memory _chainIds, address[] memory _peers) external onlyOwner {\n        uint length = _chainIds.length;\n        for (uint i = 0; i < length; i++) {\n            uint chainId = _chainIds[i];\n            require(chainId != 0, \"Invalid chainID\");\n            peers[chainId] = _peers[i];\n        }\n    }\n\n    function transfer(\n        Const.TokenID, // _tokenId\n        uint[] memory, // _amounts\n        uint[] memory, // _toChainIds\n        address[] memory // _toAddresses\n    ) external payable virtual onlyRole(CLIENT_ROLE) {\n    }\n\n    function call(\n        uint, // _toChainId\n        address, // _targetContract\n        uint, // _targetCallValue\n        bytes memory // _targetCallData\n    ) external payable virtual onlyRole(CLIENT_ROLE) {\n    }\n\n    function calcTransferFee() public view virtual returns (uint) {\n        return 0;\n    }\n\n    function calcCallFee(\n        uint, // _toChainId\n        address, // _targetContract,\n        uint, // _targetCallValue\n        bytes memory // _targetCallData\n    ) public view virtual returns (uint) {\n        return 0;\n    }\n\n    receive() external payable {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/xchain/multichain/AnyswapMap.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"../../../libs/Const.sol\";\nimport \"../../bni/constant/AvaxConstant.sol\";\nimport \"../../bni/constant/BscConstant.sol\";\nimport \"../../bni/constant/EthConstant.sol\";\nimport \"../../bni/constant/MaticConstant.sol\";\n\n// https://bridgeapi.anyswap.exchange/v3/serverinfoV3?chainId=all&version=STABLEV3\nlibrary AnyswapMap {\n\n    struct Entry{\n        address router;\n        address underlying;\n        address anyToken;\n        uint8 underlyingDecimals;\n        uint8 anyTokenDecimals;\n        uint minimumSwap;\n    }\n\n    function initMap(mapping(Const.TokenID => mapping(uint => AnyswapMap.Entry)) storage _map) internal {\n        // USDT\n        _map[Const.TokenID.USDT][AvaxConstant.CHAINID] = Entry({\n            router: 0xB0731d50C681C45856BFc3f7539D5f61d4bE81D8,\n            underlying: AvaxConstant.USDT,\n            anyToken: 0x94977c9888F3D2FAfae290d33fAB4a5a598AD764,\n            underlyingDecimals: 6,\n            anyTokenDecimals: 6,\n            minimumSwap: 12\n        });\n        _map[Const.TokenID.USDT][BscConstant.CHAINID] = Entry({\n            router: 0xd1C5966f9F5Ee6881Ff6b261BBeDa45972B1B5f3,\n            underlying: BscConstant.USDT,\n            anyToken: 0xEDF0c420bc3b92B961C6eC411cc810CA81F5F21a,\n            underlyingDecimals: 18,\n            anyTokenDecimals: 18,\n            minimumSwap: 12\n        });\n        _map[Const.TokenID.USDT][EthConstant.CHAINID] = Entry({\n            router: 0x6b7a87899490EcE95443e979cA9485CBE7E71522,\n            underlying: EthConstant.USDT,\n            anyToken: 0x22648C12acD87912EA1710357B1302c6a4154Ebc,\n            underlyingDecimals: 6,\n            anyTokenDecimals: 6,\n            minimumSwap: 45\n        });\n        _map[Const.TokenID.USDT][MaticConstant.CHAINID] = Entry({\n            router: 0x4f3Aff3A747fCADe12598081e80c6605A8be192F,\n            underlying: MaticConstant.USDT,\n            anyToken: 0xE3eeDa11f06a656FcAee19de663E84C7e61d3Cac,\n            underlyingDecimals: 6,\n            anyTokenDecimals: 6,\n            minimumSwap: 12\n        });\n\n        // USDC\n        _map[Const.TokenID.USDC][AvaxConstant.CHAINID] = Entry({\n            router: 0xB0731d50C681C45856BFc3f7539D5f61d4bE81D8,\n            underlying: AvaxConstant.USDC,\n            anyToken: 0xcc9b1F919282c255eB9AD2C0757E8036165e0cAd,\n            underlyingDecimals: 6,\n            anyTokenDecimals: 6,\n            minimumSwap: 12\n        });\n        _map[Const.TokenID.USDC][BscConstant.CHAINID] = Entry({\n            router: 0xd1C5966f9F5Ee6881Ff6b261BBeDa45972B1B5f3,\n            underlying: BscConstant.USDC,\n            anyToken: 0x8965349fb649A33a30cbFDa057D8eC2C48AbE2A2,\n            underlyingDecimals: 18,\n            anyTokenDecimals: 18,\n            minimumSwap: 12\n        });\n        _map[Const.TokenID.USDC][EthConstant.CHAINID] = Entry({\n            router: 0x6b7a87899490EcE95443e979cA9485CBE7E71522,\n            underlying: EthConstant.USDC,\n            anyToken: 0x7EA2be2df7BA6E54B1A9C70676f668455E329d29,\n            underlyingDecimals: 6,\n            anyTokenDecimals: 6,\n            minimumSwap: 45\n        });\n        _map[Const.TokenID.USDC][MaticConstant.CHAINID] = Entry({\n            router: 0x4f3Aff3A747fCADe12598081e80c6605A8be192F,\n            underlying: MaticConstant.USDC,\n            anyToken: 0xd69b31c3225728CC57ddaf9be532a4ee1620Be51,\n            underlyingDecimals: 6,\n            anyTokenDecimals: 6,\n            minimumSwap: 12\n        });\n    }\n}\n"
    },
    "contracts/xchain/multichain/IAnycallV6Proxy.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\n// https://github.com/anyswap/anyswap-v1-core/blob/master/contracts/AnyswapV6CallProxy.sol\n\ninterface IAnycallExecutor {\n    function context() external returns (address from, uint256 fromChainID, uint256 nonce);\n\n    function execute(\n        address _to,\n        bytes calldata _data,\n        address _from,\n        uint256 _fromChainID,\n        uint256 _nonce,\n        bool _isFallBack\n    ) external returns (bool success, bytes memory result);\n}\n\ninterface IAnycallV6Proxy {\n    function executor() external view returns (address);\n\n    function anyCall(\n        address _to,\n        bytes calldata _data,\n        address _fallback,\n        uint _toChainID,\n        uint _flags\n    ) external payable;\n\n    function calcSrcFees(\n        string calldata _appID,\n        uint _toChainID,\n        uint _dataLength\n    ) external view returns (uint);\n}\n"
    },
    "contracts/xchain/multichain/IAnyswapV6Router.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\n// https://github.com/anyswap/anyswap-v1-core/blob/d5f40f9a29212f597149f3cee9f8d9df1b108a22/contracts/AnyswapV6Router.sol\ninterface IAnyswapV6Router {\n    function anySwapOut(address token, address to, uint amount, uint toChainID) external;\n    function anySwapOutUnderlying(address token, address to, uint amount, uint toChainID) external;\n    function anySwapOutNative(address token, address to, uint toChainID) external payable;\n    function anySwapOut(address[] calldata tokens, address[] calldata to, uint[] calldata amounts, uint[] calldata toChainIDs) external;\n    function anySwapOut(address token, string memory to, uint amount, uint toChainID) external;\n    function anySwapOutUnderlying(address token, string memory to, uint amount, uint toChainID) external;\n    function depositNative(address token, address to) external payable returns (uint);\n    function withdrawNative(address token, uint amount, address to) external returns (uint);\n\n    function anySwapOutExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline,\n        uint toChainID\n    ) external;\n\n    function anySwapOutExactTokensForTokensUnderlying(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline,\n        uint toChainID\n    ) external;\n\n    function anySwapOutExactTokensForNative(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline,\n        uint toChainID\n    ) external;\n\n    function anySwapOutExactTokensForNativeUnderlying(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline,\n        uint toChainID\n    ) external;\n}\n"
    },
    "contracts/xchain/multichain/MultichainXChainAdapterTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"../BasicXChainAdapter.sol\";\nimport \"./MultichainXChainAdapter.sol\";\n\ncontract MultichainXChainAdapterTest is MultichainXChainAdapter {\n\n    function initialize() public override initializer {\n        BasicXChainAdapter.initialize();\n\n        // AnyswapMap.initMap(anyswapMap);\n        \n        // uint chainId = Token.getChainID();\n        // AnyswapMap.Entry memory entry;\n        // entry = anyswapMap[Const.TokenID.USDT][chainId];\n        // IERC20Upgradeable(entry.underlying).safeApprove(entry.router, type(uint).max);\n        // entry = anyswapMap[Const.TokenID.USDC][chainId];\n        // IERC20Upgradeable(entry.underlying).safeApprove(entry.router, type(uint).max);\n\n        // anycallExecutor = IAnycallExecutor(anycallRouter.executor());\n    }\n\n    function call(\n        uint, // _toChainId\n        address, // _targetContract\n        uint, // _targetCallValue\n        bytes memory // _targetCallData\n    ) external payable override onlyRole(CLIENT_ROLE) {\n        // address peer = peers[_toChainId];\n        // require(peer != address(0), \"No peer\");\n\n        // bytes memory message = abi.encode(_targetContract, _targetCallValue, _targetCallData);\n        // anycallRouter.anyCall{value: msg.value}(peer, message, address(0), _toChainId, FLAG_PAY_FEE_ON_SRC);\n    }\n\n    function calcCallFee(\n        uint, // _toChainId\n        address, // _targetContract\n        uint, // _targetCallValue\n        bytes memory // _targetCallData\n    ) public view override returns (uint) {\n        return 0;\n        // bytes memory message = abi.encode(_targetContract, _targetCallValue, _targetCallData);\n        // return anycallRouter.calcSrcFees(\"\", _toChainId, message.length);\n    }\n}\n"
    },
    "contracts/xchain/cbridge/CBridgeXChainAdapterTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"../../../libs/Token.sol\";\nimport \"../BasicXChainAdapter.sol\";\nimport \"./CBridgeXChainAdapter.sol\";\n\ncontract CBridgeXChainAdapterTest is CBridgeXChainAdapter {\n\n    function initialize1(address _messageBus) external override initializer {\n        BasicXChainAdapter.initialize();\n        messageBus = _messageBus;\n        USDC = IERC20Upgradeable(Token.getTestTokenAddress(Const.TokenID.USDC));\n        USDT = IERC20Upgradeable(Token.getTestTokenAddress(Const.TokenID.USDT));\n    }\n}\n"
    },
    "contracts/xchain/cbridge/CBridgeXChainAdapter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"sgn-v2-contracts/contracts/message/interfaces/IMessageBus.sol\";\nimport \"sgn-v2-contracts/contracts/message/libraries/MsgDataTypes.sol\";\nimport \"../../../libs/Const.sol\";\nimport \"../../../libs/Token.sol\";\nimport \"../BasicXChainAdapter.sol\";\nimport \"../agent/IUserAgent.sol\";\nimport \"./MessageReceiverApp.sol\";\nimport \"./MessageSenderApp.sol\";\n\ncontract CBridgeXChainAdapter is MessageSenderApp, MessageReceiverApp, BasicXChainAdapter {\n    using AddressUpgradeable for address;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    enum TransferStatus {\n        Null,\n        Success,\n        Refund\n    }\n\n    struct TransferEntry {\n        address from;\n        TransferStatus status;\n    }\n\n    struct TransferRequest {\n        uint nonce;\n        uint toChainId;\n        address to;\n    }\n\n    struct FallbackEntry {\n        uint fromChainId;\n        uint nonce;\n        address token;\n        uint amount;\n        uint toChainId;\n        address to;\n        bool handled;\n    }\n\n    uint32 constant MAX_SLIPPAGE = 50000; // 5%\n\n    IERC20Upgradeable public USDC;\n    IERC20Upgradeable public USDT;\n    uint public nonce; // It starts from 0.\n    // Map of transfer entries (nonce => TransferEntry)\n    mapping(uint => TransferEntry) public transfers;\n    FallbackEntry[] public fallbacks;\n\n    event Transfer(uint nonce, address from, address indexed token, uint indexed amount, uint indexed toChainId, address to);\n    event Receive(uint indexed fromChainId, uint nonce, address indexed token, uint indexed amount, address to);\n    event Refund(uint nonce, address from, address indexed token, uint indexed amount, uint indexed toChainId, address to);\n\n    function initialize1(address _messageBus) external virtual initializer {\n        super.initialize();\n        messageBus = _messageBus;\n        USDC = IERC20Upgradeable(Token.getTokenAddress(Const.TokenID.USDC));\n        USDT = IERC20Upgradeable(Token.getTokenAddress(Const.TokenID.USDT));\n    }\n\n    function transferOwnership(address newOwner) public virtual override(BasicXChainAdapter, OwnableUpgradeable) onlyOwner {\n        BasicXChainAdapter.transferOwnership(newOwner);\n    }\n\n    // ============== functions on source chain ==============\n\n    // called on source chain for handling of bridge failures (bad liquidity, bad slippage, etc...)\n    function executeMessageWithTransferRefund(\n        address _token,\n        uint256 _amount,\n        bytes calldata _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        TransferRequest memory req = abi.decode((_message), (TransferRequest));\n        uint _nonce = req.nonce;\n        uint _toChainId = req.toChainId;\n        address _to = req.to;\n\n        require(transfers[_nonce].status != TransferStatus.Refund, \"Already refunded\");\n        transfers[_nonce].status = TransferStatus.Refund;\n        address from = transfers[_nonce].from;\n\n        IERC20Upgradeable(_token).safeTransfer(from, _amount);\n        if (from.isContract()) {\n            IUserAgent(from).onRefunded(_nonce, _token, _amount, _toChainId, _to);\n        }\n\n        emit Refund(_nonce, from, _token, _amount, _toChainId, _to);\n        return ExecutionStatus.Success;\n    }\n\n    // ============== functions on destination chain ==============\n\n    // handler function required by MsgReceiverApp\n    function executeMessage(\n        address _sender,\n        uint64 _srcChainId,\n        bytes memory _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        require(peers[_srcChainId] == _sender, \"Wrong sender\");\n\n        (address targetContract, uint targetCallValue, bytes memory targetCallData)\n            = abi.decode(_message, (address, uint, bytes));\n        (bool success,) = targetContract.call{value: targetCallValue}(targetCallData);\n        return (success == true) ? ExecutionStatus.Success : ExecutionStatus.Fail;\n    }\n\n    // handler function required by MsgReceiverApp\n    function executeMessageWithTransfer(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes memory _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        require(peers[_srcChainId] == _sender, \"Wrong sender\");\n\n        TransferRequest memory req = abi.decode((_message), (TransferRequest));\n        IERC20Upgradeable(_token).safeTransfer(req.to, _amount);\n\n        emit Receive(_srcChainId, req.nonce, _token, _amount, req.to);\n        return ExecutionStatus.Success;\n    }\n\n    ///@notice This functions won't be called because executeMessageWithTransfer always returns Success.\n    // handler function required by MsgReceiverApp\n    // called only if handleMessageWithTransfer above was reverted\n    function executeMessageWithTransferFallback(\n        address, // _sender\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes memory _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        TransferRequest memory req = abi.decode((_message), (TransferRequest));\n        fallbacks.push(FallbackEntry({\n            fromChainId: _srcChainId,\n            nonce: req.nonce,\n            token: _token,\n            amount: _amount,\n            toChainId: req.toChainId,\n            to: req.to,\n            handled: false\n        }));\n        return ExecutionStatus.Success;\n    }\n\n    function transfer(\n        Const.TokenID _tokenId,\n        uint[] memory _amounts,\n        uint[] memory _toChainIds,\n        address[] memory _toAddresses\n    ) external payable override onlyRole(CLIENT_ROLE) {\n        uint count = _amounts.length;\n        uint fee = calcTransferFee();\n        require(msg.value >= (fee * count), \"No enough fee\");\n        address from = _msgSender();\n\n        uint amount;\n        for (uint i = 0; i < count; i++) {\n            amount += _amounts[i];\n        }\n\n        IERC20Upgradeable token;\n        if (_tokenId == Const.TokenID.USDT) {\n            token = USDT;\n        } else if (_tokenId == Const.TokenID.USDC) {\n            token = USDC;\n        } else {\n            return;\n        }\n        token.safeTransferFrom(from, address(this), amount);\n\n        for (uint i = 0; i < count; i++) {\n            _transfer(from, address(token), _amounts[i], _toChainIds[i], _toAddresses[i], fee);\n        }\n    }\n\n    function _transfer(\n        address _from,\n        address _token,\n        uint _amount,\n        uint _toChainId,\n        address _to,\n        uint _fee\n    ) internal {\n        address peer = peers[_toChainId];\n        require(peer != address(0), \"No peer\");\n        uint _nonce = nonce;\n\n        transfers[_nonce] = TransferEntry({\n            from: _from,\n            status: TransferStatus.Null\n        });\n\n        bytes memory message = abi.encode(TransferRequest({\n            nonce: _nonce,\n            toChainId: _toChainId,\n            to: _to\n        }));\n\n        // MsgSenderApp util function\n        sendMessageWithTransfer(\n            peer,\n            _token,\n            _amount,\n            uint64(_toChainId),\n            uint64(_nonce),\n            MAX_SLIPPAGE,\n            message,\n            MsgDataTypes.BridgeSendType.Liquidity,\n            _fee\n        );\n        nonce ++;\n        emit Transfer(_nonce, msg.sender, _token, _amount, _toChainId, _to);\n    }\n\n    function call(\n        uint _toChainId,\n        address _targetContract,\n        uint _targetCallValue,\n        bytes memory _targetCallData\n    ) external payable override onlyRole(CLIENT_ROLE) {\n        address peer = peers[_toChainId];\n        require(peer != address(0), \"No peer\");\n\n        bytes memory data = abi.encode(_targetContract, _targetCallValue, _targetCallData);\n        sendMessage(peer, uint64(_toChainId), data, msg.value);\n    }\n\n    function calcTransferFee() public view override returns (uint) {\n        bytes memory message = abi.encode(TransferRequest({\n            nonce: nonce,\n            toChainId: 0,\n            to: address(0)\n        }));\n        return IMessageBus(messageBus).calcFee(message);\n    }\n\n    function calcCallFee(\n        uint, // _toChainId\n        address _targetContract,\n        uint _targetCallValue,\n        bytes memory _targetCallData\n    ) public view override returns (uint) {\n        bytes memory message = abi.encode(_targetContract, _targetCallValue, _targetCallData);\n        return IMessageBus(messageBus).calcFee(message);\n    }\n}\n"
    },
    "sgn-v2-contracts/contracts/message/interfaces/IMessageBus.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport \"../libraries/MsgDataTypes.sol\";\n\ninterface IMessageBus {\n    function liquidityBridge() external view returns (address);\n\n    function pegBridge() external view returns (address);\n\n    function pegBridgeV2() external view returns (address);\n\n    function pegVault() external view returns (address);\n\n    function pegVaultV2() external view returns (address);\n\n    /**\n     * @notice Calculates the required fee for the message.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     @ @return The required fee.\n     */\n    function calcFee(bytes calldata _message) external view returns (uint256);\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\n     * A fee is charged in the native gas token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessage(\n        address _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message\n    ) external payable;\n\n    /**\n     * @notice Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer.\n     * A fee is charged in the native token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _srcBridge The bridge contract to send the transfer with.\n     * @param _srcTransferId The transfer ID.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessageWithTransfer(\n        address _receiver,\n        uint256 _dstChainId,\n        address _srcBridge,\n        bytes32 _srcTransferId,\n        bytes calldata _message\n    ) external payable;\n\n    /**\n     * @notice Withdraws message fee in the form of native gas token.\n     * @param _account The address receiving the fee.\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdrawFee(\n        address _account,\n        uint256 _cumulativeFee,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    /**\n     * @notice Execute a message with a successful transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransfer(\n        bytes calldata _message,\n        MsgDataTypes.TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable;\n\n    /**\n     * @notice Execute a message with a refunded transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransferRefund(\n        bytes calldata _message, // the same message associated with the original transfer\n        MsgDataTypes.TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable;\n\n    /**\n     * @notice Execute a message not associated with a transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessage(\n        bytes calldata _message,\n        MsgDataTypes.RouteInfo calldata _route,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable;\n}\n"
    },
    "sgn-v2-contracts/contracts/message/libraries/MsgDataTypes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nlibrary MsgDataTypes {\n    // bridge operation type at the sender side (src chain)\n    enum BridgeSendType {\n        Null,\n        Liquidity,\n        PegDeposit,\n        PegBurn,\n        PegV2Deposit,\n        PegV2Burn,\n        PegV2BurnFrom\n    }\n\n    // bridge operation type at the receiver side (dst chain)\n    enum TransferType {\n        Null,\n        LqRelay, // relay through liquidity bridge\n        LqWithdraw, // withdraw from liquidity bridge\n        PegMint, // mint through pegged token bridge\n        PegWithdraw, // withdraw from original token vault\n        PegV2Mint, // mint through pegged token bridge v2\n        PegV2Withdraw // withdraw from original token vault v2\n    }\n\n    enum MsgType {\n        MessageWithTransfer,\n        MessageOnly\n    }\n\n    enum TxStatus {\n        Null,\n        Success,\n        Fail,\n        Fallback,\n        Pending // transient state within a transaction\n    }\n\n    struct TransferInfo {\n        TransferType t;\n        address sender;\n        address receiver;\n        address token;\n        uint256 amount;\n        uint64 wdseq; // only needed for LqWithdraw (refund)\n        uint64 srcChainId;\n        bytes32 refId;\n        bytes32 srcTxHash; // src chain msg tx hash\n    }\n\n    struct RouteInfo {\n        address sender;\n        address receiver;\n        uint64 srcChainId;\n        bytes32 srcTxHash; // src chain msg tx hash\n    }\n\n    struct MsgWithTransferExecutionParams {\n        bytes message;\n        TransferInfo transfer;\n        bytes[] sigs;\n        address[] signers;\n        uint256[] powers;\n    }\n\n    struct BridgeTransferParams {\n        bytes request;\n        bytes[] sigs;\n        address[] signers;\n        uint256[] powers;\n    }\n}\n"
    },
    "contracts/xchain/cbridge/MessageReceiverApp.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity 0.8.9;\n\nimport \"sgn-v2-contracts/contracts/message/interfaces/IMessageReceiverApp.sol\";\nimport \"./MessageBusAddress.sol\";\n\nabstract contract MessageReceiverApp is IMessageReceiverApp, MessageBusAddress {\n\n    modifier onlyMessageBus() {\n        require(msg.sender == messageBus, \"caller is not message bus\");\n        _;\n    }\n\n    function __MessageReceiverApp_init() internal onlyInitializing {\n        __MessageBusAddress_init();\n    }\n\n    /**\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\n     * @param _sender The address of the source app contract\n     * @param _token The address of the token that comes out of the bridge\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\n     *        function is called.\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransfer(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\n\n    /**\n     * @notice Only called by MessageBus (MessageBusReceiver) if\n     *         1. executeMessageWithTransfer reverts, or\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\n     * @param _sender The address of the source app contract\n     * @param _token The address of the token that comes out of the bridge\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\n     *        function is called.\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransferFallback(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\n\n    /**\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\n     * @param _token The token address of the original transfer\n     * @param _amount The amount of the original transfer\n     * @param _message The same message associated with the original transfer\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransferRefund(\n        address _token,\n        uint256 _amount,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\n\n    /**\n     * @notice Called by MessageBus (MessageBusReceiver)\n     * @param _sender The address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        address _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\n\n    // execute message from non-evm chain with bytes for sender address,\n    // otherwise same as above.\n    function executeMessage(\n        bytes calldata _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual onlyMessageBus returns (ExecutionStatus) {}\n}\n"
    },
    "contracts/xchain/cbridge/MessageSenderApp.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"sgn-v2-contracts/contracts/message/libraries/MsgDataTypes.sol\";\nimport \"sgn-v2-contracts/contracts/message/libraries/MessageSenderLib.sol\";\nimport \"sgn-v2-contracts/contracts/message/messagebus/MessageBus.sol\";\nimport \"../../../libs/Token.sol\";\nimport \"./MessageBusAddress.sol\";\n\nabstract contract MessageSenderApp is MessageBusAddress {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    // ============== Utility functions called by apps ==============\n    function __MessageSenderApp_init() internal onlyInitializing {\n        __MessageBusAddress_init();\n    }\n\n    /**\n     * @notice Sends a message to a contract on another chain.\n     * Sender needs to make sure the uniqueness of the message Id, which is computed as\n     * hash(type.MessageOnly, sender, receiver, srcChainId, srcTxHash, dstChainId, message).\n     * If messages with the same Id are sent, only one of them will succeed at dst chain.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _fee The fee amount to pay to MessageBus.\n     */\n    function sendMessage(\n        address _receiver,\n        uint64 _dstChainId,\n        bytes memory _message,\n        uint256 _fee\n    ) internal {\n        MessageSenderLib.sendMessage(_receiver, _dstChainId, _message, messageBus, _fee);\n    }\n\n    // Send message to non-evm chain with bytes for receiver address,\n    // otherwise same as above.\n    function sendMessage(\n        bytes calldata _receiver,\n        uint64 _dstChainId,\n        bytes memory _message,\n        uint256 _fee\n    ) internal {\n        MessageSenderLib.sendMessage(Token.bytesToAddress(_receiver), _dstChainId, _message, messageBus, _fee);\n    }\n\n    /**\n     * @notice Sends a message associated with a transfer to a contract on another chain.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     *        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least\n     *        (100% - max slippage percentage) * amount or the transfer can be refunded.\n     *        Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     *        If message is empty, only the token transfer will be sent\n     * @param _bridgeSendType One of the {BridgeSendType} enum.\n     * @param _fee The fee amount to pay to MessageBus.\n     * @return The transfer ID.\n     */\n    function sendMessageWithTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        bytes memory _message,\n        MsgDataTypes.BridgeSendType _bridgeSendType,\n        uint256 _fee\n    ) internal returns (bytes32) {\n        return\n            MessageSenderLib.sendMessageWithTransfer(\n                _receiver,\n                _token,\n                _amount,\n                _dstChainId,\n                _nonce,\n                _maxSlippage,\n                _message,\n                _bridgeSendType,\n                messageBus,\n                _fee\n            );\n    }\n\n    /**\n     * @notice Sends a token transfer via a bridge.\n     * @dev sendMessageWithTransfer with empty message\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     *        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least\n     *        (100% - max slippage percentage) * amount or the transfer can be refunded.\n     *        Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\n     * @param _bridgeSendType One of the {BridgeSendType} enum.\n     */\n    function sendTokenTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        MsgDataTypes.BridgeSendType _bridgeSendType\n    ) internal returns (bytes32) {\n        return\n            MessageSenderLib.sendMessageWithTransfer(\n                _receiver,\n                _token,\n                _amount,\n                _dstChainId,\n                _nonce,\n                _maxSlippage,\n                \"\", // empty message, which will not trigger sendMessage\n                _bridgeSendType,\n                messageBus,\n                0\n            );\n    }\n}\n"
    },
    "sgn-v2-contracts/contracts/message/interfaces/IMessageReceiverApp.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IMessageReceiverApp {\n    enum ExecutionStatus {\n        Fail, // execution failed, finalized\n        Success, // execution succeeded, finalized\n        Retry // execution rejected, can retry later\n    }\n\n    /**\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\n     * @param _sender The address of the source app contract\n     * @param _token The address of the token that comes out of the bridge\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\n     *        function is called.\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransfer(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable returns (ExecutionStatus);\n\n    /**\n     * @notice Only called by MessageBus (MessageBusReceiver) if\n     *         1. executeMessageWithTransfer reverts, or\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\n     * @param _sender The address of the source app contract\n     * @param _token The address of the token that comes out of the bridge\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\n     *        function is called.\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransferFallback(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable returns (ExecutionStatus);\n\n    /**\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\n     * @param _token The token address of the original transfer\n     * @param _amount The amount of the original transfer\n     * @param _message The same message associated with the original transfer\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransferRefund(\n        address _token,\n        uint256 _amount,\n        bytes calldata _message,\n        address _executor\n    ) external payable returns (ExecutionStatus);\n\n    /**\n     * @notice Called by MessageBus (MessageBusReceiver)\n     * @param _sender The address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        address _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable returns (ExecutionStatus);\n}\n"
    },
    "contracts/xchain/cbridge/MessageBusAddress.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nabstract contract MessageBusAddress is OwnableUpgradeable {\n    event MessageBusUpdated(address messageBus);\n\n    address public messageBus;\n\n    function __MessageBusAddress_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function setMessageBus(address _messageBus) public onlyOwner {\n        messageBus = _messageBus;\n        emit MessageBusUpdated(messageBus);\n    }\n}\n"
    },
    "sgn-v2-contracts/contracts/message/libraries/MessageSenderLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../interfaces/IBridge.sol\";\nimport \"../../interfaces/IOriginalTokenVault.sol\";\nimport \"../../interfaces/IOriginalTokenVaultV2.sol\";\nimport \"../../interfaces/IPeggedTokenBridge.sol\";\nimport \"../../interfaces/IPeggedTokenBridgeV2.sol\";\nimport \"../interfaces/IMessageBus.sol\";\nimport \"./MsgDataTypes.sol\";\n\nlibrary MessageSenderLib {\n    using SafeERC20 for IERC20;\n\n    // ============== Internal library functions called by apps ==============\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _messageBus The address of the MessageBus on this chain.\n     * @param _fee The fee amount to pay to MessageBus.\n     */\n    function sendMessage(\n        address _receiver,\n        uint64 _dstChainId,\n        bytes memory _message,\n        address _messageBus,\n        uint256 _fee\n    ) internal {\n        IMessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\n    }\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus with an associated transfer.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\n     * transfer can be refunded. Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\n     * @param _messageBus The address of the MessageBus on this chain.\n     * @param _fee The fee amount to pay to MessageBus.\n     * @return The transfer ID.\n     */\n    function sendMessageWithTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        bytes memory _message,\n        MsgDataTypes.BridgeSendType _bridgeSendType,\n        address _messageBus,\n        uint256 _fee\n    ) internal returns (bytes32) {\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\n            return\n                sendMessageWithLiquidityBridgeTransfer(\n                    _receiver,\n                    _token,\n                    _amount,\n                    _dstChainId,\n                    _nonce,\n                    _maxSlippage,\n                    _message,\n                    _messageBus,\n                    _fee\n                );\n        } else if (\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit ||\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit\n        ) {\n            return\n                sendMessageWithPegVaultDeposit(\n                    _bridgeSendType,\n                    _receiver,\n                    _token,\n                    _amount,\n                    _dstChainId,\n                    _nonce,\n                    _message,\n                    _messageBus,\n                    _fee\n                );\n        } else if (\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn ||\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn\n        ) {\n            return\n                sendMessageWithPegBridgeBurn(\n                    _bridgeSendType,\n                    _receiver,\n                    _token,\n                    _amount,\n                    _dstChainId,\n                    _nonce,\n                    _message,\n                    _messageBus,\n                    _fee\n                );\n        } else {\n            revert(\"bridge type not supported\");\n        }\n    }\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus with an associated liquidity bridge transfer.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\n     * transfer can be refunded.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _messageBus The address of the MessageBus on this chain.\n     * @param _fee The fee amount to pay to MessageBus.\n     * @return The transfer ID.\n     */\n    function sendMessageWithLiquidityBridgeTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        bytes memory _message,\n        address _messageBus,\n        uint256 _fee\n    ) internal returns (bytes32) {\n        address bridge = IMessageBus(_messageBus).liquidityBridge();\n        IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n        IBridge(bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\n        bytes32 transferId = keccak256(\n            abi.encodePacked(address(this), _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\n        );\n        IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\n            _receiver,\n            _dstChainId,\n            bridge,\n            transferId,\n            _message\n        );\n        return transferId;\n    }\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus with an associated OriginalTokenVault deposit.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _messageBus The address of the MessageBus on this chain.\n     * @param _fee The fee amount to pay to MessageBus.\n     * @return The transfer ID.\n     */\n    function sendMessageWithPegVaultDeposit(\n        MsgDataTypes.BridgeSendType _bridgeSendType,\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        bytes memory _message,\n        address _messageBus,\n        uint256 _fee\n    ) internal returns (bytes32) {\n        address pegVault;\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\n            pegVault = IMessageBus(_messageBus).pegVault();\n        } else {\n            pegVault = IMessageBus(_messageBus).pegVaultV2();\n        }\n        IERC20(_token).safeIncreaseAllowance(pegVault, _amount);\n        bytes32 transferId;\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\n            IOriginalTokenVault(pegVault).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\n            transferId = keccak256(\n                abi.encodePacked(address(this), _token, _amount, _dstChainId, _receiver, _nonce, uint64(block.chainid))\n            );\n        } else {\n            transferId = IOriginalTokenVaultV2(pegVault).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\n        }\n        IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\n            _receiver,\n            _dstChainId,\n            pegVault,\n            transferId,\n            _message\n        );\n        return transferId;\n    }\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus with an associated PeggedTokenBridge burn.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _messageBus The address of the MessageBus on this chain.\n     * @param _fee The fee amount to pay to MessageBus.\n     * @return The transfer ID.\n     */\n    function sendMessageWithPegBridgeBurn(\n        MsgDataTypes.BridgeSendType _bridgeSendType,\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        bytes memory _message,\n        address _messageBus,\n        uint256 _fee\n    ) internal returns (bytes32) {\n        address pegBridge;\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\n            pegBridge = IMessageBus(_messageBus).pegBridge();\n        } else {\n            pegBridge = IMessageBus(_messageBus).pegBridgeV2();\n        }\n        IERC20(_token).safeIncreaseAllowance(pegBridge, _amount);\n        bytes32 transferId;\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\n            IPeggedTokenBridge(pegBridge).burn(_token, _amount, _receiver, _nonce);\n            transferId = keccak256(\n                abi.encodePacked(address(this), _token, _amount, _receiver, _nonce, uint64(block.chainid))\n            );\n        } else {\n            transferId = IPeggedTokenBridgeV2(pegBridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\n        }\n        // handle cases where certain tokens do not spend allowance for role-based burn\n        IERC20(_token).safeApprove(pegBridge, 0);\n        IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\n            _receiver,\n            _dstChainId,\n            pegBridge,\n            transferId,\n            _message\n        );\n        return transferId;\n    }\n\n    /**\n     * @notice Sends a token transfer via a bridge.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\n     * transfer can be refunded.\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\n     */\n    function sendTokenTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        MsgDataTypes.BridgeSendType _bridgeSendType,\n        address _bridge\n    ) internal {\n        IERC20(_token).safeIncreaseAllowance(_bridge, _amount);\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\n            IBridge(_bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\n            IOriginalTokenVault(_bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\n            IPeggedTokenBridge(_bridge).burn(_token, _amount, _receiver, _nonce);\n            // handle cases where certain tokens do not spend allowance for role-based burn\n            IERC20(_token).safeApprove(_bridge, 0);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit) {\n            IOriginalTokenVaultV2(_bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn) {\n            IPeggedTokenBridgeV2(_bridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\n            // handle cases where certain tokens do not spend allowance for role-based burn\n            IERC20(_token).safeApprove(_bridge, 0);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2BurnFrom) {\n            IPeggedTokenBridgeV2(_bridge).burnFrom(_token, _amount, _dstChainId, _receiver, _nonce);\n            // handle cases where certain tokens do not spend allowance for role-based burn\n            IERC20(_token).safeApprove(_bridge, 0);\n        } else {\n            revert(\"bridge type not supported\");\n        }\n    }\n}\n"
    },
    "sgn-v2-contracts/contracts/message/messagebus/MessageBus.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"./MessageBusSender.sol\";\nimport \"./MessageBusReceiver.sol\";\n\ncontract MessageBus is MessageBusSender, MessageBusReceiver {\n    constructor(\n        ISigsVerifier _sigsVerifier,\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    )\n        MessageBusSender(_sigsVerifier)\n        MessageBusReceiver(_liquidityBridge, _pegBridge, _pegVault, _pegBridgeV2, _pegVaultV2)\n    {}\n\n    // this is only to be called by Proxy via delegateCall as initOwner will require _owner is 0.\n    // so calling init on this contract directly will guarantee to fail\n    function init(\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    ) external {\n        // MUST manually call ownable init and must only call once\n        initOwner();\n        // we don't need sender init as _sigsVerifier is immutable so already in the deployed code\n        initReceiver(_liquidityBridge, _pegBridge, _pegVault, _pegBridgeV2, _pegVaultV2);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "sgn-v2-contracts/contracts/interfaces/IBridge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IBridge {\n    function send(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage\n    ) external;\n\n    function relay(\n        bytes calldata _relayRequest,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    function transfers(bytes32 transferId) external view returns (bool);\n\n    function withdraws(bytes32 withdrawId) external view returns (bool);\n\n    function withdraw(\n        bytes calldata _wdmsg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external view;\n}\n"
    },
    "sgn-v2-contracts/contracts/interfaces/IOriginalTokenVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IOriginalTokenVault {\n    /**\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\n     * @param _token local token address\n     * @param _amount locked token amount\n     * @param _mintChainId destination chainId to mint tokens\n     * @param _mintAccount destination account to receive minted tokens\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function deposit(\n        address _token,\n        uint256 _amount,\n        uint64 _mintChainId,\n        address _mintAccount,\n        uint64 _nonce\n    ) external;\n\n    /**\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\n     * @param _request The serialized Withdraw protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the bridge's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdraw(\n        bytes calldata _request,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "sgn-v2-contracts/contracts/interfaces/IOriginalTokenVaultV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IOriginalTokenVaultV2 {\n    /**\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\n     * @param _token local token address\n     * @param _amount locked token amount\n     * @param _mintChainId destination chainId to mint tokens\n     * @param _mintAccount destination account to receive minted tokens\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function deposit(\n        address _token,\n        uint256 _amount,\n        uint64 _mintChainId,\n        address _mintAccount,\n        uint64 _nonce\n    ) external returns (bytes32);\n\n    /**\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\n     * @param _request The serialized Withdraw protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the bridge's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdraw(\n        bytes calldata _request,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external returns (bytes32);\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "sgn-v2-contracts/contracts/interfaces/IPeggedTokenBridge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IPeggedTokenBridge {\n    /**\n     * @notice Burn tokens to trigger withdrawal at a remote chain's OriginalTokenVault\n     * @param _token local token address\n     * @param _amount locked token amount\n     * @param _withdrawAccount account who withdraw original tokens on the remote chain\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function burn(\n        address _token,\n        uint256 _amount,\n        address _withdrawAccount,\n        uint64 _nonce\n    ) external;\n\n    /**\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\n     * @param _request The serialized Mint protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function mint(\n        bytes calldata _request,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "sgn-v2-contracts/contracts/interfaces/IPeggedTokenBridgeV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IPeggedTokenBridgeV2 {\n    /**\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\n     * OriginalTokenVault, or mint at another remote chain\n     * @param _token The pegged token address.\n     * @param _amount The amount to burn.\n     * @param _toChainId If zero, withdraw from original vault; otherwise, the remote chain to mint tokens.\n     * @param _toAccount The account to receive tokens on the remote chain\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\n     */\n    function burn(\n        address _token,\n        uint256 _amount,\n        uint64 _toChainId,\n        address _toAccount,\n        uint64 _nonce\n    ) external returns (bytes32);\n\n    // same with `burn` above, use openzeppelin ERC20Burnable interface\n    function burnFrom(\n        address _token,\n        uint256 _amount,\n        uint64 _toChainId,\n        address _toAccount,\n        uint64 _nonce\n    ) external returns (bytes32);\n\n    /**\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\n     * @param _request The serialized Mint protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function mint(\n        bytes calldata _request,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external returns (bytes32);\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "sgn-v2-contracts/contracts/message/messagebus/MessageBusSender.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"../../safeguard/Ownable.sol\";\nimport \"../../interfaces/ISigsVerifier.sol\";\n\ncontract MessageBusSender is Ownable {\n    ISigsVerifier public immutable sigsVerifier;\n\n    uint256 public feeBase;\n    uint256 public feePerByte;\n    mapping(address => uint256) public withdrawnFees;\n\n    event Message(address indexed sender, address receiver, uint256 dstChainId, bytes message, uint256 fee);\n\n    event MessageWithTransfer(\n        address indexed sender,\n        address receiver,\n        uint256 dstChainId,\n        address bridge,\n        bytes32 srcTransferId,\n        bytes message,\n        uint256 fee\n    );\n\n    event FeeBaseUpdated(uint256 feeBase);\n    event FeePerByteUpdated(uint256 feePerByte);\n\n    constructor(ISigsVerifier _sigsVerifier) {\n        sigsVerifier = _sigsVerifier;\n    }\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\n     * A fee is charged in the native gas token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessage(\n        address _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message\n    ) external payable {\n        require(_dstChainId != block.chainid, \"Invalid chainId\");\n        uint256 minFee = calcFee(_message);\n        require(msg.value >= minFee, \"Insufficient fee\");\n        emit Message(msg.sender, _receiver, _dstChainId, _message, msg.value);\n    }\n\n    /**\n     * @notice Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer.\n     * A fee is charged in the native token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _srcBridge The bridge contract to send the transfer with.\n     * @param _srcTransferId The transfer ID.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessageWithTransfer(\n        address _receiver,\n        uint256 _dstChainId,\n        address _srcBridge,\n        bytes32 _srcTransferId,\n        bytes calldata _message\n    ) external payable {\n        require(_dstChainId != block.chainid, \"Invalid chainId\");\n        uint256 minFee = calcFee(_message);\n        require(msg.value >= minFee, \"Insufficient fee\");\n        // SGN needs to verify\n        // 1. msg.sender matches sender of the src transfer\n        // 2. dstChainId matches dstChainId of the src transfer\n        // 3. bridge is either liquidity bridge, peg src vault, or peg dst bridge\n        emit MessageWithTransfer(msg.sender, _receiver, _dstChainId, _srcBridge, _srcTransferId, _message, msg.value);\n    }\n\n    /**\n     * @notice Withdraws message fee in the form of native gas token.\n     * @param _account The address receiving the fee.\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdrawFee(\n        address _account,\n        uint256 _cumulativeFee,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external {\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"withdrawFee\"));\n        sigsVerifier.verifySigs(abi.encodePacked(domain, _account, _cumulativeFee), _sigs, _signers, _powers);\n        uint256 amount = _cumulativeFee - withdrawnFees[_account];\n        require(amount > 0, \"No new amount to withdraw\");\n        withdrawnFees[_account] = _cumulativeFee;\n        (bool sent, ) = _account.call{value: amount, gas: 50000}(\"\");\n        require(sent, \"failed to withdraw fee\");\n    }\n\n    /**\n     * @notice Calculates the required fee for the message.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     @ @return The required fee.\n     */\n    function calcFee(bytes calldata _message) public view returns (uint256) {\n        return feeBase + _message.length * feePerByte;\n    }\n\n    // -------------------- Admin --------------------\n\n    function setFeePerByte(uint256 _fee) external onlyOwner {\n        feePerByte = _fee;\n        emit FeePerByteUpdated(feePerByte);\n    }\n\n    function setFeeBase(uint256 _fee) external onlyOwner {\n        feeBase = _fee;\n        emit FeeBaseUpdated(feeBase);\n    }\n}\n"
    },
    "sgn-v2-contracts/contracts/message/messagebus/MessageBusReceiver.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"../libraries/MsgDataTypes.sol\";\nimport \"../interfaces/IMessageReceiverApp.sol\";\nimport \"../interfaces/IMessageBus.sol\";\nimport \"../../interfaces/IBridge.sol\";\nimport \"../../interfaces/IOriginalTokenVault.sol\";\nimport \"../../interfaces/IOriginalTokenVaultV2.sol\";\nimport \"../../interfaces/IPeggedTokenBridge.sol\";\nimport \"../../interfaces/IPeggedTokenBridgeV2.sol\";\nimport \"../../safeguard/Ownable.sol\";\n\ncontract MessageBusReceiver is Ownable {\n    mapping(bytes32 => MsgDataTypes.TxStatus) public executedMessages;\n\n    address public liquidityBridge; // liquidity bridge address\n    address public pegBridge; // peg bridge address\n    address public pegVault; // peg original vault address\n    address public pegBridgeV2; // peg bridge address\n    address public pegVaultV2; // peg original vault address\n\n    // minimum amount of gas needed by this contract before it tries to\n    // deliver a message to the target contract.\n    uint256 public preExecuteMessageGasUsage;\n\n    event Executed(\n        MsgDataTypes.MsgType msgType,\n        bytes32 msgId,\n        MsgDataTypes.TxStatus status,\n        address indexed receiver,\n        uint64 srcChainId,\n        bytes32 srcTxHash\n    );\n    event NeedRetry(MsgDataTypes.MsgType msgType, bytes32 msgId, uint64 srcChainId, bytes32 srcTxHash);\n    event CallReverted(string reason); // help debug\n\n    event LiquidityBridgeUpdated(address liquidityBridge);\n    event PegBridgeUpdated(address pegBridge);\n    event PegVaultUpdated(address pegVault);\n    event PegBridgeV2Updated(address pegBridgeV2);\n    event PegVaultV2Updated(address pegVaultV2);\n\n    constructor(\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    ) {\n        liquidityBridge = _liquidityBridge;\n        pegBridge = _pegBridge;\n        pegVault = _pegVault;\n        pegBridgeV2 = _pegBridgeV2;\n        pegVaultV2 = _pegVaultV2;\n    }\n\n    function initReceiver(\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    ) internal {\n        require(liquidityBridge == address(0), \"liquidityBridge already set\");\n        liquidityBridge = _liquidityBridge;\n        pegBridge = _pegBridge;\n        pegVault = _pegVault;\n        pegBridgeV2 = _pegBridgeV2;\n        pegVaultV2 = _pegVaultV2;\n    }\n\n    // ============== functions called by executor ==============\n\n    /**\n     * @notice Execute a message with a successful transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransfer(\n        bytes calldata _message,\n        MsgDataTypes.TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) public payable {\n        // For message with token transfer, message Id is computed through transfer info\n        // in order to guarantee that each transfer can only be used once.\n        bytes32 messageId = verifyTransfer(_transfer);\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \"transfer already executed\");\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\n\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"MessageWithTransfer\"));\n        IBridge(liquidityBridge).verifySigs(\n            abi.encodePacked(domain, messageId, _message, _transfer.srcTxHash),\n            _sigs,\n            _signers,\n            _powers\n        );\n        MsgDataTypes.TxStatus status;\n        IMessageReceiverApp.ExecutionStatus est = executeMessageWithTransfer(_transfer, _message);\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\n            status = MsgDataTypes.TxStatus.Success;\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\n            emit NeedRetry(\n                MsgDataTypes.MsgType.MessageWithTransfer,\n                messageId,\n                _transfer.srcChainId,\n                _transfer.srcTxHash\n            );\n            return;\n        } else {\n            est = executeMessageWithTransferFallback(_transfer, _message);\n            if (est == IMessageReceiverApp.ExecutionStatus.Success) {\n                status = MsgDataTypes.TxStatus.Fallback;\n            } else {\n                status = MsgDataTypes.TxStatus.Fail;\n            }\n        }\n        executedMessages[messageId] = status;\n        emitMessageWithTransferExecutedEvent(messageId, status, _transfer);\n    }\n\n    /**\n     * @notice Execute a message with a refunded transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransferRefund(\n        bytes calldata _message, // the same message associated with the original transfer\n        MsgDataTypes.TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) public payable {\n        // similar to executeMessageWithTransfer\n        bytes32 messageId = verifyTransfer(_transfer);\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \"transfer already executed\");\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\n\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"MessageWithTransferRefund\"));\n        IBridge(liquidityBridge).verifySigs(\n            abi.encodePacked(domain, messageId, _message, _transfer.srcTxHash),\n            _sigs,\n            _signers,\n            _powers\n        );\n        MsgDataTypes.TxStatus status;\n        IMessageReceiverApp.ExecutionStatus est = executeMessageWithTransferRefund(_transfer, _message);\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\n            status = MsgDataTypes.TxStatus.Success;\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\n            emit NeedRetry(\n                MsgDataTypes.MsgType.MessageWithTransfer,\n                messageId,\n                _transfer.srcChainId,\n                _transfer.srcTxHash\n            );\n            return;\n        } else {\n            status = MsgDataTypes.TxStatus.Fail;\n        }\n        executedMessages[messageId] = status;\n        emitMessageWithTransferExecutedEvent(messageId, status, _transfer);\n    }\n\n    /**\n     * @notice Execute a message not associated with a transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessage(\n        bytes calldata _message,\n        MsgDataTypes.RouteInfo calldata _route,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable {\n        // For message without associated token transfer, message Id is computed through message info,\n        // in order to guarantee that each message can only be applied once\n        bytes32 messageId = computeMessageOnlyId(_route, _message);\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \"message already executed\");\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\n\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"Message\"));\n        IBridge(liquidityBridge).verifySigs(abi.encodePacked(domain, messageId), _sigs, _signers, _powers);\n        MsgDataTypes.TxStatus status;\n        IMessageReceiverApp.ExecutionStatus est = executeMessage(_route, _message);\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\n            status = MsgDataTypes.TxStatus.Success;\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\n            emit NeedRetry(MsgDataTypes.MsgType.MessageOnly, messageId, _route.srcChainId, _route.srcTxHash);\n            return;\n        } else {\n            status = MsgDataTypes.TxStatus.Fail;\n        }\n        executedMessages[messageId] = status;\n        emitMessageOnlyExecutedEvent(messageId, status, _route);\n    }\n\n    // ================= utils (to avoid stack too deep) =================\n\n    function emitMessageWithTransferExecutedEvent(\n        bytes32 _messageId,\n        MsgDataTypes.TxStatus _status,\n        MsgDataTypes.TransferInfo calldata _transfer\n    ) private {\n        emit Executed(\n            MsgDataTypes.MsgType.MessageWithTransfer,\n            _messageId,\n            _status,\n            _transfer.receiver,\n            _transfer.srcChainId,\n            _transfer.srcTxHash\n        );\n    }\n\n    function emitMessageOnlyExecutedEvent(\n        bytes32 _messageId,\n        MsgDataTypes.TxStatus _status,\n        MsgDataTypes.RouteInfo calldata _route\n    ) private {\n        emit Executed(\n            MsgDataTypes.MsgType.MessageOnly,\n            _messageId,\n            _status,\n            _route.receiver,\n            _route.srcChainId,\n            _route.srcTxHash\n        );\n    }\n\n    function executeMessageWithTransfer(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\n        private\n        returns (IMessageReceiverApp.ExecutionStatus)\n    {\n        uint256 gasLeftBeforeExecution = gasleft();\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\n            abi.encodeWithSelector(\n                IMessageReceiverApp.executeMessageWithTransfer.selector,\n                _transfer.sender,\n                _transfer.token,\n                _transfer.amount,\n                _transfer.srcChainId,\n                _message,\n                msg.sender\n            )\n        );\n        if (ok) {\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\n        }\n        handleExecutionRevert(gasLeftBeforeExecution, res);\n        return IMessageReceiverApp.ExecutionStatus.Fail;\n    }\n\n    function executeMessageWithTransferFallback(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\n        private\n        returns (IMessageReceiverApp.ExecutionStatus)\n    {\n        uint256 gasLeftBeforeExecution = gasleft();\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\n            abi.encodeWithSelector(\n                IMessageReceiverApp.executeMessageWithTransferFallback.selector,\n                _transfer.sender,\n                _transfer.token,\n                _transfer.amount,\n                _transfer.srcChainId,\n                _message,\n                msg.sender\n            )\n        );\n        if (ok) {\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\n        }\n        handleExecutionRevert(gasLeftBeforeExecution, res);\n        return IMessageReceiverApp.ExecutionStatus.Fail;\n    }\n\n    function executeMessageWithTransferRefund(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\n        private\n        returns (IMessageReceiverApp.ExecutionStatus)\n    {\n        uint256 gasLeftBeforeExecution = gasleft();\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\n            abi.encodeWithSelector(\n                IMessageReceiverApp.executeMessageWithTransferRefund.selector,\n                _transfer.token,\n                _transfer.amount,\n                _message,\n                msg.sender\n            )\n        );\n        if (ok) {\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\n        }\n        handleExecutionRevert(gasLeftBeforeExecution, res);\n        return IMessageReceiverApp.ExecutionStatus.Fail;\n    }\n\n    function verifyTransfer(MsgDataTypes.TransferInfo calldata _transfer) private view returns (bytes32) {\n        bytes32 transferId;\n        address bridgeAddr;\n        if (_transfer.t == MsgDataTypes.TransferType.LqRelay) {\n            transferId = keccak256(\n                abi.encodePacked(\n                    _transfer.sender,\n                    _transfer.receiver,\n                    _transfer.token,\n                    _transfer.amount,\n                    _transfer.srcChainId,\n                    uint64(block.chainid),\n                    _transfer.refId\n                )\n            );\n            bridgeAddr = liquidityBridge;\n            require(IBridge(bridgeAddr).transfers(transferId) == true, \"bridge relay not exist\");\n        } else if (_transfer.t == MsgDataTypes.TransferType.LqWithdraw) {\n            transferId = keccak256(\n                abi.encodePacked(\n                    uint64(block.chainid),\n                    _transfer.wdseq,\n                    _transfer.receiver,\n                    _transfer.token,\n                    _transfer.amount\n                )\n            );\n            bridgeAddr = liquidityBridge;\n            require(IBridge(bridgeAddr).withdraws(transferId) == true, \"bridge withdraw not exist\");\n        } else if (\n            _transfer.t == MsgDataTypes.TransferType.PegMint || _transfer.t == MsgDataTypes.TransferType.PegWithdraw\n        ) {\n            transferId = keccak256(\n                abi.encodePacked(\n                    _transfer.receiver,\n                    _transfer.token,\n                    _transfer.amount,\n                    _transfer.sender,\n                    _transfer.srcChainId,\n                    _transfer.refId\n                )\n            );\n            if (_transfer.t == MsgDataTypes.TransferType.PegMint) {\n                bridgeAddr = pegBridge;\n                require(IPeggedTokenBridge(bridgeAddr).records(transferId) == true, \"mint record not exist\");\n            } else {\n                // _transfer.t == MsgDataTypes.TransferType.PegWithdraw\n                bridgeAddr = pegVault;\n                require(IOriginalTokenVault(bridgeAddr).records(transferId) == true, \"withdraw record not exist\");\n            }\n        } else if (\n            _transfer.t == MsgDataTypes.TransferType.PegV2Mint || _transfer.t == MsgDataTypes.TransferType.PegV2Withdraw\n        ) {\n            if (_transfer.t == MsgDataTypes.TransferType.PegV2Mint) {\n                bridgeAddr = pegBridgeV2;\n            } else {\n                // MsgDataTypes.TransferType.PegV2Withdraw\n                bridgeAddr = pegVaultV2;\n            }\n            transferId = keccak256(\n                abi.encodePacked(\n                    _transfer.receiver,\n                    _transfer.token,\n                    _transfer.amount,\n                    _transfer.sender,\n                    _transfer.srcChainId,\n                    _transfer.refId,\n                    bridgeAddr\n                )\n            );\n            if (_transfer.t == MsgDataTypes.TransferType.PegV2Mint) {\n                require(IPeggedTokenBridgeV2(bridgeAddr).records(transferId) == true, \"mint record not exist\");\n            } else {\n                // MsgDataTypes.TransferType.PegV2Withdraw\n                require(IOriginalTokenVaultV2(bridgeAddr).records(transferId) == true, \"withdraw record not exist\");\n            }\n        }\n        return keccak256(abi.encodePacked(MsgDataTypes.MsgType.MessageWithTransfer, bridgeAddr, transferId));\n    }\n\n    function computeMessageOnlyId(MsgDataTypes.RouteInfo calldata _route, bytes calldata _message)\n        private\n        view\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encodePacked(\n                    MsgDataTypes.MsgType.MessageOnly,\n                    _route.sender,\n                    _route.receiver,\n                    _route.srcChainId,\n                    _route.srcTxHash,\n                    uint64(block.chainid),\n                    _message\n                )\n            );\n    }\n\n    function executeMessage(MsgDataTypes.RouteInfo calldata _route, bytes calldata _message)\n        private\n        returns (IMessageReceiverApp.ExecutionStatus)\n    {\n        uint256 gasLeftBeforeExecution = gasleft();\n        (bool ok, bytes memory res) = address(_route.receiver).call{value: msg.value}(\n            abi.encodeWithSelector(\n                IMessageReceiverApp.executeMessage.selector,\n                _route.sender,\n                _route.srcChainId,\n                _message,\n                msg.sender\n            )\n        );\n        if (ok) {\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\n        }\n        handleExecutionRevert(gasLeftBeforeExecution, res);\n        return IMessageReceiverApp.ExecutionStatus.Fail;\n    }\n\n    function handleExecutionRevert(uint256 _gasLeftBeforeExecution, bytes memory _returnData) private {\n        uint256 gasLeftAfterExecution = gasleft();\n        uint256 maxTargetGasLimit = block.gaslimit - preExecuteMessageGasUsage;\n        if (_gasLeftBeforeExecution < maxTargetGasLimit && gasLeftAfterExecution <= _gasLeftBeforeExecution / 64) {\n            // if this happens, the executor must have not provided sufficient gas limit,\n            // then the tx should revert instead of recording a non-retryable failure status\n            // https://github.com/wolflo/evm-opcodes/blob/main/gas.md#aa-f-gas-to-send-with-call-operations\n            assembly {\n                invalid()\n            }\n        }\n        emit CallReverted(getRevertMsg(_returnData));\n    }\n\n    // https://ethereum.stackexchange.com/a/83577\n    // https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/base/Multicall.sol\n    function getRevertMsg(bytes memory _returnData) private pure returns (string memory) {\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\n        assembly {\n            // Slice the sighash.\n            _returnData := add(_returnData, 0x04)\n        }\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\n    }\n\n    // ================= helper functions =====================\n\n    /**\n     * @notice combine bridge transfer and msg execution calls into a single tx\n     * @dev caller needs to get the required input params from SGN\n     * @param _transferParams params to call bridge transfer\n     * @param _msgParams params to execute message\n     */\n    function transferAndExecuteMsg(\n        MsgDataTypes.BridgeTransferParams calldata _transferParams,\n        MsgDataTypes.MsgWithTransferExecutionParams calldata _msgParams\n    ) external {\n        _bridgeTransfer(_msgParams.transfer.t, _transferParams);\n        executeMessageWithTransfer(\n            _msgParams.message,\n            _msgParams.transfer,\n            _msgParams.sigs,\n            _msgParams.signers,\n            _msgParams.powers\n        );\n    }\n\n    /**\n     * @notice combine bridge refund and msg execution calls into a single tx\n     * @dev caller needs to get the required input params from SGN\n     * @param _transferParams params to call bridge transfer for refund\n     * @param _msgParams params to execute message for refund\n     */\n    function refundAndExecuteMsg(\n        MsgDataTypes.BridgeTransferParams calldata _transferParams,\n        MsgDataTypes.MsgWithTransferExecutionParams calldata _msgParams\n    ) external {\n        _bridgeTransfer(_msgParams.transfer.t, _transferParams);\n        executeMessageWithTransferRefund(\n            _msgParams.message,\n            _msgParams.transfer,\n            _msgParams.sigs,\n            _msgParams.signers,\n            _msgParams.powers\n        );\n    }\n\n    function _bridgeTransfer(MsgDataTypes.TransferType t, MsgDataTypes.BridgeTransferParams calldata _transferParams)\n        private\n    {\n        if (t == MsgDataTypes.TransferType.LqRelay) {\n            IBridge(liquidityBridge).relay(\n                _transferParams.request,\n                _transferParams.sigs,\n                _transferParams.signers,\n                _transferParams.powers\n            );\n        } else if (t == MsgDataTypes.TransferType.LqWithdraw) {\n            IBridge(liquidityBridge).withdraw(\n                _transferParams.request,\n                _transferParams.sigs,\n                _transferParams.signers,\n                _transferParams.powers\n            );\n        } else if (t == MsgDataTypes.TransferType.PegMint) {\n            IPeggedTokenBridge(pegBridge).mint(\n                _transferParams.request,\n                _transferParams.sigs,\n                _transferParams.signers,\n                _transferParams.powers\n            );\n        } else if (t == MsgDataTypes.TransferType.PegV2Mint) {\n            IPeggedTokenBridgeV2(pegBridgeV2).mint(\n                _transferParams.request,\n                _transferParams.sigs,\n                _transferParams.signers,\n                _transferParams.powers\n            );\n        } else if (t == MsgDataTypes.TransferType.PegWithdraw) {\n            IOriginalTokenVault(pegVault).withdraw(\n                _transferParams.request,\n                _transferParams.sigs,\n                _transferParams.signers,\n                _transferParams.powers\n            );\n        } else if (t == MsgDataTypes.TransferType.PegV2Withdraw) {\n            IOriginalTokenVaultV2(pegVaultV2).withdraw(\n                _transferParams.request,\n                _transferParams.sigs,\n                _transferParams.signers,\n                _transferParams.powers\n            );\n        }\n    }\n\n    // ================= contract config =================\n\n    function setLiquidityBridge(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        liquidityBridge = _addr;\n        emit LiquidityBridgeUpdated(liquidityBridge);\n    }\n\n    function setPegBridge(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegBridge = _addr;\n        emit PegBridgeUpdated(pegBridge);\n    }\n\n    function setPegVault(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegVault = _addr;\n        emit PegVaultUpdated(pegVault);\n    }\n\n    function setPegBridgeV2(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegBridgeV2 = _addr;\n        emit PegBridgeV2Updated(pegBridgeV2);\n    }\n\n    function setPegVaultV2(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegVaultV2 = _addr;\n        emit PegVaultV2Updated(pegVaultV2);\n    }\n\n    function setPreExecuteMessageGasUsage(uint256 _usage) public onlyOwner {\n        preExecuteMessageGasUsage = _usage;\n    }\n}\n"
    },
    "sgn-v2-contracts/contracts/safeguard/Ownable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\n * renounceOwnership. So we can support Proxy based upgradable contract\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\n     * we require _owner == address(0), which is only possible when it's a delegateCall\n     * because constructor sets _owner in contract state.\n     */\n    function initOwner() internal {\n        require(_owner == address(0), \"owner already set\");\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "sgn-v2-contracts/contracts/interfaces/ISigsVerifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface ISigsVerifier {\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external view;\n}\n"
    },
    "contracts/swap/BasicSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../../interfaces/IUniRouter.sol\";\n\ncontract BasicSwap is OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IUniRouter public router;\n    IERC20Upgradeable public SWAP_BASE_TOKEN; // It has same role with WETH on Ethereum Swaps. Most of tokens have been paired with this token.\n\n    function initialize(\n        IUniRouter _router, IERC20Upgradeable _SWAP_BASE_TOKEN\n    ) public virtual initializer {\n        require(address(_router) != address(0), \"Invalid router\");\n        require(address(_SWAP_BASE_TOKEN) != address(0), \"Invalid SWAP_BASE_TOKEN\");\n        __Ownable_init();\n\n        router = _router;\n        SWAP_BASE_TOKEN = _SWAP_BASE_TOKEN;\n    }\n\n    function setRouter(IUniRouter _router) external onlyOwner {\n        router = _router;\n    }\n\n    function swapExactTokensForTokens(address _tokenA, address _tokenB, uint _amt, uint _minAmount) external virtual returns (uint) {\n        address account = _msgSender();\n        IERC20Upgradeable(_tokenA).safeTransferFrom(account, address(this), _amt);\n        IERC20Upgradeable(_tokenA).safeApprove(address(router), _amt);\n\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = _tokenB;\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, account, block.timestamp))[1];\n    }\n\n    function swapExactTokensForTokens2(address _tokenA, address _tokenB, uint _amt, uint _minAmount) external virtual returns (uint) {\n        address account = _msgSender();\n        IERC20Upgradeable(_tokenA).safeTransferFrom(account, address(this), _amt);\n        IERC20Upgradeable(_tokenA).safeApprove(address(router), _amt);\n\n        address[] memory path = new address[](3);\n        path[0] = _tokenA;\n        path[1] = address(SWAP_BASE_TOKEN);\n        path[2] = _tokenB;\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, account, block.timestamp))[2];\n    }\n\n    function swapExactETHForTokens(address _tokenB, uint _minAmount) external payable virtual returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = address(SWAP_BASE_TOKEN);\n        path[1] = _tokenB;\n        return (router.swapExactETHForTokens{value: msg.value}(_minAmount, path, _msgSender(), block.timestamp))[1];\n    }\n\n    function swapTokensForExactETH(address _tokenA, uint _amountInMax, uint _amountOut) external virtual returns (uint _spentTokenAmount) {\n        address account = _msgSender();\n        IERC20Upgradeable(_tokenA).safeTransferFrom(account, address(this), _amountInMax);\n        IERC20Upgradeable(_tokenA).safeApprove(address(router), _amountInMax);\n\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = address(SWAP_BASE_TOKEN);\n        _spentTokenAmount = (router.swapTokensForExactETH(_amountOut, _amountInMax, path, account, block.timestamp))[0];\n        if (_amountInMax > _spentTokenAmount) {\n            IERC20Upgradeable(_tokenA).safeTransfer(account, _amountInMax - _spentTokenAmount);\n        }\n    }\n\n    function swapExactTokensForETH(address _tokenA, uint _amt, uint _minAmount) external virtual returns (uint) {\n        address account = _msgSender();\n        IERC20Upgradeable(_tokenA).safeTransferFrom(account, address(this), _amt);\n        IERC20Upgradeable(_tokenA).safeApprove(address(router), _amt);\n\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = address(SWAP_BASE_TOKEN);\n        return (router.swapExactTokensForETH(_amt, _minAmount, path, account, block.timestamp))[1];\n    }\n\n    function getAmountsInForETH(address _tokenA, uint _amountOut) external view virtual returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = address(SWAP_BASE_TOKEN);\n        return (router.getAmountsIn(_amountOut, path))[0];\n    }\n\n    receive() external payable {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[48] private __gap;\n}\n"
    },
    "interfaces/IUniRouter.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity  0.8.9;\r\n\r\ninterface IUniRouter {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity) ;\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] memory path) external view returns (uint[] memory amounts);\r\n}\r\n"
    },
    "contracts/swap/MaticSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./BasicSwap.sol\";\n\ncontract MaticSwap is BasicSwap {\n}\n"
    },
    "contracts/swap/MaticSwapTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./MaticSwap.sol\";\n\ncontract MaticSwapTest is MaticSwap {\n}\n"
    },
    "contracts/swap/EthSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./BasicSwap.sol\";\n\ncontract EthSwap is BasicSwap {\n}\n"
    },
    "contracts/swap/EthSwapTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./EthSwap.sol\";\n\ncontract EthSwapTest is EthSwap {\n}\n"
    },
    "contracts/swap/BscSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./BasicSwap.sol\";\n\ncontract BscSwap is BasicSwap {\n}\n"
    },
    "contracts/swap/BscSwapTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./BscSwap.sol\";\n\ncontract BscSwapTest is BscSwap {\n}\n"
    },
    "contracts/swap/AvaxSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./vendor/IJoeRouter.sol\";\nimport \"./BasicSwap.sol\";\n\ncontract AvaxSwap is BasicSwap {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    function swapExactETHForTokens(address _tokenB, uint _minAmount) external payable override returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = address(SWAP_BASE_TOKEN);\n        path[1] = address(_tokenB);\n        return (IJoeRouter(address(router)).swapExactAVAXForTokens{value: msg.value}(_minAmount, path, _msgSender(), block.timestamp))[1];\n    }\n\n    function swapTokensForExactETH(address _tokenA, uint _amountInMax, uint _amountOut) external override returns (uint _spentTokenAmount) {\n        address account = _msgSender();\n        IERC20Upgradeable(_tokenA).safeTransferFrom(account, address(this), _amountInMax);\n        IERC20Upgradeable(_tokenA).safeApprove(address(router), _amountInMax);\n\n        address[] memory path = new address[](2);\n        path[0] = address(_tokenA);\n        path[1] = address(SWAP_BASE_TOKEN);\n        _spentTokenAmount = (IJoeRouter(address(router)).swapTokensForExactAVAX(_amountOut, _amountInMax, path, account, block.timestamp))[0];\n        if (_amountInMax > _spentTokenAmount) {\n            IERC20Upgradeable(_tokenA).safeTransfer(account, _amountInMax - _spentTokenAmount);\n        }\n    }\n\n    function swapExactTokensForETH(address _tokenA, uint _amt, uint _minAmount) external override returns (uint) {\n        address account = _msgSender();\n        IERC20Upgradeable(_tokenA).safeTransferFrom(account, address(this), _amt);\n        IERC20Upgradeable(_tokenA).safeApprove(address(router), _amt);\n\n        address[] memory path = new address[](2);\n        path[0] = address(_tokenA);\n        path[1] = address(SWAP_BASE_TOKEN);\n        return (IJoeRouter(address(router)).swapExactTokensForAVAX(_amt, _minAmount, path, account, block.timestamp))[1];\n    }\n}\n"
    },
    "contracts/swap/vendor/IJoeRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IJoeRouter {\n    function swapExactAVAXForTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable returns (uint[] memory amounts);\n\n    function swapTokensForExactAVAX(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactTokensForAVAX(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapAVAXForExactTokens(\n        uint amountOut,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable returns (uint[] memory amounts);\n}\n"
    },
    "contracts/swap/AvaxSwapTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./AvaxSwap.sol\";\n\ncontract AvaxSwapTest is AvaxSwap {\n}\n"
    },
    "contracts/sti/strategy/AvaxSTIStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./BasicSTIStrategy.sol\";\nimport \"../../bni/constant/AvaxConstant.sol\";\nimport \"../../swap/vendor/IJoeRouter.sol\";\nimport \"../../../interfaces/IStVault.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract AvaxSTIStrategy is BasicSTIStrategy {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IStVault public AVAXVault;\n\n    function initialize1(\n        address _admin,\n        address _priceOracle,\n        IStVault _AVAXVault\n    ) public virtual initializer {\n        super.initialize(\n            _admin,\n            _priceOracle,\n            0x60aE616a2155Ee3d9A68541Ba4544862310933d4, // TraderJoe\n            AvaxConstant.WAVAX,\n            AvaxConstant.USDT,\n            Const.NATIVE_ASSET\n        );\n\n        AVAXVault = _AVAXVault;\n    }\n\n    function setStVault(IStVault _AVAXVault) external onlyOwner {\n        AVAXVault = _AVAXVault;\n    }\n\n    function getStVault(address _token) internal view override returns (IStVault stVault) {\n        if (_token == Const.NATIVE_ASSET) {\n            stVault = AVAXVault;\n        }\n    }\n\n    function _swapETH(address _tokenB, uint _amt, uint _minAmount) internal override returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = address(SWAP_BASE_TOKEN);\n        path[1] = _tokenB;\n        return (IJoeRouter(address(router)).swapExactAVAXForTokens{value: _amt}(_minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function _swapForETH(address _tokenA, uint _amt, uint _minAmount) internal override returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = address(SWAP_BASE_TOKEN);\n        return (IJoeRouter(address(router)).swapExactTokensForAVAX(_amt, _minAmount, path, address(this), block.timestamp))[1];\n    }\n}\n"
    },
    "contracts/sti/strategy/BasicSTIStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../../bni/priceOracle/IPriceOracle.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../interfaces/IUniRouter.sol\";\nimport \"../../../interfaces/IStVault.sol\";\nimport \"../../../libs/Const.sol\";\nimport \"../../../libs/Token.sol\";\n\ncontract BasicSTIStrategy is PausableUpgradeable, OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20UpgradeableExt;\n\n    IUniRouter public router;\n    IERC20UpgradeableExt public SWAP_BASE_TOKEN; // It has same role with WETH on Ethereum Swaps. Most of tokens have been paired with this token.\n    IERC20UpgradeableExt public USDT;\n    uint8 usdtDecimals;\n\n    address public admin;\n    address public vault;\n    IPriceOracle public priceOracle;\n\n    address[] public tokens;\n    mapping(address => uint) public pid; // Pool indices in tokens array\n\n    // maps the address to array of the owned tokens, the first key is token address.\n    mapping(address => mapping(address => uint[])) public claimer2ReqIds;\n    // reqId can be owned by only one address at the time, therefore reqId is present in only one of those arrays in the mapping\n    // this mapping stores the index of the reqId in one of those arrays, the first key is token address.\n    mapping(address => mapping(uint => uint)) public reqId2Index;\n\n    event AddToken(address token, uint pid);\n    event RemoveToken(address token, uint pid);\n    event Withdraw(uint sharePerc, uint USDTAmt);\n    event Claim(address claimer, address token, uint tokenAmt, uint USDTAmt);\n    event EmergencyWithdraw(uint USDTAmt);\n\n    modifier onlyVault {\n        require(msg.sender == vault, \"Only vault\");\n        _;\n    }\n\n    function initialize(\n        address _admin,\n        address _priceOracle,\n        address _router, address _SWAP_BASE_TOKEN,\n        address _USDT, address _token0\n    ) public virtual initializer {\n        require(_router != address(0), \"Invalid router\");\n        require(_SWAP_BASE_TOKEN != address(0), \"Invalid SWAP_BASE_TOKEN\");\n        require(_USDT != address(0), \"Invalid USDT\");\n        require(_token0 != address(0), \"Invalid token0\");\n        __Ownable_init();\n\n        admin = _admin;\n        priceOracle = IPriceOracle(_priceOracle);\n        router = IUniRouter(_router);\n        SWAP_BASE_TOKEN = IERC20UpgradeableExt(_SWAP_BASE_TOKEN);\n\n        USDT = IERC20UpgradeableExt(_USDT);\n        usdtDecimals = USDT.decimals();\n        require(usdtDecimals >= 6, \"USDT decimals must >= 6\");\n\n        tokens.push(_token0);\n        updatePid();\n\n        USDT.safeApprove(address(router), type(uint).max);\n        if (_token0 != Const.NATIVE_ASSET) {\n            IERC20UpgradeableExt(_token0).safeApprove(address(router), type(uint).max);\n        }\n    }\n\n    function updatePid() internal {\n        address[] memory _tokens = tokens;\n\n        uint tokenCnt = _tokens.length;\n        for (uint i = 0; i < tokenCnt; i ++) {\n            pid[_tokens[i]] = i;\n        }\n    }\n\n    function getPoolCount() public view returns (uint) {\n        return tokens.length;\n    }\n\n    function getTokens() external view returns (address[] memory) {\n        return tokens;\n    }\n\n    function addToken(address _token) external onlyOwner {\n        uint _pid = pid[_token];\n        require ((_pid == 0 && _token != tokens[0]), \"Already added\");\n\n        tokens.push(_token);\n        _pid = tokens.length-1;\n        pid[_token] = _pid;\n\n        if (_token != Const.NATIVE_ASSET && IERC20UpgradeableExt(_token).allowance(address(this), address(router)) == 0) {\n            IERC20UpgradeableExt(_token).safeApprove(address(router), type(uint).max);\n        }\n        emit AddToken(_token, _pid);\n    }\n\n    function removeToken(uint _pid) external onlyOwner {\n        uint tokenCnt = tokens.length;\n        require(_pid < tokenCnt, \"Invalid pid\");\n        uint pool = _getPoolInUSD(_pid);\n        require(pool == 0, \"Pool is not empty\");\n\n        address _token = tokens[_pid];\n        tokens[_pid] = tokens[tokenCnt-1];\n        tokens.pop();\n\n        pid[_token] = 0;\n        updatePid();\n\n        emit RemoveToken(_token, _pid);\n    }\n\n    /// @param _USDTAmts amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals\n    function invest(address[] memory _tokens, uint[] memory _USDTAmts) external onlyVault {\n        _investInternal(_tokens, _USDTAmts);\n    }\n\n    function _investInternal(address[] memory _tokens, uint[] memory _USDTAmts) internal {\n        uint poolCnt = _tokens.length;\n        uint USDTAmt;\n        uint[] memory USDTAmts = new uint[](tokens.length);\n        for (uint i = 0; i < poolCnt; i ++) {\n            uint amount = _USDTAmts[i];\n            USDTAmt += amount;\n            uint _pid = pid[_tokens[i]];\n            USDTAmts[_pid] += amount;\n        }\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\n\n        _invest(USDTAmts);\n    }\n\n    function _invest(uint[] memory _USDTAmts) internal virtual {\n        uint poolCnt = _USDTAmts.length;\n        for (uint _pid = 0; _pid < poolCnt; _pid ++) {\n            uint USDTAmt = _USDTAmts[_pid];\n            if (USDTAmt == 0) continue;\n\n            address token = tokens[_pid];\n            uint tokenAmt;\n            if (token != address(USDT)) {\n                (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n                (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(token);\n                uint8 tokenDecimals = _assetDecimals(token);\n                uint numerator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\n                uint denominator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\n                uint amountOutMin = USDTAmt * numerator * 85 / (denominator * 100);\n\n                if (token == Const.NATIVE_ASSET) {\n                    tokenAmt = _swapForETH(address(USDT), USDTAmt, amountOutMin);\n                } else if (token == address(SWAP_BASE_TOKEN)) {\n                    tokenAmt = _swap(address(USDT), token, USDTAmt, amountOutMin);\n                } else {\n                    tokenAmt = _swap2(address(USDT), token, USDTAmt, amountOutMin);\n                }\n            } else {\n                tokenAmt = USDTAmt;\n            }\n\n            IStVault stVault = getStVault(token);\n            if (address(stVault) != address(0)) {\n                if (token == Const.NATIVE_ASSET) {\n                    stVault.depositETH{value: tokenAmt}();\n                } else {\n                    stVault.deposit(tokenAmt);\n                }\n            }\n        }\n    }\n\n    function withdrawPerc(address _claimer, uint _sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(_sharePerc <= 1e18, \"Over 100%\");\n        USDTAmt = _withdraw(_claimer, _sharePerc);\n        if (USDTAmt > 0) {\n            USDT.safeTransfer(vault, USDTAmt);\n        }\n        emit Withdraw(_sharePerc, USDTAmt);\n    }\n\n    function _withdraw(address _claimer, uint _sharePerc) internal virtual returns (uint USDTAmt) {\n        uint poolCnt = tokens.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            USDTAmt += _withdrawFromPool(_claimer, i, _sharePerc);\n        }\n    }\n\n    function _withdrawFromPool(address _claimer, uint _pid, uint _sharePerc) internal virtual returns (uint USDTAmt) {\n        address token = tokens[_pid];\n        IStVault stVault = getStVault(token);\n        if (address(stVault) != address(0)) {\n            uint reqId;\n            (USDTAmt, reqId) = _withdrawStVault(stVault, _sharePerc);\n            if (reqId > 0) {\n                addReqId(tokens[_pid], _claimer, reqId);\n            }\n        } else {\n            uint amount = _balanceOf(token, address(this)) * _sharePerc / 1e18;\n            if (0 < amount) {\n                if (token == address(USDT)) {\n                    USDTAmt = amount;\n                } else {\n                    USDTAmt = _swapForUSDT(token, amount);\n                }\n            }\n        }\n    }\n\n    function _withdrawStVault(IStVault _stVault, uint _sharePerc) private returns (uint USDTAmt, uint reqId) {\n        uint amount = _stVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            (uint tokenAmt, uint _reqId) = _stVault.withdraw(amount);\n            if (tokenAmt > 0) {\n                USDTAmt = _swapForUSDT(address(_stVault.token()), tokenAmt);\n            }\n            reqId = _reqId;\n        }\n    }\n\n    function _swapForUSDT(address token, uint amount) internal returns (uint USDTAmt) {\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n        (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(address(token));\n        uint8 tokenDecimals = _assetDecimals(token);\n        uint numerator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\n        uint denominator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\n        uint amountOutMin = amount * numerator * 85 / (denominator * 100);\n\n        if (address(token) == address(Const.NATIVE_ASSET)) {\n            USDTAmt = _swapETH(address(USDT), amount, amountOutMin);\n        } else if (address(token) == address(SWAP_BASE_TOKEN)) {\n            USDTAmt = _swap(address(token), address(USDT), amount, amountOutMin);\n        } else{\n            USDTAmt = _swap2(address(token), address(USDT), amount, amountOutMin);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = _tokenB;\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function _swap2(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](3);\n        path[0] = _tokenA;\n        path[1] = address(SWAP_BASE_TOKEN);\n        path[2] = _tokenB;\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[2];\n    }\n\n    function _swapETH(address _tokenB, uint _amt, uint _minAmount) internal virtual returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = address(SWAP_BASE_TOKEN);\n        path[1] = _tokenB;\n        return (router.swapExactETHForTokens{value: _amt}(_minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function _swapForETH(address _tokenA, uint _amt, uint _minAmount) internal virtual returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = address(SWAP_BASE_TOKEN);\n        return (router.swapExactTokensForETH(_amt, _minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function emergencyWithdraw() external onlyVault {\n        _pause();\n        // 1e18 == 100% of share\n        uint USDTAmt = _withdraw(address(this), 1e18);\n        if (USDTAmt > 0) {\n            USDT.safeTransfer(vault, USDTAmt);\n        }\n        emit EmergencyWithdraw(USDTAmt);\n    }\n\n    function claimEmergencyWithdrawal() external onlyVault {\n        _claimAllAndTransfer(address(this));\n    }\n\n    function getEmergencyWithdrawalUnbonded() public view returns (\n        uint waitingInUSD, uint unbondedInUSD, uint waitForTs\n    ) {\n        return _getAllUnbonded(address(this));\n    }\n\n    /// @param _USDTAmts amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals\n    function reinvest(address[] memory _tokens, uint[] memory _USDTAmts) external onlyVault {\n        _unpause();\n        _investInternal(_tokens, _USDTAmts);\n    }\n\n    function addReqId(address _token, address _claimer, uint _reqId) internal {\n        uint[] storage reqIds = claimer2ReqIds[_token][_claimer];\n\n        reqIds.push(_reqId);\n        reqId2Index[_token][_reqId] = reqIds.length - 1;\n    }\n\n    function removeReqId(address _token, address _claimer, uint _reqId) internal {\n        uint[] storage reqIds = claimer2ReqIds[_token][_claimer];\n        uint length = reqIds.length;\n        uint reqIdIndex = reqId2Index[_token][_reqId];\n\n        if (reqIdIndex != length-1) {\n            uint256 lastReqId = reqIds[length - 1];\n            reqIds[reqIdIndex] = lastReqId;\n            reqId2Index[_token][lastReqId] = reqIdIndex;\n        }\n\n        reqIds.pop();\n        delete reqId2Index[_token][_reqId];\n    }\n\n    function removeReqIds(address _token, address _claimer, uint[] memory _reqIds) internal {\n        uint[] storage reqIds = claimer2ReqIds[_token][_claimer];\n        uint length = reqIds.length;\n\n        for (uint i = 0; i < _reqIds.length; i++) {\n            uint reqId = _reqIds[i];\n            uint reqIdIndex = reqId2Index[_token][reqId];\n\n            if (reqIdIndex != length-1) {\n                uint256 lastReqId = reqIds[length - 1];\n                reqIds[reqIdIndex] = lastReqId;\n                reqId2Index[_token][lastReqId] = reqIdIndex;\n            }\n\n            reqIds.pop();\n            length --;\n            delete reqId2Index[_token][reqId];\n        }\n    }\n\n    function getStVault(address _token) internal view virtual returns (IStVault stVault) {\n    }\n\n    ///@return waiting is token amount that is not unbonded.\n    ///@return waitingInUSD is USD value of token amount that is not unbonded.\n    ///@return unbonded is token amount that is unbonded.\n    ///@return unbondedInUSD is USD value of token amount that is unbonded.\n    ///@return waitForTs is timestamp to wait to the next claim.\n    function getPoolUnbonded(address _claimer, uint _pid) public view returns (\n        uint waiting, uint waitingInUSD,\n        uint unbonded, uint unbondedInUSD,\n        uint waitForTs\n    ) {\n        if (_pid < tokens.length) {\n            address token = tokens[_pid];\n            IStVault stVault = getStVault(token);\n            if (address(stVault) != address(0)) {\n                uint[] memory reqIds = claimer2ReqIds[token][_claimer];\n\n                for (uint i = 0; i < reqIds.length; i ++) {\n                    uint reqId = reqIds[i];\n                    (bool _claimable, uint _tokenAmt,,, uint _waitForTs) = stVault.getWithdrawRequest(reqId);\n\n                    if (_claimable) {\n                        unbonded += _tokenAmt;\n                    } else {\n                        waiting += _tokenAmt;\n                        if (waitForTs == 0 || waitForTs > _waitForTs) waitForTs = _waitForTs;\n                    }\n                }\n\n                if (waiting > 0) waitingInUSD = getValueInUSD(token, waiting);\n                if (unbonded > 0) unbondedInUSD = getValueInUSD(token, unbonded);\n            }\n        }\n    }\n\n    function getPoolsUnbonded(address _claimer) external view returns (\n        address[] memory,\n        uint[] memory waitings,\n        uint[] memory waitingInUSDs,\n        uint[] memory unbondeds,\n        uint[] memory unbondedInUSDs,\n        uint[] memory waitForTses\n    ) {\n        uint poolCnt = tokens.length;\n        waitings = new uint[](poolCnt);\n        waitingInUSDs = new uint[](poolCnt);\n        unbondeds = new uint[](poolCnt);\n        unbondedInUSDs = new uint[](poolCnt);\n        waitForTses = new uint[](poolCnt);\n\n        for (uint _pid = 0; _pid < poolCnt; _pid++) {\n            (uint _waiting, uint _waitingInUSD, uint _unbonded, uint _unbondedInUSD, uint _waitForTs) = getPoolUnbonded(_claimer, _pid);\n            waitings[_pid] = _waiting;\n            waitingInUSDs[_pid] = _waitingInUSD;\n            unbondeds[_pid] = _unbonded;\n            unbondedInUSDs[_pid] = _unbondedInUSD;\n            waitForTses[_pid] = _waitForTs;\n        }\n        return (tokens, waitings, waitingInUSDs, unbondeds, unbondedInUSDs, waitForTses);\n    }\n\n    function _getAllUnbonded(address _claimer) internal view returns (\n        uint waitingInUSD, uint unbondedInUSD, uint waitForTs\n    ) {\n        uint poolCnt = tokens.length;\n        for (uint _pid = 0; _pid < poolCnt; _pid ++) {\n            (, uint _waitingInUSD,, uint _unbondedInUSD, uint _waitForTs) = getPoolUnbonded(_claimer, _pid);\n            waitingInUSD += _waitingInUSD;\n            unbondedInUSD += _unbondedInUSD;\n            if (waitingInUSD > 0) {\n                if (waitForTs == 0 || waitForTs > _waitForTs) {\n                    waitForTs = _waitForTs;\n                }\n            }\n        }\n    }\n\n    function getAllUnbonded(address _claimer) external view returns (\n        uint waitingInUSD, uint unbondedInUSD, uint waitForTs\n    ) {\n        return _getAllUnbonded(_claimer);\n    }\n\n    function claim(address _claimer) external onlyVault returns (uint USDTAmt) {\n        USDTAmt = _claimAllAndTransfer(_claimer);\n    }\n\n    function _claimAllAndTransfer(address _claimer) internal returns (uint USDTAmt) {\n        uint poolCnt = tokens.length;\n        for (uint _pid = 0; _pid < poolCnt; _pid ++) {\n            USDTAmt += _claim(_claimer, _pid);\n        }\n        if (USDTAmt > 0) {\n            USDT.safeTransfer(vault, USDTAmt);\n        }\n    }\n\n    function _claim(address _claimer, uint _pid) internal returns (uint USDTAmt) {\n        address token = tokens[_pid];\n        IStVault stVault = getStVault(token);\n        if (address(stVault) != address(0)) {\n            uint[] memory reqIds = claimer2ReqIds[token][_claimer];\n\n            (uint amount, uint claimedCount, bool[] memory claimed) = stVault.claimMulti(reqIds);\n            if (amount > 0) {\n                uint[] memory claimedReqIds = new uint[](claimedCount);\n                uint index;\n                for (uint i = 0; i < reqIds.length; i ++) {\n                    if (claimed[i]) {\n                        claimedReqIds[index++] = reqIds[i];\n                    }\n                }\n                removeReqIds(token, _claimer, claimedReqIds);\n\n                USDTAmt = _swapForUSDT(address(token), amount);\n                emit Claim(_claimer, token, amount, USDTAmt);\n            }\n        }\n    }\n\n    function _balanceOf(address _token, address _account) internal view returns (uint) {\n        return (_token != Const.NATIVE_ASSET)\n            ? IERC20Upgradeable(_token).balanceOf(_account)\n            : _account.balance;\n    }\n\n    function _assetDecimals(address _asset) internal view returns (uint8 _decimals) {\n        _decimals = (_asset == Const.NATIVE_ASSET) ? 18 : IERC20UpgradeableExt(_asset).decimals();\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        admin = _admin;\n    }\n\n    function setVault(address _vault) external onlyOwner {\n        require(vault == address(0), \"Vault set\");\n        vault = _vault;\n    }\n\n    /// @return the price of USDT in USD.\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\n        return priceOracle.getAssetPrice(address(USDT));\n    }\n\n    function getEachPoolInUSD() public view returns (address[] memory, uint[] memory pools) {\n        return (tokens, _getEachPoolInUSD());\n    }\n\n    function _getEachPoolInUSD() private view returns (uint[] memory pools) {\n        uint poolCnt = tokens.length;\n        pools = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            pools[i] = _getPoolInUSD(i);\n        }\n    }\n\n    function _getPoolInUSD(uint _pid) internal view virtual returns (uint pool) {\n        address token = tokens[_pid];\n        IStVault stVault = getStVault(token);\n        if (address(stVault) != address(0)) {\n            pool = getStVaultPoolInUSD(stVault);\n        } else {\n            uint amount = _balanceOf(token, address(this));\n            if (0 < amount) {\n                pool = getValueInUSD(token, amount);\n            }\n        }\n    }\n\n    function getStVaultPoolInUSD(IStVault _stVault) internal view returns (uint) {\n        uint stVaultTotalSupply = _stVault.totalSupply();\n        return stVaultTotalSupply == 0 ? 0 : _stVault.getAllPoolInUSD() * _stVault.balanceOf(address(this)) / stVaultTotalSupply;\n    }\n\n    ///@return the value in USD. it's scaled by 1e18;\n    function getValueInUSD(address _asset, uint _amount) internal view returns (uint) {\n        (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(_asset);\n        uint8 _decimals = _assetDecimals(_asset);\n        return Token.changeDecimals(_amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint[] memory pools = _getEachPoolInUSD();\n        uint poolCnt = pools.length;\n        uint allPool;\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n\n        if (paused()) {\n            (uint waitingInUSD, uint unbondedInUSD,) = getEmergencyWithdrawalUnbonded();\n            allPool += (waitingInUSD + unbondedInUSD);\n        }\n        return allPool;\n    }\n\n    function getCurrentTokenCompositionPerc() public view returns (address[] memory, uint[] memory percentages) {\n        uint[] memory pools = _getEachPoolInUSD();\n        uint poolCnt = pools.length;\n        uint allPool;\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n\n        uint defaultTargetPerc = poolCnt == 0 ? 0 : Const.DENOMINATOR / poolCnt;\n        percentages = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            percentages[i] = allPool == 0 ? defaultTargetPerc : pools[i] * Const.DENOMINATOR / allPool;\n        }\n        return (tokens, percentages);\n    }\n\n    function getAPR() public view virtual returns (uint) {\n        (address[] memory _tokens, uint[] memory perc) = getCurrentTokenCompositionPerc();\n        uint allApr;\n        uint poolCnt = _tokens.length;\n        for (uint _pid = 0; _pid < poolCnt; _pid ++) {\n            IStVault stVault = getStVault(tokens[_pid]);\n            if (address(stVault) != address(0)) {\n                allApr += stVault.getAPR() * perc[_pid];\n            }\n        }\n        return (allApr / Const.DENOMINATOR);\n    }\n\n    receive() external payable {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[39] private __gap;\n}\n"
    },
    "contracts/sti/strategy/AvaxSTIStrategyTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./AvaxSTIStrategy.sol\";\nimport \"../../bni/constant/AvaxConstantTest.sol\";\nimport \"../../../interfaces/IStVault.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract AvaxSTIStrategyTest is AvaxSTIStrategy {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    function initialize1(\n        address _admin,\n        address _priceOracle,\n        IStVault _AVAXVault\n    ) public override initializer {\n        super.initialize(\n            _admin,\n            _priceOracle,\n            0xd7f655E3376cE2D7A2b08fF01Eb3B1023191A901, // TraderJoe\n            AvaxConstantTest.WAVAX,\n            AvaxConstantTest.USDT,\n            Const.NATIVE_ASSET\n        );\n\n        AVAXVault = _AVAXVault;\n    }\n}\n"
    },
    "contracts/bni/priceOracle/MaticPriceOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"./PriceOracle.sol\";\nimport \"../constant/MaticConstant.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract MaticPriceOracle is PriceOracle {\n\n    function initialize() public virtual override initializer {\n        super.initialize();\n\n        address[] memory assets = new address[](3);\n        assets[0] = MaticConstant.USDT;\n        assets[1] = MaticConstant.WMATIC;\n        assets[2] = MaticConstant.USDC;\n        address[] memory sources = new address[](3);\n        sources[0] = 0x0A6513e40db6EB1b165753AD52E80663aeA50545;\n        sources[1] = 0xAB594600376Ec9fD91F8e885dADF0CE036862dE0;\n        sources[2] = 0xfE4A8cc5b5B2366C1B58Bea3858e81843581b2F7;\n\n        setAssetSources(assets, sources);\n    }\n\n    function getAssetPrice(address asset) public virtual override view returns (uint price, uint8 decimals) {\n        if (asset == Const.NATIVE_ASSET) {\n            asset = MaticConstant.WMATIC;\n        }\n        return super.getAssetPrice(asset);\n    }\n}\n"
    },
    "contracts/bni/priceOracle/PriceOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./IPriceOracle.sol\";\n\ninterface IChainlinkAggregator {\n    function decimals() external view returns (uint8);\n    function description() external view returns (string memory);\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId) external view returns (\n        uint80 roundId,\n        int256 answer,\n        uint256 startedAt,\n        uint256 updatedAt,\n        uint80 answeredInRound\n    );\n\n    function latestRoundData() external view returns (\n        uint80 roundId,\n        int256 answer,\n        uint256 startedAt,\n        uint256 updatedAt,\n        uint80 answeredInRound\n    );\n\n    function latestAnswer() external view returns (int256);\n}\n\ncontract PriceOracle is IPriceOracle, OwnableUpgradeable {\n    \n    // Map of asset price sources (asset => priceSource)\n    mapping(address => IChainlinkAggregator) internal assetsSources;\n\n    function initialize() public virtual initializer {\n        __Ownable_init();\n    }\n\n    function setAssetSources(address[] memory assets, address[] memory sources) public override onlyOwner {\n        uint count = assets.length;\n        require(count == sources.length, \"Not match array length\");\n        for (uint i = 0; i < count; i ++) {\n            assetsSources[assets[i]] = IChainlinkAggregator(sources[i]);\n        }\n    }\n\n    function getSourceOfAsset(address asset) public override view returns (address) {\n        return address(assetsSources[asset]);\n    }\n\n    function getAssetsPrices(address[] memory assets) public override view returns (uint[] memory prices, uint8[] memory decimalsArray) {\n        uint count = assets.length;\n        prices = new uint[](count);\n        decimalsArray = new uint8[](count);\n        for (uint i = 0; i < count; i ++) {\n            (uint price, uint8 decimals) = getAssetPrice(assets[i]);\n            prices[i] = price;\n            decimalsArray[i] = decimals;\n        }\n    }\n\n    function getAssetPrice(address asset) public virtual override view returns (uint price, uint8 decimals) {\n        IChainlinkAggregator source = assetsSources[asset];\n        if (address(source) != address(0)) {\n            int256 _price = source.latestAnswer();\n            if (_price > 0) {\n                price = uint(_price);\n            }\n            decimals = source.decimals();\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/bni/priceOracle/MaticPriceOracleTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"./MaticPriceOracle.sol\";\nimport \"../constant/MaticConstantTest.sol\";\n\ncontract MaticPriceOracleTest is MaticPriceOracle {\n\n    function initialize() public override initializer {\n        super.initialize();\n\n        address[] memory assets = new address[](3);\n        assets[0] = MaticConstantTest.USDT;\n        assets[1] = MaticConstantTest.WMATIC;\n        assets[2] = MaticConstantTest.USDC;\n        address[] memory sources = new address[](3);\n        sources[0] = 0x92C09849638959196E976289418e5973CC96d645;\n        sources[1] = 0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada;\n        sources[2] = 0x572dDec9087154dC5dfBB1546Bb62713147e0Ab0;\n\n        setAssetSources(assets, sources);\n    }\n\n    function getAssetPrice(address asset) public override view returns (uint price, uint8 decimals) {\n        if (asset == Const.NATIVE_ASSET) {\n            asset = MaticConstantTest.WMATIC;\n        }\n        return super.getAssetPrice(asset);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "contracts/stVaults/BasicStVault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\nimport \"../bni/priceOracle/IPriceOracle.sol\";\nimport \"../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../interfaces/IStVault.sol\";\nimport \"../../interfaces/IStVaultNFT.sol\";\nimport \"../../libs/Const.sol\";\nimport \"../../libs/Token.sol\";\n\ncontract BasicStVault is IStVault,\n    ERC20Upgradeable,\n    PausableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    OwnableUpgradeable\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint public yieldFee;\n    uint public watermark;\n    uint public fees;\n\n    address public treasuryWallet;\n    address public admin;\n    IPriceOracle public priceOracle;\n    IStVaultNFT public nft;\n\n    IERC20Upgradeable public token;\n    IERC20Upgradeable public stToken;\n    uint8 internal tokenDecimals;\n    uint8 internal stTokenDecimals;\n    uint internal oneToken;\n    uint internal oneStToken;\n\n    uint public bufferedDeposits;\n    uint public pendingWithdrawals;\n    uint public pendingRedeems;\n    uint internal emergencyUnbondings;\n\n    uint public unbondingPeriod;\n    uint public minInvestAmount;\n    uint public minRedeemAmount;\n\n    uint public lastInvestTs;\n    uint public investInterval;\n    uint public lastRedeemTs;\n    uint public redeemInterval;\n    uint public lastCollectProfitTs;\n    uint public oneEpoch;\n\n    mapping(address => uint) depositedBlock;\n    mapping(uint => WithdrawRequest) nft2WithdrawRequest;\n\n    uint baseApr;\n    uint baseTokenRate;\n    uint baseAprLastUpdate;\n\n    event Deposit(address indexed user, uint indexed amount, uint indexed shares);\n    event Withdraw(address indexed user, uint shares, uint indexed amount, uint reqId, uint indexed pendingAmount);\n    event Claim(address indexed user, uint indexed reqId, uint indexed amount);\n    event ClaimMulti(address indexed user, uint indexed amount, uint indexed claimedCount);\n    event Invest(uint indexed amount);\n    event Redeem(uint indexed stAmount);\n    event EmergencyWithdraw(uint indexed stAmount);\n    event CollectProfitAndUpdateWatermark(uint indexed currentWatermark, uint indexed lastWatermark, uint indexed fee);\n    event AdjustWatermark(uint indexed currentWatermark, uint indexed lastWatermark);\n    event TransferredOutFees(uint indexed fees, address indexed token);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(\n        string memory _name, string memory _symbol,\n        address _treasury, address _admin,\n        address _priceOracle,\n        address _token, address _stToken\n    ) public virtual initializer {\n        require(_treasury != address(0), \"treasury invalid\");\n\n        __Ownable_init_unchained();\n        __ReentrancyGuard_init_unchained();\n        __ERC20_init_unchained(_name, _symbol);\n\n        yieldFee = 2000; //20%\n        treasuryWallet = _treasury;\n        admin = _admin;\n        priceOracle = IPriceOracle(_priceOracle);\n\n        token = IERC20Upgradeable(_token);\n        stToken = IERC20Upgradeable(_stToken);\n        tokenDecimals = _assetDecimals(address(token));\n        stTokenDecimals = IERC20UpgradeableExt(address(stToken)).decimals();\n        oneToken = 10**tokenDecimals;\n        oneStToken = 10**stTokenDecimals;\n\n        minInvestAmount = 1;\n        minRedeemAmount = 1;\n\n        _updateApr();\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < 3001, \"Yield Fee cannot > 30%\");\n        yieldFee = _yieldFeePerc;\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        admin = _newAdmin;\n    }\n\n    function setNFT(address _nft) external onlyOwner {\n        require(address(nft) == address(0), \"Already set\");\n        nft = IStVaultNFT(_nft);\n    }\n\n    function setStakingPeriods(\n        uint _unbondingPeriod,\n        uint _investInterval,\n        uint _redeemInterval,\n        uint _oneEpoch\n    ) external onlyOwner {\n        unbondingPeriod = _unbondingPeriod;\n        investInterval = _investInterval;\n        redeemInterval = _redeemInterval;\n        oneEpoch = _oneEpoch;\n    }\n\n    function setStakingAmounts(uint _minInvestAmount, uint _minRedeemAmount) external virtual onlyOwner {\n        require(_minInvestAmount > 0, \"minInvestAmount must be > 0\");\n        require(_minRedeemAmount > 0, \"minRedeemAmount must be > 0\");\n        minInvestAmount = _minInvestAmount;\n        minRedeemAmount = _minRedeemAmount;\n    }\n\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        _deposit(msg.sender, _amount);\n    }\n\n    function depositETH() external payable nonReentrant whenNotPaused{\n        _deposit(msg.sender, msg.value);\n    }\n\n    function _deposit(address _account, uint _amount) internal {\n        require(_amount > 0, \"Invalid amount\");\n        depositedBlock[_account] = block.number;\n\n        if (address(token) != Const.NATIVE_ASSET) {\n            token.safeTransferFrom(_account, address(this), _amount);\n        } else {\n            // The native asset is already received.\n        }\n        bufferedDeposits += _amount;\n\n        uint pool = getAllPool() - _amount;\n        uint _totalSupply = totalSupply();\n        uint _shares = (pool == 0 || _totalSupply == 0) ? _amount : _amount * _totalSupply / pool;\n\n        _mint(_account, _shares);\n        adjustWatermark(_amount, true);\n        emit Deposit(_account, _amount, _shares);\n    }\n\n    function withdraw(uint _shares) external nonReentrant returns (uint _amount, uint _reqId) {\n        require(_shares > 0, \"Invalid Amount\");\n        require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        uint withdrawAmt = getPoolByShares(_shares);\n        _burn(msg.sender, _shares);\n        adjustWatermark(withdrawAmt, false);\n\n        uint _bufferedDeposits = getBufferedDeposits();\n        uint _fees = fees;\n        uint _buffered = (_bufferedDeposits <= _fees) ? 0 : _bufferedDeposits - fees;\n\n        if (_buffered >= withdrawAmt) {\n            _amount = withdrawAmt;\n            withdrawAmt = 0;\n        } else {\n            _amount = _buffered;\n            withdrawAmt -= _buffered;\n        }\n\n        bufferedDeposits = _bufferedDeposits - _amount;\n\n        if (withdrawAmt > 0) {\n            uint tokenPerStToken = getPooledTokenByStToken(oneStToken);\n            uint stTokenAmt = oneStToken * withdrawAmt / tokenPerStToken;\n            (uint withdrawnStAmount, uint withdrawnAmount) = withdrawStToken(stTokenAmt);\n            if (withdrawnStAmount > 0) {\n                _amount += withdrawnAmount;\n                stTokenAmt -= withdrawnStAmount;\n            }\n            withdrawAmt = tokenPerStToken * stTokenAmt / oneStToken;\n\n            if (stTokenAmt > 0) {\n                pendingWithdrawals += withdrawAmt;\n                if (paused() == false) {\n                    pendingRedeems += stTokenAmt;\n                } else {\n                    // We reduce the emergency bonding because the share is burnt.\n                    uint _emergencyUnbondings = getEmergencyUnbondings();\n                    emergencyUnbondings = (_emergencyUnbondings <= stTokenAmt) ? 0 : _emergencyUnbondings - stTokenAmt;\n                }\n\n                _reqId = nft.mint(msg.sender);\n                nft2WithdrawRequest[_reqId] = WithdrawRequest({\n                    tokenAmt: withdrawAmt,\n                    stTokenAmt: stTokenAmt,\n                    requestTs: block.timestamp\n                });\n            }\n        }\n\n        if (_amount > 0) {\n            _transferOutToken(msg.sender, _amount);\n        }\n        emit Withdraw(msg.sender, _shares, _amount, _reqId, withdrawAmt);\n    }\n\n    function withdrawStToken(uint _stAmountToWithdraw) internal virtual returns (\n        uint _withdrawnStAmount,\n        uint _withdrawnAmount\n    ) {\n    }\n\n    function claim(uint _reqId) external nonReentrant returns (uint _amount) {\n        require(nft.isApprovedOrOwner(msg.sender, _reqId), \"Not owner\");\n        WithdrawRequest memory usersRequest = nft2WithdrawRequest[_reqId];\n\n        require(block.timestamp >= (usersRequest.requestTs + unbondingPeriod), \"Not able to claim yet\");\n\n        uint tokenAmt = usersRequest.tokenAmt;\n        _amount = _getClaimableAmount(bufferedWithdrawals(), tokenAmt);\n        require(_amount > 0, \"No enough token\");\n\n        nft.burn(_reqId);\n        pendingWithdrawals -= tokenAmt;\n\n        _transferOutToken(msg.sender, _amount);\n        emit Claim(msg.sender, _reqId, _amount);\n    }\n\n    function claimMulti(uint[] memory _reqIds) external nonReentrant returns (\n        uint _amount,\n        uint _claimedCount,\n        bool[] memory _claimed\n    ) {\n        uint buffered = bufferedWithdrawals();\n        uint amount;\n        uint length = _reqIds.length;\n        _claimed = new bool[](length);\n\n        for (uint i = 0; i < length; i++) {\n            uint _reqId = _reqIds[i];\n            if (nft.isApprovedOrOwner(msg.sender, _reqId) == false) continue;\n\n            WithdrawRequest memory usersRequest = nft2WithdrawRequest[_reqId];\n            if (block.timestamp < (usersRequest.requestTs + unbondingPeriod)) continue;\n\n            uint tokenAmt = usersRequest.tokenAmt;\n            amount = _getClaimableAmount(buffered, tokenAmt);\n            if (amount == 0) continue;\n\n            _amount += amount;\n            buffered -= amount;\n            pendingWithdrawals -= tokenAmt;\n\n            nft.burn(_reqId);\n            _claimedCount ++;\n            _claimed[i] = true;\n        }\n\n        if (_amount > 0) {\n            _transferOutToken(msg.sender, _amount);\n            emit ClaimMulti(msg.sender, _amount, _claimedCount);\n        }\n    }\n\n    function invest() external onlyOwnerOrAdmin whenNotPaused {\n        _investInternal();\n    }\n\n    function _investInternal() internal {\n        _collectProfitAndUpdateWatermark();\n        uint _buffered = _transferOutFees();\n        if (_buffered >= minInvestAmount && block.timestamp >= (lastInvestTs + investInterval)) {\n            uint _invested = _invest(_buffered);\n            bufferedDeposits = _buffered - _invested;\n            lastInvestTs = block.timestamp;\n            emit Invest(_invested);\n        }\n    }\n\n    function _invest(uint _amount) internal virtual returns (uint _invested) {}\n\n    function redeem() external onlyOwnerOrAdmin whenNotPaused {\n        uint _pendingRedeems = pendingRedeems;\n        require(_pendingRedeems >= minRedeemAmount, \"too small\");\n        require(block.timestamp >= (lastRedeemTs + redeemInterval), \"Not able to redeem yet\");\n\n        uint redeemed = _redeem(_pendingRedeems);\n        pendingRedeems -= redeemed;\n        lastRedeemTs = block.timestamp;\n        emit Redeem(redeemed);\n    }\n\n    function _redeem(uint _stAmount) internal virtual returns (uint _redeemed) {}\n\n    function claimUnbonded() external onlyOwnerOrAdmin {\n        _claimUnbonded();\n    }\n\n    function _claimUnbonded() internal virtual {}\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\n        _pause();\n        _yield();\n\n        _emergencyWithdrawInternal();\n    }\n\n    function _emergencyWithdrawInternal() internal {\n        if (block.timestamp >= (lastRedeemTs + redeemInterval)) {\n            uint _pendingRedeems = pendingRedeems;\n            uint redeemed = _emergencyWithdraw(_pendingRedeems);\n            pendingRedeems = (_pendingRedeems <= redeemed) ? 0 : _pendingRedeems - redeemed;\n            lastRedeemTs = block.timestamp;\n            emit EmergencyWithdraw(redeemed);\n        }\n    }\n\n    function _emergencyWithdraw(uint _pendingRedeems) internal virtual returns (uint _redeemed) {}\n\n    function emergencyPendingRedeems() external view returns (uint _redeems) {\n        if (paused()) {\n            _redeems = stToken.balanceOf(address(this));\n        }\n    }\n\n    function emergencyRedeem() external onlyOwnerOrAdmin whenPaused {\n        _emergencyWithdrawInternal();\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        require(getEmergencyUnbondings() == 0, \"Emergency unbonding is not finished\");\n        require(getTokenUnbonded() == 0, \"claimUnbonded should be called\");\n        _unpause();\n\n        emergencyUnbondings = 0;\n        _investInternal();\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        _yield();\n    }\n\n    function _yield() internal virtual {}\n\n    function collectProfitAndUpdateWatermark() external onlyOwnerOrAdmin whenNotPaused {\n        _collectProfitAndUpdateWatermark();\n    }\n\n    function _collectProfitAndUpdateWatermark() private {\n        uint currentWatermark = getAllPool();\n        uint lastWatermark = watermark;\n        uint fee;\n        if (currentWatermark > lastWatermark) {\n            uint profit = currentWatermark - lastWatermark;\n            fee = profit * yieldFee / Const.DENOMINATOR;\n            fees += fee;\n            watermark = currentWatermark - fee;\n        }\n        lastCollectProfitTs = block.timestamp;\n        emit CollectProfitAndUpdateWatermark(currentWatermark, lastWatermark, fee);\n    }\n\n    /// @param signs True for positive, false for negative\n    function adjustWatermark(uint amount, bool signs) private {\n        uint lastWatermark = watermark;\n        watermark = signs == true\n                    ? watermark + amount\n                    : (watermark > amount) ? watermark - amount : 0;\n        emit AdjustWatermark(watermark, lastWatermark);\n    }\n\n    function withdrawFees() external onlyOwnerOrAdmin {\n        _transferOutFees();\n    }\n\n    function _transferOutFees() internal returns (uint _tokenAmt) {\n        _tokenAmt = getBufferedDeposits();\n        uint _fees = fees;\n        if (_fees != 0 && _tokenAmt != 0) {\n            uint feeAmt = _fees;\n            if (feeAmt < _tokenAmt) {\n                _fees = 0;\n                _tokenAmt -= feeAmt;\n            } else {\n                _fees -= _tokenAmt;\n                feeAmt = _tokenAmt;\n                _tokenAmt = 0;\n            }\n            fees = _fees;\n            bufferedDeposits = _tokenAmt;\n\n            _transferOutToken(treasuryWallet, feeAmt);\n            emit TransferredOutFees(feeAmt, address(token)); // Decimal follows token\n        }\n    }\n\n    function _transferOutToken(address _to, uint _amount) internal {\n        (address(token) != Const.NATIVE_ASSET)\n            ? token.safeTransfer(_to, _amount)\n            : Token.safeTransferETH(_to, _amount);\n    }\n\n    function _tokenBalanceOf(address _account) internal view returns (uint) {\n        return (address(token) != Const.NATIVE_ASSET)\n            ? token.balanceOf(_account)\n            : _account.balance;\n    }\n\n    function _assetDecimals(address _asset) internal view returns (uint8 _decimals) {\n        _decimals = (_asset == Const.NATIVE_ASSET) ? 18 : IERC20UpgradeableExt(_asset).decimals();\n    }\n\n    function _getFreeBufferedDeposits() internal view returns (uint _buffered) {\n        uint balance = _tokenBalanceOf(address(this));\n        uint _pendingWithdrawals = pendingWithdrawals;\n        // While unbonding, the balance could be less than pendingWithdrawals.\n        // After unbonded, the balance could be greater than pendingWithdrawals\n        //  because the rewards are accumulated in unbonding period on some staking pools.\n        //  In this case, the _buffered can be greater than bufferedDeposits.\n        // And also if the emergency withdrawal is unbonded, the _buffered will be greater than bufferedDeposits.\n        _buffered = (balance > _pendingWithdrawals) ? balance - _pendingWithdrawals : 0;\n    }\n\n    function getBufferedDeposits() public virtual view returns (uint) {\n        return MathUpgradeable.max(bufferedDeposits, _getFreeBufferedDeposits());\n    }\n\n    function bufferedWithdrawals() public view returns (uint) {\n        return _tokenBalanceOf(address(this)) - bufferedDeposits;\n    }\n\n    function getEmergencyUnbondings() public virtual view returns (uint) {\n        return emergencyUnbondings;\n    }\n\n    function getInvestedStTokens() public virtual view returns (uint _stAmount) {\n        return 0;\n    }\n\n    ///@param _amount Amount of tokens\n    function getStTokenByPooledToken(uint _amount) public virtual view returns(uint) {\n        return Token.changeDecimals(_amount, tokenDecimals, stTokenDecimals);\n    }\n\n    ///@param _stAmount Amount of stTokens\n    function getPooledTokenByStToken(uint _stAmount) public virtual view returns(uint) {\n        return _stAmount * oneToken / getStTokenByPooledToken(oneToken);\n    }\n\n    ///@dev it doesn't include the unbonding stTokens according to the burnt shares.\n    function getAllPool() public virtual view returns (uint _pool) {\n        if (paused() == false) {\n            uint stBalance = stToken.balanceOf(address(this))\n                            + getInvestedStTokens()\n                            - pendingRedeems;\n            if (stBalance > 0) {\n                _pool = getPooledTokenByStToken(stBalance);\n            }\n            _pool += bufferedDeposits;\n            _pool -= fees;\n        } else {\n            uint stBalance = stToken.balanceOf(address(this))\n                            + getInvestedStTokens()\n                            + getEmergencyUnbondings()\n                            - pendingRedeems;\n            if (stBalance > 0) {\n                _pool = getPooledTokenByStToken(stBalance);\n            }\n            // If the emergency withdrawal is unbonded,\n            //  then getEmergencyUnbondings() is less than emergencyUnbondings,\n            //  and _getFreeBufferedDeposits will be greater than bufferedDeposits.\n            _pool += _getFreeBufferedDeposits();\n            _pool -= fees;\n        }\n    }\n\n    function getSharesByPool(uint _amount) public view returns (uint) {\n        uint pool = getAllPool();\n        return (pool == 0) ? _amount : _amount * totalSupply() / pool;\n    }\n\n    function getPoolByShares(uint _shares) public view returns (uint) {\n        uint _totalSupply = totalSupply();\n        return (_totalSupply == 0) ? _shares : _shares * getAllPool() / _totalSupply;\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint pool = getAllPool();\n        return getValueInUSD(address(token), pool);\n    }\n\n    ///@return the value in USD. it's scaled by 1e18;\n    function getValueInUSD(address _asset, uint _amount) internal view returns (uint) {\n        (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(_asset);\n        uint8 _decimals = _assetDecimals(_asset);\n        return Token.changeDecimals(_amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\n    }\n\n    ///@notice Returns the pending rewards in USD.\n    function getPendingRewards() public virtual view returns (uint) {\n        return 0;\n    }\n\n    function getAPR() public virtual view returns (uint) {\n        (uint _baseApr,,) = getBaseApr();\n        return _baseApr;\n    }\n\n    function resetApr() external onlyOwner {\n        _resetApr();\n        _updateApr();\n    }\n\n    function _resetApr() internal virtual {\n        baseApr = 0;\n        baseTokenRate = 0;\n        baseAprLastUpdate = 0;\n    }\n\n    function _updateApr() internal virtual {\n        (uint _baseApr, uint _baseTokenRate, bool _update) = getBaseApr();\n        if (_update) {\n            baseApr = _baseApr;\n            baseTokenRate = _baseTokenRate;\n            baseAprLastUpdate = block.timestamp;\n        }\n    }\n\n    function getBaseApr() public view returns (uint, uint, bool) {\n        uint _baseApr = baseApr;\n        uint _baseTokenRate = baseTokenRate;\n        uint _baseAprLastUpdate = baseAprLastUpdate;\n\n        if (_baseApr == 0 || (_baseAprLastUpdate + 1 weeks) <= block.timestamp) {\n            uint newTokenRate = getPoolByShares(1e18);\n            if (0 < _baseTokenRate && _baseTokenRate < newTokenRate) {\n                uint newApr = (newTokenRate-_baseTokenRate) * Const.YEAR_IN_SEC * Const.APR_SCALE\n                            / (_baseTokenRate * (block.timestamp-_baseAprLastUpdate));\n                return (newApr, newTokenRate, true);\n            } else {\n                return (0, newTokenRate, true);\n            }\n        } else {\n            return (_baseApr, _baseTokenRate, false);\n        }\n    }\n\n    function getBaseAprData() public view returns (uint, uint, uint) {\n        return (baseApr, baseTokenRate, baseAprLastUpdate);\n    }\n\n    function getWithdrawRequest(uint _reqId) external view returns (\n        bool _claimable,\n        uint _tokenAmt, uint _stTokenAmt,\n        uint _requestTs, uint _waitForTs\n    ) {\n        WithdrawRequest memory usersRequest = nft2WithdrawRequest[_reqId];\n        _tokenAmt = usersRequest.tokenAmt;\n        _stTokenAmt = usersRequest.stTokenAmt;\n        _requestTs = usersRequest.requestTs;\n\n        uint endTs = _requestTs + unbondingPeriod;\n        if (endTs > block.timestamp) {\n            _waitForTs = endTs - block.timestamp;\n        } else if (_getClaimableAmount(bufferedWithdrawals(), _tokenAmt) > 0) {\n            _claimable = true;\n        }\n    }\n\n    function _getClaimableAmount(uint _buffered, uint _withdrawAmt) internal view returns (uint) {\n        // The tokens withdrawn from the staking pool can be slightly less than the calculated withdrawAmt.\n        uint minWithdrawAmt = _withdrawAmt * (1e8 - 1) / 1e8;\n        return (_buffered < minWithdrawAmt) ? 0 : MathUpgradeable.min(_buffered, _withdrawAmt);\n    }\n\n    function getTokenUnbonded() public virtual view returns (uint) {\n        return 0;\n    }\n\n    receive() external payable {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[20] private __gap;\n}\n"
    },
    "contracts/stVaults/meta/AuroraStNEARVault.sol": {
      "content": "//SPDX-License-Identifier: MIT\n//\n///@notice The AuroraStNEARVault contract stakes wNEAR tokens into stNEAR on Aurora.\n///@dev https://metapool.gitbook.io/master/developers-1/contract-adresses\n///@dev https://metapool.app/dapp/mainnet/metapool-aurora/\n//\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\nimport \"../BasicStVault.sol\";\nimport \"../../bni/constant/AuroraConstant.sol\";\nimport \"../../../interfaces/IL2Vault.sol\";\nimport \"../../../libs/Token.sol\";\n\ninterface IMetaPool {\n    function swapwNEARForstNEAR(uint _amount) external;\n    function swapstNEARForwNEAR(uint _amount) external;\n    ///@dev price of stNEAR in wNEAR.\n    function stNearPrice() external view returns (uint);\n    function wNearSwapFee() external view returns (uint16);\n    function stNearSwapFee() external view returns (uint16);\n}\n\ncontract AuroraStNEARVault is BasicStVault {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IMetaPool public metaPool;\n\n    IL2Vault public stNEARVault;\n\n    function initialize1(\n        address _treasury, address _admin,\n        address _priceOracle,\n        IL2Vault _stNEARVault\n    ) public virtual initializer {\n        super.initialize(\n            \"STI Staking WNEAR\", \"stiStNEAR\",\n            _treasury, _admin,\n            _priceOracle,\n            AuroraConstant.WNEAR,\n            AuroraConstant.stNEAR\n        );\n\n        metaPool = IMetaPool(0x534BACf1126f60EA513F796a3377ff432BE62cf9);\n\n        // The backend will call redeem per 1 hour.\n        unbondingPeriod = 1 hours;\n        minInvestAmount = oneToken;\n        // The stNEAR buffer is replenished automatically every 5 minutes.\n        investInterval = 5 minutes;\n        // The wNEAR buffer is replenished automatically every 5 minutes.\n        redeemInterval = 5 minutes;\n        oneEpoch = 12 hours;\n\n        stNEARVault = _stNEARVault;\n\n        token.safeApprove(address(metaPool), type(uint).max);\n        stToken.safeApprove(address(metaPool), type(uint).max);\n        stToken.safeApprove(address(stNEARVault), type(uint).max);\n    }\n\n    function _invest(uint _amount) internal override returns (uint _invested) {\n        uint stBuffer = stToken.balanceOf(address(metaPool));\n        if (stBuffer > 0) {\n            uint stNearAmount = getStTokenByPooledToken(_amount);\n            if (stBuffer < stNearAmount) {\n                _invested = _amount * stBuffer / stNearAmount;\n            } else {\n                _invested = _amount;\n            }\n            metaPool.swapwNEARForstNEAR(_invested);\n\n            investStNEAR();\n        }\n    }\n\n    function _redeem(uint _stAmount) internal override returns (uint _redeemed) {\n        uint buffer = token.balanceOf(address(metaPool));\n        if (buffer > 0) {\n            uint wNearAmount = getPooledTokenByStToken(_stAmount);\n            if (buffer < wNearAmount) {\n                _redeemed = _stAmount * buffer / wNearAmount;\n            } else {\n                _redeemed = _stAmount;\n            }\n\n            uint stBalance = stToken.balanceOf(address(this));\n            if (stBalance < _redeemed) {\n                withdrawStWNEAR(_redeemed - stBalance);\n                stBalance = stToken.balanceOf(address(this));\n            }\n\n            if (stBalance > 0) {\n                // The withdrawn stNEARs can be less than the calcualted _redeemed.\n                metaPool.swapstNEARForwNEAR(MathUpgradeable.min(_redeemed, stBalance));\n            } else {\n                // Because _stAmount may be a calculation delta in withdraw function,\n                // it will reduce the pendingRedeems even though no redeeming on the staking pool.\n            }\n        }\n    }\n\n    function withdrawStToken(uint _stAmountToWithdraw) internal override returns (\n        uint _withdrawnStAmount,\n        uint _withdrawnAmount\n    ) {\n        uint balanceBefore = token.balanceOf(address(this));\n        _withdrawnStAmount = _redeem(_stAmountToWithdraw);\n        _withdrawnAmount = token.balanceOf(address(this)) - balanceBefore;\n    }\n\n    function _emergencyWithdraw(uint _pendingRedeems) internal override returns (uint _redeemed) {\n        _pendingRedeems;\n        withdrawStWNEAR(type(uint).max);\n        uint stBalance = stToken.balanceOf(address(this));\n        if (stBalance >= minRedeemAmount) {\n            _redeemed = _redeem(stBalance);\n        }\n    }\n\n    function getInvestedStTokens() public override view returns (uint _stAmount) {\n        uint balance = stNEARVault.balanceOf(address(this));\n        if (balance > 0) {\n            _stAmount = stNEARVault.getAllPool() * balance / stNEARVault.totalSupply();\n        }\n    }\n\n    ///@dev stNearSwapFee can be changed after redeem requested.\n    ///@param _amount Amount of tokens\n    function getStTokenByPooledToken(uint _amount) public override view returns(uint) {\n        uint stNearAmount = _amount * oneStToken / metaPool.stNearPrice();\n        uint feeAmount = (stNearAmount * metaPool.stNearSwapFee()) / Const.DENOMINATOR;\n        return stNearAmount - feeAmount;\n    }\n\n    ///@dev wNearSwapFee can be changed after redeem requested.\n    ///@param _stAmount Amount of stTokens\n    function getPooledTokenByStToken(uint _stAmount) public override view returns(uint) {\n        uint wNearAmount = _stAmount * metaPool.stNearPrice() / oneStToken;\n        uint feeAmount = wNearAmount * metaPool.wNearSwapFee() / Const.DENOMINATOR;\n        return wNearAmount - feeAmount;\n    }\n\n    function setL2Vault(IL2Vault _stNEARVault) external onlyOwner {\n        stNEARVault = _stNEARVault;\n        if (stToken.allowance(address(this), address(stNEARVault)) == 0) {\n            stToken.safeApprove(address(stNEARVault), type(uint).max);\n        }\n    }\n\n    function investStNEAR() private {\n        stNEARVault.deposit(stToken.balanceOf(address(this)));\n    }\n\n    function withdrawStWNEAR(uint _stAmount) private {\n        uint shareBalance = stNEARVault.balanceOf(address(this));\n        if (shareBalance > 0) {\n            uint shareAmount;\n            if (_stAmount != type(uint).max) {\n                shareAmount = stNEARVault.totalSupply() * _stAmount / stNEARVault.getAllPool();\n                if (shareAmount > shareBalance) shareAmount = shareBalance;\n            } else {\n                shareAmount = shareBalance;\n            }\n\n            stNEARVault.withdraw(shareAmount);\n        }\n    }\n\n    function getAPR() public virtual override view returns (uint) {\n        uint baseApr = super.getAPR();\n        uint lendingApr = stNEARVault.getAPR();\n        return (1e18 + baseApr) * (1e18 + lendingApr) / 1e18 - 1e18;\n    }\n}\n"
    },
    "interfaces/IL2Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\n\r\ninterface IL2Vault is IERC20Upgradeable {\r\n    function deposit(uint amount) external;\r\n    function withdraw(uint share) external;\r\n    function getAllPool() external view returns (uint);\r\n    function getAllPoolInUSD() external view returns (uint);\r\n    function getAPR() external view returns (uint);\r\n}\r\n"
    },
    "contracts/stVaults/meta/AuroraStNEARVaultTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\n//\n///@notice The AuroraStNEARVault contract stakes wNEAR tokens into stNEAR on Aurora.\n///@dev https://metapool.gitbook.io/master/developers-1/contract-adresses\n///@dev https://metapool.app/dapp/mainnet/metapool-aurora/\n//\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\nimport \"./AuroraStNEARVault.sol\";\nimport \"../../bni/constant/AuroraConstantTest.sol\";\nimport \"../../../interfaces/IL2Vault.sol\";\nimport \"../../../libs/Token.sol\";\n\ncontract AuroraStNEARVaultTest is AuroraStNEARVault {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    function initialize1(\n        address _treasury, address _admin,\n        address _priceOracle,\n        IL2Vault _stNEARVault\n    ) public override initializer {\n        super.initialize(\n            \"STI Staking WNEAR\", \"stiStNEAR\",\n            _treasury, _admin,\n            _priceOracle,\n            AuroraConstantTest.WNEAR,\n            AuroraConstantTest.stNEAR\n        );\n\n        metaPool = IMetaPool(0x0dF588AabDd4E031f1903326cC0d8E79DFBD3566);\n\n        // The backend will call redeem per 1 hour.\n        unbondingPeriod = 1 hours;\n        minInvestAmount = oneToken;\n        // The stNEAR buffer is replenished automatically every 5 minutes.\n        investInterval = 5 minutes;\n        // The wNEAR buffer is replenished automatically every 5 minutes.\n        redeemInterval = 5 minutes;\n        oneEpoch = 12 hours;\n\n        stNEARVault = _stNEARVault;\n\n        token.safeApprove(address(metaPool), type(uint).max);\n        stToken.safeApprove(address(metaPool), type(uint).max);\n        stToken.safeApprove(address(stNEARVault), type(uint).max);\n    }\n}\n"
    },
    "contracts/bni/strategy/MaticBNIStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./BNIStrategy.sol\";\nimport \"../../../interfaces/IL2Vault.sol\";\n\ncontract MaticBNIStrategy is BNIStrategy {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant WMATIC = IERC20Upgradeable(0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270);\n\n    IL2Vault public WMATICVault;\n\n    event InvestWMATIC(uint USDTAmt, uint WMATICAmt);\n    event WithdrawWMATIC(uint WMATICAmt, uint USDTAmt);\n\n    function setWMATICVault(IL2Vault _WMATICVault) external onlyOwner {\n        WMATICVault = _WMATICVault;\n        if (WMATIC.allowance(address(this), address(WMATICVault)) == 0) {\n            WMATIC.safeApprove(address(WMATICVault), type(uint).max);\n        }\n    }\n\n    function _investWMATIC(uint USDTAmt) private {\n        uint WMATICAmt = WMATIC.balanceOf(address(this));\n        if (WMATICAmt > 0) {\n            WMATICVault.deposit(WMATICAmt);\n            emit InvestWMATIC(USDTAmt, WMATICAmt);\n        }\n    }\n\n    function _invest(uint[] memory _USDTAmts) internal virtual override {\n        super._invest(_USDTAmts);\n\n        uint poolCnt = _USDTAmts.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            address token = tokens[i];\n            if (token == address(WMATIC)) {\n                _investWMATIC(_USDTAmts[i]);\n            }\n        }\n    }\n\n    function _withdrawWMATIC(uint _sharePerc) private returns (uint USDTAmt) {\n        uint amount = WMATICVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            WMATICVault.withdraw(amount);\n            uint WMATICAmt = WMATIC.balanceOf(address(this));\n            USDTAmt = _swapForUSDT(address(WMATIC), WMATICAmt);\n            emit WithdrawWMATIC(WMATICAmt, USDTAmt);\n        }\n    }\n\n    function _withdrawFromPool(uint _pid, uint _sharePerc) internal virtual override returns (uint USDTAmt) {\n        address token = tokens[_pid];\n        if (token == address(WMATIC)) {\n            USDTAmt = _withdrawWMATIC(_sharePerc);\n        } else {\n            USDTAmt = super._withdrawFromPool(_pid, _sharePerc);\n        }\n    }\n\n    function getWMATICPoolInUSD() private view  returns (uint) {\n        uint balance = WMATICVault.balanceOf(address(this));\n        return balance == 0 ? 0 : WMATICVault.getAllPoolInUSD() * balance / WMATICVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function _getPoolInUSD(uint _pid) internal view virtual override returns (uint pool) {\n        address token = tokens[_pid];\n        if (token == address(WMATIC)) {\n            pool = getWMATICPoolInUSD();\n        } else {\n            pool = super._getPoolInUSD(_pid);\n        }\n    }\n\n    function getAPR() public view override returns (uint) {\n        (address[] memory _tokens, uint[] memory perc) = getCurrentTokenCompositionPerc();\n        uint allApr;\n        uint poolCnt = _tokens.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            address token = _tokens[i];\n            if (token == address(WMATIC)) {\n                allApr += WMATICVault.getAPR() * perc[i];\n            }\n        }\n        return (allApr / DENOMINATOR);\n    }\n}\n"
    },
    "contracts/bni/strategy/BNIStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../priceOracle/IPriceOracle.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../interfaces/IUniRouter.sol\";\nimport \"../../../libs/Token.sol\";\n\ncontract BNIStrategy is OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20UpgradeableExt;\n\n    IUniRouter public router;\n    IERC20UpgradeableExt public SWAP_BASE_TOKEN; // It has same role with WETH on Ethereum Swaps. Most of tokens have been paired with this token.\n    IERC20UpgradeableExt public USDT;\n    uint8 usdtDecimals;\n\n    uint constant DENOMINATOR = 10000;\n\n    address public treasuryWallet;\n    address public admin;\n    address public vault;\n    IPriceOracle public priceOracle;\n\n    address[] public tokens;\n    mapping(address => uint) public pid; // Pool indices in tokens array\n\n    event AddToken(address token, uint pid);\n    event RemoveToken(address token, uint pid);\n    event Withdraw(uint sharePerc, uint USDTAmt);\n    event EmergencyWithdraw(uint USDTAmt);\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\n    event SetAdminWallet(address oldAdmin, address newAdmin);\n\n    modifier onlyVault {\n        require(msg.sender == vault, \"Only vault\");\n        _;\n    }\n\n    function initialize(\n        address _treasuryWallet, address _admin,\n        address _priceOracle,\n        address _router, address _SWAP_BASE_TOKEN,\n        address _USDT, address _token0\n    ) public virtual initializer {\n        require(_router != address(0), \"Invalid router\");\n        require(_SWAP_BASE_TOKEN != address(0), \"Invalid SWAP_BASE_TOKEN\");\n        require(_USDT != address(0), \"Invalid USDT\");\n        require(_token0 != address(0), \"Invalid token0\");\n        __Ownable_init();\n\n        treasuryWallet = _treasuryWallet;\n        admin = _admin;\n        priceOracle = IPriceOracle(_priceOracle);\n        router = IUniRouter(_router);\n        SWAP_BASE_TOKEN = IERC20UpgradeableExt(_SWAP_BASE_TOKEN);\n\n        USDT = IERC20UpgradeableExt(_USDT);\n        usdtDecimals = USDT.decimals();\n        require(6 <= usdtDecimals, \"USDT decimals must >= 6\");\n\n        tokens.push(_token0);\n        updatePid();\n\n        USDT.safeApprove(address(router), type(uint).max);\n        IERC20UpgradeableExt(_token0).safeApprove(address(router), type(uint).max);\n    }\n\n    function updatePid() internal {\n        address[] memory _tokens = tokens;\n\n        uint tokenCnt = _tokens.length;\n        for (uint i = 0; i < tokenCnt; i ++) {\n            pid[_tokens[i]] = i;\n        }\n    }\n\n    function addToken(address _token) external onlyOwner {\n        uint _pid = pid[_token];\n        require ((_pid == 0 && _token != tokens[0]), \"Already added\");\n\n        tokens.push(_token);\n        _pid = tokens.length-1;\n        pid[_token] = _pid;\n\n        if (IERC20UpgradeableExt(_token).allowance(address(this), address(router)) == 0) {\n            IERC20UpgradeableExt(_token).safeApprove(address(router), type(uint).max);\n        }\n        emit AddToken(_token, _pid);\n    }\n\n    function removeToken(uint _pid) external onlyOwner {\n        uint tokenCnt = tokens.length;\n        require(_pid < tokenCnt, \"Invalid pid\");\n        uint pool = _getPoolInUSD(_pid);\n        require(pool == 0, \"Pool is not empty\");\n\n        address _token = tokens[_pid];\n        tokens[_pid] = tokens[tokenCnt-1];\n        tokens.pop();\n\n        pid[_token] = 0;\n        updatePid();\n\n        emit RemoveToken(_token, _pid);\n    }\n\n    /// @param _USDTAmts amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals\n    function invest(address[] memory _tokens, uint[] memory _USDTAmts) external onlyVault {\n        uint poolCnt = _tokens.length;\n        uint USDTAmt;\n        uint[] memory USDTAmts = new uint[](tokens.length);\n        for (uint i = 0; i < poolCnt; i ++) {\n            uint amount = _USDTAmts[i];\n            USDTAmt += amount;\n            uint _pid = pid[_tokens[i]];\n            USDTAmts[_pid] += amount;\n        }\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\n\n        _invest(USDTAmts);\n    }\n\n    function _invest(uint[] memory _USDTAmts) internal virtual {\n        uint poolCnt = _USDTAmts.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            address token = tokens[i];\n            if (token == address(USDT)) continue;\n\n            uint USDTAmt = _USDTAmts[i];\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n            (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(token);\n            uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\n            uint numerator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\n            uint denominator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\n            uint amountOutMin = USDTAmt * numerator * 95 / (denominator * 100);\n\n            if (token == address(SWAP_BASE_TOKEN)) {\n                _swap(address(USDT), token, USDTAmt, amountOutMin);\n            } else {\n                _swap2(address(USDT), token, USDTAmt, amountOutMin);\n            }\n        }\n    }\n\n    function withdrawPerc(uint _sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(_sharePerc <= 1e18, \"Over 100%\");\n        USDTAmt = _withdraw(_sharePerc);\n        USDT.safeTransfer(vault, USDTAmt);\n        emit Withdraw(_sharePerc, USDTAmt);\n    }\n\n    function _withdraw(uint _sharePerc) internal virtual returns (uint USDTAmt) {\n        uint poolCnt = tokens.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            USDTAmt += _withdrawFromPool(i, _sharePerc);\n        }\n    }\n\n    function _withdrawFromPool(uint _pid, uint _sharePerc) internal virtual returns (uint USDTAmt) {\n        IERC20UpgradeableExt token = IERC20UpgradeableExt(tokens[_pid]);\n        uint amount = token.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            if (address(token) == address(USDT)) {\n                USDTAmt = amount;\n            } else {\n                USDTAmt = _swapForUSDT(address(token), amount);\n            }\n        }\n    }\n\n    function _swapForUSDT(address token, uint amount) internal returns (uint USDTAmt) {\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n        (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(address(token));\n        uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\n        uint numerator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\n        uint denominator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\n        uint amountOutMin = amount * numerator * 95 / (denominator * 100);\n\n        if (address(token) == address(SWAP_BASE_TOKEN)) {\n            USDTAmt = _swap(address(token), address(USDT), amount, amountOutMin);\n        } else{\n            USDTAmt = _swap2(address(token), address(USDT), amount, amountOutMin);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = _tokenB;\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function _swap2(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](3);\n        path[0] = _tokenA;\n        path[1] = address(SWAP_BASE_TOKEN);\n        path[2] = _tokenB;\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[2];\n    }\n\n    function withdrawFromPool(uint _pid, uint _sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(_sharePerc <= 1e18, \"Over 100%\");\n        USDTAmt = _withdrawFromPool(_pid, _sharePerc);\n        USDT.safeTransfer(vault, USDTAmt);\n    }\n\n    function emergencyWithdraw() external onlyVault {\n        // 1e18 == 100% of share\n        uint USDTAmt = _withdraw(1e18);\n        if (0 < USDTAmt) {\n            USDT.safeTransfer(vault, USDTAmt);\n        }\n        emit EmergencyWithdraw(USDTAmt);\n    }\n\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\n        address oldTreasuryWallet = treasuryWallet;\n        treasuryWallet = _treasuryWallet;\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit SetAdminWallet(oldAdmin, _admin);\n    }\n\n    function setVault(address _vault) external onlyOwner {\n        require(vault == address(0), \"Vault set\");\n        vault = _vault;\n    }\n\n    /// @return the price of USDT in USD.\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\n        return priceOracle.getAssetPrice(address(USDT));\n    }\n\n    function getEachPoolInUSD() public view returns (address[] memory, uint[] memory pools) {\n        return (tokens, _getEachPoolInUSD());\n    }\n\n    function _getEachPoolInUSD() private view returns (uint[] memory pools) {\n        uint poolCnt = tokens.length;\n        pools = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            pools[i] = _getPoolInUSD(i);\n        }\n    }\n\n    function _getPoolInUSD(uint _pid) internal view virtual returns (uint pool) {\n        IERC20UpgradeableExt token = IERC20UpgradeableExt(tokens[_pid]);\n        uint amount = token.balanceOf(address(this));\n        if (0 < amount) {\n            (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(address(token));\n            uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\n            pool = Token.changeDecimals(amount, tokenDecimals, 18) * TOKENPriceInUSD / (10 ** (TOKENPriceDecimals));\n        }\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint[] memory pools = _getEachPoolInUSD();\n        uint poolCnt = pools.length;\n        uint allPool;\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n        return allPool;\n    }\n\n    function getCurrentTokenCompositionPerc() public view returns (address[] memory, uint[] memory percentages) {\n        uint[] memory pools = _getEachPoolInUSD();\n        uint poolCnt = pools.length;\n        uint allPool;\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n\n        uint defaultTargetPerc = poolCnt == 0 ? 0 : DENOMINATOR / poolCnt;\n        percentages = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            percentages[i] = allPool == 0 ? defaultTargetPerc : pools[i] * DENOMINATOR / allPool;\n        }\n        return (tokens, percentages);\n    }\n\n    function getAPR() public view virtual returns (uint) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[40] private __gap;\n}\n"
    },
    "contracts/bni/strategy/AvaxBNIStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./BNIStrategy.sol\";\nimport \"../../../interfaces/IL2Vault.sol\";\n\ncontract AvaxBNIStrategy is BNIStrategy {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant WAVAX = IERC20Upgradeable(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\n\n    IL2Vault public WAVAXVault;\n\n    event InvestWAVAX(uint USDTAmt, uint WAVAXAmt);\n    event WithdrawWAVAX(uint WAVAXAmt, uint USDTAmt);\n\n    function setWAVAXVault(IL2Vault _WAVAXVault) external onlyOwner {\n        WAVAXVault = _WAVAXVault;\n        if (WAVAX.allowance(address(this), address(WAVAXVault)) == 0) {\n            WAVAX.safeApprove(address(WAVAXVault), type(uint).max);\n        }\n    }\n\n    function _investWAVAX(uint USDTAmt) private {\n        uint WAVAXAmt = WAVAX.balanceOf(address(this));\n        if (WAVAXAmt > 0) {\n            WAVAXVault.deposit(WAVAXAmt);\n            emit InvestWAVAX(USDTAmt, WAVAXAmt);\n        }\n    }\n\n    function _invest(uint[] memory _USDTAmts) internal virtual override {\n        super._invest(_USDTAmts);\n\n        uint poolCnt = _USDTAmts.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            address token = tokens[i];\n            if (token == address(WAVAX)) {\n                _investWAVAX(_USDTAmts[i]);\n            }\n        }\n    }\n\n    function _withdrawWAVAX(uint _sharePerc) private returns (uint USDTAmt) {\n        uint amount = WAVAXVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            WAVAXVault.withdraw(amount);\n            uint WAVAXAmt = WAVAX.balanceOf(address(this));\n            USDTAmt = _swapForUSDT(address(WAVAX), WAVAXAmt);\n            emit WithdrawWAVAX(WAVAXAmt, USDTAmt);\n        }\n    }\n\n    function _withdrawFromPool(uint _pid, uint _sharePerc) internal virtual override returns (uint USDTAmt) {\n        address token = tokens[_pid];\n        if (token == address(WAVAX)) {\n            USDTAmt = _withdrawWAVAX(_sharePerc);\n        } else {\n            USDTAmt = super._withdrawFromPool(_pid, _sharePerc);\n        }\n    }\n\n    function getWAVAXPoolInUSD() private view  returns (uint) {\n        uint balance = WAVAXVault.balanceOf(address(this));\n        return balance == 0 ? 0 : WAVAXVault.getAllPoolInUSD() * balance / WAVAXVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function _getPoolInUSD(uint _pid) internal view virtual override returns (uint pool) {\n        address token = tokens[_pid];\n        if (token == address(WAVAX)) {\n            pool = getWAVAXPoolInUSD();\n        } else {\n            pool = super._getPoolInUSD(_pid);\n        }\n    }\n\n    function getAPR() public view override returns (uint) {\n        (address[] memory _tokens, uint[] memory perc) = getCurrentTokenCompositionPerc();\n        uint allApr;\n        uint poolCnt = _tokens.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            address token = _tokens[i];\n            if (token == address(WAVAX)) {\n                allApr += WAVAXVault.getAPR() * perc[i];\n            }\n        }\n        return (allApr / DENOMINATOR);\n    }\n}\n"
    },
    "contracts/stVaults/lido/MoonbeamStDOTVault.sol": {
      "content": "//SPDX-License-Identifier: MIT\n//\n///@notice The MoonbeamStDOTVault contract stakes xcDOT tokens into stDOT on Moonbeam.\n///@dev https://docs.polkadot.lido.fi/fundamentals/liquid-staking\n//\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../BasicStVault.sol\";\nimport \"../../bni/constant/MoonbeamConstant.sol\";\n\ninterface IStDOT {\n    function getUnbonded(address _holder) external view returns (uint waiting, uint unbonded);\n    function deposit(uint _amount) external returns (uint);\n    function redeem(uint _amount) external;\n    function claimUnbonded() external;\n    function getSharesByPooledKSM(uint _amount) external view returns (uint);\n    function getPooledKSMByShares(uint _sharesAmount) external view returns (uint);\n}\n\ncontract MoonbeamStDOTVault is BasicStVault {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    function initialize1(\n        address _treasury, address _admin,\n        address _priceOracle\n    ) public initializer {\n        super.initialize(\n            \"STI Staking xcDOT\", \"stiStDOT\",\n            _treasury, _admin,\n            _priceOracle,\n            MoonbeamConstant.xcDOT,\n            MoonbeamConstant.stDOT\n        );\n\n        unbondingPeriod = 30 days;\n        oneEpoch = 24 hours;\n\n        token.safeApprove(address(stToken), type(uint).max);\n    }\n\n    function _invest(uint _amount) internal override returns (uint _invested) {\n        IStDOT(address(stToken)).deposit(_amount);\n        return _amount;\n    }\n\n    function _redeem(uint _stAmount) internal override returns (uint _redeemed) {\n        // Because _stAmount-stBalance may be a calculation delta in withdraw function,\n        // it will reduce the pendingRedeems even though no redeeming on the staking pool.\n        _redeemed = _stAmount;\n\n        uint stBalance = stToken.balanceOf(address(this));\n        IStDOT(address(stToken)).redeem(_stAmount > stBalance ? stBalance : _stAmount);\n    }\n\n    function _claimUnbonded() internal override {\n        IStDOT(address(stToken)).claimUnbonded();\n\n        uint _emergencyUnbondings = emergencyUnbondings;\n        if (_emergencyUnbondings > 0 && paused()) {\n            (uint unbondings,) = IStDOT(address(stToken)).getUnbonded(address(this));\n            if (_emergencyUnbondings > unbondings) {\n                emergencyUnbondings = unbondings;\n            }\n        }\n    }\n\n    function _emergencyWithdraw(uint _pendingRedeems) internal override returns (uint _redeemed) {\n        uint stBalance = stToken.balanceOf(address(this));\n        if (stBalance >= minRedeemAmount) {\n            IStDOT(address(stToken)).redeem(stBalance);\n            emergencyUnbondings = (stBalance > _pendingRedeems) ? stBalance - _pendingRedeems : 0;\n            _redeemed = stBalance;\n        }\n    }\n\n    ///@param _amount Amount of tokens\n    function getStTokenByPooledToken(uint _amount) public override view returns(uint) {\n        return _amount;\n        // return IStDOT(address(stToken)).getSharesByPooledKSM(_amount);\n    }\n\n    ///@param _stAmount Amount of stTokens\n    function getPooledTokenByStToken(uint _stAmount) public override view returns(uint) {\n        return _stAmount;\n        // return IStDOT(address(stToken)).getPooledKSMByShares(_stAmount);\n    }\n\n    function getTokenUnbonded() public override view returns (uint _amount) {\n        (, _amount) = IStDOT(address(stToken)).getUnbonded(address(this));\n    }\n}\n"
    },
    "contracts/bni/constant/MoonbeamConstant.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nlibrary MoonbeamConstant {\n    uint internal constant CHAINID = 1284;\n\n    address internal constant USDC_mad = 0x8f552a71EFE5eeFc207Bf75485b356A0b3f01eC9; // Needs to replace with USDC_multi\n    address internal constant USDT_mad = 0x8e70cD5B4Ff3f62659049e74b6649c6603A0E594; // Needs to replace with USDT_multi\n    address internal constant xcDOT = 0xFfFFfFff1FcaCBd218EDc0EbA20Fc2308C778080;\n    address internal constant stDOT = 0xFA36Fe1dA08C89eC72Ea1F0143a35bFd5DAea108;\n    address internal constant WGLMR = 0xAcc15dC74880C9944775448304B263D191c6077F;\n}\n"
    },
    "contracts/sti/strategy/MoonbeamSTIStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./BasicSTIStrategy.sol\";\nimport \"../../bni/constant/MoonbeamConstant.sol\";\nimport \"../../../interfaces/IStVault.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract MoonbeamSTIStrategy is BasicSTIStrategy {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IStVault public DOTVault;\n\n    function initialize1(\n        address _admin,\n        address _priceOracle,\n        IStVault _DOTVault\n    ) public initializer {\n        super.initialize(\n            _admin,\n            _priceOracle,\n            0x70085a09D30D6f8C4ecF6eE10120d1847383BB57, // StellaSwap\n            MoonbeamConstant.WGLMR,\n            MoonbeamConstant.USDT_mad,\n            MoonbeamConstant.xcDOT\n        );\n\n        DOTVault = _DOTVault;\n\n        IERC20Upgradeable(MoonbeamConstant.xcDOT).safeApprove(address(DOTVault), type(uint).max);\n    }\n\n    function setStVault(IStVault _DOTVault) external onlyOwner {\n        DOTVault = _DOTVault;\n\n        if (IERC20Upgradeable(MoonbeamConstant.xcDOT).allowance(address(this), address(DOTVault)) == 0) {\n            IERC20Upgradeable(MoonbeamConstant.xcDOT).safeApprove(address(DOTVault), type(uint).max);\n        }\n    }\n\n    function getStVault(address _token) internal view override returns (IStVault stVault) {\n        if (_token == MoonbeamConstant.xcDOT) {\n            stVault = DOTVault;\n        }\n    }\n\n}\n"
    },
    "contracts/sti/strategy/EthSTIStrategyTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./BasicSTIStrategyTest.sol\";\nimport \"../../bni/constant/EthConstantTest.sol\";\nimport \"../../../interfaces/IStVault.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract EthSTIStrategyTest is BasicSTIStrategyTest {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IStVault public ETHVault;\n    IStVault public MATICVault;\n\n    function initialize1(\n        address _admin,\n        address _priceOracle,\n        IStVault _ETHVault, IStVault _MATICVault\n    ) public initializer {\n        super.initialize(\n            _admin,\n            _priceOracle,\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, // Uniswap2\n            EthConstantTest.WETH,\n            EthConstantTest.USDT,\n            Const.NATIVE_ASSET\n        );\n\n        tokens.push(EthConstantTest.MATIC);\n        updatePid();\n\n        ETHVault = _ETHVault;\n        MATICVault = _MATICVault;\n\n        // IERC20Upgradeable(EthConstantTest.MATIC).safeApprove(address(MATICVault), type(uint).max);\n        // IERC20Upgradeable(EthConstantTest.MATIC).safeApprove(address(router), type(uint).max);\n    }\n\n    function setStVault(IStVault _ETHVault, IStVault _MATICVault) external onlyOwner {\n        ETHVault = _ETHVault;\n        MATICVault = _MATICVault;\n\n        // if (IERC20Upgradeable(EthConstantTest.MATIC).allowance(address(this), address(MATICVault)) == 0) {\n        //     IERC20Upgradeable(EthConstantTest.MATIC).safeApprove(address(MATICVault), type(uint).max);\n        // }\n    }\n\n    function getStVault(address _token) internal view override returns (IStVault stVault) {\n        if (_token == Const.NATIVE_ASSET) {\n            stVault = ETHVault;\n        } else if (_token == EthConstantTest.MATIC) {\n            stVault = MATICVault;\n        }\n    }\n\n}\n"
    },
    "contracts/sti/strategy/BasicSTIStrategyTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../../bni/priceOracle/IPriceOracle.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../interfaces/IUniRouter.sol\";\nimport \"../../../interfaces/IStVault.sol\";\nimport \"../../../libs/Const.sol\";\nimport \"../../../libs/Token.sol\";\n\ncontract BasicSTIStrategyTest is PausableUpgradeable, OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20UpgradeableExt;\n\n    IUniRouter public router;\n    IERC20UpgradeableExt public SWAP_BASE_TOKEN; // It has same role with WETH on Ethereum Swaps. Most of tokens have been paired with this token.\n    IERC20UpgradeableExt public USDT;\n    uint8 usdtDecimals;\n\n    address public admin;\n    address public vault;\n    IPriceOracle public priceOracle;\n\n    address[] public tokens;\n    mapping(address => uint) public pid; // Pool indices in tokens array\n\n    // maps the address to array of the owned tokens, the first key is token address.\n    mapping(address => mapping(address => uint[])) public claimer2ReqIds;\n    // reqId can be owned by only one address at the time, therefore reqId is present in only one of those arrays in the mapping\n    // this mapping stores the index of the reqId in one of those arrays, the first key is token address.\n    mapping(address => mapping(uint => uint)) public reqId2Index;\n\n    event AddToken(address token, uint pid);\n    event RemoveToken(address token, uint pid);\n    event Withdraw(uint sharePerc, uint USDTAmt);\n    event Claim(address claimer, address token, uint tokenAmt, uint USDTAmt);\n    event EmergencyWithdraw(uint USDTAmt);\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\n    event SetAdminWallet(address oldAdmin, address newAdmin);\n\n    modifier onlyVault {\n        require(msg.sender == vault, \"Only vault\");\n        _;\n    }\n\n    function initialize(\n        address _admin,\n        address _priceOracle,\n        address _router, address _SWAP_BASE_TOKEN,\n        address _USDT, address _token0\n    ) public virtual initializer {\n        require(_router != address(0), \"Invalid router\");\n        require(_SWAP_BASE_TOKEN != address(0), \"Invalid SWAP_BASE_TOKEN\");\n        require(_USDT != address(0), \"Invalid USDT\");\n        require(_token0 != address(0), \"Invalid token0\");\n        __Ownable_init();\n\n        admin = _admin;\n        priceOracle = IPriceOracle(_priceOracle);\n        router = IUniRouter(_router);\n        SWAP_BASE_TOKEN = IERC20UpgradeableExt(_SWAP_BASE_TOKEN);\n\n        USDT = IERC20UpgradeableExt(_USDT);\n        usdtDecimals = USDT.decimals();\n        require(usdtDecimals >= 6, \"USDT decimals must >= 6\");\n\n        tokens.push(_token0);\n        updatePid();\n\n        // USDT.safeApprove(address(router), type(uint).max);\n        // if (_token0 != Const.NATIVE_ASSET) {\n        //     IERC20UpgradeableExt(_token0).safeApprove(address(router), type(uint).max);\n        // }\n    }\n\n    function updatePid() internal {\n        address[] memory _tokens = tokens;\n\n        uint tokenCnt = _tokens.length;\n        for (uint i = 0; i < tokenCnt; i ++) {\n            pid[_tokens[i]] = i;\n        }\n    }\n\n    function getPoolCount() public view returns (uint) {\n        return tokens.length;\n    }\n\n    function getTokens() external view returns (address[] memory) {\n        return tokens;\n    }\n\n    function addToken(address _token) external onlyOwner {\n        uint _pid = pid[_token];\n        require ((_pid == 0 && _token != tokens[0]), \"Already added\");\n\n        tokens.push(_token);\n        _pid = tokens.length-1;\n        pid[_token] = _pid;\n\n        // if (_token != Const.NATIVE_ASSET && IERC20UpgradeableExt(_token).allowance(address(this), address(router)) == 0) {\n        //     IERC20UpgradeableExt(_token).safeApprove(address(router), type(uint).max);\n        // }\n        emit AddToken(_token, _pid);\n    }\n\n    function removeToken(uint _pid) external onlyOwner {\n        uint tokenCnt = tokens.length;\n        require(_pid < tokenCnt, \"Invalid pid\");\n        uint pool = _getPoolInUSD(_pid);\n        require(pool == 0, \"Pool is not empty\");\n\n        address _token = tokens[_pid];\n        tokens[_pid] = tokens[tokenCnt-1];\n        tokens.pop();\n\n        pid[_token] = 0;\n        updatePid();\n\n        emit RemoveToken(_token, _pid);\n    }\n\n    /// @param _USDTAmts amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals\n    function invest(address[] memory _tokens, uint[] memory _USDTAmts) external onlyVault {\n        _investInternal(_tokens, _USDTAmts);\n    }\n\n    function _investInternal(address[] memory _tokens, uint[] memory _USDTAmts) internal {\n        uint poolCnt = _tokens.length;\n        uint USDTAmt;\n        uint[] memory USDTAmts = new uint[](tokens.length);\n        for (uint i = 0; i < poolCnt; i ++) {\n            uint amount = _USDTAmts[i];\n            USDTAmt += amount;\n            uint _pid = pid[_tokens[i]];\n            USDTAmts[_pid] += amount;\n        }\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\n\n        // _invest(USDTAmts);\n    }\n\n    function _invest(uint[] memory _USDTAmts) internal virtual {\n        uint poolCnt = _USDTAmts.length;\n        for (uint _pid = 0; _pid < poolCnt; _pid ++) {\n            uint USDTAmt = _USDTAmts[_pid];\n            if (USDTAmt == 0) continue;\n\n            address token = tokens[_pid];\n            uint tokenAmt;\n            if (token != address(USDT)) {\n                (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n                (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(token);\n                uint8 tokenDecimals = _assetDecimals(token);\n                uint numerator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\n                uint denominator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\n                uint amountOutMin = USDTAmt * numerator * 85 / (denominator * 100);\n\n                if (token == Const.NATIVE_ASSET) {\n                    tokenAmt = _swapForETH(address(USDT), USDTAmt, amountOutMin);\n                } else if (token == address(SWAP_BASE_TOKEN)) {\n                    tokenAmt = _swap(address(USDT), token, USDTAmt, amountOutMin);\n                } else {\n                    tokenAmt = _swap2(address(USDT), token, USDTAmt, amountOutMin);\n                }\n            } else {\n                tokenAmt = USDTAmt;\n            }\n\n            IStVault stVault = getStVault(token);\n            if (address(stVault) != address(0)) {\n                if (token == Const.NATIVE_ASSET) {\n                    stVault.depositETH{value: tokenAmt}();\n                } else {\n                    stVault.deposit(tokenAmt);\n                }\n            }\n        }\n    }\n\n    function withdrawPerc(address _claimer, uint _sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(_sharePerc <= 1e18, \"Over 100%\");\n        USDTAmt = _withdraw(_claimer, _sharePerc);\n        if (USDTAmt > 0) {\n            USDT.safeTransfer(vault, USDTAmt);\n        }\n        emit Withdraw(_sharePerc, USDTAmt);\n    }\n\n    function _withdraw(address _claimer, uint _sharePerc) internal virtual returns (uint USDTAmt) {\n        _claimer;\n        _sharePerc;\n        USDTAmt = USDT.balanceOf(address(this)) * _sharePerc / 1e18;\n        // uint poolCnt = tokens.length;\n        // for (uint i = 0; i < poolCnt; i ++) {\n        //     USDTAmt += _withdrawFromPool(_claimer, i, _sharePerc);\n        // }\n    }\n\n    function _withdrawFromPool(address _claimer, uint _pid, uint _sharePerc) internal virtual returns (uint USDTAmt) {\n        address token = tokens[_pid];\n        IStVault stVault = getStVault(token);\n        if (address(stVault) != address(0)) {\n            uint reqId;\n            (USDTAmt, reqId) = _withdrawStVault(stVault, _sharePerc);\n            if (reqId > 0) {\n                addReqId(tokens[_pid], _claimer, reqId);\n            }\n        } else {\n            uint amount = _balanceOf(token, address(this)) * _sharePerc / 1e18;\n            if (0 < amount) {\n                if (token == address(USDT)) {\n                    USDTAmt = amount;\n                } else {\n                    USDTAmt = _swapForUSDT(token, amount);\n                }\n            }\n        }\n    }\n\n    function _withdrawStVault(IStVault _stVault, uint _sharePerc) private returns (uint USDTAmt, uint reqId) {\n        uint amount = _stVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            (uint tokenAmt, uint _reqId) = _stVault.withdraw(amount);\n            if (tokenAmt > 0) {\n                USDTAmt = _swapForUSDT(address(_stVault.token()), tokenAmt);\n            }\n            reqId = _reqId;\n        }\n    }\n\n    function _swapForUSDT(address token, uint amount) internal returns (uint USDTAmt) {\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n        (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(address(token));\n        uint8 tokenDecimals = _assetDecimals(token);\n        uint numerator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\n        uint denominator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\n        uint amountOutMin = amount * numerator * 85 / (denominator * 100);\n\n        if (address(token) == address(Const.NATIVE_ASSET)) {\n            USDTAmt = _swapETH(address(USDT), amount, amountOutMin);\n        } else if (address(token) == address(SWAP_BASE_TOKEN)) {\n            USDTAmt = _swap(address(token), address(USDT), amount, amountOutMin);\n        } else{\n            USDTAmt = _swap2(address(token), address(USDT), amount, amountOutMin);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = _tokenB;\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function _swap2(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](3);\n        path[0] = _tokenA;\n        path[1] = address(SWAP_BASE_TOKEN);\n        path[2] = _tokenB;\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[2];\n    }\n\n    function _swapETH(address _tokenB, uint _amt, uint _minAmount) internal virtual returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = address(SWAP_BASE_TOKEN);\n        path[1] = _tokenB;\n        return (router.swapExactETHForTokens{value: _amt}(_minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function _swapForETH(address _tokenA, uint _amt, uint _minAmount) internal virtual returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = address(SWAP_BASE_TOKEN);\n        return (router.swapExactTokensForETH(_amt, _minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function emergencyWithdraw() external onlyVault {\n        _pause();\n        // 1e18 == 100% of share\n        uint USDTAmt = _withdraw(address(this), 1e18);\n        if (USDTAmt > 0) {\n            USDT.safeTransfer(vault, USDTAmt);\n        }\n        emit EmergencyWithdraw(USDTAmt);\n    }\n\n    function claimEmergencyWithdrawal() external onlyVault {\n        _claimAllAndTransfer(address(this));\n    }\n\n    function getEmergencyWithdrawalUnbonded() public view returns (\n        uint waitingInUSD, uint unbondedInUSD, uint waitForTs\n    ) {\n        return _getAllUnbonded(address(this));\n    }\n\n    /// @param _USDTAmts amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals\n    function reinvest(address[] memory _tokens, uint[] memory _USDTAmts) external onlyVault {\n        _unpause();\n        _investInternal(_tokens, _USDTAmts);\n    }\n\n    function addReqId(address _token, address _claimer, uint _reqId) internal {\n        uint[] storage reqIds = claimer2ReqIds[_token][_claimer];\n\n        reqIds.push(_reqId);\n        reqId2Index[_token][_reqId] = reqIds.length - 1;\n    }\n\n    function removeReqId(address _token, address _claimer, uint _reqId) internal {\n        uint[] storage reqIds = claimer2ReqIds[_token][_claimer];\n        uint length = reqIds.length;\n        uint reqIdIndex = reqId2Index[_token][_reqId];\n\n        if (reqIdIndex != length-1) {\n            uint256 lastReqId = reqIds[length - 1];\n            reqIds[reqIdIndex] = lastReqId;\n            reqId2Index[_token][lastReqId] = reqIdIndex;\n        }\n\n        reqIds.pop();\n        delete reqId2Index[_token][_reqId];\n    }\n\n    function removeReqIds(address _token, address _claimer, uint[] memory _reqIds) internal {\n        uint[] storage reqIds = claimer2ReqIds[_token][_claimer];\n        uint length = reqIds.length;\n\n        for (uint i = 0; i < _reqIds.length; i++) {\n            uint reqId = _reqIds[i];\n            uint reqIdIndex = reqId2Index[_token][reqId];\n\n            if (reqIdIndex != length-1) {\n                uint256 lastReqId = reqIds[length - 1];\n                reqIds[reqIdIndex] = lastReqId;\n                reqId2Index[_token][lastReqId] = reqIdIndex;\n            }\n\n            reqIds.pop();\n            length --;\n            delete reqId2Index[_token][reqId];\n        }\n    }\n\n    function getStVault(address _token) internal view virtual returns (IStVault stVault) {\n    }\n\n    ///@return waiting is token amount that is not unbonded.\n    ///@return waitingInUSD is USD value of token amount that is not unbonded.\n    ///@return unbonded is token amount that is unbonded.\n    ///@return unbondedInUSD is USD value of token amount that is unbonded.\n    ///@return waitForTs is timestamp to wait to the next claim.\n    function getPoolUnbonded(address _claimer, uint _pid) public view returns (\n        uint waiting, uint waitingInUSD,\n        uint unbonded, uint unbondedInUSD,\n        uint waitForTs\n    ) {\n        if (_pid < tokens.length) {\n            address token = tokens[_pid];\n            IStVault stVault = getStVault(token);\n            if (address(stVault) != address(0)) {\n                uint[] memory reqIds = claimer2ReqIds[token][_claimer];\n\n                for (uint i = 0; i < reqIds.length; i ++) {\n                    uint reqId = reqIds[i];\n                    (bool _claimable, uint _tokenAmt,,, uint _waitForTs) = stVault.getWithdrawRequest(reqId);\n\n                    if (_claimable) {\n                        unbonded += _tokenAmt;\n                    } else {\n                        waiting += _tokenAmt;\n                        if (waitForTs == 0 || waitForTs > _waitForTs) waitForTs = _waitForTs;\n                    }\n                }\n\n                if (waiting > 0) waitingInUSD = getValueInUSD(token, waiting);\n                if (unbonded > 0) unbondedInUSD = getValueInUSD(token, unbonded);\n            }\n        }\n    }\n\n    function getPoolsUnbonded(address _claimer) external view returns (\n        address[] memory,\n        uint[] memory waitings,\n        uint[] memory waitingInUSDs,\n        uint[] memory unbondeds,\n        uint[] memory unbondedInUSDs,\n        uint[] memory waitForTses\n    ) {\n        uint poolCnt = tokens.length;\n        waitings = new uint[](poolCnt);\n        waitingInUSDs = new uint[](poolCnt);\n        unbondeds = new uint[](poolCnt);\n        unbondedInUSDs = new uint[](poolCnt);\n        waitForTses = new uint[](poolCnt);\n\n        for (uint _pid = 0; _pid < poolCnt; _pid++) {\n            (uint _waiting, uint _waitingInUSD, uint _unbonded, uint _unbondedInUSD, uint _waitForTs) = getPoolUnbonded(_claimer, _pid);\n            waitings[_pid] = _waiting;\n            waitingInUSDs[_pid] = _waitingInUSD;\n            unbondeds[_pid] = _unbonded;\n            unbondedInUSDs[_pid] = _unbondedInUSD;\n            waitForTses[_pid] = _waitForTs;\n        }\n        return (tokens, waitings, waitingInUSDs, unbondeds, unbondedInUSDs, waitForTses);\n    }\n\n    function _getAllUnbonded(address _claimer) internal view returns (\n        uint waitingInUSD, uint unbondedInUSD, uint waitForTs\n    ) {\n        uint poolCnt = tokens.length;\n        for (uint _pid = 0; _pid < poolCnt; _pid ++) {\n            (, uint _waitingInUSD,, uint _unbondedInUSD, uint _waitForTs) = getPoolUnbonded(_claimer, _pid);\n            waitingInUSD += _waitingInUSD;\n            unbondedInUSD += _unbondedInUSD;\n            if (waitingInUSD > 0) {\n                if (waitForTs == 0 || waitForTs > _waitForTs) {\n                    waitForTs = _waitForTs;\n                }\n            }\n        }\n    }\n\n    function getAllUnbonded(address _claimer) external view returns (\n        uint waitingInUSD, uint unbondedInUSD, uint waitForTs\n    ) {\n        return _getAllUnbonded(_claimer);\n    }\n\n    function claim(address _claimer) external onlyVault returns (uint USDTAmt) {\n        USDTAmt = _claimAllAndTransfer(_claimer);\n    }\n\n    function _claimAllAndTransfer(address _claimer) internal returns (uint USDTAmt) {\n        // uint poolCnt = tokens.length;\n        // for (uint _pid = 0; _pid < poolCnt; _pid ++) {\n        //     USDTAmt += _claim(_claimer, _pid);\n        // }\n        // if (USDTAmt > 0) {\n        //     USDT.safeTransfer(vault, USDTAmt);\n        // }\n    }\n\n    function _claim(address _claimer, uint _pid) internal returns (uint USDTAmt) {\n        address token = tokens[_pid];\n        IStVault stVault = getStVault(token);\n        if (address(stVault) != address(0)) {\n            uint[] memory reqIds = claimer2ReqIds[token][_claimer];\n\n            (uint amount, uint claimedCount, bool[] memory claimed) = stVault.claimMulti(reqIds);\n            if (amount > 0) {\n                uint[] memory claimedReqIds = new uint[](claimedCount);\n                uint index;\n                for (uint i = 0; i < reqIds.length; i ++) {\n                    if (claimed[i]) {\n                        claimedReqIds[index++] = reqIds[i];\n                    }\n                }\n                removeReqIds(token, _claimer, claimedReqIds);\n\n                USDTAmt = _swapForUSDT(address(token), amount);\n                emit Claim(_claimer, token, amount, USDTAmt);\n            }\n        }\n    }\n\n    function _balanceOf(address _token, address _account) internal view returns (uint) {\n        return (_token != Const.NATIVE_ASSET)\n            ? IERC20Upgradeable(_token).balanceOf(_account)\n            : _account.balance;\n    }\n\n    function _assetDecimals(address _asset) internal view returns (uint8 _decimals) {\n        _decimals = (_asset == Const.NATIVE_ASSET) ? 18 : IERC20UpgradeableExt(_asset).decimals();\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit SetAdminWallet(oldAdmin, _admin);\n    }\n\n    function setVault(address _vault) external onlyOwner {\n        require(vault == address(0), \"Vault set\");\n        vault = _vault;\n    }\n\n    /// @return the price of USDT in USD.\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\n        return priceOracle.getAssetPrice(address(USDT));\n    }\n\n    function getEachPoolInUSD() public view returns (address[] memory, uint[] memory pools) {\n        return (tokens, _getEachPoolInUSD());\n    }\n\n    function _getEachPoolInUSD() private view returns (uint[] memory pools) {\n        uint poolCnt = tokens.length;\n        pools = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            pools[i] = _getPoolInUSD(i);\n        }\n    }\n\n    function _getPoolInUSD(uint _pid) internal view virtual returns (uint pool) {\n        _pid;\n        pool = getValueInUSD(address(USDT), USDT.balanceOf(address(this)) / tokens.length);\n        // address token = tokens[_pid];\n        // IStVault stVault = getStVault(token);\n        // if (address(stVault) != address(0)) {\n        //     pool = getStVaultPoolInUSD(stVault);\n        // } else {\n        //     uint amount = _balanceOf(token, address(this));\n        //     if (0 < amount) {\n        //         pool = getValueInUSD(token, amount);\n        //     }\n        // }\n    }\n\n    function getStVaultPoolInUSD(IStVault _stVault) internal view returns (uint) {\n        uint stVaultTotalSupply = _stVault.totalSupply();\n        return stVaultTotalSupply == 0 ? 0 : _stVault.getAllPoolInUSD() * _stVault.balanceOf(address(this)) / stVaultTotalSupply;\n    }\n\n    ///@return the value in USD. it's scaled by 1e18;\n    function getValueInUSD(address _asset, uint _amount) internal view returns (uint) {\n        (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(_asset);\n        uint8 _decimals = _assetDecimals(_asset);\n        return Token.changeDecimals(_amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint[] memory pools = _getEachPoolInUSD();\n        uint poolCnt = pools.length;\n        uint allPool;\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n\n        if (paused()) {\n            (uint waitingInUSD, uint unbondedInUSD,) = getEmergencyWithdrawalUnbonded();\n            allPool += (waitingInUSD + unbondedInUSD);\n        }\n        return allPool;\n    }\n\n    function getCurrentTokenCompositionPerc() public view returns (address[] memory, uint[] memory percentages) {\n        uint[] memory pools = _getEachPoolInUSD();\n        uint poolCnt = pools.length;\n        uint allPool;\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n\n        uint defaultTargetPerc = poolCnt == 0 ? 0 : Const.DENOMINATOR / poolCnt;\n        percentages = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            percentages[i] = allPool == 0 ? defaultTargetPerc : pools[i] * Const.DENOMINATOR / allPool;\n        }\n        return (tokens, percentages);\n    }\n\n    function getAPR() public view virtual returns (uint) {\n        (address[] memory _tokens, uint[] memory perc) = getCurrentTokenCompositionPerc();\n        uint allApr;\n        uint poolCnt = _tokens.length;\n        for (uint _pid = 0; _pid < poolCnt; _pid ++) {\n            IStVault stVault = getStVault(tokens[_pid]);\n            if (address(stVault) != address(0)) {\n                allApr += stVault.getAPR() * perc[_pid];\n            }\n        }\n        return (allApr / Const.DENOMINATOR);\n    }\n\n    receive() external payable {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[39] private __gap;\n}\n"
    },
    "contracts/sti/strategy/EthSTIStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./BasicSTIStrategy.sol\";\nimport \"../../bni/constant/EthConstant.sol\";\nimport \"../../../interfaces/IStVault.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract EthSTIStrategy is BasicSTIStrategy {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IStVault public ETHVault;\n    IStVault public MATICVault;\n\n    function initialize1(\n        address _admin,\n        address _priceOracle,\n        IStVault _ETHVault, IStVault _MATICVault\n    ) public initializer {\n        super.initialize(\n            _admin,\n            _priceOracle,\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, // Uniswap2\n            EthConstant.WETH,\n            EthConstant.USDT,\n            Const.NATIVE_ASSET\n        );\n\n        tokens.push(EthConstant.MATIC);\n        updatePid();\n\n        ETHVault = _ETHVault;\n        MATICVault = _MATICVault;\n\n        IERC20Upgradeable(EthConstant.MATIC).safeApprove(address(MATICVault), type(uint).max);\n        IERC20Upgradeable(EthConstant.MATIC).safeApprove(address(router), type(uint).max);\n    }\n\n    function setStVault(IStVault _ETHVault, IStVault _MATICVault) external onlyOwner {\n        ETHVault = _ETHVault;\n        MATICVault = _MATICVault;\n\n        if (IERC20Upgradeable(EthConstant.MATIC).allowance(address(this), address(MATICVault)) == 0) {\n            IERC20Upgradeable(EthConstant.MATIC).safeApprove(address(MATICVault), type(uint).max);\n        }\n    }\n\n    function getStVault(address _token) internal view override returns (IStVault stVault) {\n        if (_token == Const.NATIVE_ASSET) {\n            stVault = ETHVault;\n        } else if (_token == EthConstant.MATIC) {\n            stVault = MATICVault;\n        }\n    }\n\n}\n"
    },
    "contracts/stVaults/lido/EthStMATICVault.sol": {
      "content": "//SPDX-License-Identifier: MIT\n//\n///@notice The EthStMATICVault contract stakes MATIC tokens into stMATIC on Ethereum.\n///@dev https://docs.polygon.lido.fi/contracts/st-matic\n//\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../BasicStVault.sol\";\nimport \"../../bni/constant/EthConstant.sol\";\n\ninterface IStakeManager {\n    function epoch() external view returns (uint);\n}\n\ninterface IPoLidoNFT {\n    function getOwnedTokens(address _address) external view returns (uint[] memory);\n    function tokenIdIndex() external view returns (uint);\n}\n\nstruct StMATIC_RequestWithdraw {\n    uint amount2WithdrawFromStMATIC;\n    uint validatorNonce;\n    uint requestEpoch;\n    address validatorAddress;\n}\n\ninterface IStMATIC {\n    function token2WithdrawRequest(uint _tokenId) external view returns (StMATIC_RequestWithdraw memory);\n    function stakeManager() external view returns (IStakeManager);\n    function poLidoNFT() external view returns (IPoLidoNFT);\n    function convertStMaticToMatic(uint _balance) external view returns (uint balanceInMatic, uint totalShares, uint totalPooledMatic);\n    function convertMaticToStMatic(uint _balance) external view returns (uint balanceInStMatic, uint totalShares, uint totalPooledMatic);\n    function getMaticFromTokenId(uint _tokenId) external view returns (uint);\n\n    function submit(uint _amount) external returns (uint);\n    function requestWithdraw(uint _amount) external;\n    function claimTokens(uint _tokenId) external;\n}\n\ncontract EthStMATICVault is BasicStVault {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    mapping(uint => uint) public tokenIds;\n    uint public first;\n    uint public last;\n\n    function initialize1(\n        address _treasury, address _admin,\n        address _priceOracle\n    ) public initializer {\n        super.initialize(\n            \"STI Staking MATIC\", \"stiStMATIC\",\n            _treasury, _admin,\n            _priceOracle,\n            EthConstant.MATIC,\n            EthConstant.stMATIC\n        );\n\n        unbondingPeriod = 4 days;\n        oneEpoch = 24 hours;\n\n        first = 1;\n        last = 0;\n\n        token.safeApprove(address(stToken), type(uint).max);\n    }\n\n    function _enqueue(uint _tokenId) private {\n        last += 1;\n        tokenIds[last] = _tokenId;\n    }\n\n    function _dequeue() private returns (uint _tokenId) {\n        require(last >= first);  // non-empty queue\n        _tokenId = tokenIds[first];\n        delete tokenIds[first];\n        first += 1;\n    }\n\n    function _invest(uint _amount) internal override returns (uint _invested) {\n        IStMATIC(address(stToken)).submit(_amount);\n        return _amount;\n    }\n\n    function _redeem(uint _stAmount) internal override returns (uint _redeemed) {\n        // Because _stAmount-stBalance may be a calculation delta in withdraw function,\n        // it will reduce the pendingRedeems even though no redeeming on the staking pool.\n        _redeemed = _stAmount;\n\n        uint stBalance = stToken.balanceOf(address(this));\n        _requestRedeem(_stAmount > stBalance ? stBalance : _stAmount);\n    }\n\n    function _requestRedeem(uint _stAmount) internal {\n        IStMATIC(address(stToken)).requestWithdraw(_stAmount);\n\n        IPoLidoNFT poLidoNFT = IStMATIC(address(stToken)).poLidoNFT();\n        _enqueue(poLidoNFT.tokenIdIndex());\n    }\n\n    function _claimUnbonded() internal override {\n        IStakeManager stakeManager = IStMATIC(address(stToken)).stakeManager();\n        uint epoch = stakeManager.epoch();\n\n        while (first <= last) {\n            StMATIC_RequestWithdraw memory request = IStMATIC(address(stToken)).token2WithdrawRequest(tokenIds[first]);\n            if (epoch < request.requestEpoch) {\n                // Not able to claim yet\n                break;\n            }\n            IStMATIC(address(stToken)).claimTokens(_dequeue());\n        }\n\n        if (last < first && paused()) {\n            // The tokens according to the emergency unbonding has been claimed\n            emergencyUnbondings = 0;\n        }\n    }\n\n    function _emergencyWithdraw(uint _pendingRedeems) internal override returns (uint _redeemed) {\n        uint stBalance = stToken.balanceOf(address(this));\n        if (stBalance >= minRedeemAmount) {\n            _requestRedeem(stBalance);\n            emergencyUnbondings = (stBalance > _pendingRedeems) ? stBalance - _pendingRedeems : 0;\n            _redeemed = stBalance;\n        }\n    }\n\n    ///@param _amount Amount of tokens\n    function getStTokenByPooledToken(uint _amount) public override view returns(uint) {\n        (uint balanceInStMatic,,) = IStMATIC(address(stToken)).convertMaticToStMatic(_amount);\n        return balanceInStMatic;\n    }\n\n    ///@param _stAmount Amount of stTokens\n    function getPooledTokenByStToken(uint _stAmount) public override view returns(uint) {\n        (uint balanceInMatic,,) = IStMATIC(address(stToken)).convertStMaticToMatic(_stAmount);\n        return balanceInMatic;\n    }\n\n    function getTokenUnbonded() public override view returns (uint _amount) {\n        IStakeManager stakeManager = IStMATIC(address(stToken)).stakeManager();\n        uint epoch = stakeManager.epoch();\n\n        for (uint i = first; i <= last; i ++) {\n            uint tokenId = tokenIds[i];\n            StMATIC_RequestWithdraw memory request = IStMATIC(address(stToken)).token2WithdrawRequest(tokenId);\n            if (epoch < request.requestEpoch) {\n                // Not able to claim yet\n                break;\n            }\n            _amount += IStMATIC(address(stToken)).getMaticFromTokenId(tokenId);\n        }\n    }\n}\n"
    },
    "contracts/stVaults/lido/EthStETHVault.sol": {
      "content": "//SPDX-License-Identifier: MIT\n//\n///@notice The EthStETHVault contract stakes ETH tokens into stETH on Ethereum.\n///@dev https://docs.polkadot.lido.fi/fundamentals/liquid-staking\n//\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../BasicStVault.sol\";\nimport \"../../bni/constant/EthConstant.sol\";\nimport \"../../../interfaces/ICurvePool.sol\";\nimport \"../../../libs/Const.sol\";\n\ninterface IStETH {\n    function getSharesByPooledEth(uint _ethAmount) external view returns (uint);\n    function getPooledEthByShares(uint _sharesAmount) external view returns (uint);\n\n    ///@notice Send funds to the pool with optional _referral parameter\n    ///@dev This function is alternative way to submit funds. Supports optional referral address.\n    ///@return Amount of StETH shares generated\n    function submit(address _referral) external payable returns (uint);\n}\n\ncontract EthStETHVault is BasicStVault {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    ICurvePool constant curveStEth = ICurvePool(0xDC24316b9AE028F1497c275EB9192a3Ea0f67022); // ETH + stETH\n\n    function initialize1(\n        address _treasury, address _admin,\n        address _priceOracle\n    ) public initializer {\n        super.initialize(\n            \"STI Staking ETH\", \"stiStETH\",\n            _treasury, _admin,\n            _priceOracle,\n            Const.NATIVE_ASSET, // ETH\n            EthConstant.stETH\n        );\n\n        oneEpoch = 24 hours;\n\n        stToken.safeApprove(address(curveStEth), type(uint).max);\n    }\n\n    function _invest(uint _amount) internal override returns (uint _invested) {\n        IStETH(address(stToken)).submit{value: _amount}(address(0));\n        return _amount;\n    }\n\n    function withdrawStToken(uint _stAmountToWithdraw) internal override returns (\n        uint _withdrawnStAmount,\n        uint _withdrawnAmount\n    ) {\n        _withdrawnAmount = swapStEthForEth(_stAmountToWithdraw);\n        _withdrawnStAmount = _stAmountToWithdraw;\n    }\n\n    function _emergencyWithdraw(uint _pendingRedeems) internal override returns (uint _redeemed) {\n        _pendingRedeems;\n        uint stBalance = stToken.balanceOf(address(this));\n        if (stBalance >= minRedeemAmount) {\n            swapStEthForEth(stBalance);\n            _redeemed = stBalance;\n        }\n    }\n\n    function swapStEthForEth(uint _stAmount) private returns (uint _ethAmount) {\n        uint amountOutMin = getPooledTokenByStToken(_stAmount) * 90 / 100;\n        uint balanceBefore = _tokenBalanceOf(address(this));\n        curveStEth.exchange(1, 0, _stAmount, amountOutMin);\n        _ethAmount = _tokenBalanceOf(address(this)) - balanceBefore;\n    }\n\n    ///@param _amount Amount of tokens\n    function getStTokenByPooledToken(uint _amount) public override view returns(uint) {\n        return _amount;\n        // return IStETH(address(stToken)).getSharesByPooledEth(_amount);\n    }\n\n    ///@param _stAmount Amount of stTokens\n    function getPooledTokenByStToken(uint _stAmount) public override view returns(uint) {\n        return _stAmount;\n        // return IStETH(address(stToken)).getPooledEthByShares(_stAmount);\n    }\n}\n"
    },
    "interfaces/ICurvePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\ninterface ICurvePool {\r\n    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\r\n    function remove_liquidity_one_coin(uint amount, int128 index, uint amountOutMin) external;\r\n    function get_virtual_price() external view returns (uint); // Precision is 18\r\n}\r\n\r\ninterface ICurvePool_coin2 {\r\n    function add_liquidity(uint[2] memory amounts, uint amountOutMin) external;\r\n}\r\n\r\ninterface ICurvePool_coin3 {\r\n    function add_liquidity(uint[3] memory amounts, uint amountOutMin) external;\r\n}\r\n\r\ninterface ICurvePool_V2 {\r\n    function remove_liquidity_one_coin(uint amount, uint index, uint amountOutMin) external;\r\n}\r\n"
    },
    "contracts/sti/STIMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"../bni/priceOracle/IPriceOracle.sol\";\nimport \"../bni/constant/AuroraConstant.sol\";\nimport \"../bni/constant/AvaxConstant.sol\";\nimport \"../bni/constant/BscConstant.sol\";\nimport \"../bni/constant/EthConstant.sol\";\nimport \"../../libs/Const.sol\";\nimport \"../../libs/BaseRelayRecipient.sol\";\nimport \"./ISTIMinter.sol\";\n\ninterface ISTI is IERC20Upgradeable {\n    function decimals() external view returns (uint8);\n    function mint(address account_, uint256 amount_) external;\n    function burn(uint256 amount) external;\n    function burnFrom(address account_, uint256 amount_) external;\n}\n\nerror OffchainLookup(address sender, string[] urls, bytes callData, bytes4 callbackFunction, bytes extraData);\n\ninterface Gateway {\n    function getCurrentTokenCompositionPerc1() external view returns (\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs,\n        bytes memory sig\n    );\n    function getAllPoolInUSD1() external view returns (\n        uint[] memory _allPoolInUSDs,\n        bytes memory sig\n    );\n    function getAllPoolInUSDAtNonce1(uint _nonce) external view returns(\n        uint[] memory _allPoolInUSDs,\n        bytes memory sig\n    );\n    function getPricePerFullShare1() external view returns (\n        uint[] memory _allPoolInUSDs,\n        bytes memory sig\n    );\n    function getAPR1() external view returns (\n        uint[] memory _allPoolInUSDs,  uint[] memory _APRs,\n        bytes memory sig\n    );\n    function getDepositTokenComposition1() external view returns (\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs,\n        bytes memory sig\n    );\n    function getPoolsUnbonded1(address claimer) external view returns (\n        uint[] memory _chainIDs, address[] memory _tokens,\n        uint[] memory _waitings, uint[] memory _waitingInUSDs,\n        uint[] memory _unbondeds, uint[] memory _unbondedInUSDs,\n        uint[] memory _waitForTses,\n        bytes memory sig\n    );\n    function getWithdrawableSharePerc1() external view returns(\n        uint[] memory _chainIDs, uint[] memory _sharePercs,\n        bytes memory sig\n    );\n}\n\ncontract STIMinter is\n    ISTIMinter,\n    AccessControlEnumerableUpgradeable,\n    BaseRelayRecipient,\n    PausableUpgradeable,\n    OwnableUpgradeable\n{\n    using ECDSAUpgradeable for bytes32;\n\n    enum OperationType { Null, Deposit, Withdrawal }\n\n    struct Operation {\n        address account;\n        OperationType operation;\n        uint pool; // total pool in USD\n        uint amount; // amount of USDT or shares\n        bool done;\n    }\n\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n\n    uint[] public chainIDs;\n    address[] public tokens;\n    uint[] public targetPercentages;\n    mapping(uint => mapping(address => uint)) public tid; // Token indices in arrays\n\n    address public admin;\n    ISTI public STI;\n    IPriceOracle public priceOracle;\n\n    string[] public urls;\n    address public gatewaySigner;\n\n    Operation[] public operations; // The nonce start from 1.\n    mapping(address => uint) public userLastOperationNonce;\n\n    address public userAgent;\n\n    event AddToken(uint indexed chainID, address indexed token, uint indexed tid);\n    event RemoveToken(uint indexed chainID, address indexed token, uint indexed tid, uint targetPerc);\n    event NewOperation(address indexed account, OperationType indexed operation, uint amount, uint indexed nonce);\n    event Mint(address indexed caller, uint indexed amtDeposit, uint indexed shareMinted);\n    event Burn(address indexed caller, uint indexed shareBurned);\n\n    function initialize(\n        address _admin, address _userAgent, address _biconomy,\n        address _STI, address _priceOracle\n    ) external virtual initializer {\n        __Ownable_init();\n        address _owner = owner();\n        admin = _admin;\n        userAgent = _userAgent;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\n        if (_admin != address(0)) _setupRole(ADMIN_ROLE, _admin);\n        if (_userAgent != address(0)) _setupRole(ADMIN_ROLE, _userAgent);\n\n        trustedForwarder = _biconomy;\n        STI = ISTI(_STI);\n        priceOracle = IPriceOracle(_priceOracle);\n\n        chainIDs.push(EthConstant.CHAINID);\n        tokens.push(Const.NATIVE_ASSET); // ETH\n        chainIDs.push(EthConstant.CHAINID);\n        tokens.push(EthConstant.MATIC);\n        chainIDs.push(BscConstant.CHAINID);\n        tokens.push(Const.NATIVE_ASSET); // BNB\n        chainIDs.push(AvaxConstant.CHAINID);\n        tokens.push(Const.NATIVE_ASSET); // AVAX\n        chainIDs.push(AuroraConstant.CHAINID);\n        tokens.push(AuroraConstant.WNEAR);\n\n        targetPercentages.push(2000); // 20%\n        targetPercentages.push(2000); // 20%\n        targetPercentages.push(2000); // 20%\n        targetPercentages.push(2000); // 20%\n        targetPercentages.push(2000); // 20%\n\n        updateTid();\n\n        urls.push(\"http://localhost:8001/\");\n        gatewaySigner = _admin;\n    }\n\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _revokeRole(DEFAULT_ADMIN_ROLE, owner());\n        super.transferOwnership(newOwner);\n        if (newOwner != address(0)) _setupRole(DEFAULT_ADMIN_ROLE, newOwner);\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        if (oldAdmin != address(0)) _revokeRole(ADMIN_ROLE, oldAdmin);\n        admin = _admin;\n        if (_admin != address(0)) _setupRole(ADMIN_ROLE, _admin);\n    }\n\n    function setUserAgent(address _userAgent) external onlyOwner {\n        address oldAgent = userAgent;\n        if (oldAgent != address(0)) _revokeRole(ADMIN_ROLE, oldAgent);\n        userAgent = _userAgent;\n        if (_userAgent != address(0)) _setupRole(ADMIN_ROLE, _userAgent);\n    }\n\n    function updateTid() internal {\n        uint[] memory _chainIDs = chainIDs;\n        address[] memory _tokens = tokens;\n\n        uint tokenCnt = _tokens.length;\n        for (uint i = 0; i < tokenCnt; i ++) {\n            tid[_chainIDs[i]][_tokens[i]] = i;\n        }\n    }\n\n    function setBiconomy(address _biconomy) external onlyOwner {\n        trustedForwarder = _biconomy;\n    }\n\n    function _msgSender() internal override(ContextUpgradeable, BaseRelayRecipient) view returns (address) {\n        return BaseRelayRecipient._msgSender();\n    }\n\n    function versionRecipient() external pure override returns (string memory) {\n        return \"1\";\n    }\n\n    function setGatewaySigner(address _signer) external onlyOwner {\n        gatewaySigner = _signer;\n    }\n\n    function setUrls(string[] memory _urls) external onlyOwner {\n        urls = _urls;\n    }\n\n    /// @notice After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\n    function addToken(uint _chainID, address _token) external onlyOwner {\n        uint _tid = tid[_chainID][_token];\n        require ((_tid == 0 && _chainID != chainIDs[0] && _token != tokens[0]), \"Already added\");\n\n        chainIDs.push(_chainID);\n        tokens.push(_token);\n        targetPercentages.push(0);\n\n        _tid = tokens.length-1;\n        tid[_chainID][_token] = _tid;\n\n        emit AddToken(_chainID, _token, _tid);\n    }\n\n    /// @notice After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\n    function removeToken(uint _tid) external onlyOwner {\n        uint tokenCnt = tokens.length;\n        require(_tid < tokenCnt, \"Invalid tid\");\n\n        uint _chainID = chainIDs[_tid];\n        address _token = tokens[_tid];\n        uint _targetPerc = targetPercentages[_tid];\n\n        chainIDs[_tid] = chainIDs[tokenCnt-1];\n        chainIDs.pop();\n        tokens[_tid] = tokens[tokenCnt-1];\n        tokens.pop();\n        targetPercentages[_tid] = targetPercentages[tokenCnt-1];\n        targetPercentages.pop();\n\n        tid[_chainID][_token] = 0;\n        updateTid();\n\n        emit RemoveToken(_chainID, _token, _tid, _targetPerc);\n    }\n\n    /// @notice The length of array is based on token count.\n    function setTokenCompositionTargetPerc(uint[] calldata _targetPerc) public onlyOwner {\n        uint targetCnt = _targetPerc.length;\n        require(targetCnt == targetPercentages.length, \"Invalid count\");\n\n        uint sum;\n        for (uint i = 0; i < targetCnt; i ++) {\n            targetPercentages[i] = _targetPerc[i];\n            sum += _targetPerc[i];\n        }\n        require(sum == Const.DENOMINATOR, \"Invalid parameter\");\n    }\n\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\n    function getEachPoolInUSD(\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs\n    ) private view returns (uint[] memory pools) {\n        uint inputCnt = _tokens.length;\n        uint tokenCnt = tokens.length;\n        pools = new uint[](tokenCnt);\n\n        for (uint i = 0; i < inputCnt; i ++) {\n            uint _chainID = _chainIDs[i];\n            address _token = _tokens[i];\n            uint _tid = tid[_chainID][_token];\n            if (tokenCnt <= _tid) continue;\n            if (_tid == 0 && (_chainID != chainIDs[0] || _token != tokens[0])) continue;\n\n            pools[_tid] = _poolInUSDs[i];\n        }\n    }\n\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\n    function getCurrentTokenCompositionPerc(\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs\n    ) public view returns (\n        uint[] memory, address[] memory, uint[] memory pools, uint[] memory percentages\n    ) {\n        pools = getEachPoolInUSD(_chainIDs, _tokens, _poolInUSDs);\n        uint poolCnt = pools.length;\n\n        uint allPool;\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n\n        percentages = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            percentages[i] = allPool == 0 ? targetPercentages[i] : pools[i] * Const.DENOMINATOR / allPool;\n        }\n\n        return (chainIDs, tokens, pools, percentages);\n    }\n    function getCurrentTokenCompositionPerc1() external view returns (\n        uint[] memory, address[] memory, uint[] memory, uint[] memory\n    ) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getCurrentTokenCompositionPerc1.selector),\n            STIMinter.getCurrentTokenCompositionPercWithSig.selector,\n            abi.encode(0)\n        );\n    }\n    function getCurrentTokenCompositionPercWithSig(bytes calldata result, bytes calldata extraData) external view returns(\n        uint[] memory, address[] memory, uint[] memory, uint[] memory\n    ) {\n        extraData;\n        (uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, bytes memory sig)\n            = abi.decode(result, (uint[], address[], uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_chainIDs, _tokens, _poolInUSDs))\n        )).recover(sig);\n        require(gatewaySigner == recovered, \"Signer is incorrect\");\n\n        return getCurrentTokenCompositionPerc(_chainIDs, _tokens, _poolInUSDs);\n    }\n\n    /// @notice The length of array is based on network count. And the lengths should be same on the arraies.\n    function getAllPoolInUSD(uint[] memory _allPoolInUSDs) public pure returns (uint) {\n        uint networkCnt = _allPoolInUSDs.length;\n        uint allPoolInUSD;\n        for (uint i = 0; i < networkCnt; i ++) {\n            allPoolInUSD += _allPoolInUSDs[i];\n        }\n        return allPoolInUSD;\n    }\n    function getAllPoolInUSD1() external view returns (uint) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getAllPoolInUSD1.selector),\n            STIMinter.getAllPoolInUSD1WithSig.selector,\n            abi.encode(0)\n        );\n    }\n    function getAllPoolInUSD1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\n        extraData;\n        (uint[] memory _allPoolInUSDs, bytes memory sig) = abi.decode(result, (uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_allPoolInUSDs))\n        )).recover(sig);\n        require(gatewaySigner == recovered, \"Signer is incorrect\");\n\n        return getAllPoolInUSD(_allPoolInUSDs);\n    }\n\n    function getAllPoolInUSDAtNonce1(uint _nonce) external view returns (uint) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getAllPoolInUSDAtNonce1.selector, _nonce),\n            STIMinter.getAllPoolInUSD1WithSig.selector,\n            abi.encode(_nonce)\n        );\n    }\n\n    /// @notice Can be used for calculate both user shares & APR\n    function getPricePerFullShare(uint[] memory _allPoolInUSDs) public view returns (uint) {\n        uint _totalSupply = STI.totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return getAllPoolInUSD(_allPoolInUSDs) * 1e18 / _totalSupply;\n    }\n    function getPricePerFullShare1() external view returns (uint) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getPricePerFullShare1.selector),\n            STIMinter.getPricePerFullShare1WithSig.selector,\n            abi.encode(0)\n        );\n    }\n    function getPricePerFullShare1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\n        extraData;\n        (uint[] memory _allPoolInUSDs, bytes memory sig) = abi.decode(result, (uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_allPoolInUSDs))\n        )).recover(sig);\n        require(gatewaySigner == recovered, \"Signer is incorrect\");\n\n        return getPricePerFullShare(_allPoolInUSDs);\n    }\n\n    /// @notice The length of array is based on network count. And the lengths should be same on the arraies.\n    function getAPR(uint[] memory _allPoolInUSDs, uint[] memory _APRs) public pure returns (uint) {\n        uint networkCnt = _allPoolInUSDs.length;\n        require(networkCnt == _APRs.length, \"Not match array length\");\n\n        uint pool = getAllPoolInUSD(_allPoolInUSDs);\n        if (pool == 0) return 0;\n\n        uint allApr;\n        for (uint i = 0; i < networkCnt; i ++) {\n            allApr += (_APRs[i] * _allPoolInUSDs[i]);\n        }\n        return (allApr / pool);\n    }\n    function getAPR1() external view returns (uint) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getAPR1.selector),\n            STIMinter.getAPR1WithSig.selector,\n            abi.encode(0)\n        );\n    }\n    function getAPR1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\n        extraData;\n        (uint[] memory _allPoolInUSDs,  uint[] memory _APRs, bytes memory sig) = abi.decode(result, (uint[], uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_allPoolInUSDs, _APRs))\n        )).recover(sig);\n        require(gatewaySigner == recovered, \"Signer is incorrect\");\n\n        return getAPR(_allPoolInUSDs, _APRs);\n    }\n\n    /// @return the price of USDT in USD.\n    function getUSDTPriceInUSD() public view virtual returns(uint, uint8) {\n        return priceOracle.getAssetPrice(AvaxConstant.USDT);\n    }\n\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\n    /// @param _USDT6Amt amount of USDT with 6 decimals\n    /// @return _USDT6Amts amount of USDT should be deposited to each pools\n    function getDepositTokenComposition(\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, uint _USDT6Amt\n    ) public view returns (\n        uint[] memory, address[] memory, uint[] memory _USDT6Amts\n    ) {\n        (,, uint[] memory pools, uint[] memory perc) = getCurrentTokenCompositionPerc(_chainIDs, _tokens, _poolInUSDs);\n        uint poolCnt = perc.length;\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n\n        uint allPool = _USDT6Amt * 1e12 * USDTPriceInUSD / (10 ** USDTPriceDecimals); // USDT's decimals is 6\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n\n        uint totalAllocation;\n        uint[] memory allocations = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            uint target = allPool * targetPercentages[i] / Const.DENOMINATOR;\n            if (pools[i] < target) {\n                uint diff = target - pools[i];\n                allocations[i] = diff;\n                totalAllocation += diff;\n            }\n        }\n\n        _USDT6Amts = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            _USDT6Amts[i] = _USDT6Amt * allocations[i] / totalAllocation;\n        }\n\n        return (chainIDs, tokens, _USDT6Amts);\n    }\n    function getDepositTokenComposition1(uint _USDT6Amt) external view returns (\n        uint[] memory, address[] memory, uint[] memory\n    ) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getDepositTokenComposition1.selector),\n            STIMinter.getDepositTokenComposition1WithSig.selector,\n            abi.encode(_USDT6Amt)\n        );\n    }\n    function getDepositTokenComposition1WithSig(bytes calldata result, bytes calldata extraData) external view returns(\n        uint[] memory, address[] memory, uint[] memory\n    ) {\n        (uint _USDT6Amt) = abi.decode(extraData, (uint));\n        (uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, bytes memory sig)\n            = abi.decode(result, (uint[], address[], uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_chainIDs, _tokens, _poolInUSDs))\n        )).recover(sig);\n        require(gatewaySigner == recovered, \"Signer is incorrect\");\n\n        return getDepositTokenComposition(_chainIDs, _tokens, _poolInUSDs, _USDT6Amt);\n    }\n\n    ///@return _chainIDs is an array of chain IDs.\n    ///@return _tokens is an array of tokens.\n    ///@return _waitings is an array of token amounts that is not unbonded.\n    ///@return _waitingInUSDs is an array of USD value of token amounts that is not unbonded.\n    ///@return _unbondeds is an array of token amounts that is unbonded.\n    ///@return _unbondedInUSDs is an array USD value of token amounts that is unbonded.\n    ///@return _waitForTses is an array of timestamps to wait to the next claim.\n    function getPoolsUnbonded1(address _account) external view returns (\n        uint[] memory, // _chainIDs\n        address[] memory, // _tokens\n        uint[] memory, // _waitings\n        uint[] memory, // _waitingInUSDs\n        uint[] memory, // _unbondeds\n        uint[] memory, // _unbondedInUSDs\n        uint[] memory // _waitForTses\n    ) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getPoolsUnbonded1.selector, _account),\n            STIMinter.getPoolsUnbonded1WithSig.selector,\n            abi.encode(_account)\n        );\n    }\n    function getPoolsUnbonded1WithSig(bytes calldata result, bytes calldata) external view returns(\n        uint[] memory _chainIDs,\n        address[] memory _tokens,\n        uint[] memory _waitings,\n        uint[] memory _waitingInUSDs,\n        uint[] memory _unbondeds,\n        uint[] memory _unbondedInUSDs,\n        uint[] memory _waitForTses\n    ) {\n        bytes memory sig;\n        (_chainIDs, _tokens, _waitings, _waitingInUSDs, _unbondeds, _unbondedInUSDs, _waitForTses, sig)\n            = abi.decode(result, (uint[], address[], uint[], uint[], uint[], uint[], uint[], bytes));\n\n        bytes32 messageHash1 = keccak256(abi.encodePacked(_chainIDs, _tokens, _waitings, _waitingInUSDs, _unbondeds, _unbondedInUSDs));\n        bytes32 messageHash2 = keccak256(abi.encodePacked(_waitForTses));\n        bytes32 messageHash = keccak256(abi.encodePacked(messageHash1, messageHash2));\n        address recovered = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", messageHash)).recover(sig);\n        require(gatewaySigner == recovered, \"Signer is incorrect\");\n    }\n\n    /// @param _share amount of STI to be withdrawn\n    /// @return _sharePerc percentage of assets which should be withdrawn. It's 18 decimals\n    function getWithdrawPerc(address _account, uint _share) public view returns (uint _sharePerc) {\n        require(0 < _share && _share <= STI.balanceOf(_account), \"Invalid share amount\");\n        return (_share * 1e18) / STI.totalSupply();\n    }\n\n    function getWithdrawableSharePerc1() external view returns (\n        uint // _sharePerc\n    ) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getWithdrawableSharePerc1.selector),\n            STIMinter.getWithdrawableSharePerc1WithSig.selector,\n            abi.encode(0)\n        );\n    }\n    function getWithdrawableSharePerc1WithSig(bytes calldata result, bytes calldata extraData) external view returns(\n        uint _sharePerc\n    ) {\n        extraData;\n        (uint[] memory _chainIDs, uint[] memory _sharePercs, bytes memory sig)\n            = abi.decode(result, (uint[], uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_chainIDs, _sharePercs))\n        )).recover(sig);\n        require(gatewaySigner == recovered, \"Signer is incorrect\");\n\n        uint length = _sharePercs.length;\n        if (length > 0) {\n            _sharePerc = _sharePercs[0];\n        }\n        for (uint i = 1; i < length; i++) {\n            uint perc = _sharePercs[i];\n            if (_sharePerc > perc) _sharePerc = perc;\n        }\n    }\n\n    function getNonce() public view returns (uint) {\n        return operations.length;\n    }\n\n    function getOperation(uint _nonce) public view returns (Operation memory) {\n        return operations[_nonce - 1];\n    }\n\n    function _checkAndAddOperation(address _account, OperationType _operation, uint _pool, uint _amount) internal {\n        uint nonce = userLastOperationNonce[_account];\n        if (nonce > 0) {\n            Operation memory op = getOperation(nonce);\n            require(op.done, \"Previous operation not finished\");\n        }\n        operations.push(Operation({\n            account: _account,\n            operation: _operation,\n            pool: _pool,\n            amount: _amount,\n            done: false\n        }));\n        nonce = getNonce();\n        userLastOperationNonce[_account] = nonce;\n        emit NewOperation(_account, _operation, _amount, nonce);\n    }\n\n    function _checkAndExitOperation(address _account, OperationType _operation) internal returns (uint _pool, uint _amount) {\n        uint nonce = userLastOperationNonce[_account];\n        require(nonce > 0, \"No operation\");\n\n        Operation memory op = getOperation(nonce);\n        require(op.operation == _operation && op.done == false, \"Already finished\");\n\n        operations[nonce - 1].done = true;\n        return (op.pool, op.amount);\n    }\n\n    /// @param _account account to which BNIs will be minted\n    /// @param _pool total pool in USD\n    /// @param _USDT6Amt USDT with 6 decimals to be deposited\n    function initDepositByAdmin(address _account, uint _pool, uint _USDT6Amt) external onlyRole(ADMIN_ROLE) whenNotPaused {\n        _checkAndAddOperation(_account, OperationType.Deposit, _pool, _USDT6Amt);\n    }\n\n    /// @dev mint STIs according to the deposited USDT\n    /// @param _account account to which STIs will be minted\n    /// @param _USDT6Amt the deposited USDT with 6 decimals.\n    function mintByAdmin(address _account, uint _USDT6Amt) external onlyRole(ADMIN_ROLE) whenNotPaused {\n        (uint pool,) = _checkAndExitOperation(_account, OperationType.Deposit);\n\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n        uint amtDeposit = _USDT6Amt * 1e12 * USDTPriceInUSD / (10 ** USDTPriceDecimals); // USDT's decimals is 6\n\n        uint _totalSupply = STI.totalSupply();\n        uint share = (pool == 0 ||_totalSupply == 0)  ? amtDeposit : _totalSupply * amtDeposit / pool;\n        // When assets invested in strategy, around 0.3% lost for swapping fee. We will consider it in share amount calculation to avoid pricePerFullShare fall down under 1.\n        share = share * 997 / 1000;\n\n        STI.mint(_account, share);\n        emit Mint(_account, amtDeposit, share);\n    }\n\n    /// @dev mint STIs according to the deposited USDT\n    /// @param _account account to which STIs will be minted\n    /// @param _pool total pool in USD\n    /// @param _share amount of STI to be burnt\n    function burnByAdmin(address _account, uint _pool, uint _share) external onlyRole(ADMIN_ROLE) {\n        require(0 < _share && _share <= STI.balanceOf(_account), \"Invalid share amount\");\n        _checkAndAddOperation(_account, OperationType.Withdrawal, _pool, _share);\n\n        STI.burnFrom(_account, _share);\n        emit Burn(_account, _share);\n    }\n\n    function exitWithdrawalByAdmin(address _account) external onlyRole(ADMIN_ROLE) {\n        _checkAndExitOperation(_account, OperationType.Withdrawal);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/sti/STIMinterTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./STIMinter.sol\";\nimport \"../bni/priceOracle/IPriceOracle.sol\";\nimport \"../bni/constant/AuroraConstantTest.sol\";\nimport \"../bni/constant/AvaxConstantTest.sol\";\nimport \"../bni/constant/BscConstantTest.sol\";\nimport \"../bni/constant/EthConstantTest.sol\";\nimport \"../../libs/Const.sol\";\n\ncontract STIMinterTest is STIMinter {\n\n    function initialize(\n        address _admin, address _userAgent, address _biconomy,\n        address _STI, address _priceOracle\n    ) external override initializer {\n        __Ownable_init();\n        address _owner = owner();\n        admin = _admin;\n        userAgent = _userAgent;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\n        _setupRole(ADMIN_ROLE, _admin);\n        _setupRole(ADMIN_ROLE, _userAgent);\n\n        trustedForwarder = _biconomy;\n        STI = ISTI(_STI);\n        priceOracle = IPriceOracle(_priceOracle);\n\n        chainIDs.push(EthConstantTest.CHAINID);\n        tokens.push(Const.NATIVE_ASSET); // ETH\n        chainIDs.push(EthConstantTest.CHAINID);\n        tokens.push(EthConstantTest.MATIC);\n        chainIDs.push(BscConstantTest.CHAINID);\n        tokens.push(Const.NATIVE_ASSET); // BNB\n        chainIDs.push(AvaxConstantTest.CHAINID);\n        tokens.push(Const.NATIVE_ASSET); // AVAX\n        chainIDs.push(AuroraConstantTest.CHAINID);\n        tokens.push(AuroraConstantTest.WNEAR);\n\n        targetPercentages.push(2000); // 20%\n        targetPercentages.push(2000); // 20%\n        targetPercentages.push(2000); // 20%\n        targetPercentages.push(2000); // 20%\n        targetPercentages.push(2000); // 20%\n\n        updateTid();\n\n        urls.push(\"http://localhost:8001/\");\n        gatewaySigner = _admin;\n    }\n\n    /// @return the price of USDT in USD.\n    function getUSDTPriceInUSD() public view override returns(uint, uint8) {\n        return priceOracle.getAssetPrice(EthConstantTest.USDT);\n    }\n}\n"
    },
    "contracts/stVaults/ankr/BscStBNBVaultTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\n//\n///@notice The AvaxStAVAXVault contract stakes AVAX tokens into aAVAXb on Avalanche.\n///@dev https://www.ankr.com/docs/staking/liquid-staking/avax/staking-mechanics\n//\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\nimport \"./BscStBNBVault.sol\";\nimport \"../../bni/constant/BscConstantTest.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract BscStBNBVaultTest is BscStBNBVault {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    function initialize1(\n        address _treasury, address _admin,\n        address _priceOracle\n    ) public override initializer {\n        super.initialize(\n            \"STI Staking BNB\", \"stiStBNB\",\n            _treasury, _admin,\n            _priceOracle,\n            Const.NATIVE_ASSET, // BNB\n            BscConstantTest.aBNBb\n        );\n\n        binancePool = IBinancePool(0x3C9205b5d4B312cA7C4d28110C91Fe2c74718a94);\n\n        unbondingPeriod = 14 days;\n        minInvestAmount = oneToken * 1002 / 1000;\n        minRedeemAmount = oneStToken;\n        oneEpoch = 24 hours;\n\n        stToken.safeApprove(address(binancePool), type(uint).max);\n    }\n}\n"
    },
    "contracts/stVaults/ankr/BscStBNBVault.sol": {
      "content": "//SPDX-License-Identifier: MIT\n//\n///@notice The AvaxStAVAXVault contract stakes AVAX tokens into aAVAXb on Avalanche.\n///@dev https://www.ankr.com/docs/staking/liquid-staking/avax/staking-mechanics\n//\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\nimport \"../BasicStVault.sol\";\nimport \"../../bni/constant/BscConstant.sol\";\nimport \"../../../libs/Const.sol\";\n\ninterface IBinancePool {\n    function stakeAndClaimBonds() external payable;\n    function stakeAndClaimCerts() external payable;\n    function pendingUnstakesOf(address claimer) external view returns (uint);\n    function unstakeBonds(uint amount) external;\n    function unstakeCerts(uint shares) external;\n}\n\ninterface IABNBb {\n    function ratio() external view returns (uint);\n    function bondsToShares(uint amount) external view returns (uint);\n    function sharesToBonds(uint amount) external view returns (uint);\n}\n\ncontract BscStBNBVault is BasicStVault {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint256 constant TEN_DECIMALS = 1e10;\n    IBinancePool public binancePool;\n\n    function initialize1(\n        address _treasury, address _admin,\n        address _priceOracle\n    ) public virtual initializer {\n        super.initialize(\n            \"STI Staking BNB\", \"stiStBNB\",\n            _treasury, _admin,\n            _priceOracle,\n            Const.NATIVE_ASSET, // BNB\n            BscConstant.aBNBb\n        );\n\n        binancePool = IBinancePool(0x66BEA595AEFD5a65799a920974b377Ed20071118);\n\n        unbondingPeriod = 14 days;\n        minInvestAmount = oneToken * 1002 / 1000;\n        minRedeemAmount = oneStToken;\n        oneEpoch = 24 hours;\n\n        stToken.safeApprove(address(binancePool), type(uint).max);\n    }\n\n    function _invest(uint _amount) internal override returns (uint _invested) {\n        _amount -= (_amount % TEN_DECIMALS); // To avoid the error of \"invalid received BNB amount: precision loss in amount conversion\" in TokenHub.transferOut()\n        binancePool.stakeAndClaimBonds{value: _amount}();\n        return _amount;\n    }\n\n    function _redeem(uint _stAmount) internal override returns (uint _redeemed) {\n        // Because _stAmount-stBalance may be a calculation delta in withdraw function,\n        // it will reduce the pendingRedeems even though no redeeming on the staking pool.\n        _redeemed = _stAmount;\n\n        uint stBalance = stToken.balanceOf(address(this));\n        if (stBalance > 0) {\n            binancePool.unstakeBonds(_stAmount > stBalance ? stBalance : _stAmount);\n        }\n    }\n\n    function getEmergencyUnbondings() public override view returns (uint) {\n        // binancePool automatically transfers the unbonded BNB to the claimer. This is why there is no _claimUnbonded here\n        uint unbondings = binancePool.pendingUnstakesOf(address(this));\n        return MathUpgradeable.min(unbondings, emergencyUnbondings);\n    }\n\n    function _emergencyWithdraw(uint _pendingRedeems) internal override returns (uint _redeemed) {\n        uint stBalance = stToken.balanceOf(address(this));\n        if (stBalance >= minRedeemAmount) {\n            binancePool.unstakeBonds(stBalance);\n            emergencyUnbondings = (stBalance > _pendingRedeems) ? stBalance - _pendingRedeems : 0;\n            _redeemed = stBalance;\n        }\n    }\n\n    ///@param _amount Amount of tokens\n    function getStTokenByPooledToken(uint _amount) public override view returns(uint) {\n        return _amount;\n        // return _amount * IABNBb(address(stToken)).ratio() / 1e18;\n    }\n\n    ///@param _stAmount Amount of stTokens\n    function getPooledTokenByStToken(uint _stAmount) public override view returns(uint) {\n        return _stAmount;\n        // return _stAmount * 1e18 / IABNBb(address(stToken)).ratio();\n    }\n}\n"
    },
    "contracts/sti/strategy/BscSTIStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./BasicSTIStrategy.sol\";\nimport \"../../bni/constant/BscConstant.sol\";\nimport \"../../../interfaces/IStVault.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract BscSTIStrategy is BasicSTIStrategy {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IStVault public BNBVault;\n\n    function initialize1(\n        address _admin,\n        address _priceOracle,\n        IStVault _BNBVault\n    ) public virtual initializer {\n        super.initialize(\n            _admin,\n            _priceOracle,\n            0x10ED43C718714eb63d5aA57B78B54704E256024E, // PancakeSwap\n            BscConstant.WBNB,\n            BscConstant.USDT,\n            Const.NATIVE_ASSET\n        );\n\n        BNBVault = _BNBVault;\n    }\n\n    function setStVault(IStVault _BNBVault) external onlyOwner {\n        BNBVault = _BNBVault;\n    }\n\n    function getStVault(address _token) internal view override returns (IStVault stVault) {\n        if (_token == Const.NATIVE_ASSET) {\n            stVault = BNBVault;\n        }\n    }\n\n}\n"
    },
    "contracts/sti/strategy/BscSTIStrategyTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./BscSTIStrategy.sol\";\nimport \"../../bni/constant/BscConstantTest.sol\";\nimport \"../../../interfaces/IStVault.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract BscSTIStrategyTest is BscSTIStrategy {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    function initialize1(\n        address _admin,\n        address _priceOracle,\n        IStVault _BNBVault\n    ) public override initializer {\n        super.initialize(\n            _admin,\n            _priceOracle,\n            0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3, // PancakeSwap\n            BscConstantTest.WBNB,\n            BscConstantTest.USDT,\n            Const.NATIVE_ASSET\n        );\n\n        BNBVault = _BNBVault;\n    }\n\n}\n"
    },
    "contracts/bni/priceOracle/BscPriceOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"./PriceOracle.sol\";\nimport \"../constant/BscConstant.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract BscPriceOracle is PriceOracle {\n\n    function initialize() public virtual override initializer {\n        super.initialize();\n\n        address[] memory assets = new address[](5);\n        assets[0] = BscConstant.USDC;\n        assets[1] = BscConstant.USDT;\n        assets[2] = BscConstant.WBNB;\n        assets[3] = BscConstant.CAKE;\n        assets[4] = BscConstant.BUSD;\n        address[] memory sources = new address[](5);\n        sources[0] = 0x51597f405303C4377E36123cBc172b13269EA163;\n        sources[1] = 0xB97Ad0E74fa7d920791E90258A6E2085088b4320;\n        sources[2] = 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE;\n        sources[3] = 0xB6064eD41d4f67e353768aA239cA86f4F73665a1;\n        sources[4] = 0xcBb98864Ef56E9042e7d2efef76141f15731B82f;\n\n        setAssetSources(assets, sources);\n    }\n\n    function getAssetPrice(address asset) public virtual override view returns (uint price, uint8 decimals) {\n        if (asset == Const.NATIVE_ASSET) {\n            asset = BscConstant.WBNB;\n        }\n        return super.getAssetPrice(asset);\n    }\n}\n"
    },
    "contracts/bni/priceOracle/BscPriceOracleTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"./BscPriceOracle.sol\";\nimport \"../constant/BscConstantTest.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract BscPriceOracleTest is BscPriceOracle {\n\n    function initialize() public override initializer {\n        super.initialize();\n\n        address[] memory assets = new address[](5);\n        assets[0] = BscConstantTest.USDC;\n        assets[1] = BscConstantTest.USDT;\n        assets[2] = BscConstantTest.WBNB;\n        assets[3] = BscConstantTest.CAKE;\n        assets[4] = BscConstantTest.BUSD;\n        address[] memory sources = new address[](5);\n        sources[0] = 0x90c069C4538adAc136E051052E14c1cD799C41B7;\n        sources[1] = 0xEca2605f0BCF2BA5966372C99837b1F182d3D620;\n        sources[2] = 0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526;\n        sources[3] = 0x81faeDDfeBc2F8Ac524327d70Cf913001732224C;\n        sources[4] = 0x9331b55D9830EF609A2aBCfAc0FBCE050A52fdEa;\n\n        setAssetSources(assets, sources);\n    }\n\n    function getAssetPrice(address asset) public override view returns (uint price, uint8 decimals) {\n        if (asset == Const.NATIVE_ASSET) {\n            asset = BscConstantTest.WBNB;\n        }\n        return super.getAssetPrice(asset);\n    }\n}\n"
    },
    "contracts/bni/priceOracle/MoonbeamPriceOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"./PriceOracle.sol\";\nimport \"../constant/MoonbeamConstant.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract MoonbeamPriceOracle is PriceOracle {\n\n    function initialize() public virtual override initializer {\n        super.initialize();\n\n        address[] memory assets = new address[](3);\n        assets[0] = MoonbeamConstant.WGLMR;\n        assets[1] = MoonbeamConstant.USDC_mad;\n        assets[2] = MoonbeamConstant.xcDOT;\n        address[] memory sources = new address[](3);\n        sources[0] = 0x4497B606be93e773bbA5eaCFCb2ac5E2214220Eb;\n        sources[1] = 0xA122591F60115D63421f66F752EF9f6e0bc73abC;\n        sources[2] = 0x1466b4bD0C4B6B8e1164991909961e0EE6a66d8c;\n\n        setAssetSources(assets, sources);\n    }\n\n    function getAssetPrice(address asset) public virtual override view returns (uint price, uint8 decimals) {\n        if (asset == Const.NATIVE_ASSET) {\n            asset = MoonbeamConstant.WGLMR;\n        } else if (asset == MoonbeamConstant.USDT_mad) {\n            return (1e8, 8);\n        }\n        return super.getAssetPrice(asset);\n    }\n}\n"
    },
    "contracts/bni/priceOracle/EthPriceOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"./PriceOracle.sol\";\nimport \"../constant/EthConstant.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract EthPriceOracle is PriceOracle {\n\n    function initialize() public virtual override initializer {\n        super.initialize();\n\n        address[] memory assets = new address[](4);\n        assets[0] = EthConstant.USDT;\n        assets[1] = EthConstant.MATIC;\n        assets[2] = EthConstant.WETH;\n        assets[3] = EthConstant.USDC;\n        address[] memory sources = new address[](4);\n        sources[0] = 0x3E7d1eAB13ad0104d2750B8863b489D65364e32D;\n        sources[1] = 0x7bAC85A8a13A4BcD8abb3eB7d6b4d632c5a57676;\n        sources[2] = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\n        sources[3] = 0x8fFfFfd4AfB6115b954Bd326cbe7B4BA576818f6;\n\n        setAssetSources(assets, sources);\n    }\n\n    function getAssetPrice(address asset) public virtual override view returns (uint price, uint8 decimals) {\n        if (asset == Const.NATIVE_ASSET) {\n            asset = EthConstant.WETH;\n        }\n        return super.getAssetPrice(asset);\n    }\n\n}\n"
    },
    "contracts/bni/priceOracle/EthPriceOracleTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"./EthPriceOracle.sol\";\nimport \"../constant/EthConstantTest.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract EthPriceOracleTest is EthPriceOracle {\n\n    function initialize() public override initializer {\n        super.initialize();\n\n        address[] memory assets = new address[](4);\n        assets[0] = EthConstantTest.USDT;\n        assets[1] = EthConstantTest.MATIC;\n        assets[2] = EthConstantTest.WETH;\n        assets[3] = EthConstantTest.USDC;\n        address[] memory sources = new address[](4);\n        sources[0] = 0xa24de01df22b63d23Ebc1882a5E3d4ec0d907bFB;\n        sources[1] = 0x7794ee502922e2b723432DDD852B3C30A911F021;\n        sources[2] = 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e;\n        sources[3] = 0xa24de01df22b63d23Ebc1882a5E3d4ec0d907bFB;\n\n        setAssetSources(assets, sources);\n    }\n\n    function getAssetPrice(address asset) public override view returns (uint price, uint8 decimals) {\n        if (asset == Const.NATIVE_ASSET) {\n            asset = EthConstantTest.WETH;\n        }\n        return super.getAssetPrice(asset);\n    }\n\n}\n"
    },
    "contracts/bni/priceOracle/AvaxPriceOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"./PriceOracle.sol\";\nimport \"../constant/AvaxConstant.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract AvaxPriceOracle is PriceOracle {\n\n    function initialize() public virtual override initializer {\n        super.initialize();\n\n        address[] memory assets = new address[](3);\n        assets[0] = AvaxConstant.USDT;\n        assets[1] = AvaxConstant.WAVAX;\n        assets[2] = AvaxConstant.USDC;\n        address[] memory sources = new address[](3);\n        sources[0] = 0xEBE676ee90Fe1112671f19b6B7459bC678B67e8a;\n        sources[1] = 0x0A77230d17318075983913bC2145DB16C7366156;\n        sources[2] = 0xF096872672F44d6EBA71458D74fe67F9a77a23B9;\n\n        setAssetSources(assets, sources);\n    }\n\n    function getAssetPrice(address asset) public virtual override view returns (uint price, uint8 decimals) {\n        if (asset == Const.NATIVE_ASSET) {\n            asset = AvaxConstant.WAVAX;\n        }\n        return super.getAssetPrice(asset);\n    }\n}\n"
    },
    "contracts/bni/priceOracle/AvaxPriceOracleTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"./AvaxPriceOracle.sol\";\nimport \"../constant/AvaxConstantTest.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract AvaxPriceOracleTest is AvaxPriceOracle {\n\n    function initialize() public override initializer {\n        super.initialize();\n\n        address[] memory assets = new address[](2);\n        assets[0] = AvaxConstantTest.USDT;\n        assets[1] = AvaxConstantTest.WAVAX;\n        address[] memory sources = new address[](2);\n        sources[0] = 0x7898AcCC83587C3C55116c5230C17a6Cd9C71bad;\n        sources[1] = 0x5498BB86BC934c8D34FDA08E81D444153d0D06aD;\n\n        setAssetSources(assets, sources);\n    }\n\n    function getAssetPrice(address asset) public override view returns (uint price, uint8 decimals) {\n        if (asset == Const.NATIVE_ASSET) {\n            asset = AvaxConstantTest.WAVAX;\n        }\n        return super.getAssetPrice(asset);\n    }\n}\n"
    },
    "contracts/stVaults/ankr/AvaxStAVAXVaultTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\n//\n///@notice The AvaxStAVAXVault contract stakes AVAX tokens into aAVAXb on Avalanche.\n///@dev https://www.ankr.com/docs/staking/liquid-staking/avax/staking-mechanics\n//\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\nimport \"./AvaxStAVAXVault.sol\";\nimport \"../../bni/constant/AvaxConstantTest.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract AvaxStAVAXVaultTest is AvaxStAVAXVault {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    function initialize1(\n        address _treasury, address _admin,\n        address _priceOracle\n    ) public override initializer {\n        super.initialize(\n            \"STI Staking AVAX\", \"stiStAVAX\",\n            _treasury, _admin,\n            _priceOracle,\n            Const.NATIVE_ASSET, // AVAX\n            AvaxConstantTest.aAVAXb\n        );\n\n        avalanchePool = IAvalanchePool(0x0C29D40cBD3c9073f4C0c96Bf88Ae1B4b4FE1d11);\n\n        unbondingPeriod = 28 days;\n        minInvestAmount = avalanchePool.getMinimumStake();\n        oneEpoch = 24 hours;\n\n        stToken.safeApprove(address(avalanchePool), type(uint).max);\n    }\n}\n"
    },
    "contracts/stVaults/ankr/AvaxStAVAXVault.sol": {
      "content": "//SPDX-License-Identifier: MIT\n//\n///@notice The AvaxStAVAXVault contract stakes AVAX tokens into aAVAXb on Avalanche.\n///@dev https://www.ankr.com/docs/staking/liquid-staking/avax/staking-mechanics\n//\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\nimport \"../BasicStVault.sol\";\nimport \"../../bni/constant/AvaxConstant.sol\";\nimport \"../../../libs/Const.sol\";\n\ninterface IAvalanchePool {\n    function stakeAndClaimBonds() external payable;\n    function stakeAndClaimCerts() external payable;\n    function pendingAvaxClaimsOf(address claimer) external view returns (uint);\n    function claimBonds(uint amount) external;\n    function claimCerts(uint amount) external;\n    function getMinimumStake() external view returns (uint);\n}\n\ninterface IAAVAXb {\n    function ratio() external view returns (uint);\n    function sharesToBalance(uint amount) external view returns (uint);\n}\n\ncontract AvaxStAVAXVault is BasicStVault {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IAvalanchePool public avalanchePool;\n\n    function initialize1(\n        address _treasury, address _admin,\n        address _priceOracle\n    ) public virtual initializer {\n        super.initialize(\n            \"STI Staking AVAX\", \"stiStAVAX\",\n            _treasury, _admin,\n            _priceOracle,\n            Const.NATIVE_ASSET, // AVAX\n            AvaxConstant.aAVAXb\n        );\n\n        avalanchePool = IAvalanchePool(0x7BAa1E3bFe49db8361680785182B80BB420A836D);\n\n        unbondingPeriod = 28 days;\n        minInvestAmount = avalanchePool.getMinimumStake();\n        oneEpoch = 24 hours;\n\n        stToken.safeApprove(address(avalanchePool), type(uint).max);\n    }\n\n    function setStakingAmounts(uint _minInvestAmount, uint _minRedeemAmount) external override onlyOwner {\n        _minInvestAmount;\n        require(_minRedeemAmount > 0, \"minRedeemAmount must be > 0\");\n        minInvestAmount = avalanchePool.getMinimumStake();\n        minRedeemAmount = _minRedeemAmount;\n    }\n\n    function _invest(uint _amount) internal override returns (uint _invested) {\n        _invested = _amount - (_amount % minInvestAmount); // Value must be multiple of minimum staking amount\n        if (_invested > 0) {\n            avalanchePool.stakeAndClaimBonds{value: _invested}();\n        }\n    }\n\n    function _redeem(uint _stAmount) internal override returns (uint _redeemed) {\n        // Because _stAmount-stBalance may be a calculation delta in withdraw function,\n        // it will reduce the pendingRedeems even though no redeeming on the staking pool.\n        _redeemed = _stAmount;\n\n        uint stBalance = stToken.balanceOf(address(this));\n        if (stBalance > 0) {\n            avalanchePool.claimBonds(_stAmount > stBalance ? stBalance : _stAmount);\n        }\n    }\n\n    function getEmergencyUnbondings() public override view returns (uint) {\n        // avalanchePool automatically transfers the unbonded AVAX to the claimer. This is why there is no _claimUnbonded here\n        uint unbondings = avalanchePool.pendingAvaxClaimsOf(address(this));\n        return MathUpgradeable.min(unbondings, emergencyUnbondings);\n    }\n\n    function _emergencyWithdraw(uint _pendingRedeems) internal override returns (uint _redeemed) {\n        uint stBalance = stToken.balanceOf(address(this));\n        if (stBalance >= minRedeemAmount) {\n            avalanchePool.claimBonds(stBalance);\n            emergencyUnbondings = (stBalance > _pendingRedeems) ? stBalance - _pendingRedeems : 0;\n            _redeemed = stBalance;\n        }\n    }\n\n    ///@param _amount Amount of tokens\n    function getStTokenByPooledToken(uint _amount) public override view returns(uint) {\n        return _amount;\n        // return _amount * IAAVAXb(address(stToken)).ratio() / 1e18;\n    }\n\n    ///@param _stAmount Amount of stTokens\n    function getPooledTokenByStToken(uint _stAmount) public override view returns(uint) {\n        return _stAmount;\n        // return _stAmount * 1e18 / IAAVAXb(address(stToken)).ratio();\n    }\n}\n"
    },
    "contracts/bni/BNIMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"./priceOracle/IPriceOracle.sol\";\nimport \"./constant/AvaxConstant.sol\";\nimport \"./constant/AuroraConstant.sol\";\nimport \"./constant/MaticConstant.sol\";\nimport \"../../libs/Const.sol\";\nimport \"./IBNIMinter.sol\";\n\ninterface IBNI is IERC20Upgradeable {\n    function decimals() external view returns (uint8);\n    function mint(address account_, uint256 amount_) external;\n    function burn(uint256 amount) external;\n    function burnFrom(address account_, uint256 amount_) external;\n}\n\nerror OffchainLookup(address sender, string[] urls, bytes callData, bytes4 callbackFunction, bytes extraData);\n\ninterface Gateway {\n    function getCurrentTokenCompositionPerc1() external view returns(\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs,\n        bytes memory sig\n    );\n    function getAllPoolInUSD1() external view returns(\n        uint[] memory _allPoolInUSDs,\n        bytes memory sig\n    );\n    function getAllPoolInUSDAtNonce1(uint _nonce) external view returns(\n        uint[] memory _allPoolInUSDs,\n        bytes memory sig\n    );\n    function getPricePerFullShare1() external view returns(\n        uint[] memory _allPoolInUSDs,\n        bytes memory sig\n    );\n    function getAPR1() external view returns(\n        uint[] memory _allPoolInUSDs,  uint[] memory _APRs,\n        bytes memory sig\n    );\n    function getDepositTokenComposition1() external view returns(\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs,\n        bytes memory sig\n    );\n}\n\n\ncontract BNIMinterV1 is\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable,\n    OwnableUpgradeable\n{\n    enum OperationType { Null, Deposit, Withdrawal }\n\n    struct Operation {\n        address account;\n        OperationType operation;\n        uint amount; // amount of USDT or shares\n        bool done;\n    }\n\n    uint[] public chainIDs;\n    address[] public tokens;\n    uint[] public targetPercentages;\n    mapping(uint => mapping(address => uint)) public tid; // Token indices in arrays\n\n    address public admin;\n    IBNI public BNI;\n    IPriceOracle public priceOracle;\n\n    string[] public urls;\n    address public gatewaySigner;\n\n    address public trustedForwarder;\n\n    Operation[] public operations; // The nonce start from 1.\n    mapping(address => uint) public userLastOperationNonce;\n\n    function initialize(\n        address _admin, address _BNI, address _priceOracle\n    ) external initializer {\n        __Ownable_init();\n\n        admin = _admin;\n        BNI = IBNI(_BNI);\n        priceOracle = IPriceOracle(_priceOracle);\n\n        chainIDs.push(MaticConstant.CHAINID);\n        chainIDs.push(AvaxConstant.CHAINID);\n        chainIDs.push(AuroraConstant.CHAINID);\n\n        tokens.push(MaticConstant.WMATIC);\n        tokens.push(AvaxConstant.WAVAX);\n        tokens.push(AuroraConstant.WNEAR);\n\n        targetPercentages.push(4000); // 40%\n        targetPercentages.push(4000); // 40%\n        targetPercentages.push(2000); // 20%\n\n        updateTid();\n\n        urls.push(\"http://localhost:8000/\");\n        gatewaySigner = _admin;\n    }\n\n    function updateTid() internal {\n        uint[] memory _chainIDs = chainIDs;\n        address[] memory _tokens = tokens;\n\n        uint tokenCnt = _tokens.length;\n        for (uint i = 0; i < tokenCnt; i ++) {\n            tid[_chainIDs[i]][_tokens[i]] = i;\n        }\n    }\n}\n\ncontract BNIMinter is\n    IBNIMinter,\n    BNIMinterV1,\n    AccessControlEnumerableUpgradeable\n{\n    using ECDSAUpgradeable for bytes32;\n\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n\n    uint public version;\n\n    address public userAgent;\n    uint[] public poolsAtNonce; // The array of total pool in USD. The nonce start from 1.\n\n    event AddToken(uint indexed chainID, address indexed token, uint indexed tid);\n    event RemoveToken(uint indexed chainID, address indexed token, uint indexed tid, uint targetPerc);\n    event NewOperation(address indexed account, OperationType indexed operation, uint amount, uint indexed nonce);\n    event Mint(address indexed caller, uint indexed amtDeposit, uint indexed shareMinted);\n    event Burn(address indexed caller, uint indexed shareBurned);\n\n    function initialize2(address _userAgent, address _biconomy) external onlyOwner {\n        require(version < 2, \"Already called\");\n        version = 2;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, owner());\n        if (admin != address(0)) _setupRole(ADMIN_ROLE, admin);\n        if (_userAgent != address(0)) _setupRole(ADMIN_ROLE, _userAgent);\n\n        userAgent = _userAgent;\n        trustedForwarder = _biconomy;\n    }\n\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _revokeRole(DEFAULT_ADMIN_ROLE, owner());\n        super.transferOwnership(newOwner);\n        if (newOwner != address(0)) _setupRole(DEFAULT_ADMIN_ROLE, newOwner);\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        if (oldAdmin != address(0)) _revokeRole(ADMIN_ROLE, oldAdmin);\n        admin = _admin;\n        if (_admin != address(0)) _setupRole(ADMIN_ROLE, _admin);\n    }\n\n    function setUserAgent(address _userAgent) external onlyOwner {\n        address oldAgent = userAgent;\n        if (oldAgent != address(0)) _revokeRole(ADMIN_ROLE, oldAgent);\n        userAgent = _userAgent;\n        if (_userAgent != address(0)) _setupRole(ADMIN_ROLE, _userAgent);\n    }\n\n    function setBiconomy(address _biconomy) external onlyOwner {\n        trustedForwarder = _biconomy;\n    }\n\n    function isTrustedForwarder(address forwarder) public view returns(bool) {\n        return forwarder == trustedForwarder;\n    }\n\n    function _msgSender() internal override(ContextUpgradeable) view returns (address ret) {\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            assembly {\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\n            }\n        } else {\n            return msg.sender;\n        }\n    }\n\n    function versionRecipient() external pure returns (string memory) {\n        return \"1\";\n    }\n\n    function setGatewaySigner(address _signer) external onlyOwner {\n        gatewaySigner = _signer;\n    }\n\n    function setUrls(string[] memory _urls) external onlyOwner {\n        urls = _urls;\n    }\n\n    /// @notice After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\n    function addToken(uint _chainID, address _token) external onlyOwner {\n        uint _tid = tid[_chainID][_token];\n        require ((_tid == 0 && _chainID != chainIDs[0] && _token != tokens[0]), \"Already added\");\n\n        chainIDs.push(_chainID);\n        tokens.push(_token);\n        targetPercentages.push(0);\n\n        _tid = tokens.length-1;\n        tid[_chainID][_token] = _tid;\n\n        emit AddToken(_chainID, _token, _tid);\n    }\n\n    /// @notice After this method called, setTokenCompositionTargetPerc should be called to adjust percentages.\n    function removeToken(uint _tid) external onlyOwner {\n        uint tokenCnt = tokens.length;\n        require(_tid < tokenCnt, \"Invalid tid\");\n\n        uint _chainID = chainIDs[_tid];\n        address _token = tokens[_tid];\n        uint _targetPerc = targetPercentages[_tid];\n\n        chainIDs[_tid] = chainIDs[tokenCnt-1];\n        chainIDs.pop();\n        tokens[_tid] = tokens[tokenCnt-1];\n        tokens.pop();\n        targetPercentages[_tid] = targetPercentages[tokenCnt-1];\n        targetPercentages.pop();\n\n        tid[_chainID][_token] = 0;\n        updateTid();\n\n        emit RemoveToken(_chainID, _token, _tid, _targetPerc);\n    }\n\n    /// @notice The length of array is based on token count.\n    function setTokenCompositionTargetPerc(uint[] calldata _targetPerc) public onlyOwner {\n        uint targetCnt = _targetPerc.length;\n        require(targetCnt == targetPercentages.length, \"Invalid count\");\n\n        uint sum;\n        for (uint i = 0; i < targetCnt; i ++) {\n            targetPercentages[i] = _targetPerc[i];\n            sum += _targetPerc[i];\n        }\n        require(sum == Const.DENOMINATOR, \"Invalid parameter\");\n    }\n\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\n    function getEachPoolInUSD(\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs\n    ) private view returns (uint[] memory pools) {\n        uint inputCnt = _tokens.length;\n        uint tokenCnt = tokens.length;\n        pools = new uint[](tokenCnt);\n\n        for (uint i = 0; i < inputCnt; i ++) {\n            uint _chainID = _chainIDs[i];\n            address _token = _tokens[i];\n            uint _tid = tid[_chainID][_token];\n            if (tokenCnt <= _tid) continue;\n            if (_tid == 0 && (_chainID != chainIDs[0] || _token != tokens[0])) continue;\n\n            pools[_tid] = _poolInUSDs[i];\n        }\n    }\n\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\n    function getCurrentTokenCompositionPerc(\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs\n    ) public view returns (\n        uint[] memory, address[] memory, uint[] memory pools, uint[] memory percentages\n    ) {\n        pools = getEachPoolInUSD(_chainIDs, _tokens, _poolInUSDs);\n        uint poolCnt = pools.length;\n\n        uint allPool;\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n\n        percentages = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            percentages[i] = allPool == 0 ? targetPercentages[i] : pools[i] * Const.DENOMINATOR / allPool;\n        }\n\n        return (chainIDs, tokens, pools, percentages);\n    }\n    function getCurrentTokenCompositionPerc1() external view returns (\n        uint[] memory, address[] memory, uint[] memory, uint[] memory\n    ) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getCurrentTokenCompositionPerc1.selector),\n            BNIMinter.getCurrentTokenCompositionPercWithSig.selector,\n            abi.encode(0)\n        );\n    }\n    function getCurrentTokenCompositionPercWithSig(bytes calldata result, bytes calldata extraData) external view returns(\n        uint[] memory, address[] memory, uint[] memory, uint[] memory\n    ) {\n        extraData;\n        (uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, bytes memory sig)\n            = abi.decode(result, (uint[], address[], uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_chainIDs, _tokens, _poolInUSDs))\n        )).recover(sig);\n        require(gatewaySigner == recovered, \"Signer is incorrect\");\n\n        return getCurrentTokenCompositionPerc(_chainIDs, _tokens, _poolInUSDs);\n    }\n\n    /// @notice The length of array is based on network count. And the lengths should be same on the arraies.\n    function getAllPoolInUSD(uint[] memory _allPoolInUSDs) public pure returns (uint) {\n        uint networkCnt = _allPoolInUSDs.length;\n        uint allPoolInUSD;\n        for (uint i = 0; i < networkCnt; i ++) {\n            allPoolInUSD += _allPoolInUSDs[i];\n        }\n        return allPoolInUSD;\n    }\n    function getAllPoolInUSD1() external view returns (uint) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getAllPoolInUSD1.selector),\n            BNIMinter.getAllPoolInUSD1WithSig.selector,\n            abi.encode(0)\n        );\n    }\n    function getAllPoolInUSD1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\n        extraData;\n        (uint[] memory _allPoolInUSDs, bytes memory sig) = abi.decode(result, (uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_allPoolInUSDs))\n        )).recover(sig);\n        require(gatewaySigner == recovered, \"Signer is incorrect\");\n\n        return getAllPoolInUSD(_allPoolInUSDs);\n    }\n\n    function getAllPoolInUSDAtNonce1(uint _nonce) external view returns (uint) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getAllPoolInUSDAtNonce1.selector, _nonce),\n            BNIMinter.getAllPoolInUSD1WithSig.selector,\n            abi.encode(_nonce)\n        );\n    }\n\n    /// @notice Can be used for calculate both user shares & APR\n    function getPricePerFullShare(uint[] memory _allPoolInUSDs) public view returns (uint) {\n        uint _totalSupply = BNI.totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return getAllPoolInUSD(_allPoolInUSDs) * 1e18 / _totalSupply;\n    }\n    function getPricePerFullShare1() external view returns (uint) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getPricePerFullShare1.selector),\n            BNIMinter.getPricePerFullShare1WithSig.selector,\n            abi.encode(0)\n        );\n    }\n    function getPricePerFullShare1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\n        extraData;\n        (uint[] memory _allPoolInUSDs, bytes memory sig) = abi.decode(result, (uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_allPoolInUSDs))\n        )).recover(sig);\n        require(gatewaySigner == recovered, \"Signer is incorrect\");\n\n        return getPricePerFullShare(_allPoolInUSDs);\n    }\n\n    /// @notice The length of array is based on network count. And the lengths should be same on the arraies.\n    function getAPR(uint[] memory _allPoolInUSDs, uint[] memory _APRs) public pure returns (uint) {\n        uint networkCnt = _allPoolInUSDs.length;\n        require(networkCnt == _APRs.length, \"Not match array length\");\n\n        uint pool = getAllPoolInUSD(_allPoolInUSDs);\n        if (pool == 0) return 0;\n\n        uint allApr;\n        for (uint i = 0; i < networkCnt; i ++) {\n            allApr += (_APRs[i] * _allPoolInUSDs[i]);\n        }\n        return (allApr / pool);\n    }\n    function getAPR1() external view returns (uint) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getAPR1.selector),\n            BNIMinter.getAPR1WithSig.selector,\n            abi.encode(0)\n        );\n    }\n    function getAPR1WithSig(bytes calldata result, bytes calldata extraData) external view returns(uint) {\n        extraData;\n        (uint[] memory _allPoolInUSDs,  uint[] memory _APRs, bytes memory sig) = abi.decode(result, (uint[], uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_allPoolInUSDs, _APRs))\n        )).recover(sig);\n        require(gatewaySigner == recovered, \"Signer is incorrect\");\n\n        return getAPR(_allPoolInUSDs, _APRs);\n    }\n\n    /// @return the price of USDT in USD.\n    function getUSDTPriceInUSD() public virtual view returns(uint, uint8) {\n        return priceOracle.getAssetPrice(AvaxConstant.USDT);\n    }\n\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\n    /// @param _USDT6Amt amount of USDT with 6 decimals\n    /// @return _USDT6Amts amount of USDT should be deposited to each pools\n    function getDepositTokenComposition(\n        uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, uint _USDT6Amt\n    ) public view returns (\n        uint[] memory, address[] memory, uint[] memory _USDT6Amts\n    ) {\n        (,, uint[] memory pools, uint[] memory perc) = getCurrentTokenCompositionPerc(_chainIDs, _tokens, _poolInUSDs);\n        uint poolCnt = perc.length;\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n\n        uint allPool = _USDT6Amt * 1e12 * USDTPriceInUSD / (10 ** USDTPriceDecimals); // USDT's decimals is 6\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n\n        uint totalAllocation;\n        uint[] memory allocations = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            uint target = allPool * targetPercentages[i] / Const.DENOMINATOR;\n            if (pools[i] < target) {\n                uint diff = target - pools[i];\n                allocations[i] = diff;\n                totalAllocation += diff;\n            }\n        }\n\n        _USDT6Amts = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            _USDT6Amts[i] = _USDT6Amt * allocations[i] / totalAllocation;\n        }\n\n        return (chainIDs, tokens, _USDT6Amts);\n    }\n    function getDepositTokenComposition1(uint _USDT6Amt) external view returns (\n        uint[] memory, address[] memory, uint[] memory\n    ) {\n        revert OffchainLookup(address(this), urls,\n            abi.encodeWithSelector(Gateway.getDepositTokenComposition1.selector),\n            BNIMinter.getDepositTokenComposition1WithSig.selector,\n            abi.encode(_USDT6Amt)\n        );\n    }\n    function getDepositTokenComposition1WithSig(bytes calldata result, bytes calldata extraData) external view returns(\n        uint[] memory, address[] memory, uint[] memory\n    ) {\n        (uint _USDT6Amt) = abi.decode(extraData, (uint));\n        (uint[] memory _chainIDs, address[] memory _tokens, uint[] memory _poolInUSDs, bytes memory sig)\n            = abi.decode(result, (uint[], address[], uint[], bytes));\n\n        address recovered = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(_chainIDs, _tokens, _poolInUSDs))\n        )).recover(sig);\n        require(gatewaySigner == recovered, \"Signer is incorrect\");\n\n        return getDepositTokenComposition(_chainIDs, _tokens, _poolInUSDs, _USDT6Amt);\n    }\n\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\n    /// @param _share amount of BNI to be withdrawn\n    /// @return _sharePerc percentage of assets which should be withdrawn. It's 18 decimals\n    function getWithdrawPerc(address _account, uint _share) public view returns (uint _sharePerc) {\n        require(0 < _share && _share <= BNI.balanceOf(_account), \"Invalid share amount\");\n        return (_share * 1e18) / BNI.totalSupply();\n    }\n\n    function getNonce() public view returns (uint) {\n        return operations.length;\n    }\n\n    function getOperation(uint _nonce) public view returns (Operation memory) {\n        return operations[_nonce - 1];\n    }\n\n    function _checkAndAddOperation(address _account, OperationType _operation, uint _pool, uint _amount) internal {\n        uint nonce = userLastOperationNonce[_account];\n        if (nonce > 0) {\n            Operation memory op = getOperation(nonce);\n            require(op.done, \"Previous operation not finished\");\n        }\n        operations.push(Operation({\n            account: _account,\n            operation: _operation,\n            amount: _amount,\n            done: false\n        }));\n        poolsAtNonce.push(_pool);\n        nonce = getNonce();\n        userLastOperationNonce[_account] = nonce;\n        emit NewOperation(_account, _operation, _amount, nonce);\n    }\n\n    function _checkAndExitOperation(address _account, OperationType _operation) internal returns (uint _pool, uint _amount) {\n        uint nonce = userLastOperationNonce[_account];\n        require(nonce > 0, \"No operation\");\n\n        Operation memory op = getOperation(nonce);\n        require(op.operation == _operation && op.done == false, \"Already finished\");\n\n        operations[nonce - 1].done = true;\n        return (poolsAtNonce[nonce-1], op.amount);\n    }\n\n    /// @param _account account to which BNIs will be minted\n    /// @param _pool total pool in USD\n    /// @param _USDT6Amt USDT with 6 decimals to be deposited\n    function initDepositByAdmin(address _account, uint _pool, uint _USDT6Amt) external onlyRole(ADMIN_ROLE) whenNotPaused {\n        _checkAndAddOperation(_account, OperationType.Deposit, _pool, _USDT6Amt);\n    }\n\n    /// @dev mint BNIs according to the deposited USDT\n    /// @param _account account to which BNIs will be minted\n    /// @param _USDT6Amt the deposited USDT with 6 decimals\n    function mintByAdmin(address _account, uint _USDT6Amt) external onlyRole(ADMIN_ROLE) whenNotPaused {\n        (uint pool,) = _checkAndExitOperation(_account, OperationType.Deposit);\n\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n        uint amtDeposit = _USDT6Amt * 1e12 * USDTPriceInUSD / (10 ** USDTPriceDecimals); // USDT's decimals is 6\n\n        uint _totalSupply = BNI.totalSupply();\n        uint share = (_totalSupply == 0 || pool == 0)  ? amtDeposit : _totalSupply * amtDeposit / pool;\n        // When assets invested in strategy, around 0.3% lost for swapping fee. We will consider it in share amount calculation to avoid pricePerFullShare fall down under 1.\n        share = share * 997 / 1000;\n\n        BNI.mint(_account, share);\n        emit Mint(_account, amtDeposit, share);\n    }\n\n    /// @dev mint BNIs according to the deposited USDT\n    /// @param _account account to which BNIs will be minted\n    /// @param _pool total pool in USD\n    /// @param _share amount of BNI to be burnt\n    function burnByAdmin(address _account, uint _pool, uint _share) external onlyRole(ADMIN_ROLE) {\n        require(0 < _share && _share <= BNI.balanceOf(_account), \"Invalid share amount\");\n        _checkAndAddOperation(_account, OperationType.Withdrawal, _pool, _share);\n\n        BNI.burnFrom(_account, _share);\n        emit Burn(_account, _share);\n    }\n\n    function exitWithdrawalByAdmin(address _account) external onlyRole(ADMIN_ROLE) {\n        _checkAndExitOperation(_account, OperationType.Withdrawal);\n    }\n}\n"
    },
    "contracts/bni/BNIMinterTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./BNIMinter.sol\";\nimport \"./priceOracle/IPriceOracle.sol\";\nimport \"./constant/AvaxConstantTest.sol\";\n\ncontract BNIMinterTest is BNIMinter {\n\n    /// @return the price of USDT in USD.\n    function getUSDTPriceInUSD() public override view returns(uint, uint8) {\n        return priceOracle.getAssetPrice(AvaxConstantTest.USDT);\n    }\n\n    function setPriceOracle(address _priceOracle) external onlyOwner {\n        priceOracle = IPriceOracle(_priceOracle);\n    }\n}\n"
    },
    "contracts/l2Vaults/compound/BasicCompoundVaultTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"../../bni/priceOracle/IPriceOracle.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../libs/Token.sol\";\n\ninterface ICToken is IERC20Upgradeable {\n    function comptroller() external view returns (address);\n    function underlying() external view returns (address);\n    function exchangeRateStored() external view returns (uint);\n    function supplyRatePerBlock() external view returns (uint);\n\n    function mint(uint mintAmount) external returns (uint);\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function borrow(uint borrowAmount) external returns (uint);\n    function repayBorrow(uint repayAmount) external returns (uint);\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\n}\n\ninterface IComptroller {\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\n    function exitMarket(address cToken) external returns (uint);\n}\n\ncontract BasicCompoundVaultTest is Initializable, ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint public yieldFee;\n\n    ICToken public cToken;\n    IERC20Upgradeable public token;\n    uint8 private tokenDecimals;\n    IComptroller public comptroller;\n\n    address public treasuryWallet;\n    address public admin;\n    IPriceOracle public priceOracle;\n\n    mapping(address => uint) private depositedBlock;\n\n    uint constant DAY_IN_SEC = 86400; // 3600 * 24\n    uint constant YEAR_IN_SEC = 365 * DAY_IN_SEC;\n\n    uint constant MANTISSA_ONE = 1e18;\n\n    event Deposit(address _user, uint _amount, uint _shares);\n    event EmergencyWithdraw(uint _amount);\n    event Invest(uint _amount);\n    event SetAdmin(address _oldAdmin, address _newAdmin);\n    event SetYieldFeePerc(uint _fee);\n    event SetTreasuryWallet(address _wallet);\n    event Withdraw(address _user, uint _amount, uint _shares);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(string memory _name, string memory _symbol, \n        address _treasury, address _admin,\n        address _priceOracle,\n        ICToken _cToken\n    ) public virtual initializer {\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        treasuryWallet = _treasury;\n        admin = _admin;\n        priceOracle = IPriceOracle(_priceOracle);\n\n        yieldFee = 2000; //20%\n        cToken = _cToken;\n\n        // token = IERC20Upgradeable(_cToken.underlying());\n        // tokenDecimals = IERC20UpgradeableExt(address(_cToken)).decimals();\n        // comptroller = IComptroller(_cToken.comptroller());\n        \n        // address[] memory cTokens = new address[](1);\n        // cTokens[0] = address(_cToken);\n        // comptroller.enterMarkets(cTokens);\n        // token.safeApprove(address(_cToken), type(uint).max);\n    }\n    \n    /**\n     *@param _amount amount of lptokens to deposit\n    */\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        // require(_amount > 0, \"Invalid amount\");\n\n        // uint _pool = getAllPool();\n        // token.safeTransferFrom(msg.sender, address(this), _amount);\n\n        // depositedBlock[msg.sender] = block.number;\n\n        // cToken.mint(token.balanceOf(address(this)));\n\n        // uint _totalSupply = totalSupply();\n        // uint _shares = _totalSupply == 0 ? _amount : _amount * _totalSupply / _pool;\n        // _mint(msg.sender, _shares);\n\n        // emit Deposit(msg.sender, _amount, _shares);\n    }\n\n    /**\n     *@param _shares amount of shares to burn\n    */\n    function withdraw(uint _shares) external nonReentrant{\n        // require(_shares > 0, \"Invalid Amount\");\n        // require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        // require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        // uint _pool = getAllPool();\n        // uint _amountToWithdraw = _pool * _shares / totalSupply(); \n\n        // uint available = token.balanceOf(address(this));\n        // if(available < _amountToWithdraw) {\n        //     cToken.redeem(cToken.balanceOf(address(this)) * (_amountToWithdraw - available) / (_pool - available));\n        //     _amountToWithdraw = token.balanceOf(address(this));\n        // }\n        // _burn(msg.sender, _shares);\n\n        // token.safeTransfer(msg.sender, _amountToWithdraw);\n        // emit Withdraw(msg.sender, _amountToWithdraw, _shares);\n    }\n\n    function _invest() internal returns (uint available){\n        available = token.balanceOf(address(this));\n        if(available > 0) {\n            cToken.mint(available);\n        }\n    }\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused{ \n        _pause();\n        // _yield();\n        // uint stakedTokens = cToken.balanceOf(address(this));\n        // if(stakedTokens > 0 ) {\n        //     cToken.redeem(stakedTokens);\n        // }\n        // emit EmergencyWithdraw(stakedTokens);\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        // _invest();\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        address oldAdmin = admin;\n        admin = _newAdmin;\n\n        emit SetAdmin(oldAdmin, _newAdmin);\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < 3001, \"Yield Fee cannot > 30%\");\n        yieldFee = _yieldFeePerc;\n        emit SetYieldFeePerc(_yieldFeePerc);\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n        emit SetTreasuryWallet(_wallet);\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        _yield();\n    }\n\n    function _yield() internal virtual {\n    }\n\n    function getAllPool() public view returns (uint) {\n        uint rate = cToken.exchangeRateStored();\n        uint underlyingAmount = (cToken.balanceOf(address(this)) * rate) / MANTISSA_ONE;\n        return token.balanceOf(address(this)) + underlyingAmount;\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        // uint _pool = getAllPool();\n        // return getValueInUSD(address(token), _pool);\n        return 0;\n    }\n\n    function getPricePerFullShare(bool inUSD) external view returns (uint) {\n        inUSD;\n        // uint _totalSupply = totalSupply();\n        // if (_totalSupply == 0) return 1e18;\n        // return inUSD == true ?\n        //     getAllPoolInUSD() * 1e18 / _totalSupply :\n        //     getAllPool() * 1e18 / _totalSupply;\n        return 1e18;\n    }\n\n    function getValueInUSD(address asset, uint amount) internal view returns(uint) {\n        (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(asset);\n        uint8 _decimals = IERC20UpgradeableExt(asset).decimals();\n        return Token.changeDecimals(amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\n    }\n\n    ///@notice Returns the pending rewards in USD.\n    function getPendingRewards() public view virtual returns (uint) {\n        return 0;\n    }\n\n    function getBlocksPerYear() public view virtual returns (uint) {\n        return 0;\n    }\n\n    ///@dev It's scaled by 1e18\n    function getAPR() public view virtual returns (uint) {\n        // return cToken.supplyRatePerBlock() * getBlocksPerYear();\n        return 8e15;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[41] private __gap;\n}\n"
    },
    "contracts/l2Vaults/compound/BasicCompoundVault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"../../bni/priceOracle/IPriceOracle.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../libs/Math.sol\";\nimport \"../../../libs/Token.sol\";\n\ninterface ICToken is IERC20Upgradeable {\n    function comptroller() external view returns (address);\n    function underlying() external view returns (address);\n    function exchangeRateStored() external view returns (uint);\n    function supplyRatePerBlock() external view returns (uint);\n\n    function mint(uint mintAmount) external returns (uint);\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function borrow(uint borrowAmount) external returns (uint);\n    function repayBorrow(uint repayAmount) external returns (uint);\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\n}\n\ninterface IComptroller {\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\n    function exitMarket(address cToken) external returns (uint);\n}\n\ncontract BasicCompoundVault is Initializable, ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint public yieldFee;\n\n    ICToken public cToken;\n    IERC20Upgradeable public token;\n    uint8 private tokenDecimals;\n    IComptroller public comptroller;\n\n    address public treasuryWallet;\n    address public admin;\n    IPriceOracle public priceOracle;\n\n    mapping(address => uint) private depositedBlock;\n\n    uint constant MANTISSA_ONE = 1e18;\n\n    event Deposit(address _user, uint _amount, uint _shares);\n    event EmergencyWithdraw(uint _amount);\n    event Invest(uint _amount);\n    event SetAdmin(address _oldAdmin, address _newAdmin);\n    event SetYieldFeePerc(uint _fee);\n    event SetTreasuryWallet(address _wallet);\n    event Withdraw(address _user, uint _amount, uint _shares);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(string memory _name, string memory _symbol, \n        address _treasury, address _admin,\n        address _priceOracle,\n        ICToken _cToken\n    ) public virtual initializer {\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        treasuryWallet = _treasury;\n        admin = _admin;\n        priceOracle = IPriceOracle(_priceOracle);\n\n        yieldFee = 2000; //20%\n        cToken = _cToken;\n\n        token = IERC20Upgradeable(_cToken.underlying());\n        tokenDecimals = IERC20UpgradeableExt(address(_cToken)).decimals();\n        comptroller = IComptroller(_cToken.comptroller());\n        \n        address[] memory cTokens = new address[](1);\n        cTokens[0] = address(_cToken);\n        comptroller.enterMarkets(cTokens);\n        token.safeApprove(address(_cToken), type(uint).max);\n    }\n    \n    /**\n     *@param _amount amount of lptokens to deposit\n    */\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        require(_amount > 0, \"Invalid amount\");\n\n        uint _pool = getAllPool();\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n\n        depositedBlock[msg.sender] = block.number;\n\n        cToken.mint(token.balanceOf(address(this)));\n\n        uint _totalSupply = totalSupply();\n        uint _shares = (_pool == 0 || _totalSupply == 0) ? _amount : _amount * _totalSupply / _pool;\n        _mint(msg.sender, _shares);\n\n        emit Deposit(msg.sender, _amount, _shares);\n    }\n\n    /**\n     *@param _shares amount of shares to burn\n    */\n    function withdraw(uint _shares) external nonReentrant{\n        require(_shares > 0, \"Invalid Amount\");\n        require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        uint _pool = getAllPool();\n        uint _amountToWithdraw = _pool * _shares / totalSupply();\n\n        uint available = token.balanceOf(address(this));\n        if(available < _amountToWithdraw) {\n            uint cTokenAmount = Math.roundedDiv(cToken.balanceOf(address(this)) * (_amountToWithdraw - available), (_pool - available));\n            cToken.redeem(cTokenAmount);\n            _amountToWithdraw = token.balanceOf(address(this));\n        }\n        _burn(msg.sender, _shares);\n\n        token.safeTransfer(msg.sender, _amountToWithdraw);\n        emit Withdraw(msg.sender, _amountToWithdraw, _shares);\n    }\n\n    function _invest() internal returns (uint available){\n        available = token.balanceOf(address(this));\n        if(available > 0) {\n            cToken.mint(available);\n        }\n    }\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused{ \n        _pause();\n        _yield();\n        uint stakedTokens = cToken.balanceOf(address(this));\n        if(stakedTokens > 0 ) {\n            cToken.redeem(stakedTokens);\n        }\n        emit EmergencyWithdraw(stakedTokens);\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        _invest();\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        address oldAdmin = admin;\n        admin = _newAdmin;\n\n        emit SetAdmin(oldAdmin, _newAdmin);\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < 3001, \"Yield Fee cannot > 30%\");\n        yieldFee = _yieldFeePerc;\n        emit SetYieldFeePerc(_yieldFeePerc);\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n        emit SetTreasuryWallet(_wallet);\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        _yield();\n    }\n\n    function _yield() internal virtual {\n    }\n\n    function getAllPool() public view returns (uint) {\n        uint rate = cToken.exchangeRateStored();\n        uint underlyingAmount = (cToken.balanceOf(address(this)) * rate) / MANTISSA_ONE;\n        return token.balanceOf(address(this)) + underlyingAmount;\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint _pool = getAllPool();\n        return getValueInUSD(address(token), _pool);\n    }\n\n    function getPricePerFullShare(bool inUSD) external view returns (uint) {\n        uint _totalSupply = totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return inUSD == true ?\n            getAllPoolInUSD() * 1e18 / _totalSupply :\n            getAllPool() * 1e18 / _totalSupply;\n    }\n\n    function getValueInUSD(address asset, uint amount) internal view returns(uint) {\n        (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(asset);\n        uint8 _decimals = IERC20UpgradeableExt(asset).decimals();\n        return Token.changeDecimals(amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\n    }\n\n    ///@notice Returns the pending rewards in USD.\n    function getPendingRewards() public view virtual returns (uint) {\n        return 0;\n    }\n\n    function getBlocksPerYear() public view virtual returns (uint) {\n        return 0;\n    }\n\n    ///@dev It's scaled by 1e18\n    function getAPR() public view virtual returns (uint) {\n        return cToken.supplyRatePerBlock() * getBlocksPerYear();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[41] private __gap;\n}\n"
    },
    "libs/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nlibrary Math {\r\n    /**\r\n     * @dev Division, round to nearest integer (AKA round-half-up)\r\n     * @param a What to divide\r\n     * @param b Divide by this number\r\n     */\r\n    function roundedDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity automatically throws, but please emit reason\r\n        require(b > 0, \"div by 0\"); \r\n\r\n        uint256 halfB = (b + 1) / 2;\r\n        return (a % b >= halfB) ? (a / b + 1) : (a / b);\r\n    }\r\n}\r\n"
    },
    "contracts/mwi/MWIVaultTest.sol": {
      "content": " // SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../../libs/BaseRelayRecipient.sol\";\nimport \"./libs/Price.sol\";\n\ninterface IStrategy {\n    function invest(uint amount) external;\n    function withdrawPerc(uint sharePerc) external;\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external returns (uint);\n    function emergencyWithdraw() external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages);\n    function getAPR() external view returns (uint);\n}\n\ncontract MWIVaultTest is ERC20Upgradeable, OwnableUpgradeable, \n        ReentrancyGuardUpgradeable, PausableUpgradeable, BaseRelayRecipient {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0x78ae2880bd1672b49a33cF796CF53FE6db0aB01D);\n\n    IStrategy public strategy;\n    address public treasuryWallet;\n    address public admin;\n\n    mapping(address => uint) private depositedBlock;\n\n    event Deposit(address caller, uint amtDeposit, address tokenDeposit, uint shareMinted);\n    event Withdraw(address caller, uint amtWithdraw, address tokenWithdraw, uint shareBurned);\n    event Rebalance(uint farmIndex, uint sharePerc, uint amount);\n    event Reinvest(uint amount);\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\n    event SetAdminWallet(address oldAdmin, address newAdmin);\n    event SetBiconomy(address oldBiconomy, address newBiconomy);\n    \n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == address(admin), \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(\n        address _treasuryWallet, address _admin,\n        address _biconomy, address _strategy\n    ) external initializer {\n        __ERC20_init(\"Market Weighted Index\", \"MWI\");\n        __Ownable_init();\n\n        strategy = IStrategy(_strategy);\n\n        treasuryWallet = _treasuryWallet;\n        admin = _admin;\n        trustedForwarder = _biconomy;\n\n        USDT.safeApprove(address(strategy), type(uint).max);\n    }\n\n    function deposit(uint amount) external {\n        _deposit(_msgSender(), amount);\n    }\n    function depositByAdmin(address account, uint amount) external onlyOwnerOrAdmin {\n        _deposit(account, amount);\n    }\n    function _deposit(address account, uint amount) private nonReentrant whenNotPaused {\n        require(amount > 0, \"Amount must > 0\");\n        depositedBlock[account] = block.number;\n\n        uint pool = getAllPoolInUSD();\n        USDT.safeTransferFrom(account, address(this), amount);\n\n        strategy.invest(amount);\n\n        uint amtDeposit = amount * 1e12;//PriceLib.getAssetPrice(address(USDT)) * 1e4; // USDT's decimals is 6, price's decimals is 8\n        uint _totalSupply = totalSupply();\n        uint share = (_totalSupply == 0 || pool <= _totalSupply)  ? amtDeposit : amtDeposit * _totalSupply / pool;\n        _mint(account, share);\n\n        emit Deposit(account, amtDeposit, address(USDT), share);\n    }\n\n    function withdraw(uint share) external {\n        _withdraw(msg.sender, share);\n    }\n    function withdrawByAdmin(address account, uint share) external onlyOwnerOrAdmin {\n        _withdraw(account, share);\n    }\n    function _withdraw(address account, uint share) private nonReentrant {\n        require(share > 0, \"Shares must > 0\");\n        require(share <= balanceOf(account), \"Not enough share to withdraw\");\n        require(depositedBlock[account] != block.number, \"Withdraw within same block\");\n        \n        uint _totalSupply = totalSupply();\n        uint withdrawAmt = getAllPoolInUSD() * share / _totalSupply;\n\n        if (!paused()) {\n            strategy.withdrawPerc(share * 1e18 / _totalSupply);\n            USDT.safeTransfer(account, USDT.balanceOf(address(this)));\n        } else {\n            uint USDTAmt = withdrawAmt / 1e12;//(PriceLib.getAssetPrice(address(USDT)) * 1e4); // USDT's decimals is 6, price's decimals is 8\n            USDT.safeTransfer(account, USDTAmt);\n        }\n        _burn(account, share);\n        emit Withdraw(account, withdrawAmt, address(USDT), share);\n    }\n\n    function rebalance(uint farmIndex, uint sharePerc) external onlyOwnerOrAdmin {\n        uint USDTAmt = strategy.withdrawFromFarm(farmIndex, sharePerc);\n        if (0 < USDTAmt) {\n            strategy.invest(USDTAmt);\n            emit Rebalance(farmIndex, sharePerc, USDTAmt);\n        }\n    }\n\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\n        _pause();\n        strategy.emergencyWithdraw();\n    }\n\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            strategy.invest(USDTAmt);\n            emit Reinvest(USDTAmt);\n        }\n    }\n\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\n        address oldTreasuryWallet = treasuryWallet;\n        treasuryWallet = _treasuryWallet;\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit SetAdminWallet(oldAdmin, _admin);\n    }\n\n    function setBiconomy(address _biconomy) external onlyOwner {\n        address oldBiconomy = trustedForwarder;\n        trustedForwarder = _biconomy;\n        emit SetBiconomy(oldBiconomy, _biconomy);\n    }\n\n    function _msgSender() internal override(ContextUpgradeable, BaseRelayRecipient) view returns (address) {\n        return BaseRelayRecipient._msgSender();\n    }\n    \n    function versionRecipient() external pure override returns (string memory) {\n        return \"1\";\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        if (paused()) return USDT.balanceOf(address(this)) * 1e12;//PriceLib.getAssetPrice(address(USDT)) * 1e4; // USDT's decimals is 6, price's decimals is 8\n        return strategy.getAllPoolInUSD();\n    }\n\n    /// @notice Can be use for calculate both user shares & APR    \n    function getPricePerFullShare() external view returns (uint) {\n        uint _totalSupply = totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return getAllPoolInUSD() * 1e18 / _totalSupply;\n    }\n\n    function getCurrentCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        return strategy.getCurrentTokenCompositionPerc();\n    }\n\n    function getAPR() external view returns (uint) {\n        return strategy.getAPR();\n    }\n}\n"
    },
    "contracts/mwi/libs/Price.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\ninterface IChainlink {\n    function latestAnswer() external view returns (int256);\n}\n\ninterface IAaveOracle {\n    function getAssetPrice(address asset) external view returns (uint256);\n}\n\nlibrary PriceLib {\n    IAaveOracle internal constant AaveOracle = IAaveOracle(0xEBd36016B3eD09D4693Ed4251c67Bd858c3c7C9C);\n    address internal constant USDT = 0xc7198437980c041c805A1EDcbA50c1Ce5db95118;\n\n    /// @return the price in USD of 8 decimals in precision.\n    function getAssetPrice(address asset) internal view returns (uint) {\n        if (asset == USDT) {\n            return uint(IChainlink(0xEBE676ee90Fe1112671f19b6B7459bC678B67e8a).latestAnswer());\n        }\n        return AaveOracle.getAssetPrice(asset);\n    }\n}\n"
    },
    "contracts/mwi/MWIVault.sol": {
      "content": " // SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../../libs/BaseRelayRecipient.sol\";\nimport \"./libs/Price.sol\";\n\ninterface IStrategy {\n    function invest(uint amount) external;\n    function withdrawPerc(uint sharePerc) external;\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external returns (uint);\n    function emergencyWithdraw() external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages);\n    function getAPR() external view returns (uint);\n}\n\ncontract MWIVault is ERC20Upgradeable, OwnableUpgradeable, \n        ReentrancyGuardUpgradeable, PausableUpgradeable, BaseRelayRecipient {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0xc7198437980c041c805A1EDcbA50c1Ce5db95118);\n\n    IStrategy public strategy;\n    address public treasuryWallet;\n    address public admin;\n\n    uint constant DENOMINATOR = 10000;\n    uint public watermark; // In USD (18 decimals)\n    uint public profitFeePerc;\n    uint public fees; // In USD (18 decimals)\n\n    mapping(address => uint) private depositedBlock;\n\n    event Deposit(address caller, uint amtDeposit, address tokenDeposit, uint shareMinted);\n    event Withdraw(address caller, uint amtWithdraw, address tokenWithdraw, uint shareBurned);\n    event Rebalance(uint farmIndex, uint sharePerc, uint amount);\n    event Reinvest(uint amount);\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\n    event SetAdminWallet(address oldAdmin, address newAdmin);\n    event SetBiconomy(address oldBiconomy, address newBiconomy);\n    event CollectProfitAndUpdateWatermark(uint currentWatermark, uint lastWatermark, uint fee);\n    event AdjustWatermark(uint currentWatermark, uint lastWatermark);\n    event TransferredOutFees(uint fees, address token);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == address(admin), \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(\n        address _treasuryWallet, address _admin,\n        address _biconomy, address _strategy\n    ) external initializer {\n        __ERC20_init(\"Market Weighted Index\", \"MWI\");\n        __Ownable_init();\n\n        strategy = IStrategy(_strategy);\n\n        treasuryWallet = _treasuryWallet;\n        admin = _admin;\n        trustedForwarder = _biconomy;\n\n        profitFeePerc = 2000;\n\n        USDT.safeApprove(address(strategy), type(uint).max);\n    }\n\n    function deposit(uint amount) external {\n        _deposit(_msgSender(), amount);\n    }\n    function depositByAdmin(address account, uint amount) external onlyOwnerOrAdmin {\n        _deposit(account, amount);\n    }\n    function _deposit(address account, uint amount) private nonReentrant whenNotPaused {\n        require(amount > 0, \"Amount must > 0\");\n        depositedBlock[account] = block.number;\n\n        uint pool = getAllPoolInUSD();\n        USDT.safeTransferFrom(account, address(this), amount);\n\n        uint amtDeposit = amount * PriceLib.getAssetPrice(address(USDT)) * 1e4; // USDT's decimals is 6, price's decimals is 8\n\n        if (watermark > 0) _collectProfitAndUpdateWatermark();\n        uint USDTAmt = _transferOutFees();\n        if (USDTAmt > 0) {\n            strategy.invest(USDTAmt);\n        }\n        adjustWatermark(amtDeposit, true);\n\n        uint _totalSupply = totalSupply();\n        uint share = (pool == 0 || _totalSupply == 0) ? amtDeposit : _totalSupply * amtDeposit / pool;\n        // When assets invested in strategy, around 0.3% lost for swapping fee. We will consider it in share amount calculation to avoid pricePerFullShare fall down under 1.\n        share = share * 997 / 1000;\n        _mint(account, share);\n\n        emit Deposit(account, amtDeposit, address(USDT), share);\n    }\n\n    function withdraw(uint share) external {\n        _withdraw(msg.sender, share);\n    }\n    function withdrawByAdmin(address account, uint share) external onlyOwnerOrAdmin {\n        _withdraw(account, share);\n    }\n    function _withdraw(address account, uint share) private nonReentrant {\n        require(share > 0, \"Shares must > 0\");\n        require(share <= balanceOf(account), \"Not enough share to withdraw\");\n        require(depositedBlock[account] != block.number, \"Withdraw within same block\");\n        \n        uint _totalSupply = totalSupply();\n        uint pool = getAllPoolInUSD();\n        uint withdrawAmt = pool * share / _totalSupply;\n        uint sharePerc = withdrawAmt * 1e18 / (pool + fees);\n\n        if (!paused()) {\n            strategy.withdrawPerc(sharePerc);\n            USDT.safeTransfer(account, USDT.balanceOf(address(this)));\n            adjustWatermark(withdrawAmt, false);\n        } else {\n            uint USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\n            USDT.safeTransfer(account, USDTAmt);\n        }\n        _burn(account, share);\n        emit Withdraw(account, withdrawAmt, address(USDT), share);\n    }\n\n    function rebalance(uint farmIndex, uint sharePerc) external onlyOwnerOrAdmin {\n        uint USDTAmt = strategy.withdrawFromFarm(farmIndex, sharePerc);\n        if (0 < USDTAmt) {\n            strategy.invest(USDTAmt);\n            emit Rebalance(farmIndex, sharePerc, USDTAmt);\n        }\n    }\n\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\n        _pause();\n        strategy.emergencyWithdraw();\n        watermark = 0;\n    }\n\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            uint amtDeposit = USDTAmt * PriceLib.getAssetPrice(address(USDT)) * 1e4; // USDT's decimals is 6, price's decimals is 8\n            strategy.invest(USDTAmt);\n            adjustWatermark(amtDeposit, true);\n            emit Reinvest(USDTAmt);\n        }\n    }\n\n    function collectProfitAndUpdateWatermark() external onlyOwnerOrAdmin whenNotPaused {\n        _collectProfitAndUpdateWatermark();\n    }\n    function _collectProfitAndUpdateWatermark() private {\n        uint currentWatermark = strategy.getAllPoolInUSD();\n        uint lastWatermark = watermark;\n        uint fee;\n        if (currentWatermark > lastWatermark) {\n            uint profit = currentWatermark - lastWatermark;\n            fee = profit * profitFeePerc / DENOMINATOR;\n            fees += fee;\n            watermark = currentWatermark;\n        }\n        emit CollectProfitAndUpdateWatermark(currentWatermark, lastWatermark, fee);\n    }\n\n    /// @param signs True for positive, false for negative\n    function adjustWatermark(uint amount, bool signs) private {\n        uint lastWatermark = watermark;\n        watermark = signs == true\n                    ? watermark + amount\n                    : (watermark > amount) ? watermark - amount : 0;\n        emit AdjustWatermark(watermark, lastWatermark);\n    }\n\n    function withdrawFees() external onlyOwnerOrAdmin {\n        if (!paused()) {\n            uint pool = strategy.getAllPoolInUSD();\n            uint _fees = fees;\n            uint sharePerc = _fees < pool ? _fees * 1e18 / pool : 1e18;\n            strategy.withdrawPerc(sharePerc);\n        }\n        _transferOutFees();\n    }\n\n    function _transferOutFees() private returns (uint USDTAmt) {\n        USDTAmt = USDT.balanceOf(address(this));\n        uint _fees = fees;\n        if (_fees != 0) {\n            uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\n            uint FeeAmt = _fees / (USDTPriceInUSD * 1e4); // USDT's decimals is 6, price's decimals is 8\n\n            if (FeeAmt < USDTAmt) {\n                _fees = 0;\n                USDTAmt -= FeeAmt;\n            } else {\n                _fees -= (USDTAmt * USDTPriceInUSD * 1e4); // USDT's decimals is 6, price's decimals is 8\n                FeeAmt = USDTAmt;\n                USDTAmt = 0;\n            }\n            fees = _fees;\n\n            USDT.safeTransfer(treasuryWallet, FeeAmt);\n            emit TransferredOutFees(FeeAmt, address(USDT)); // Decimal follow _token\n        }\n    }\n\n    function setProfitFeePerc(uint _profitFeePerc) external onlyOwner {\n        require(profitFeePerc < 3001, \"Profit fee cannot > 30%\");\n        profitFeePerc = _profitFeePerc;\n    }\n\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\n        address oldTreasuryWallet = treasuryWallet;\n        treasuryWallet = _treasuryWallet;\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit SetAdminWallet(oldAdmin, _admin);\n    }\n\n    function setBiconomy(address _biconomy) external onlyOwner {\n        address oldBiconomy = trustedForwarder;\n        trustedForwarder = _biconomy;\n        emit SetBiconomy(oldBiconomy, _biconomy);\n    }\n\n    function _msgSender() internal override(ContextUpgradeable, BaseRelayRecipient) view returns (address) {\n        return BaseRelayRecipient._msgSender();\n    }\n    \n    function versionRecipient() external pure override returns (string memory) {\n        return \"1\";\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint pool;\n        if (paused()) {\n            pool = USDT.balanceOf(address(this)) * PriceLib.getAssetPrice(address(USDT)) * 1e4; // USDT's decimals is 6, price's decimals is 8\n        } else {\n            pool += strategy.getAllPoolInUSD();\n        }\n        return (pool > fees ? pool - fees : 0);\n    }\n\n    /// @notice Can be use for calculate both user shares & APR    \n    function getPricePerFullShare() external view returns (uint) {\n        uint _totalSupply = totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return getAllPoolInUSD() * 1e18 / _totalSupply;\n    }\n\n    function getCurrentCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        return strategy.getCurrentTokenCompositionPerc();\n    }\n\n    function getAPR() external view returns (uint) {\n        return strategy.getAPR();\n    }\n}\n"
    },
    "contracts/mwi/MWIStrategyTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./libs/Price.sol\";\n\ninterface IRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n}\n\ninterface IL2Vault is IERC20Upgradeable {\n    function deposit(uint amount) external;\n    function withdraw(uint share) external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getAPR() external view returns (uint);\n}\n\ncontract MWIStrategyTest is OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0x78ae2880bd1672b49a33cF796CF53FE6db0aB01D);\n    IERC20Upgradeable public constant WBTC = IERC20Upgradeable(0x50b7545627a5162F82A992c33b87aDc75187B218);\n    IERC20Upgradeable public constant WETH = IERC20Upgradeable(0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB);\n    IERC20Upgradeable public constant WAVAX = IERC20Upgradeable(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\n    IERC20Upgradeable public constant USDt = IERC20Upgradeable(0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7);\n    IERC20Upgradeable public constant USDT_MAIN = IERC20Upgradeable(0xc7198437980c041c805A1EDcbA50c1Ce5db95118);\n    IERC20Upgradeable public constant WBTC_MAIN = IERC20Upgradeable(0x50b7545627a5162F82A992c33b87aDc75187B218);\n    IERC20Upgradeable public constant WETH_MAIN = IERC20Upgradeable(0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB);\n    IERC20Upgradeable public constant WAVAX_MAIN = IERC20Upgradeable(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\n    IERC20Upgradeable public constant USDt_MAIN = IERC20Upgradeable(0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7);\n\n    IRouter public constant JoeRouter = IRouter(0x60aE616a2155Ee3d9A68541Ba4544862310933d4);\n\n    IL2Vault public WBTCVault;\n    IL2Vault public WETHVault;\n    IL2Vault public WAVAXVault;\n    IL2Vault public USDTVault;\n    \n    uint constant DENOMINATOR = 10000;\n    uint public WBTCTargetPerc;\n    uint public WETHTargetPerc;\n    uint public WAVAXTargetPerc;\n    uint public USDTTargetPerc;\n\n    address public vault;\n\n    event TargetComposition (uint WBTCTargetPool, uint WETHTargetPool, uint WAVAXTargetPool, uint USDTTargetPool);\n    event CurrentComposition (uint WBTCTargetPool, uint WETHTargetPool, uint WAVAXCurrentPool, uint USDTCurrentPool);\n    event InvestWBTC(uint USDTAmt, uint WBTCAmt);\n    event InvestWETH(uint USDTAmt, uint WETHAmt);\n    event InvestWAVAX(uint USDTAmt, uint WAVAXAmt);\n    event InvestUSDT(uint USDTAmt, uint USDtAmt);\n    event Withdraw(uint sharePerc, uint USDTAmt);\n    event WithdrawWBTC(uint WBTCAmt, uint USDTAmt);\n    event WithdrawWETH(uint WETHAmt, uint USDTAmt);\n    event WithdrawWAVAX(uint WAVAXAmt, uint USDTAmt);\n    event WithdrawUSDT(uint USDtAmt, uint USDTAmt);\n    event EmergencyWithdraw(uint USDTAmt);\n\n    modifier onlyVault {\n        require(msg.sender == vault, \"Only vault\");\n        _;\n    }\n\n    function initialize(IL2Vault _WBTCVault, IL2Vault _WETHVault, IL2Vault _WAVAXVault, IL2Vault _USDTVault) external initializer {\n        __Ownable_init();\n\n        WBTCTargetPerc = 4500; // 45%\n        WETHTargetPerc = 3500; // 35%\n        WAVAXTargetPerc = 1500; // 15%\n        USDTTargetPerc = 500; // 5%\n\n        WBTCVault = _WBTCVault;\n        WETHVault = _WETHVault;\n        WAVAXVault = _WAVAXVault;\n        USDTVault = _USDTVault;\n\n        // USDT.safeApprove(address(JoeRouter), type(uint).max);\n        // WBTC.safeApprove(address(JoeRouter), type(uint).max);\n        // WETH.safeApprove(address(JoeRouter), type(uint).max);\n        // WAVAX.safeApprove(address(JoeRouter), type(uint).max);\n        // USDt.safeApprove(address(JoeRouter), type(uint).max);\n\n        // WBTC.safeApprove(address(WBTCVault), type(uint).max);\n        // WETH.safeApprove(address(WETHVault), type(uint).max);\n        // WAVAX.safeApprove(address(WAVAXVault), type(uint).max);\n        // USDt.safeApprove(address(USDTVault), type(uint).max);\n    }\n\n    function invest(uint USDTAmt) external onlyVault {\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\n        // USDTAmt = USDT.balanceOf(address(this));\n        // uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\n        // uint k = USDTPriceInUSD * 1e4;\n\n        // uint[] memory pools = getEachPoolInUSD();\n        // uint pool = pools[0] + pools[1] + pools[2] + pools[3] + (USDTAmt * k); // USDT's decimals is 6\n        // uint WBTCTargetPool = pool * WBTCTargetPerc / DENOMINATOR;\n        // uint WETHTargetPool = pool * WETHTargetPerc / DENOMINATOR;\n        // uint WAVAXTargetPool = pool * WAVAXTargetPerc / DENOMINATOR;\n        // uint USDTTargetPool = pool * USDTTargetPerc / DENOMINATOR;\n\n        // // Rebalancing invest\n        // if (\n        //     WBTCTargetPool > pools[0] &&\n        //     WETHTargetPool > pools[1] &&\n        //     WAVAXTargetPool > pools[2] &&\n        //     USDTTargetPool > pools[3]\n        // ) {\n        //     _investWBTC((WBTCTargetPool-pools[0])/k, USDTPriceInUSD);\n        //     _investWETH((WETHTargetPool-pools[1])/k, USDTPriceInUSD);\n        //     _investWAVAX((WAVAXTargetPool-pools[2])/k, USDTPriceInUSD);\n        //     _investUSDT((USDTTargetPool-pools[3])/k);\n        // } else {\n        //     uint furthest;\n        //     uint farmIndex;\n        //     uint diff;\n\n        //     if (WBTCTargetPool > pools[0]) {\n        //         diff = WBTCTargetPool - pools[0];\n        //         furthest = diff;\n        //         farmIndex = 0;\n        //     }\n        //     if (WETHTargetPool > pools[1]) {\n        //         diff = WETHTargetPool - pools[1];\n        //         if (diff > furthest) {\n        //             furthest = diff;\n        //             farmIndex = 1;\n        //         }\n        //     }\n        //     if (WAVAXTargetPool > pools[2]) {\n        //         diff = WAVAXTargetPool - pools[2];\n        //         if (diff > furthest) {\n        //             furthest = diff;\n        //             farmIndex = 2;\n        //         }\n        //     }\n        //     if (USDTTargetPool > pools[3]) {\n        //         diff = USDTTargetPool - pools[3];\n        //         if (diff > furthest) {\n        //             farmIndex = 3;\n        //         }\n        //     }\n\n        //     if (farmIndex == 0) _investWBTC(USDTAmt, USDTPriceInUSD);\n        //     else if (farmIndex == 1) _investWETH(USDTAmt, USDTPriceInUSD);\n        //     else if (farmIndex == 2) _investWAVAX(USDTAmt, USDTPriceInUSD);\n        //     else _investUSDT(USDTAmt);\n        // }\n\n        // emit TargetComposition(WBTCTargetPool, WETHTargetPool, WAVAXTargetPool, USDTTargetPool);\n        // emit CurrentComposition(pools[0], pools[1], pools[2], pools[3]);\n    }\n\n    function _investWBTC(uint USDTAmt, uint USDTPriceInUSD) private {\n        uint WBTCPriceInUSD = PriceLib.getAssetPrice(address(WBTC));\n        uint amountOut = USDTAmt * USDTPriceInUSD * 100 / WBTCPriceInUSD;  // USDT's decimals is 6, WBTC's decimals is 8\n        uint WBTCAmt = _swap2(address(USDT), address(WBTC), USDTAmt, amountOut*95/100);\n        WBTCVault.deposit(WBTCAmt);\n        emit InvestWBTC(USDTAmt, WBTCAmt);\n    }\n\n    function _investWETH(uint USDTAmt, uint USDTPriceInUSD) private {\n        uint WETHPriceInUSD = PriceLib.getAssetPrice(address(WETH));\n        uint amountOut = USDTAmt * USDTPriceInUSD * 1e12 / WETHPriceInUSD;  // USDT's decimals is 6, WETH's decimals is 18\n        uint WETHAmt = _swap2(address(USDT), address(WETH), USDTAmt, amountOut*95/100);\n        WETHVault.deposit(WETHAmt);\n        emit InvestWETH(USDTAmt, WETHAmt);\n    }\n\n    function _investWAVAX(uint USDTAmt, uint USDTPriceInUSD) private {\n        uint WAVAXPriceInUSD = PriceLib.getAssetPrice(address(WAVAX));\n        uint amountOut = USDTAmt * USDTPriceInUSD * 1e12 / WAVAXPriceInUSD;  // USDT's decimals is 6, WAVAX's decimals is 18\n        uint WAVAXAmt = _swap(address(USDT), address(WAVAX), USDTAmt, amountOut*95/100);\n        WAVAXVault.deposit(WAVAXAmt);\n        emit InvestWAVAX(USDTAmt, WAVAXAmt);\n    }\n\n    function _investUSDT(uint USDTAmt) private {\n        uint USDtAmt = _swap(address(USDT), address(USDt), USDTAmt, USDTAmt*99/100);\n        USDTVault.deposit(USDtAmt);\n        emit InvestUSDT(USDTAmt, USDtAmt);\n    }\n\n    function withdrawPerc(uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(sharePerc <= 1e18, \"Over 100%\");\n        \n        // uint USDTAmtBefore = USDT.balanceOf(address(this));\n        // uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\n\n        // _withdrawWBTC(sharePerc, USDTPriceInUSD);\n        // _withdrawWETH(sharePerc, USDTPriceInUSD);\n        // _withdrawWAVAX(sharePerc, USDTPriceInUSD);\n        // _withdrawUSDT(sharePerc);\n\n        // USDTAmt = USDT.balanceOf(address(this)) - USDTAmtBefore;\n        USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\n        USDT.safeTransfer(vault, USDTAmt);\n        emit Withdraw(sharePerc, USDTAmt);\n    }\n\n    function _withdrawWBTC(uint _sharePerc, uint USDTPriceInUSD) private {\n        uint amount = WBTCVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            WBTCVault.withdraw(amount);\n\n            uint WBTCAmt = WBTC.balanceOf(address(this));\n            uint WBTCPriceInUSD = PriceLib.getAssetPrice(address(WBTC));\n            uint amountOut = WBTCAmt * WBTCPriceInUSD / (USDTPriceInUSD * 100);  // USDT's decimals is 6, WBTC's decimals is 8\n            uint USDTAmt = _swap2(address(WBTC), address(USDT), WBTCAmt, amountOut*95/100);\n            emit WithdrawWBTC(WBTCAmt, USDTAmt);\n        }\n    }\n\n    function _withdrawWETH(uint _sharePerc, uint USDTPriceInUSD) private {\n        uint amount = WETHVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            WETHVault.withdraw(amount);\n\n            uint WETHAmt = WETH.balanceOf(address(this));\n            uint WETHPriceInUSD = PriceLib.getAssetPrice(address(WETH));\n            uint amountOut = WETHAmt * WETHPriceInUSD / (USDTPriceInUSD * 1e12);  // USDT's decimals is 6, WETH's decimals is 18\n            uint USDTAmt = _swap2(address(WETH), address(USDT), WETHAmt, amountOut*95/100);\n            emit WithdrawWETH(WETHAmt, USDTAmt);\n        }\n    }\n\n    function _withdrawWAVAX(uint _sharePerc, uint USDTPriceInUSD) private {\n        uint amount = WAVAXVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            WAVAXVault.withdraw(amount);\n\n            uint WAVAXAmt = WAVAX.balanceOf(address(this));\n            uint WAVAXPriceInUSD = PriceLib.getAssetPrice(address(WAVAX));\n            uint amountOut = WAVAXAmt * WAVAXPriceInUSD / (USDTPriceInUSD * 1e12);  // USDT's decimals is 6, WAVAX's decimals is 18\n            uint USDTAmt = _swap(address(WAVAX), address(USDT), WAVAXAmt, amountOut*95/100);\n            emit WithdrawWAVAX(WAVAXAmt, USDTAmt);\n        }\n    }\n\n    function _withdrawUSDT(uint _sharePerc) private {\n        uint amount = USDTVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDTVault.withdraw(amount);\n\n            uint USDtAmt = USDt.balanceOf(address(this));\n            uint USDTAmt = _swap(address(USDt), address(USDT), USDtAmt, USDtAmt*99/100);\n            emit WithdrawUSDT(USDtAmt, USDTAmt);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = _tokenB;\n        return (JoeRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function _swap2(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](3);\n        path[0] = _tokenA;\n        path[1] = address(WAVAX);\n        path[2] = _tokenB;\n        return (JoeRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[2];\n    }\n\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        farmIndex;\n        require(sharePerc <= 1e18, \"Over 100%\");\n        // uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\n\n        // if (farmIndex == 0) _withdrawWBTC(sharePerc, USDTPriceInUSD);\n        // else if (farmIndex == 1) _withdrawWETH(sharePerc, USDTPriceInUSD);\n        // else if (farmIndex == 2) _withdrawWAVAX(sharePerc, USDTPriceInUSD);\n        // else if (farmIndex == 3) _withdrawUSDT(sharePerc);\n\n        // USDTAmt = USDT.balanceOf(address(this));\n        USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\n        USDT.safeTransfer(vault, USDTAmt);\n    }\n\n    function emergencyWithdraw() external onlyVault {\n        // 1e18 == 100% of share\n        // uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\n\n        // _withdrawWBTC(1e18, USDTPriceInUSD);\n        // _withdrawWETH(1e18, USDTPriceInUSD);\n        // _withdrawWAVAX(1e18, USDTPriceInUSD);\n        // _withdrawUSDT(1e18);\n\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            USDT.safeTransfer(vault, USDTAmt);\n        }\n        emit EmergencyWithdraw(USDTAmt);\n    }\n\n    function setVault(address _vault) external onlyOwner {\n        require(vault == address(0), \"Vault set\");\n        vault = _vault;\n    }\n\n    function setTokenCompositionTargetPerc(uint[] calldata _targetPerc) external onlyOwner {\n        require(_targetPerc.length == 4, \"Invalid count\");\n        require((_targetPerc[0]+_targetPerc[1]+_targetPerc[2]+_targetPerc[3]) == DENOMINATOR, \"Invalid parameter\");\n\n        WBTCTargetPerc = _targetPerc[0];\n        WETHTargetPerc = _targetPerc[1];\n        WAVAXTargetPerc = _targetPerc[2];\n        USDTTargetPerc = _targetPerc[3];\n    }\n\n    function getWBTCPoolInUSD() private view  returns (uint) {\n        uint amt = WBTCVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * WBTCVault.balanceOf(address(this)) / WBTCVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getWETHPoolInUSD() private view  returns (uint) {\n        uint amt = WETHVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * WETHVault.balanceOf(address(this)) / WETHVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getWAVAXPoolInUSD() private view  returns (uint) {\n        uint amt = WAVAXVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * WAVAXVault.balanceOf(address(this)) / WAVAXVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getUSDTPoolInUSD() private view  returns (uint) {\n        uint amt = USDTVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDTVault.balanceOf(address(this)) / USDTVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getEachPoolInUSD() private view returns (uint[] memory pools) {\n        pools = new uint[](4);\n        // pools[0] = getWBTCPoolInUSD();\n        // pools[1] = getWETHPoolInUSD();\n        // pools[2] = getWAVAXPoolInUSD();\n        // pools[3] = getUSDTPoolInUSD();\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        // uint[] memory pools = getEachPoolInUSD();\n        // return pools[0] + pools[1] + pools[2] + pools[3];\n        return USDT.balanceOf(address(this));\n    }\n\n    function getCurrentTokenCompositionPerc() public view returns (address[] memory tokens, uint[] memory percentages) {\n        tokens = new address[](4);\n        tokens[0] = address(WBTC_MAIN);\n        tokens[1] = address(WETH_MAIN);\n        tokens[2] = address(WAVAX_MAIN);\n        tokens[3] = address(USDt_MAIN);\n\n        uint[] memory pools = getEachPoolInUSD();\n        uint allPool = pools[0] + pools[1] + pools[2] + pools[3];\n        percentages = new uint[](4);\n        percentages[0] = allPool == 0 ? WBTCTargetPerc : pools[0] * DENOMINATOR / allPool;\n        percentages[1] = allPool == 0 ? WETHTargetPerc : pools[1] * DENOMINATOR / allPool;\n        percentages[2] = allPool == 0 ? WAVAXTargetPerc : pools[2] * DENOMINATOR / allPool;\n        percentages[3] = allPool == 0 ? USDTTargetPerc : pools[3] * DENOMINATOR / allPool;\n    }\n\n    function getAPR() external view returns (uint) {\n        (, uint[] memory perc) = getCurrentTokenCompositionPerc();\n        uint allApr = WBTCVault.getAPR() * perc[0]\n                    + WETHVault.getAPR() * perc[1]\n                    + WAVAXVault.getAPR() * perc[2]\n                    + USDTVault.getAPR() * perc[3];\n        return (allApr / DENOMINATOR);\n    }\n\n}\n"
    },
    "contracts/mwi/MWIStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./libs/Price.sol\";\n\ninterface IRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n}\n\ninterface IL2Vault is IERC20Upgradeable {\n    function deposit(uint amount) external;\n    function withdraw(uint share) external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getAPR() external view returns (uint);\n}\n\ncontract MWIStrategy is OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0xc7198437980c041c805A1EDcbA50c1Ce5db95118);\n    IERC20Upgradeable public constant WBTC = IERC20Upgradeable(0x50b7545627a5162F82A992c33b87aDc75187B218);\n    IERC20Upgradeable public constant WETH = IERC20Upgradeable(0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB);\n    IERC20Upgradeable public constant WAVAX = IERC20Upgradeable(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\n    IERC20Upgradeable public constant USDt = IERC20Upgradeable(0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7);\n\n    IRouter public constant JoeRouter = IRouter(0x60aE616a2155Ee3d9A68541Ba4544862310933d4);\n\n    uint constant POOL_COUNT = 4;\n    IL2Vault public WBTCVault;\n    IL2Vault public WETHVault;\n    IL2Vault public WAVAXVault;\n    IL2Vault public USDTVault;\n    \n    uint constant DENOMINATOR = 10000;\n    uint[] public targetPercentages;\n\n    address public vault;\n\n    event TargetComposition (uint WBTCTargetPool, uint WETHTargetPool, uint WAVAXTargetPool, uint USDTTargetPool);\n    event CurrentComposition (uint WBTCTargetPool, uint WETHTargetPool, uint WAVAXCurrentPool, uint USDTCurrentPool);\n    event InvestWBTC(uint USDTAmt, uint WBTCAmt);\n    event InvestWETH(uint USDTAmt, uint WETHAmt);\n    event InvestWAVAX(uint USDTAmt, uint WAVAXAmt);\n    event InvestUSDT(uint USDTAmt, uint USDtAmt);\n    event Withdraw(uint sharePerc, uint USDTAmt);\n    event WithdrawWBTC(uint WBTCAmt, uint USDTAmt);\n    event WithdrawWETH(uint WETHAmt, uint USDTAmt);\n    event WithdrawWAVAX(uint WAVAXAmt, uint USDTAmt);\n    event WithdrawUSDT(uint USDtAmt, uint USDTAmt);\n    event EmergencyWithdraw(uint USDTAmt);\n\n    modifier onlyVault {\n        require(msg.sender == vault, \"Only vault\");\n        _;\n    }\n\n    function initialize(IL2Vault _WBTCVault, IL2Vault _WETHVault, IL2Vault _WAVAXVault, IL2Vault _USDTVault) external initializer {\n        __Ownable_init();\n\n        targetPercentages.push(4500); // WBTC: 45%\n        targetPercentages.push(3500); // WETH: 35%\n        targetPercentages.push(1500); // WAVAX: 15%\n        targetPercentages.push(500); // USDT: 5%\n\n        WBTCVault = _WBTCVault;\n        WETHVault = _WETHVault;\n        WAVAXVault = _WAVAXVault;\n        USDTVault = _USDTVault;\n\n        USDT.safeApprove(address(JoeRouter), type(uint).max);\n        WBTC.safeApprove(address(JoeRouter), type(uint).max);\n        WETH.safeApprove(address(JoeRouter), type(uint).max);\n        WAVAX.safeApprove(address(JoeRouter), type(uint).max);\n        USDt.safeApprove(address(JoeRouter), type(uint).max);\n\n        WBTC.safeApprove(address(WBTCVault), type(uint).max);\n        WETH.safeApprove(address(WETHVault), type(uint).max);\n        WAVAX.safeApprove(address(WAVAXVault), type(uint).max);\n        USDt.safeApprove(address(USDTVault), type(uint).max);\n    }\n\n    function invest(uint USDTAmt) external onlyVault {\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\n        USDTAmt = USDT.balanceOf(address(this));\n        uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\n\n        uint[] memory pools = getEachPoolInUSD();\n        uint allPool = pools[0] + pools[1] + pools[2] + pools[3] + (USDTAmt * USDTPriceInUSD * 1e4); // USDT's decimals is 6\n\n        uint totalAllocation;\n        uint[] memory allocations = new uint[](POOL_COUNT);\n        for (uint i = 0; i < POOL_COUNT; i ++) {\n            uint target = allPool * targetPercentages[i] / DENOMINATOR;\n            if (pools[i] < target) {\n                uint diff = target - pools[i];\n                allocations[i] = diff;\n                totalAllocation += diff;\n            }\n        }\n\n        uint[] memory USDTAmts = new uint[](POOL_COUNT);\n        for (uint i = 0; i < POOL_COUNT; i ++) {\n            USDTAmts[i] = USDTAmt * allocations[i] / totalAllocation;\n        }\n\n        if (USDTAmts[0] > 0) {\n            _investWBTC(USDTAmts[0], USDTPriceInUSD);\n        }\n        if (USDTAmts[1] > 0) {\n            _investWETH(USDTAmts[1], USDTPriceInUSD);\n        }\n        if (USDTAmts[2] > 0) {\n            _investWAVAX(USDTAmts[2], USDTPriceInUSD);\n        }\n        if (USDTAmts[3] > 0) {\n            _investUSDT(USDTAmts[3]);\n        }\n\n        emit CurrentComposition(pools[0], pools[1], pools[2], pools[3]);\n        emit TargetComposition(targetPercentages[0], targetPercentages[1], targetPercentages[2], targetPercentages[3]);\n    }\n\n    function _investWBTC(uint USDTAmt, uint USDTPriceInUSD) private {\n        uint WBTCPriceInUSD = PriceLib.getAssetPrice(address(WBTC));\n        uint amountOut = USDTAmt * USDTPriceInUSD * 100 / WBTCPriceInUSD;  // USDT's decimals is 6, WBTC's decimals is 8\n        uint WBTCAmt = _swap2(address(USDT), address(WBTC), USDTAmt, amountOut*95/100);\n        WBTCVault.deposit(WBTCAmt);\n        emit InvestWBTC(USDTAmt, WBTCAmt);\n    }\n\n    function _investWETH(uint USDTAmt, uint USDTPriceInUSD) private {\n        uint WETHPriceInUSD = PriceLib.getAssetPrice(address(WETH));\n        uint amountOut = USDTAmt * USDTPriceInUSD * 1e12 / WETHPriceInUSD;  // USDT's decimals is 6, WETH's decimals is 18\n        uint WETHAmt = _swap2(address(USDT), address(WETH), USDTAmt, amountOut*95/100);\n        WETHVault.deposit(WETHAmt);\n        emit InvestWETH(USDTAmt, WETHAmt);\n    }\n\n    function _investWAVAX(uint USDTAmt, uint USDTPriceInUSD) private {\n        uint WAVAXPriceInUSD = PriceLib.getAssetPrice(address(WAVAX));\n        uint amountOut = USDTAmt * USDTPriceInUSD * 1e12 / WAVAXPriceInUSD;  // USDT's decimals is 6, WAVAX's decimals is 18\n        uint WAVAXAmt = _swap(address(USDT), address(WAVAX), USDTAmt, amountOut*95/100);\n        WAVAXVault.deposit(WAVAXAmt);\n        emit InvestWAVAX(USDTAmt, WAVAXAmt);\n    }\n\n    function _investUSDT(uint USDTAmt) private {\n        uint USDtAmt = _swap(address(USDT), address(USDt), USDTAmt, USDTAmt*99/100);\n        USDTVault.deposit(USDtAmt);\n        emit InvestUSDT(USDTAmt, USDtAmt);\n    }\n\n    function withdrawPerc(uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(sharePerc <= 1e18, \"Over 100%\");\n        \n        uint USDTAmtBefore = USDT.balanceOf(address(this));\n        uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\n\n        _withdrawWBTC(sharePerc, USDTPriceInUSD);\n        _withdrawWETH(sharePerc, USDTPriceInUSD);\n        _withdrawWAVAX(sharePerc, USDTPriceInUSD);\n        _withdrawUSDT(sharePerc);\n\n        USDTAmt = USDT.balanceOf(address(this)) - USDTAmtBefore;\n        USDT.safeTransfer(vault, USDTAmt);\n        emit Withdraw(sharePerc, USDTAmt);\n    }\n\n    function _withdrawWBTC(uint _sharePerc, uint USDTPriceInUSD) private {\n        uint amount = WBTCVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            WBTCVault.withdraw(amount);\n\n            uint WBTCAmt = WBTC.balanceOf(address(this));\n            uint WBTCPriceInUSD = PriceLib.getAssetPrice(address(WBTC));\n            uint amountOut = WBTCAmt * WBTCPriceInUSD / (USDTPriceInUSD * 100);  // USDT's decimals is 6, WBTC's decimals is 8\n            uint USDTAmt = _swap2(address(WBTC), address(USDT), WBTCAmt, amountOut*95/100);\n            emit WithdrawWBTC(WBTCAmt, USDTAmt);\n        }\n    }\n\n    function _withdrawWETH(uint _sharePerc, uint USDTPriceInUSD) private {\n        uint amount = WETHVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            WETHVault.withdraw(amount);\n\n            uint WETHAmt = WETH.balanceOf(address(this));\n            uint WETHPriceInUSD = PriceLib.getAssetPrice(address(WETH));\n            uint amountOut = WETHAmt * WETHPriceInUSD / (USDTPriceInUSD * 1e12);  // USDT's decimals is 6, WETH's decimals is 18\n            uint USDTAmt = _swap2(address(WETH), address(USDT), WETHAmt, amountOut*95/100);\n            emit WithdrawWETH(WETHAmt, USDTAmt);\n        }\n    }\n\n    function _withdrawWAVAX(uint _sharePerc, uint USDTPriceInUSD) private {\n        uint amount = WAVAXVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            WAVAXVault.withdraw(amount);\n\n            uint WAVAXAmt = WAVAX.balanceOf(address(this));\n            uint WAVAXPriceInUSD = PriceLib.getAssetPrice(address(WAVAX));\n            uint amountOut = WAVAXAmt * WAVAXPriceInUSD / (USDTPriceInUSD * 1e12);  // USDT's decimals is 6, WAVAX's decimals is 18\n            uint USDTAmt = _swap(address(WAVAX), address(USDT), WAVAXAmt, amountOut*95/100);\n            emit WithdrawWAVAX(WAVAXAmt, USDTAmt);\n        }\n    }\n\n    function _withdrawUSDT(uint _sharePerc) private {\n        uint amount = USDTVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDTVault.withdraw(amount);\n\n            uint USDtAmt = USDt.balanceOf(address(this));\n            uint USDTAmt = _swap(address(USDt), address(USDT), USDtAmt, USDtAmt*99/100);\n            emit WithdrawUSDT(USDtAmt, USDTAmt);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = _tokenB;\n        return (JoeRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function _swap2(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](3);\n        path[0] = _tokenA;\n        path[1] = address(WAVAX);\n        path[2] = _tokenB;\n        return (JoeRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[2];\n    }\n\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(sharePerc <= 1e18, \"Over 100%\");\n        uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\n\n        if (farmIndex == 0) _withdrawWBTC(sharePerc, USDTPriceInUSD);\n        else if (farmIndex == 1) _withdrawWETH(sharePerc, USDTPriceInUSD);\n        else if (farmIndex == 2) _withdrawWAVAX(sharePerc, USDTPriceInUSD);\n        else if (farmIndex == 3) _withdrawUSDT(sharePerc);\n\n        USDTAmt = USDT.balanceOf(address(this));\n        USDT.safeTransfer(vault, USDTAmt);\n    }\n\n    function emergencyWithdraw() external onlyVault {\n        // 1e18 == 100% of share\n        uint USDTPriceInUSD = PriceLib.getAssetPrice(address(USDT));\n\n        _withdrawWBTC(1e18, USDTPriceInUSD);\n        _withdrawWETH(1e18, USDTPriceInUSD);\n        _withdrawWAVAX(1e18, USDTPriceInUSD);\n        _withdrawUSDT(1e18);\n\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            USDT.safeTransfer(vault, USDTAmt);\n        }\n        emit EmergencyWithdraw(USDTAmt);\n    }\n\n    function setVault(address _vault) external onlyOwner {\n        require(vault == address(0), \"Vault set\");\n        vault = _vault;\n    }\n\n    function setL2Vault(IL2Vault _WBTCVault, IL2Vault _WETHVault, IL2Vault _WAVAXVault, IL2Vault _USDTVault) external onlyOwner {\n        WBTCVault = _WBTCVault;\n        WETHVault = _WETHVault;\n        WAVAXVault = _WAVAXVault;\n        USDTVault = _USDTVault;\n\n        if (WBTC.allowance(address(this), address(WBTCVault)) == 0) {\n            WBTC.safeApprove(address(WBTCVault), type(uint).max);\n        }\n        if (WETH.allowance(address(this), address(WETHVault)) == 0) {\n            WETH.safeApprove(address(WETHVault), type(uint).max);\n        }\n        if (WAVAX.allowance(address(this), address(WAVAXVault)) == 0) {\n            WAVAX.safeApprove(address(WAVAXVault), type(uint).max);\n        }\n        if (USDt.allowance(address(this), address(USDTVault)) == 0) {\n            USDt.safeApprove(address(USDTVault), type(uint).max);\n        }\n    }\n\n    function setTokenCompositionTargetPerc(uint[] calldata _targetPerc) external onlyOwner {\n        uint targetCnt = _targetPerc.length;\n        require(targetCnt == targetPercentages.length, \"Invalid count\");\n\n        uint sum;\n        for (uint i = 0; i < targetCnt; i ++) {\n            targetPercentages[i] = _targetPerc[i];\n            sum += _targetPerc[i];\n        }\n        require(sum == DENOMINATOR, \"Invalid parameter\");\n    }\n\n    function getWBTCPoolInUSD() private view  returns (uint) {\n        uint amt = WBTCVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * WBTCVault.balanceOf(address(this)) / WBTCVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getWETHPoolInUSD() private view  returns (uint) {\n        uint amt = WETHVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * WETHVault.balanceOf(address(this)) / WETHVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getWAVAXPoolInUSD() private view  returns (uint) {\n        uint amt = WAVAXVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * WAVAXVault.balanceOf(address(this)) / WAVAXVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getUSDTPoolInUSD() private view  returns (uint) {\n        uint amt = USDTVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDTVault.balanceOf(address(this)) / USDTVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getEachPoolInUSD() private view returns (uint[] memory pools) {\n        pools = new uint[](POOL_COUNT);\n        pools[0] = getWBTCPoolInUSD();\n        pools[1] = getWETHPoolInUSD();\n        pools[2] = getWAVAXPoolInUSD();\n        pools[3] = getUSDTPoolInUSD();\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint[] memory pools = getEachPoolInUSD();\n        return pools[0] + pools[1] + pools[2] + pools[3];\n    }\n\n    function getCurrentTokenCompositionPerc() public view returns (address[] memory tokens, uint[] memory percentages) {\n        tokens = new address[](POOL_COUNT);\n        tokens[0] = address(WBTC);\n        tokens[1] = address(WETH);\n        tokens[2] = address(WAVAX);\n        tokens[3] = address(USDt);\n\n        uint[] memory pools = getEachPoolInUSD();\n        uint allPool = pools[0] + pools[1] + pools[2] + pools[3];\n        percentages = new uint[](POOL_COUNT);\n        for (uint i = 0; i < POOL_COUNT; i ++) {\n            percentages[i] = allPool == 0 ? targetPercentages[i] : pools[i] * DENOMINATOR / allPool;\n        }\n    }\n\n    function getAPR() external view returns (uint) {\n        (, uint[] memory perc) = getCurrentTokenCompositionPerc();\n        uint allApr = WBTCVault.getAPR() * perc[0]\n                    + WETHVault.getAPR() * perc[1]\n                    + WAVAXVault.getAPR() * perc[2]\n                    + USDTVault.getAPR() * perc[3];\n        return (allApr / DENOMINATOR);\n    }\n\n}\n"
    },
    "contracts/mwi/deps/VaultTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"../libs/DataTypes.sol\";\nimport \"../libs/Price.sol\";\n\ninterface IUniRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity) ;\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n\n}\n\ninterface IERC20UpgradeableEx is IERC20Upgradeable {\n    function decimals() external view returns (uint8);\n}\n\ninterface IAToken is IERC20Upgradeable {\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n    function POOL() external view returns (address);\n    function getIncentivesController() external view returns (address);\n}\n\ninterface IPool {\n    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n    function withdraw(address asset, uint256 amount, address to ) external returns (uint256);\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n}\n\ninterface IRewardsController {\n    /// @dev asset The incentivized asset. It should be address of AToken\n    function getRewardsByAsset(address asset) external view returns (address[] memory);\n    function getRewardsData(address asset, address reward) external view returns (\n      uint256 index,\n      uint256 emissionPerSecond,\n      uint256 lastUpdateTimestamp,\n      uint256 distributionEnd\n    );\n    function getAllUserRewards(address[] calldata assets, address user) external view returns (address[] memory, uint256[] memory);\n    function getUserRewards(address[] calldata assets, address user, address reward) external view returns (uint256);\n    function claimAllRewards(address[] calldata assets, address to) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n    function claimAllRewardsToSelf(address[] calldata assets) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n}\n\ncontract Aave3VaultTest is Initializable, ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant WAVAX = IERC20Upgradeable(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\n\n    IUniRouter public constant JoeRouter = IUniRouter(0x60aE616a2155Ee3d9A68541Ba4544862310933d4);\n\n    uint constant DENOMINATOR = 10000;\n    uint public yieldFee;\n\n    IAToken public aToken;\n    IERC20Upgradeable public token;\n    uint8 private tokenDecimals;\n    IPool public aPool;\n    IRewardsController public aRewardsController;\n\n    address public treasuryWallet;\n    address public admin;\n\n    mapping(address => uint) private depositedBlock;\n\n    uint constant DAY_IN_SEC = 86400; // 3600 * 24\n    uint constant YEAR_IN_SEC = 365 * DAY_IN_SEC;\n\n    event Deposit(address _user, uint _amount, uint _shares);\n    event EmergencyWithdraw(uint _amount);\n    event Invest(uint _amount);\n    event SetAdmin(address _oldAdmin, address _newAdmin);\n    event SetYieldFeePerc(uint _fee);\n    event SetTreasuryWallet(address _wallet);\n    event Withdraw(address _user, uint _amount, uint _shares);\n    event YieldFee(uint _amount);\n    event Yield(uint _amount);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(string memory _name, string memory _symbol, \n        IAToken _aToken,\n        address _treasury, address _admin\n    ) external initializer {\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        yieldFee = 2000; //20%\n        aToken = _aToken;\n\n        token = IERC20Upgradeable(aToken.UNDERLYING_ASSET_ADDRESS());\n        tokenDecimals = IERC20UpgradeableEx(address(token)).decimals();\n        aPool = IPool(aToken.POOL());\n        aRewardsController = IRewardsController(aToken.getIncentivesController());\n        \n        treasuryWallet = _treasury;\n        admin = _admin;\n        \n        // token.safeApprove(address(aPool), type(uint).max);\n        // aToken.safeApprove(address(aPool), type(uint).max);\n        // WAVAX.safeApprove(address(JoeRouter), type(uint).max);\n    }\n    \n    /**\n     *@param _amount amount of lptokens to deposit\n    */\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        _amount;\n        // require(_amount > 0, \"Invalid amount\");\n\n        // uint _pool = getAllPool();\n        // token.safeTransferFrom(msg.sender, address(this), _amount);\n\n        // depositedBlock[msg.sender] = block.number;\n\n        // aPool.supply(address(token), token.balanceOf(address(this)), address(this), 0);\n\n        // uint _totalSupply = totalSupply();\n        // uint _shares = _totalSupply == 0 ? _amount : _amount * _totalSupply / _pool;\n        // _mint(msg.sender, _shares);\n\n        // emit Deposit(msg.sender, _amount, _shares);\n    }\n\n    /**\n     *@param _shares amount of shares to burn\n    */\n    function withdraw(uint _shares) external nonReentrant{\n        _shares;\n        // require(_shares > 0, \"Invalid Amount\");\n        // require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        // require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        // uint _amountToWithdraw = getAllPool() * _shares / totalSupply(); \n\n        // uint available = token.balanceOf(address(this));\n        // if(available < _amountToWithdraw) {\n        //     aPool.withdraw(address(token), _amountToWithdraw - available, address(this));\n        // }\n        // _burn(msg.sender, _shares);\n\n        // token.safeTransfer(msg.sender, _amountToWithdraw);\n        // emit Withdraw(msg.sender, _amountToWithdraw, _shares);\n    }\n\n    function _invest() private returns (uint available){\n        available = token.balanceOf(address(this));\n        if(available > 0) {\n            aPool.supply(address(token), available, address(this), 0);\n        }\n    }\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused{ \n        _pause();\n        // _yield();\n        // uint stakedTokens = aToken.balanceOf(address(this));\n        // if(stakedTokens > 0 ) {\n        //     aPool.withdraw(address(token), stakedTokens, address(this));\n        // }\n        // emit EmergencyWithdraw(stakedTokens);\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        // _invest();\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        address oldAdmin = admin;\n        admin = _newAdmin;\n\n        emit SetAdmin(oldAdmin, _newAdmin);\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < DENOMINATOR, \"yieldFeePerc invalid\");\n        yieldFee = _yieldFeePerc;\n        emit SetYieldFeePerc(_yieldFeePerc);\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n        emit SetTreasuryWallet(_wallet);\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        // _yield();\n    }\n\n    function _yield() private {\n        address[] memory assets = new address[](1);\n        assets[0] = address(aToken);\n        (address[] memory rewards, uint[] memory amounts) = aRewardsController.claimAllRewardsToSelf(assets);\n\n        uint rewardsCount = rewards.length;\n        for (uint i = 0; i < rewardsCount; i ++) {\n            address reward = rewards[i];\n            uint amount = amounts[i];\n            if (0 < amount && reward != address(WAVAX)) {\n                IERC20Upgradeable(reward).safeTransfer(treasuryWallet, amount);\n            }\n        }\n\n        uint AVAXAmt = WAVAX.balanceOf(address(this));\n        if(AVAXAmt > 0) {\n            uint fee = AVAXAmt * yieldFee / DENOMINATOR; //yield fee\n            WAVAX.safeTransfer(treasuryWallet, fee);\n            AVAXAmt -= fee;\n\n            if (token != WAVAX) {\n                _swap(address(WAVAX), address(token), AVAXAmt);\n            }\n            _invest();\n\n            uint AVAXPriceInUSD = PriceLib.getAssetPrice(address(WAVAX));\n            emit Yield((AVAXAmt + fee) * AVAXPriceInUSD / 1e8);\n            emit YieldFee(fee * AVAXPriceInUSD / 1e8);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt) private returns (uint[] memory amounts){\n        address[] memory path = new address[](2);\n\n        path[0] = address(_tokenA);\n        path[1] = address(_tokenB);\n\n        amounts = JoeRouter.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp);\n    }\n\n    function getAllPool() public view returns (uint ) {\n        return token.balanceOf(address(this)) + aToken.balanceOf(address(this));\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        // uint priceInUSD = PriceLib.getAssetPrice(address(token));\n        // uint _pool = getAllPool();\n        // if (tokenDecimals < 18) {\n        //     _pool = _pool * (10 ** (18-tokenDecimals));\n        // }\n        // return _pool * priceInUSD / 1e8;\n        return 0;\n    }\n\n    function getPricePerFullShare(bool inUSD) external view returns (uint) {\n        inUSD;\n        // uint _totalSupply = totalSupply();\n        // if (_totalSupply == 0) return 1e18;\n        // return inUSD == true ?\n        //     getAllPoolInUSD() * 1e18 / _totalSupply :\n        //     getAllPool() * 1e18 / _totalSupply;\n        return 1e18;\n    }\n\n    ///@notice Returns the pending rewards in USD.\n    function getPendingRewards() public view returns (uint) {\n        // address[] memory assets = new address[](1);\n        // assets[0] = address(aToken);\n        // (address[] memory rewards, uint[] memory amounts) = aRewardsController.getAllUserRewards(assets, address(this));\n\n        // uint rewardsCount = rewards.length;\n        // uint pending;\n        // for (uint i = 0; i < rewardsCount; i ++) {\n        //     address reward = rewards[i];\n        //     uint priceInUSD = PriceLib.getAssetPrice(address(reward));\n        //     uint numeratorDecimals = 18; // USD precision\n        //     uint denominatorDecimals = IERC20UpgradeableEx(address(reward)).decimals() // against to amounts\n        //                             + 8; // against to priceInUSD\n        //     uint _pending = (numeratorDecimals < denominatorDecimals)\n        //                     ? amounts[i] * priceInUSD / (10 ** (denominatorDecimals-numeratorDecimals))\n        //                     : amounts[i] * priceInUSD * (10 ** (numeratorDecimals-denominatorDecimals));\n        //     pending += _pending;\n        // }\n        // return pending;\n        return 10e18;\n    }\n\n    function getAPR() external view returns (uint) {\n        // DataTypes.ReserveData memory reserveData = aPool.getReserveData(address(token));\n        // uint liquidityApr = reserveData.currentLiquidityRate / 1e9; // currentLiquidityRate is expressed in ray, 1e27\n\n        // address[] memory rewards = aRewardsController.getRewardsByAsset(address(aToken));\n        // uint rewardsCount = rewards.length;\n        // uint totalSupply = aToken.totalSupply();\n        // uint TokenPriceInUSD = PriceLib.getAssetPrice(address(token));\n        // uint rewardsApr;\n        // for (uint i = 0; i < rewardsCount; i ++) {\n        //     address reward = rewards[i];\n        //     (, uint emissionPerSecond,,) = aRewardsController.getRewardsData(address(aToken), reward);\n        //     uint priceInUSD = PriceLib.getAssetPrice(address(reward));\n        //     uint numeratorDecimals = 18 // APR precision\n        //                             + tokenDecimals; // against to totalSupply\n        //     uint denominatorDecimals = IERC20UpgradeableEx(address(reward)).decimals(); // against to emissionPerSecond\n        //     uint rewardApr = YEAR_IN_SEC * emissionPerSecond * priceInUSD * (10 ** (numeratorDecimals-denominatorDecimals))\n        //                     / (totalSupply * TokenPriceInUSD);\n        //     rewardsApr += rewardApr;\n        // }\n\n        // return liquidityApr + (rewardsApr * (DENOMINATOR-yieldFee) / DENOMINATOR);\n        return 8e15;\n    }\n\n}\n"
    },
    "contracts/mwi/libs/DataTypes.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity  0.8.9;\r\n\r\nlibrary DataTypes {\r\n  struct ReserveData {\r\n    //stores the reserve configuration\r\n    ReserveConfigurationMap configuration;\r\n    //the liquidity index. Expressed in ray\r\n    uint128 liquidityIndex;\r\n    //the current supply rate. Expressed in ray\r\n    uint128 currentLiquidityRate;\r\n    //variable borrow index. Expressed in ray\r\n    uint128 variableBorrowIndex;\r\n    //the current variable borrow rate. Expressed in ray\r\n    uint128 currentVariableBorrowRate;\r\n    //the current stable borrow rate. Expressed in ray\r\n    uint128 currentStableBorrowRate;\r\n    //timestamp of last update\r\n    uint40 lastUpdateTimestamp;\r\n    //the id of the reserve. Represents the position in the list of the active reserves\r\n    uint16 id;\r\n    //aToken address\r\n    address aTokenAddress;\r\n    //stableDebtToken address\r\n    address stableDebtTokenAddress;\r\n    //variableDebtToken address\r\n    address variableDebtTokenAddress;\r\n    //address of the interest rate strategy\r\n    address interestRateStrategyAddress;\r\n    //the current treasury balance, scaled\r\n    uint128 accruedToTreasury;\r\n    //the outstanding unbacked aTokens minted through the bridging feature\r\n    uint128 unbacked;\r\n    //the outstanding debt borrowed against this asset in isolation mode\r\n    uint128 isolationModeTotalDebt;\r\n  }\r\n\r\n  struct ReserveConfigurationMap {\r\n    //bit 0-15: LTV\r\n    //bit 16-31: Liq. threshold\r\n    //bit 32-47: Liq. bonus\r\n    //bit 48-55: Decimals\r\n    //bit 56: reserve is active\r\n    //bit 57: reserve is frozen\r\n    //bit 58: borrowing is enabled\r\n    //bit 59: stable rate borrowing enabled\r\n    //bit 60: asset is paused\r\n    //bit 61: borrowing in isolation mode is enabled\r\n    //bit 62-63: reserved\r\n    //bit 64-79: reserve factor\r\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\r\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\r\n    //bit 152-167 liquidation protocol fee\r\n    //bit 168-175 eMode category\r\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\r\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\r\n    //bit 252-255 unused\r\n\r\n    uint256 data;\r\n  }\r\n}\r\n"
    },
    "contracts/mwi/deps/Aave3Vault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"../libs/DataTypes.sol\";\nimport \"../libs/Price.sol\";\n\ninterface IUniRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity) ;\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n\n}\n\ninterface IERC20UpgradeableEx is IERC20Upgradeable {\n    function decimals() external view returns (uint8);\n}\n\ninterface IAToken is IERC20Upgradeable {\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n    function POOL() external view returns (address);\n    function getIncentivesController() external view returns (address);\n}\n\ninterface IPool {\n    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n    function withdraw(address asset, uint256 amount, address to ) external returns (uint256);\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n}\n\ninterface IRewardsController {\n    /// @dev asset The incentivized asset. It should be address of AToken\n    function getRewardsByAsset(address asset) external view returns (address[] memory);\n    function getRewardsData(address asset, address reward) external view returns (\n      uint256 index,\n      uint256 emissionPerSecond,\n      uint256 lastUpdateTimestamp,\n      uint256 distributionEnd\n    );\n    function getAllUserRewards(address[] calldata assets, address user) external view returns (address[] memory, uint256[] memory);\n    function getUserRewards(address[] calldata assets, address user, address reward) external view returns (uint256);\n    function claimAllRewards(address[] calldata assets, address to) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n    function claimAllRewardsToSelf(address[] calldata assets) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n}\n\ncontract Aave3Vault is Initializable, ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using SafeERC20Upgradeable for IAToken;\n\n    IERC20Upgradeable public constant WAVAX = IERC20Upgradeable(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\n\n    IUniRouter public constant JoeRouter = IUniRouter(0x60aE616a2155Ee3d9A68541Ba4544862310933d4);\n\n    uint constant DENOMINATOR = 10000;\n    uint public yieldFee;\n\n    IAToken public aToken;\n    IERC20Upgradeable public token;\n    uint8 private tokenDecimals;\n    IPool public aPool;\n    IRewardsController public aRewardsController;\n\n    address public treasuryWallet;\n    address public admin;\n\n    mapping(address => uint) private depositedBlock;\n\n    uint constant DAY_IN_SEC = 86400; // 3600 * 24\n    uint constant YEAR_IN_SEC = 365 * DAY_IN_SEC;\n\n    event Deposit(address _user, uint _amount, uint _shares);\n    event EmergencyWithdraw(uint _amount);\n    event Invest(uint _amount);\n    event SetAdmin(address _oldAdmin, address _newAdmin);\n    event SetYieldFeePerc(uint _fee);\n    event SetTreasuryWallet(address _wallet);\n    event Withdraw(address _user, uint _amount, uint _shares);\n    event YieldFee(uint _amount);\n    event Yield(uint _amount);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(string memory _name, string memory _symbol, \n        IAToken _aToken,\n        address _treasury, address _admin\n    ) external initializer {\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        yieldFee = 2000; //20%\n        aToken = _aToken;\n\n        token = IERC20Upgradeable(aToken.UNDERLYING_ASSET_ADDRESS());\n        tokenDecimals = IERC20UpgradeableEx(address(token)).decimals();\n        aPool = IPool(aToken.POOL());\n        aRewardsController = IRewardsController(aToken.getIncentivesController());\n        \n        treasuryWallet = _treasury;\n        admin = _admin;\n        \n        token.safeApprove(address(aPool), type(uint).max);\n        aToken.safeApprove(address(aPool), type(uint).max);\n        WAVAX.safeApprove(address(JoeRouter), type(uint).max);\n    }\n    \n    /**\n     *@param _amount amount of lptokens to deposit\n    */\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        require(_amount > 0, \"Invalid amount\");\n\n        uint _pool = getAllPool();\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n\n        depositedBlock[msg.sender] = block.number;\n\n        aPool.supply(address(token), token.balanceOf(address(this)), address(this), 0);\n\n        uint _totalSupply = totalSupply();\n        uint _shares = (_pool == 0 || _totalSupply == 0) ? _amount : _amount * _totalSupply / _pool;\n        _mint(msg.sender, _shares);\n\n        emit Deposit(msg.sender, _amount, _shares);\n    }\n\n    /**\n     *@param _shares amount of shares to burn\n    */\n    function withdraw(uint _shares) external nonReentrant{\n        require(_shares > 0, \"Invalid Amount\");\n        require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        uint _amountToWithdraw = getAllPool() * _shares / totalSupply(); \n\n        uint available = token.balanceOf(address(this));\n        if(available < _amountToWithdraw) {\n            aPool.withdraw(address(token), _amountToWithdraw - available, address(this));\n        }\n        _burn(msg.sender, _shares);\n\n        token.safeTransfer(msg.sender, _amountToWithdraw);\n        emit Withdraw(msg.sender, _amountToWithdraw, _shares);\n    }\n\n    function _invest() private returns (uint available){\n        available = token.balanceOf(address(this));\n        if(available > 0) {\n            aPool.supply(address(token), available, address(this), 0);\n        }\n    }\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused{ \n        _pause();\n        _yield();\n        uint stakedTokens = aToken.balanceOf(address(this));\n        if(stakedTokens > 0 ) {\n            aPool.withdraw(address(token), stakedTokens, address(this));\n        }\n        emit EmergencyWithdraw(stakedTokens);\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        _invest();\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        address oldAdmin = admin;\n        admin = _newAdmin;\n\n        emit SetAdmin(oldAdmin, _newAdmin);\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < 3001, \"Yield Fee cannot > 30%\");\n        yieldFee = _yieldFeePerc;\n        emit SetYieldFeePerc(_yieldFeePerc);\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n        emit SetTreasuryWallet(_wallet);\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        _yield();\n    }\n\n    function _yield() private {\n        address[] memory assets = new address[](1);\n        assets[0] = address(aToken);\n        (address[] memory rewards, uint[] memory amounts) = aRewardsController.claimAllRewardsToSelf(assets);\n\n        uint rewardsCount = rewards.length;\n        for (uint i = 0; i < rewardsCount; i ++) {\n            address reward = rewards[i];\n            uint amount = amounts[i];\n            if (0 < amount && reward != address(WAVAX)) {\n                IERC20Upgradeable(reward).safeTransfer(treasuryWallet, amount);\n            }\n        }\n\n        uint AVAXAmt = WAVAX.balanceOf(address(this));\n        if(AVAXAmt > 0) {\n            uint fee = AVAXAmt * yieldFee / DENOMINATOR; //yield fee\n            WAVAX.safeTransfer(treasuryWallet, fee);\n            AVAXAmt -= fee;\n\n            if (token != WAVAX) {\n                _swap(address(WAVAX), address(token), AVAXAmt);\n            }\n            _invest();\n\n            uint AVAXPriceInUSD = PriceLib.getAssetPrice(address(WAVAX));\n            emit Yield((AVAXAmt + fee) * AVAXPriceInUSD / 1e8);\n            emit YieldFee(fee * AVAXPriceInUSD / 1e8);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt) private returns (uint[] memory amounts){\n        address[] memory path = new address[](2);\n\n        path[0] = address(_tokenA);\n        path[1] = address(_tokenB);\n\n        amounts = JoeRouter.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp);\n    }\n\n    function getAllPool() public view returns (uint ) {\n        return token.balanceOf(address(this)) + aToken.balanceOf(address(this));\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint priceInUSD = PriceLib.getAssetPrice(address(token));\n        uint _pool = getAllPool();\n        if (tokenDecimals < 18) {\n            _pool = _pool * (10 ** (18-tokenDecimals));\n        }\n        return _pool * priceInUSD / 1e8;\n    }\n\n    function getPricePerFullShare(bool inUSD) external view returns (uint) {\n        uint _totalSupply = totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return inUSD == true ?\n            getAllPoolInUSD() * 1e18 / _totalSupply :\n            getAllPool() * 1e18 / _totalSupply;\n    }\n\n    ///@notice Returns the pending rewards in USD.\n    function getPendingRewards() public view returns (uint) {\n        address[] memory assets = new address[](1);\n        assets[0] = address(aToken);\n        (address[] memory rewards, uint[] memory amounts) = aRewardsController.getAllUserRewards(assets, address(this));\n\n        uint rewardsCount = rewards.length;\n        uint pending;\n        for (uint i = 0; i < rewardsCount; i ++) {\n            address reward = rewards[i];\n            uint priceInUSD = PriceLib.getAssetPrice(address(reward));\n            uint numeratorDecimals = 18; // USD precision\n            uint denominatorDecimals = IERC20UpgradeableEx(address(reward)).decimals() // against to amounts\n                                    + 8; // against to priceInUSD\n            uint _pending = (numeratorDecimals < denominatorDecimals)\n                            ? amounts[i] * priceInUSD / (10 ** (denominatorDecimals-numeratorDecimals))\n                            : amounts[i] * priceInUSD * (10 ** (numeratorDecimals-denominatorDecimals));\n            pending += _pending;\n        }\n        return pending;\n    }\n\n    function getAPR() external view returns (uint) {\n        DataTypes.ReserveData memory reserveData = aPool.getReserveData(address(token));\n        uint liquidityApr = reserveData.currentLiquidityRate / 1e9; // currentLiquidityRate is expressed in ray, 1e27\n\n        address[] memory rewards = aRewardsController.getRewardsByAsset(address(aToken));\n        uint rewardsCount = rewards.length;\n        uint _totalSupply = aToken.totalSupply();\n        uint TokenPriceInUSD = PriceLib.getAssetPrice(address(token));\n        uint rewardsApr;\n        for (uint i = 0; i < rewardsCount; i ++) {\n            address reward = rewards[i];\n            (, uint emissionPerSecond,,) = aRewardsController.getRewardsData(address(aToken), reward);\n            uint priceInUSD = PriceLib.getAssetPrice(address(reward));\n            uint numeratorDecimals = 18 // APR precision\n                                    + tokenDecimals; // against to totalSupply\n            uint denominatorDecimals = IERC20UpgradeableEx(address(reward)).decimals(); // against to emissionPerSecond\n            uint rewardApr = YEAR_IN_SEC * emissionPerSecond * priceInUSD * (10 ** (numeratorDecimals-denominatorDecimals))\n                            / (_totalSupply * TokenPriceInUSD);\n            rewardsApr += rewardApr;\n        }\n\n        return liquidityApr + (rewardsApr * (DENOMINATOR-yieldFee) / DENOMINATOR);\n    }\n\n}\n"
    },
    "contracts/lci/LCIVaultTest.sol": {
      "content": " // SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../../libs/BaseRelayRecipient.sol\";\n\ninterface IChainlink {\n    function latestAnswer() external view returns (int256);\n}\n\ninterface IStrategy {\n    function invest(uint amount) external;\n    function withdrawPerc(uint sharePerc) external;\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external returns (uint);\n    function emergencyWithdraw() external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages);\n    function getAPR() external view returns (uint);\n}\n\ncontract LCIVaultTest is ERC20Upgradeable, OwnableUpgradeable, \n        ReentrancyGuardUpgradeable, PausableUpgradeable, BaseRelayRecipient {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0x1F326a8CA5399418a76eA0efa0403Cbb00790C67);\n\n    IStrategy public strategy;\n    address public treasuryWallet;\n    address public admin;\n\n    mapping(address => uint) private depositedBlock;\n\n    event Deposit(address caller, uint amtDeposit, address tokenDeposit, uint shareMinted);\n    event Withdraw(address caller, uint amtWithdraw, address tokenWithdraw, uint shareBurned);\n    event Rebalance(uint farmIndex, uint sharePerc, uint amount);\n    event Reinvest(uint amount);\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\n    event SetAdminWallet(address oldAdmin, address newAdmin);\n    event SetBiconomy(address oldBiconomy, address newBiconomy);\n    \n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == address(admin), \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(\n        address _treasuryWallet, address _admin,\n        address _biconomy, address _strategy\n    ) external initializer {\n        __ERC20_init(\"Low-risk Crypto Index\", \"LCI\");\n        __Ownable_init();\n\n        strategy = IStrategy(_strategy);\n\n        treasuryWallet = _treasuryWallet;\n        admin = _admin;\n        trustedForwarder = _biconomy;\n\n        USDT.safeApprove(address(strategy), type(uint).max);\n    }\n\n    function deposit(uint amount) external {\n        _deposit(_msgSender(), amount);\n    }\n    function depositByAdmin(address account, uint amount) external onlyOwnerOrAdmin {\n        _deposit(account, amount);\n    }\n    function _deposit(address account, uint amount) private nonReentrant whenNotPaused {\n        require(amount > 0, \"Amount must > 0\");\n        depositedBlock[account] = block.number;\n\n        uint pool = getAllPoolInUSD();\n        USDT.safeTransferFrom(account, address(this), amount);\n\n        strategy.invest(amount);\n\n        uint amtDeposit = amount; // USDT's decimals is 18\n        uint _totalSupply = totalSupply();\n        uint share = (_totalSupply == 0 || pool <= _totalSupply)  ? amtDeposit : amtDeposit * _totalSupply / pool;\n        _mint(account, share);\n\n        emit Deposit(account, amtDeposit, address(USDT), share);\n    }\n\n    function withdraw(uint share) external {\n        _withdraw(msg.sender, share);\n    }\n    function withdrawByAdmin(address account, uint share) external onlyOwnerOrAdmin {\n        _withdraw(account, share);\n    }\n    function _withdraw(address account, uint share) private nonReentrant {\n        require(share > 0, \"Shares must > 0\");\n        require(share <= balanceOf(account), \"Not enough share to withdraw\");\n        require(depositedBlock[account] != block.number, \"Withdraw within same block\");\n        \n        uint _totalSupply = totalSupply();\n        uint withdrawAmt = getAllPoolInUSD() * share / _totalSupply;\n\n        if (!paused()) {\n            strategy.withdrawPerc(share * 1e18 / _totalSupply);\n            USDT.safeTransfer(account, USDT.balanceOf(address(this)));\n        } else {\n            USDT.safeTransfer(account, withdrawAmt); // USDT's decimals is 18\n        }\n        _burn(account, share);\n        emit Withdraw(account, withdrawAmt, address(USDT), share);\n    }\n\n    function rebalance(uint farmIndex, uint sharePerc) external onlyOwnerOrAdmin {\n        uint USDTAmt = strategy.withdrawFromFarm(farmIndex, sharePerc);\n        if (0 < USDTAmt) {\n            strategy.invest(USDTAmt);\n            emit Rebalance(farmIndex, sharePerc, USDTAmt);\n        }\n    }\n\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\n        _pause();\n        strategy.emergencyWithdraw();\n    }\n\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            strategy.invest(USDTAmt);\n            emit Reinvest(USDTAmt);\n        }\n    }\n\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\n        address oldTreasuryWallet = treasuryWallet;\n        treasuryWallet = _treasuryWallet;\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit SetAdminWallet(oldAdmin, _admin);\n    }\n\n    function setBiconomy(address _biconomy) external onlyOwner {\n        address oldBiconomy = trustedForwarder;\n        trustedForwarder = _biconomy;\n        emit SetBiconomy(oldBiconomy, _biconomy);\n    }\n\n    function _msgSender() internal override(ContextUpgradeable, BaseRelayRecipient) view returns (address) {\n        return BaseRelayRecipient._msgSender();\n    }\n    \n    function versionRecipient() external pure override returns (string memory) {\n        return \"1\";\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        if (paused()) return USDT.balanceOf(address(this)); // USDT's decimals is 18\n        return strategy.getAllPoolInUSD();\n    }\n\n    /// @notice Can be use for calculate both user shares & APR    \n    function getPricePerFullShare() external view returns (uint) {\n        uint _totalSupply = totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return getAllPoolInUSD() * 1e18 / _totalSupply;\n    }\n\n    function getCurrentCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        return strategy.getCurrentTokenCompositionPerc();\n    }\n\n    function getAPR() external view returns (uint) {\n        return strategy.getAPR();\n    }\n}\n"
    },
    "contracts/lci/LCIVault.sol": {
      "content": " // SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../../libs/BaseRelayRecipient.sol\";\nimport \"./libs/Price.sol\";\n\ninterface IStrategy {\n    function invest(uint amount) external;\n    function withdrawPerc(uint sharePerc) external;\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external returns (uint);\n    function emergencyWithdraw() external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages);\n    function getAPR() external view returns (uint);\n}\n\ncontract LCIVault is ERC20Upgradeable, OwnableUpgradeable, \n        ReentrancyGuardUpgradeable, PausableUpgradeable, BaseRelayRecipient {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0x55d398326f99059fF775485246999027B3197955);\n\n    IStrategy public strategy;\n    address public treasuryWallet;\n    address public admin;\n\n    uint constant DENOMINATOR = 10000;\n    uint public watermark; // In USD (18 decimals)\n    uint public profitFeePerc;\n    uint public fees; // In USD (18 decimals)\n\n    mapping(address => uint) private depositedBlock;\n\n    event Deposit(address caller, uint amtDeposit, address tokenDeposit, uint shareMinted);\n    event Withdraw(address caller, uint amtWithdraw, address tokenWithdraw, uint shareBurned);\n    event Rebalance(uint farmIndex, uint sharePerc, uint amount);\n    event Reinvest(uint amount);\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\n    event SetAdminWallet(address oldAdmin, address newAdmin);\n    event SetBiconomy(address oldBiconomy, address newBiconomy);\n    event CollectProfitAndUpdateWatermark(uint currentWatermark, uint lastWatermark, uint fee);\n    event AdjustWatermark(uint currentWatermark, uint lastWatermark);\n    event TransferredOutFees(uint fees, address token);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == address(admin), \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(\n        address _treasuryWallet, address _admin,\n        address _biconomy, address _strategy\n    ) external initializer {\n        __ERC20_init(\"Low-risk Crypto Index\", \"LCI\");\n        __Ownable_init();\n\n        strategy = IStrategy(_strategy);\n\n        treasuryWallet = _treasuryWallet;\n        admin = _admin;\n        trustedForwarder = _biconomy;\n\n        profitFeePerc = 2000;\n\n        USDT.safeApprove(address(strategy), type(uint).max);\n    }\n\n    function deposit(uint amount) external {\n        _deposit(_msgSender(), amount);\n    }\n    function depositByAdmin(address account, uint amount) external onlyOwnerOrAdmin {\n        _deposit(account, amount);\n    }\n    function _deposit(address account, uint amount) private nonReentrant whenNotPaused {\n        require(amount > 0, \"Amount must > 0\");\n        depositedBlock[account] = block.number;\n\n        uint pool = getAllPoolInUSD();\n        USDT.safeTransferFrom(account, address(this), amount);\n\n        (uint USDTPriceInUSD, uint denominator) = PriceLib.getUSDTPriceInUSD();\n        uint amtDeposit = amount * USDTPriceInUSD / denominator; // USDT's decimals is 18\n\n        if (watermark > 0) _collectProfitAndUpdateWatermark();\n        uint USDTAmt = _transferOutFees();\n        if (USDTAmt > 0) {\n            strategy.invest(USDTAmt);\n        }\n        adjustWatermark(amtDeposit, true);\n\n        uint _totalSupply = totalSupply();\n        uint share = (pool == 0 || _totalSupply == 0) ? amtDeposit : _totalSupply * amtDeposit / pool;\n        // When assets invested in strategy, around 0.3% lost for swapping fee. We will consider it in share amount calculation to avoid pricePerFullShare fall down under 1.\n        share = share * 997 / 1000;\n        _mint(account, share);\n\n        emit Deposit(account, amtDeposit, address(USDT), share);\n    }\n\n    function withdraw(uint share) external {\n        _withdraw(msg.sender, share);\n    }\n    function withdrawByAdmin(address account, uint share) external onlyOwnerOrAdmin {\n        _withdraw(account, share);\n    }\n    function _withdraw(address account, uint share) private nonReentrant {\n        require(share > 0, \"Shares must > 0\");\n        require(share <= balanceOf(account), \"Not enough share to withdraw\");\n        require(depositedBlock[account] != block.number, \"Withdraw within same block\");\n        \n        uint _totalSupply = totalSupply();\n        uint pool = getAllPoolInUSD();\n        uint withdrawAmt = pool * share / _totalSupply;\n        uint sharePerc = withdrawAmt * 1e18 / (pool + fees);\n\n        if (!paused()) {\n            strategy.withdrawPerc(sharePerc);\n            USDT.safeTransfer(account, USDT.balanceOf(address(this)));\n            adjustWatermark(withdrawAmt, false);\n        } else {\n            uint USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\n            USDT.safeTransfer(account, USDTAmt);\n        }\n        _burn(account, share);\n        emit Withdraw(account, withdrawAmt, address(USDT), share);\n    }\n\n    function rebalance(uint farmIndex, uint sharePerc) external onlyOwnerOrAdmin {\n        uint USDTAmt = strategy.withdrawFromFarm(farmIndex, sharePerc);\n        if (0 < USDTAmt) {\n            strategy.invest(USDTAmt);\n            emit Rebalance(farmIndex, sharePerc, USDTAmt);\n        }\n    }\n\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\n        _pause();\n        strategy.emergencyWithdraw();\n        watermark = 0;\n    }\n\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            (uint USDTPriceInUSD, uint denominator) = PriceLib.getUSDTPriceInUSD();\n            uint amtDeposit = USDTAmt * USDTPriceInUSD / denominator; // USDT's decimals is 18\n\n            strategy.invest(USDTAmt);\n            adjustWatermark(amtDeposit, true);\n            emit Reinvest(USDTAmt);\n        }\n    }\n\n    function collectProfitAndUpdateWatermark() external onlyOwnerOrAdmin whenNotPaused {\n        _collectProfitAndUpdateWatermark();\n    }\n    function _collectProfitAndUpdateWatermark() private {\n        uint currentWatermark = strategy.getAllPoolInUSD();\n        uint lastWatermark = watermark;\n        uint fee;\n        if (currentWatermark > lastWatermark) {\n            uint profit = currentWatermark - lastWatermark;\n            fee = profit * profitFeePerc / DENOMINATOR;\n            fees += fee;\n            watermark = currentWatermark;\n        }\n        emit CollectProfitAndUpdateWatermark(currentWatermark, lastWatermark, fee);\n    }\n\n    /// @param signs True for positive, false for negative\n    function adjustWatermark(uint amount, bool signs) private {\n        uint lastWatermark = watermark;\n        watermark = signs == true\n                    ? watermark + amount\n                    : (watermark > amount) ? watermark - amount : 0;\n        emit AdjustWatermark(watermark, lastWatermark);\n    }\n\n    function withdrawFees() external onlyOwnerOrAdmin {\n        if (!paused()) {\n            uint pool = strategy.getAllPoolInUSD();\n            uint _fees = fees;\n            uint sharePerc = _fees < pool ? _fees * 1e18 / pool : 1e18;\n            strategy.withdrawPerc(sharePerc);\n        }\n        _transferOutFees();\n    }\n\n    function _transferOutFees() private returns (uint USDTAmt) {\n        USDTAmt = USDT.balanceOf(address(this));\n        uint _fees = fees;\n        if (_fees != 0) {\n            (uint USDTPriceInUSD, uint denominator) = PriceLib.getUSDTPriceInUSD();\n            uint FeeAmt = _fees * denominator / USDTPriceInUSD; // USDT's decimals is 18\n\n            if (FeeAmt < USDTAmt) {\n                _fees = 0;\n                USDTAmt -= FeeAmt;\n            } else {\n                _fees -= (USDTAmt * USDTPriceInUSD / denominator);\n                FeeAmt = USDTAmt;\n                USDTAmt = 0;\n            }\n            fees = _fees;\n\n            USDT.safeTransfer(treasuryWallet, FeeAmt);\n            emit TransferredOutFees(FeeAmt, address(USDT)); // Decimal follow _token\n        }\n    }\n\n    function setProfitFeePerc(uint _profitFeePerc) external onlyOwner {\n        require(profitFeePerc < 3001, \"Profit fee cannot > 30%\");\n        profitFeePerc = _profitFeePerc;\n    }\n\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\n        address oldTreasuryWallet = treasuryWallet;\n        treasuryWallet = _treasuryWallet;\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit SetAdminWallet(oldAdmin, _admin);\n    }\n\n    function setBiconomy(address _biconomy) external onlyOwner {\n        address oldBiconomy = trustedForwarder;\n        trustedForwarder = _biconomy;\n        emit SetBiconomy(oldBiconomy, _biconomy);\n    }\n\n    function _msgSender() internal override(ContextUpgradeable, BaseRelayRecipient) view returns (address) {\n        return BaseRelayRecipient._msgSender();\n    }\n    \n    function versionRecipient() external pure override returns (string memory) {\n        return \"1\";\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint pool;\n        if (paused()) {\n            (uint USDTPriceInUSD, uint denominator) = PriceLib.getUSDTPriceInUSD();\n            pool = USDT.balanceOf(address(this)) * USDTPriceInUSD / denominator; // USDT's decimals is 18\n        } else {\n            pool = strategy.getAllPoolInUSD();\n        }\n        return (pool > fees ? pool - fees : 0);\n    }\n\n    /// @notice Can be use for calculate both user shares & APR    \n    function getPricePerFullShare() external view returns (uint) {\n        uint _totalSupply = totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return getAllPoolInUSD() * 1e18 / _totalSupply;\n    }\n\n    function getCurrentCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        return strategy.getCurrentTokenCompositionPerc();\n    }\n\n    function getAPR() external view returns (uint) {\n        return strategy.getAPR();\n    }\n}\n"
    },
    "contracts/lci/libs/Price.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\ninterface IChainlink {\n    function latestAnswer() external view returns (int256);\n}\n\nlibrary PriceLib {\n\n    address internal constant USDT = 0x55d398326f99059fF775485246999027B3197955;\n    address internal constant USDC = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\n    address internal constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\n\n    /// @return the price in USD of 8 decimals in precision.\n    function getAssetPrice(address asset) internal view returns (uint) {\n        if (asset == USDT) {\n            return uint(IChainlink(0xB97Ad0E74fa7d920791E90258A6E2085088b4320).latestAnswer());\n        } else if (asset == USDC) {\n            return uint(IChainlink(0x51597f405303C4377E36123cBc172b13269EA163).latestAnswer());\n        } else if (asset == BUSD) {\n            return uint(IChainlink(0xcBb98864Ef56E9042e7d2efef76141f15731B82f).latestAnswer());\n        }\n        return 0;\n    }\n\n    function getBNBPriceInUSD() internal view returns (uint, uint) {\n        uint BNBPriceInUSD = uint(IChainlink(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE).latestAnswer()); // 8 decimals\n        return (BNBPriceInUSD, 1e8);\n    }\n\n    function getCAKEPriceInUSD() internal view returns (uint, uint) {\n        uint CAKEPriceInUSD = uint(IChainlink(0xB6064eD41d4f67e353768aA239cA86f4F73665a1).latestAnswer()); // 8 decimals\n        return (CAKEPriceInUSD, 1e8);\n    }\n\n    function getUSDTPriceInUSD() internal view returns (uint, uint) {\n        uint USDTPriceInUSD = uint(IChainlink(0xB97Ad0E74fa7d920791E90258A6E2085088b4320).latestAnswer()); // 8 decimals\n        return (USDTPriceInUSD, 1e8);\n    }\n}\n"
    },
    "contracts/lci/LCIStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./libs/Price.sol\";\n\ninterface IRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n}\n\ninterface IL2Vault is IERC20Upgradeable {\n    function deposit(uint amount) external;\n    function withdraw(uint share) external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getAPR() external view returns (uint);\n}\n\ncontract LCIStrategy is OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0x55d398326f99059fF775485246999027B3197955);\n    IERC20Upgradeable public constant USDC = IERC20Upgradeable(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);\n    IERC20Upgradeable public constant BUSD = IERC20Upgradeable(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\n\n    IERC20Upgradeable public constant USDTUSDC = IERC20Upgradeable(0xEc6557348085Aa57C72514D67070dC863C0a5A8c);\n    IERC20Upgradeable public constant USDTBUSD = IERC20Upgradeable(0x7EFaEf62fDdCCa950418312c6C91Aef321375A00);\n    IERC20Upgradeable public constant USDCBUSD = IERC20Upgradeable(0x2354ef4DF11afacb85a5C7f98B624072ECcddbB1);\n\n    IRouter public constant PnckRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n\n    uint constant POOL_COUNT = 3;\n    IL2Vault public USDTUSDCVault;\n    IL2Vault public USDTBUSDVault;\n    IL2Vault public USDCBUSDVault;\n    \n    uint constant DENOMINATOR = 10000;\n    uint[] public targetPercentages;\n\n    address public vault;\n\n    event TargetComposition (uint USDTUSDCTargetPool, uint USDTBUSDTargetPool, uint USDCBUSDTargetPool);\n    event CurrentComposition (uint USDTUSDCTargetPool, uint USDTBUSDTargetPool, uint USDCBUSDCurrentPool);\n    event InvestUSDTUSDC(uint USDTAmt, uint USDTUSDCAmt);\n    event InvestUSDTBUSD(uint USDTAmt, uint USDTBUSDAmt);\n    event InvestUSDCBUSD(uint USDTAmt, uint USDCBUSDAmt);\n    event Withdraw(uint sharePerc, uint USDTAmt);\n    event WithdrawUSDTUSDC(uint lpTokenAmt, uint USDTAmt);\n    event WithdrawUSDTBUSD(uint lpTokenAmt, uint USDTAmt);\n    event WithdrawUSDCBUSD(uint lpTokenAmt, uint USDTAmt);\n    event EmergencyWithdraw(uint USDTAmt);\n\n    modifier onlyVault {\n        require(msg.sender == vault, \"Only vault\");\n        _;\n    }\n\n    function initialize(IL2Vault _USDTUSDCVault, IL2Vault _USDTBUSDVault, IL2Vault _USDCBUSDVault) external initializer {\n        __Ownable_init();\n\n        targetPercentages.push(6000); // 60%\n        targetPercentages.push(2000); // 20%\n        targetPercentages.push(2000); // 20%\n\n        USDTUSDCVault = _USDTUSDCVault;\n        USDTBUSDVault = _USDTBUSDVault;\n        USDCBUSDVault = _USDCBUSDVault;\n\n        USDT.safeApprove(address(PnckRouter), type(uint).max);\n        USDC.safeApprove(address(PnckRouter), type(uint).max);\n        BUSD.safeApprove(address(PnckRouter), type(uint).max);\n\n        USDTUSDC.safeApprove(address(USDTUSDCVault), type(uint).max);\n        USDTBUSD.safeApprove(address(USDTBUSDVault), type(uint).max);\n        USDCBUSD.safeApprove(address(USDCBUSDVault), type(uint).max);\n\n        USDTUSDC.safeApprove(address(PnckRouter), type(uint).max);\n        USDTBUSD.safeApprove(address(PnckRouter), type(uint).max);\n        USDCBUSD.safeApprove(address(PnckRouter), type(uint).max);\n    }\n\n    function invest(uint USDTAmt) external onlyVault {\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\n        USDTAmt = USDT.balanceOf(address(this));\n        (uint USDTPriceInUSD, uint denominator) = PriceLib.getUSDTPriceInUSD();\n\n        uint[] memory pools = getEachPoolInUSD();\n        uint allPool = pools[0] + pools[1] + pools[2] + USDTAmt * USDTPriceInUSD / denominator; // USDT's decimals is 18\n\n        uint totalAllocation;\n        uint[] memory allocations = new uint[](POOL_COUNT);\n        for (uint i = 0; i < POOL_COUNT; i ++) {\n            uint target = allPool * targetPercentages[i] / DENOMINATOR;\n            if (pools[i] < target) {\n                uint diff = target - pools[i];\n                allocations[i] = diff;\n                totalAllocation += diff;\n            }\n        }\n\n        uint[] memory USDTAmts = new uint[](POOL_COUNT);\n        for (uint i = 0; i < POOL_COUNT; i ++) {\n            USDTAmts[i] = USDTAmt * allocations[i] / totalAllocation;\n        }\n\n        if (USDTAmts[0] > 0) {\n            _investUSDTUSDC(USDTAmts[0]);\n        }\n        if (USDTAmts[1] > 0) {\n            _investUSDTBUSD(USDTAmts[1]);\n        }\n        if (USDTAmts[2] > 0) {\n            _investUSDCBUSD(USDT.balanceOf(address(this)));\n        }\n\n        emit CurrentComposition(pools[0], pools[1], pools[2]);\n        emit TargetComposition(targetPercentages[0], targetPercentages[1], targetPercentages[2]);\n    }\n\n\n    function _investUSDTUSDC(uint _usdtAmt) private {\n        uint _amt = _usdtAmt/2;\n        _swap(address(USDT), address(USDC), _amt, _amt*98/100);\n\n        uint _USDCAmt = USDC.balanceOf(address(this));\n        uint lpTokens = _addLiquidity(address(USDT), address(USDC), _amt, _USDCAmt);\n\n        USDTUSDCVault.deposit(lpTokens);\n        emit InvestUSDTUSDC(_usdtAmt, lpTokens);\n    }\n\n    function _investUSDTBUSD(uint _usdtAmt) private {\n        uint _amt = _usdtAmt / 2 ;\n        _swap(address(USDT), address(BUSD), _amt, _amt*98/100);\n\n        uint _BUSDAmt = BUSD.balanceOf(address(this));\n        uint lpTokens = _addLiquidity(address(USDT), address(BUSD), _amt, _BUSDAmt);\n\n        USDTBUSDVault.deposit(lpTokens);\n        emit InvestUSDTBUSD(_usdtAmt, lpTokens);\n    }\n\n    function _investUSDCBUSD(uint _usdtAmt) private {\n        uint _amt = _usdtAmt / 2 ;\n        _swap(address(USDT), address(USDC), _amt, _amt*98/100);\n        _swap(address(USDT), address(BUSD), _amt, _amt*98/100);\n\n        uint _USDCAmt = USDC.balanceOf(address(this));\n        uint _BUSDAmt = BUSD.balanceOf(address(this));\n\n        uint lpTokens = _addLiquidity(address(USDC), address(BUSD), _USDCAmt, _BUSDAmt);\n\n        USDCBUSDVault.deposit(lpTokens);\n        emit InvestUSDCBUSD(_usdtAmt, lpTokens);\n    }\n\n    function withdrawPerc(uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(sharePerc <= 1e18, \"Over 100%\");\n        \n        uint USDTAmtBefore = USDT.balanceOf(address(this));\n        _withdrawUSDTUSDC(sharePerc);\n        _withdrawUSDTBUSD(sharePerc);\n        _withdrawUSDCBUSD(sharePerc);\n        USDTAmt = USDT.balanceOf(address(this)) - USDTAmtBefore;\n        USDT.safeTransfer(vault, USDTAmt);\n\n        emit Withdraw(sharePerc, USDTAmt);\n    }\n\n    function _withdrawUSDTUSDC(uint _sharePerc) private {\n        uint amount = USDTUSDCVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDTUSDCVault.withdraw(amount);\n\n            uint _amt = USDTUSDC.balanceOf(address(this));\n            (uint _amtUSDT,) = _removeLiquidity(address(USDT), address(USDC), _amt);\n            uint _amtUSDC = USDC.balanceOf(address(this));\n            _amtUSDT += _swap(address(USDC), address(USDT), _amtUSDC, _amtUSDC*98/100);\n\n            emit WithdrawUSDTUSDC(_amt, _amtUSDT);\n        }\n    }\n\n    function _withdrawUSDTBUSD(uint _sharePerc) private {\n        uint amount = USDTBUSDVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDTBUSDVault.withdraw(amount);\n\n            uint _amt = USDTBUSD.balanceOf(address(this));\n            (uint _amtUSDT,) = _removeLiquidity(address(USDT), address(BUSD), _amt);\n            uint _amtBUSD = BUSD.balanceOf(address(this));\n            _amtUSDT += _swap(address(BUSD), address(USDT), _amtBUSD, _amtBUSD*98/100);\n\n            emit WithdrawUSDTBUSD(_amt, _amtUSDT);\n        }\n    }\n\n    function _withdrawUSDCBUSD(uint _sharePerc) private {\n        uint amount = USDCBUSDVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDCBUSDVault.withdraw(amount);\n\n            uint _amt = USDCBUSD.balanceOf(address(this));\n            _removeLiquidity(address(USDC), address(BUSD), _amt);\n            uint _amtUSDC = USDC.balanceOf(address(this));\n            uint _amtBUSD = BUSD.balanceOf(address(this));\n            uint _usdtAmt = _swap(address(USDC), address(USDT), _amtUSDC, _amtUSDC*98/100);\n            _usdtAmt += _swap(address(BUSD), address(USDT), _amtBUSD, _amtBUSD*98/100);\n\n            emit WithdrawUSDCBUSD(_amt, _usdtAmt);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = _tokenB;\n        return (PnckRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function _addLiquidity(address _tokenA, address _tokenB, uint _amtA, uint _amtB) private returns (uint liquidity) {\n        (,,liquidity) = PnckRouter.addLiquidity(_tokenA, _tokenB, _amtA, _amtB, 0, 0, address(this), block.timestamp);\n    }\n\n    function _removeLiquidity(address _tokenA, address _tokenB, uint _amt) private returns (uint _amtA, uint _amtB) {\n        (_amtA, _amtB) = PnckRouter.removeLiquidity(_tokenA, _tokenB, _amt, 0, 0, address(this), block.timestamp);\n    }\n\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(sharePerc <= 1e18, \"Over 100%\");\n        if (farmIndex == 0) _withdrawUSDTUSDC(sharePerc); \n        else if (farmIndex == 1) _withdrawUSDTBUSD(sharePerc);\n        else if (farmIndex == 2) _withdrawUSDCBUSD(sharePerc);\n        USDTAmt = USDT.balanceOf(address(this));\n        USDT.safeTransfer(vault, USDTAmt);\n    }\n\n    function emergencyWithdraw() external onlyVault {\n        // 1e18 == 100% of share\n        _withdrawUSDTUSDC(1e18);\n        _withdrawUSDTBUSD(1e18);\n        _withdrawUSDCBUSD(1e18);\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            USDT.safeTransfer(vault, USDTAmt);\n        }\n        emit EmergencyWithdraw(USDTAmt);\n    }\n\n    function setVault(address _vault) external onlyOwner {\n        require(vault == address(0), \"Vault set\");\n        vault = _vault;\n    }\n\n    function setLPCompositionTargetPerc(uint[] calldata _targetPerc) external onlyOwner {\n        uint targetCnt = _targetPerc.length;\n        require(targetCnt == targetPercentages.length, \"Invalid count\");\n\n        uint sum;\n        for (uint i = 0; i < targetCnt; i ++) {\n            targetPercentages[i] = _targetPerc[i];\n            sum += _targetPerc[i];\n        }\n        require(sum == DENOMINATOR, \"Invalid parameter\");\n    }\n\n    function getUSDTUSDCPoolInUSD() private view  returns (uint) {\n        uint amt = USDTUSDCVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDTUSDCVault.balanceOf(address(this)) / USDTUSDCVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getUSDTBUSDPoolInUSD() private view returns (uint) {\n        uint amt = USDTBUSDVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDTBUSDVault.balanceOf(address(this)) / USDTBUSDVault.totalSupply();\n    }\n\n    function getUSDCBUSDPoolInUSD() private view returns (uint) {\n        uint amt = USDCBUSDVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDCBUSDVault.balanceOf(address(this)) / USDCBUSDVault.totalSupply();\n    }\n\n    function getEachPoolInUSD() private view returns (uint[] memory pools) {\n        pools = new uint[](POOL_COUNT);\n        pools[0] = getUSDTUSDCPoolInUSD();\n        pools[1] = getUSDTBUSDPoolInUSD();\n        pools[2] = getUSDCBUSDPoolInUSD();\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint[] memory pools = getEachPoolInUSD();\n        return pools[0] + pools[1] + pools[2];\n    }\n\n    function getCurrentLPCompositionPerc() public view returns (uint[] memory percentages) {\n        uint[] memory pools = getEachPoolInUSD();\n        uint allPool = pools[0] + pools[1] + pools[2];\n        percentages = new uint[](POOL_COUNT);\n        for (uint i = 0; i < POOL_COUNT; i ++) {\n            percentages[i] = allPool == 0 ? targetPercentages[i] : pools[i] * DENOMINATOR / allPool;\n        }\n    }\n\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        uint[] memory lpPerc = getCurrentLPCompositionPerc();\n        tokens = new address[](POOL_COUNT);\n        tokens[0] = address(USDT);\n        tokens[1] = address(USDC);\n        tokens[2] = address(BUSD);\n        percentages = new uint[](POOL_COUNT);\n        percentages[0] = (lpPerc[0] + lpPerc[1]) / 2;\n        percentages[1] = (lpPerc[0] + lpPerc[2]) / 2;\n        percentages[2] = (lpPerc[1] + lpPerc[2]) / 2;\n    }\n\n    function getAPR() external view returns (uint) {\n        uint[] memory lpPerc = getCurrentLPCompositionPerc();\n        uint allApr = USDTUSDCVault.getAPR() * lpPerc[0]\n                    + USDTBUSDVault.getAPR() * lpPerc[1]\n                    + USDCBUSDVault.getAPR() * lpPerc[2];\n        return (allApr / DENOMINATOR);\n    }\n\n}\n"
    },
    "contracts/lci/deps/VaultTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"../libs/Math.sol\";\nimport \"../libs/Price.sol\";\n\ninterface IUniRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity) ;\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n\n}\n\ninterface IUniPair is IERC20Upgradeable{\n    function getReserves() external view returns (uint, uint);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n}\n\ninterface IMasterChefV2 {\n    function poolInfo(\n        uint pid\n    ) external view returns(\n        uint accCakePerShare, uint lastRewardBlock, uint allocPoint, uint totalBoostedShare, bool isRegular\n    );\n\n    function userInfo(\n        uint pid, address user\n    ) external view returns(\n        uint amount, uint rewardDebt, uint boostMultiplier\n    );\n\n    function pendingCake(uint pid, address user) external view returns (uint);\n    function lpToken(uint pid) external view returns (address);\n    function totalRegularAllocPoint() external view returns (uint);\n    function totalSpecialAllocPoint() external view returns (uint);\n    function cakePerBlock(bool isRegular) external view returns (uint amount);\n\n    function deposit(uint pid, uint amount) external;\n    function withdraw(uint pid, uint amount) external;\n}\n\ncontract BscVaultTest is Initializable, ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    using SafeERC20Upgradeable for IUniPair;\n\n    IERC20Upgradeable public constant CAKE  = IERC20Upgradeable(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82);\n    IERC20Upgradeable public constant WBNB = IERC20Upgradeable(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\n\n    IUniRouter public constant PckRouter = IUniRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    IMasterChefV2 public constant MasterChefV2 = IMasterChefV2(0xa5f8C5Dbd5F286960b9d90548680aE5ebFf07652);\n\n    uint constant DENOMINATOR = 10000;\n    uint public yieldFee;\n\n    uint public pid;\n    IUniPair public lpToken;\n    IERC20Upgradeable public token0;\n    IERC20Upgradeable public token1;\n\n    address public treasuryWallet;\n    address public admin;\n\n    mapping(address => uint) private depositedBlock;\n\n    uint constant DAY_IN_SEC = 86400; // 3600 * 24\n    uint constant YEAR_IN_SEC = 365 * DAY_IN_SEC;\n    uint constant BSC_BLOCK_TIME = 3;\n    uint constant BLOCKS_PER_YEAR = (60 / BSC_BLOCK_TIME) * 60 * 24 * 365; // 10512000\n\n    uint public lpRewardApr;\n    uint public lpReservePerShare;\n    uint public lpDataLastUpdate;\n\n    event Deposit(address _user, uint _amount, uint _shares);\n    event EmergencyWithdraw(uint _amount);\n    event Invest(uint _amount);\n    event SetAdmin(address _oldAdmin, address _newAdmin);\n    event SetYieldFeePerc(uint _fee);\n    event SetTreasuryWallet(address _wallet);\n    event Withdraw(address _user, uint _amount, uint _shares);\n    event YieldFee(uint _amount);\n    event Yield(uint _amount);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(string memory _name, string memory _symbol, \n        uint _pid,\n        address _treasury, address _admin\n    ) external initializer {\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        yieldFee = 2000; //20%\n        pid = _pid;\n\n        // address _lpToken = MasterChefV2.lpToken(_pid);\n\n        // lpToken = IUniPair(_lpToken);\n        // token0 = IERC20Upgradeable(lpToken.token0());\n        // token1 = IERC20Upgradeable(lpToken.token1());\n        \n        treasuryWallet = _treasury;\n        admin = _admin;\n        \n        // lpToken.safeApprove(address(MasterChefV2), type(uint).max);\n        // CAKE.safeApprove(address(PckRouter), type(uint).max);\n        // token0.safeApprove(address(PckRouter), type(uint).max);\n        // token1.safeApprove(address(PckRouter), type(uint).max);\n\n        _updateLpRewardApr();\n    }\n    \n    /**\n     *@param _amount amount of lptokens to deposit\n    */\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        _amount;\n        // require(_amount > 0, \"Invalid amount\");\n\n        // depositedBlock[msg.sender] = block.number;\n        // lpToken.safeTransferFrom(msg.sender, address(this), _amount);\n\n        // uint _pool = getAllPool();\n        // MasterChefV2.deposit(pid, _amount);\n\n        // uint _totalSupply = totalSupply();\n        // uint _shares = _totalSupply == 0 ? _amount : _amount * _totalSupply / _pool;\n        // _mint(msg.sender, _shares);\n\n        // emit Deposit(msg.sender, _amount, _shares);\n    }\n\n    /**\n     *@param _shares amount of shares to burn\n    */\n    function withdraw(uint _shares) external nonReentrant{\n        _shares;\n        // require(_shares > 0, \"Invalid Amount\");\n        // require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        // require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        // uint _amountToWithdraw = getAllPool() * _shares / totalSupply(); \n\n        // uint lpTokenAvailable = lpToken.balanceOf(address(this));\n        // if(lpTokenAvailable < _amountToWithdraw) {\n        //     MasterChefV2.withdraw(pid, _amountToWithdraw - lpTokenAvailable );\n        // }\n        // _burn(msg.sender, _shares);\n\n        // lpToken.safeTransfer(msg.sender, _amountToWithdraw);\n        // emit Withdraw(msg.sender, _amountToWithdraw, _shares);\n    }\n\n    function _invest() private returns (uint available){\n        available = lpToken.balanceOf(address(this));\n        if(available > 0) {\n            MasterChefV2.deposit(pid, available);\n        }\n    }\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused{ \n        _pause();\n        // _yield();\n        // (uint stakedTokens,,) = MasterChefV2.userInfo(pid, address(this));\n        // if(stakedTokens > 0 ) {\n        //     MasterChefV2.withdraw(pid, stakedTokens);\n        // }\n        // emit EmergencyWithdraw(stakedTokens);\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        // _invest();\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        address oldAdmin = admin;\n        admin = _newAdmin;\n\n        emit SetAdmin(oldAdmin, _newAdmin);\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < DENOMINATOR, \"yieldFeePerc invalid\");\n        yieldFee = _yieldFeePerc;\n        emit SetYieldFeePerc(_yieldFeePerc);\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n        emit SetTreasuryWallet(_wallet);\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        // _yield();\n        _updateLpRewardApr();\n    }\n\n    function _yield() private {\n        uint cakeBalance = CAKE.balanceOf(address(this));\n        \n        if(cakeBalance > 0) {\n            uint fee = cakeBalance * yieldFee / DENOMINATOR; //yield fee\n            CAKE.safeTransfer(treasuryWallet, fee);\n            cakeBalance -= fee;\n\n            uint _token0Amount = token0 == CAKE ? cakeBalance /2 : _swap(address(CAKE), address(token0), cakeBalance/2)[1];\n            uint _token1Amount = token1 == CAKE ? cakeBalance /2 :  _swap(address(CAKE), address(token1), cakeBalance/2)[1];\n\n            PckRouter.addLiquidity(address(token0), address(token1), _token0Amount, _token1Amount, 0, 0, address(this), block.timestamp);\n\n            _invest();\n\n            (uint CAKEPriceInUSD, uint denominator) = PriceLib.getCAKEPriceInUSD();\n            emit Yield((cakeBalance + fee) * CAKEPriceInUSD / denominator);\n            emit YieldFee(fee * CAKEPriceInUSD / denominator);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt) private returns (uint[] memory amounts){\n        address[] memory path = new address[](2);\n\n        path[0] = address(_tokenA);\n        path[1] = address(_tokenB);\n\n        amounts = PckRouter.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp);\n    }\n\n    function getAllPool() public view returns (uint ) {\n        // (uint stakedTokens,,) = MasterChefV2.userInfo(pid, address(this));\n        // return lpToken.balanceOf(address(this)) + stakedTokens;\n        return 0;\n    }\n\n    function getAllPoolInBNB() public view returns (uint _valueInBNB) {\n        // return _getValueInBNB(getAllPool());\n        return 0;\n    }\n\n    function _getValueInBNB(uint lpAmt) public view returns (uint _valueInBNB) {\n        uint _totalSupply = lpToken.totalSupply();\n\n        (uint _reserve0, uint _reserve1) = lpToken.getReserves();\n        \n        uint _total0 = lpAmt * _reserve0 / _totalSupply;\n        uint _total1 = lpAmt * _reserve1 / _totalSupply;\n        \n        _valueInBNB = (_total0 * _getPriceInBNB(address(token0))) + \n        (_total1 * _getPriceInBNB(address(token1))) ;\n\n        _valueInBNB = _valueInBNB / 1e18;\n    }\n\n    function _getPriceInBNB(address _token) private view returns (uint) {\n        if(_token == address(WBNB)) {\n            return 1e18;\n        } else {\n            address[] memory path = new address[](2);\n\n            path[0] = _token;\n            path[1] = address(WBNB);\n            return PckRouter.getAmountsOut(1e18, path)[1];\n        }\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        // (uint BNBPriceInUSD, uint denominator) = PriceLib.getBNBPriceInUSD();\n        // return getAllPoolInBNB() * BNBPriceInUSD / denominator;\n        return 0;\n    }\n\n    function getPricePerFullShare(bool inUSD) external view returns (uint) {\n        inUSD;\n        // uint _totalSupply = totalSupply();\n        // if (_totalSupply == 0) return 1e18;\n        // return inUSD == true ?\n        //     getAllPoolInUSD() * 1e18 / _totalSupply :\n        //     getAllPool() * 1e18 / _totalSupply;\n        return 1e18;\n    }\n\n    ///@notice Returns the pending rewards in UDS.\n    function getPendingRewards() public view returns (uint) {\n        // uint pendingCake = MasterChefV2.pendingCake(pid, address(this));\n        // (uint CAKEPriceInUSD, uint denominator) = PriceLib.getCAKEPriceInUSD();\n        // return pendingCake * CAKEPriceInUSD / denominator;\n        return 10e18;\n    }\n\n    function getAPR() external view returns (uint) {\n        (uint _lpRewardApr,,) = getLpRewardApr();\n        uint _farmRewardApr = getCakeRewardApr();\n        _farmRewardApr = _farmRewardApr * (DENOMINATOR-yieldFee) / DENOMINATOR;\n        return (_lpRewardApr + _farmRewardApr);\n    }\n\n    function resetLpRewardApr() external onlyOwner {\n        lpRewardApr = 0;\n        lpReservePerShare = 0;\n        lpDataLastUpdate = 0;\n        _updateLpRewardApr();\n    }\n\n    function _updateLpRewardApr() private {\n        (uint _lpRewardApr, uint _lpReservePerShare, bool _update) = getLpRewardApr();\n        if (_update) {\n            lpRewardApr = _lpRewardApr;\n            lpReservePerShare = _lpReservePerShare;\n            lpDataLastUpdate = block.timestamp;\n        }\n    }\n\n    function _getLpReservePerShare() private view returns (uint) {\n        uint _totalSupply = lpToken.totalSupply();\n        if (_totalSupply == 0) return 0;\n        (uint reserve0, uint reserve1) = lpToken.getReserves();\n        return Math.sqrt(reserve0 * reserve1) *1e18 / _totalSupply;\n    }\n\n    function getLpRewardApr() public view returns (uint, uint, bool) {\n        // if (lpRewardApr == 0 || (lpDataLastUpdate+DAY_IN_SEC) <= block.timestamp) {\n        //     uint _lpReservePerShare = _getLpReservePerShare();\n        //     if (0 < lpReservePerShare && lpReservePerShare < _lpReservePerShare) {\n        //         uint _lpRewardApr = (_lpReservePerShare-lpReservePerShare) * YEAR_IN_SEC * 1e18 / (lpReservePerShare * (block.timestamp-lpDataLastUpdate));\n        //         return (_lpRewardApr, _lpReservePerShare, true);\n        //     } else {\n        //         return (0, _lpReservePerShare, true);\n        //     }\n        // } else {\n        //     return (lpRewardApr, lpReservePerShare, false);\n        // }\n        return (0, 0, false);\n    }\n\n    function getCakeRewardApr() public view returns (uint) {\n        // uint yearlyCakeReward = _getYearlyCakeReward();\n        // (uint CAKEPriceInUSD, uint cakeDenominator) = PriceLib.getCAKEPriceInUSD();\n        // uint yearlyRewardInUSD = yearlyCakeReward * CAKEPriceInUSD / cakeDenominator;\n\n        // uint poolInBNB = _getValueInBNB(lpToken.balanceOf(address(MasterChefV2)));\n        // (uint BNBPriceInUSD, uint bnbDenominator) = PriceLib.getBNBPriceInUSD();\n        // uint poolInUSD = poolInBNB * BNBPriceInUSD / bnbDenominator;\n\n        // return yearlyRewardInUSD * 1e18 / poolInUSD;\n        return 7e15;\n    }\n\n    function _getYearlyCakeReward() private view returns (uint) {\n        (,, uint allocPoint, , bool isRegular) = MasterChefV2.poolInfo(pid);\n        uint totalAllocPoint = isRegular ? MasterChefV2.totalRegularAllocPoint() : MasterChefV2.totalSpecialAllocPoint();\n        uint cakePerBlock = MasterChefV2.cakePerBlock(isRegular);\n        return cakePerBlock * BLOCKS_PER_YEAR * allocPoint / totalAllocPoint;\n    }\n\n}\n"
    },
    "contracts/lci/libs/Math.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nlibrary Math {\n    function min(uint x, uint y) internal pure returns (uint z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/lci/deps/PckFarm2Vault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"../libs/Math.sol\";\nimport \"../libs/Price.sol\";\nimport \"../../../interfaces/IUniPair.sol\";\n\ninterface IUniRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity) ;\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n\n}\n\ninterface IMasterChefV2 {\n    function poolInfo(\n        uint pid\n    ) external view returns(\n        uint accCakePerShare, uint lastRewardBlock, uint allocPoint, uint totalBoostedShare, bool isRegular\n    );\n\n    function userInfo(\n        uint pid, address user\n    ) external view returns(\n        uint amount, uint rewardDebt, uint boostMultiplier\n    );\n\n    function pendingCake(uint pid, address user) external view returns (uint);\n    function lpToken(uint pid) external view returns (address);\n    function totalRegularAllocPoint() external view returns (uint);\n    function totalSpecialAllocPoint() external view returns (uint);\n    function cakePerBlock(bool isRegular) external view returns (uint amount);\n\n    function deposit(uint pid, uint amount) external;\n    function withdraw(uint pid, uint amount) external;\n}\n\ncontract PckFarm2Vault is Initializable, ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    using SafeERC20Upgradeable for IUniPair;\n\n    IERC20Upgradeable public constant CAKE  = IERC20Upgradeable(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82);\n    IERC20Upgradeable public constant WBNB = IERC20Upgradeable(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\n\n    IUniRouter public constant PckRouter = IUniRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    IMasterChefV2 public constant MasterChefV2 = IMasterChefV2(0xa5f8C5Dbd5F286960b9d90548680aE5ebFf07652);\n\n    uint constant DENOMINATOR = 10000;\n    uint public yieldFee;\n\n    uint public pid;\n    IUniPair public lpToken;\n    IERC20Upgradeable public token0;\n    IERC20Upgradeable public token1;\n\n    address public treasuryWallet;\n    address public admin;\n\n    mapping(address => uint) private depositedBlock;\n\n    uint constant DAY_IN_SEC = 86400; // 3600 * 24\n    uint constant YEAR_IN_SEC = 365 * DAY_IN_SEC;\n    uint constant BSC_BLOCK_TIME = 3;\n    uint constant BLOCKS_PER_YEAR = (60 / BSC_BLOCK_TIME) * 60 * 24 * 365; // 10512000\n\n    uint public lpRewardApr;\n    uint public lpReservePerShare;\n    uint public lpDataLastUpdate;\n\n    event Deposit(address _user, uint _amount, uint _shares);\n    event EmergencyWithdraw(uint _amount);\n    event Invest(uint _amount);\n    event SetAdmin(address _oldAdmin, address _newAdmin);\n    event SetYieldFeePerc(uint _fee);\n    event SetTreasuryWallet(address _wallet);\n    event Withdraw(address _user, uint _amount, uint _shares);\n    event YieldFee(uint _amount);\n    event Yield(uint _amount);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(string memory _name, string memory _symbol, \n        uint _pid,\n        address _treasury, address _admin\n    ) external initializer {\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        yieldFee = 2000; //20%\n        pid = _pid;\n\n        address _lpToken = MasterChefV2.lpToken(_pid);\n\n        lpToken = IUniPair(_lpToken);\n        token0 = IERC20Upgradeable(lpToken.token0());\n        token1 = IERC20Upgradeable(lpToken.token1());\n        \n        treasuryWallet = _treasury;\n        admin = _admin;\n        \n        lpToken.safeApprove(address(MasterChefV2), type(uint).max);\n        CAKE.safeApprove(address(PckRouter), type(uint).max);\n        token0.safeApprove(address(PckRouter), type(uint).max);\n        token1.safeApprove(address(PckRouter), type(uint).max);\n\n        _updateLpRewardApr();\n    }\n    \n    /**\n     *@param _amount amount of lptokens to deposit\n    */\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        require(_amount > 0, \"Invalid amount\");\n\n        uint _pool = getAllPool();\n        lpToken.safeTransferFrom(msg.sender, address(this), _amount);\n\n        depositedBlock[msg.sender] = block.number;\n\n        MasterChefV2.deposit(pid, _amount);\n\n        uint _totalSupply = totalSupply();\n        uint _shares = (_pool == 0 || _totalSupply == 0) ? _amount : _amount * _totalSupply / _pool;\n        _mint(msg.sender, _shares);\n\n        emit Deposit(msg.sender, _amount, _shares);\n    }\n\n    /**\n     *@param _shares amount of shares to burn\n    */\n    function withdraw(uint _shares) external nonReentrant{\n        require(_shares > 0, \"Invalid Amount\");\n        require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        uint _amountToWithdraw = getAllPool() * _shares / totalSupply(); \n\n        uint lpTokenAvailable = lpToken.balanceOf(address(this));\n        if(lpTokenAvailable < _amountToWithdraw) {\n            MasterChefV2.withdraw(pid, _amountToWithdraw - lpTokenAvailable );\n        }\n        _burn(msg.sender, _shares);\n\n        lpToken.safeTransfer(msg.sender, _amountToWithdraw);\n        emit Withdraw(msg.sender, _amountToWithdraw, _shares);\n    }\n\n    function _invest() private returns (uint available){\n        available = lpToken.balanceOf(address(this));\n        if(available > 0) {\n            MasterChefV2.deposit(pid, available);\n        }\n    }\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused{ \n        _pause();\n        _yield();\n        (uint stakedTokens,,) = MasterChefV2.userInfo(pid, address(this));\n        if(stakedTokens > 0 ) {\n            MasterChefV2.withdraw(pid, stakedTokens);\n        }\n        emit EmergencyWithdraw(stakedTokens);\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        _invest();\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        address oldAdmin = admin;\n        admin = _newAdmin;\n\n        emit SetAdmin(oldAdmin, _newAdmin);\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < 3001, \"Yield Fee cannot > 30%\");\n        yieldFee = _yieldFeePerc;\n        emit SetYieldFeePerc(_yieldFeePerc);\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n        emit SetTreasuryWallet(_wallet);\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        _yield();\n        _updateLpRewardApr();\n    }\n\n    function _yield() private {\n        MasterChefV2.deposit(pid, 0);\n        uint cakeBalance = CAKE.balanceOf(address(this));\n        \n        if(cakeBalance > 0) {\n            uint fee = cakeBalance * yieldFee / DENOMINATOR; //yield fee\n            CAKE.safeTransfer(treasuryWallet, fee);\n            cakeBalance -= fee;\n\n            uint _token0Amount;\n            if (token0 == CAKE) {\n                _token0Amount = cakeBalance /2;\n            } else {\n                _swap(address(CAKE), address(token0), cakeBalance/2);\n                _token0Amount = token0.balanceOf(address(this));\n            }\n\n            uint _token1Amount;\n            if (token1 == CAKE) {\n                _token1Amount = cakeBalance /2;\n            } else {\n                _swap(address(CAKE), address(token1), cakeBalance/2);\n                _token1Amount = token1.balanceOf(address(this));\n            }\n\n            PckRouter.addLiquidity(address(token0), address(token1), _token0Amount, _token1Amount, 0, 0, address(this), block.timestamp);\n\n            _invest();\n\n            (uint CAKEPriceInUSD, uint denominator) = PriceLib.getCAKEPriceInUSD();\n            emit Yield((cakeBalance + fee) * CAKEPriceInUSD / denominator);\n            emit YieldFee(fee * CAKEPriceInUSD / denominator);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt) private returns (uint[] memory amounts){\n        address[] memory path = new address[](2);\n\n        path[0] = address(_tokenA);\n        path[1] = address(_tokenB);\n\n        amounts = PckRouter.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp);\n    }\n\n    function getAllPool() public view returns (uint ) {\n        (uint stakedTokens,,) = MasterChefV2.userInfo(pid, address(this));\n        return lpToken.balanceOf(address(this)) + stakedTokens;\n    }\n\n    function getAllPoolInBNB() public view returns (uint _valueInBNB) {\n        return _getValueInBNB(getAllPool());\n    }\n\n    function _getValueInBNB(uint lpAmt) public view returns (uint _valueInBNB) {\n        uint _totalSupply = lpToken.totalSupply();\n\n        (uint _reserve0, uint _reserve1) = lpToken.getReserves();\n        \n        uint _total0 = lpAmt * _reserve0 / _totalSupply;\n        uint _total1 = lpAmt * _reserve1 / _totalSupply;\n        \n        _valueInBNB = (_total0 * _getPriceInBNB(address(token0))) + \n        (_total1 * _getPriceInBNB(address(token1))) ;\n\n        _valueInBNB = _valueInBNB / 1e18;\n    }\n\n    function _getPriceInBNB(address _token) private view returns (uint) {\n        if(_token == address(WBNB)) {\n            return 1e18;\n        } else {\n            address[] memory path = new address[](2);\n\n            path[0] = _token;\n            path[1] = address(WBNB);\n            return PckRouter.getAmountsOut(1e18, path)[1];\n        }\n    }\n\n    function _getValueInUSD(uint lpAmt) public view returns (uint _valueInUSD, bool valid) {\n        uint _totalSupply = lpToken.totalSupply();\n\n        (uint _reserve0, uint _reserve1) = lpToken.getReserves();\n\n        uint _total0 = lpAmt * _reserve0 / _totalSupply;\n        uint _total1 = lpAmt * _reserve1 / _totalSupply;\n\n        uint _price0 = PriceLib.getAssetPrice(address(token0));\n        uint _price1 = PriceLib.getAssetPrice(address(token1));\n        if (_price0 == 0 || _price1 == 0) {\n            return (0, false);\n        }\n\n        _valueInUSD = ((_total0 * _price0) + (_total1 * _price1)) / 1e8;\n        valid = true;\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        (uint poolInUSD, bool valid) = _getValueInUSD(getAllPool());\n        if (valid) {\n            return poolInUSD;\n        } else {\n            (uint BNBPriceInUSD, uint denominator) = PriceLib.getBNBPriceInUSD();\n            return getAllPoolInBNB() * BNBPriceInUSD / denominator;\n        }\n    }\n\n    function getPricePerFullShare(bool inUSD) external view returns (uint) {\n        uint _totalSupply = totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return inUSD == true ?\n            getAllPoolInUSD() * 1e18 / _totalSupply :\n            getAllPool() * 1e18 / _totalSupply;\n    }\n\n    ///@notice Returns the pending rewards in UDS.\n    function getPendingRewards() public view returns (uint) {\n        uint pendingCake = MasterChefV2.pendingCake(pid, address(this));\n        (uint CAKEPriceInUSD, uint denominator) = PriceLib.getCAKEPriceInUSD();\n        return pendingCake * CAKEPriceInUSD / denominator;\n    }\n\n    function getAPR() external view returns (uint) {\n        (uint _lpRewardApr,,) = getLpRewardApr();\n        uint _farmRewardApr = getCakeRewardApr();\n        _farmRewardApr = _farmRewardApr * (DENOMINATOR-yieldFee) / DENOMINATOR;\n        return (_lpRewardApr + _farmRewardApr);\n    }\n\n    function resetLpRewardApr() external onlyOwner {\n        lpRewardApr = 0;\n        lpReservePerShare = 0;\n        lpDataLastUpdate = 0;\n        _updateLpRewardApr();\n    }\n\n    function _updateLpRewardApr() private {\n        (uint _lpRewardApr, uint _lpReservePerShare, bool _update) = getLpRewardApr();\n        if (_update) {\n            lpRewardApr = _lpRewardApr;\n            lpReservePerShare = _lpReservePerShare;\n            lpDataLastUpdate = block.timestamp;\n        }\n    }\n\n    function _getLpReservePerShare() private view returns (uint) {\n        uint _totalSupply = lpToken.totalSupply();\n        if (_totalSupply == 0) return 0;\n        (uint reserve0, uint reserve1) = lpToken.getReserves();\n        return Math.sqrt(reserve0 * reserve1) * 1e18 / _totalSupply;\n    }\n\n    function getLpRewardApr() public view returns (uint, uint, bool) {\n        if (lpRewardApr == 0 || (lpDataLastUpdate+DAY_IN_SEC) <= block.timestamp) {\n            uint _lpReservePerShare = _getLpReservePerShare();\n            if (0 < lpReservePerShare && lpReservePerShare < _lpReservePerShare) {\n                uint _lpRewardApr = (_lpReservePerShare-lpReservePerShare) * YEAR_IN_SEC * 1e18 / (lpReservePerShare * (block.timestamp-lpDataLastUpdate));\n                return (_lpRewardApr, _lpReservePerShare, true);\n            } else {\n                return (0, _lpReservePerShare, true);\n            }\n        } else {\n            return (lpRewardApr, lpReservePerShare, false);\n        }\n    }\n\n    function getCakeRewardApr() public view returns (uint) {\n        uint yearlyCakeReward = _getYearlyCakeReward();\n        (uint CAKEPriceInUSD, uint cakeDenominator) = PriceLib.getCAKEPriceInUSD();\n        uint yearlyRewardInUSD = yearlyCakeReward * CAKEPriceInUSD / cakeDenominator;\n\n        uint poolInBNB = _getValueInBNB(lpToken.balanceOf(address(MasterChefV2)));\n        (uint BNBPriceInUSD, uint bnbDenominator) = PriceLib.getBNBPriceInUSD();\n        uint poolInUSD = poolInBNB * BNBPriceInUSD / bnbDenominator;\n\n        return yearlyRewardInUSD * 1e18 / poolInUSD;\n    }\n\n    function _getYearlyCakeReward() private view returns (uint) {\n        (,, uint allocPoint, , bool isRegular) = MasterChefV2.poolInfo(pid);\n        uint totalAllocPoint = isRegular ? MasterChefV2.totalRegularAllocPoint() : MasterChefV2.totalSpecialAllocPoint();\n        uint cakePerBlock = MasterChefV2.cakePerBlock(isRegular);\n        return cakePerBlock * BLOCKS_PER_YEAR * allocPoint / totalAllocPoint;\n    }\n\n}\n"
    },
    "interfaces/IUniPair.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity  0.8.9;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\n\r\ninterface IUniPair is IERC20Upgradeable{\r\n    function getReserves() external view returns (uint, uint);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\n"
    },
    "contracts/bni/priceOracle/AuroraPriceOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"./PriceOracle.sol\";\nimport \"../constant/AuroraConstant.sol\";\nimport \"../../../interfaces/IUniPair.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../libs/Const.sol\";\n\ninterface IMetaPool {\n    ///@dev price of stNEAR in wNEAR.\n    function stNearPrice() external view returns (uint);\n    function wNearSwapFee() external view returns (uint16);\n    function stNearSwapFee() external view returns (uint16);\n}\n\ncontract AuroraPriceOracle is PriceOracle {\n\n    IUniPair constant BSTNWNEAR = IUniPair(0xBBf3D4281F10E537d5b13CA80bE22362310b2bf9);\n    IUniPair constant METAWNEAR = IUniPair(0xa8CAaf35c0136033294dD286A14051fBf37aed07);\n    IUniPair constant USDCWNEAR = IUniPair(0x20F8AeFB5697B77E0BB835A8518BE70775cdA1b0);\n    IUniPair constant USDTWNEAR = IUniPair(0x03B666f3488a7992b2385B12dF7f35156d7b29cD);\n\n    IMetaPool constant metaPool = IMetaPool(0x534BACf1126f60EA513F796a3377ff432BE62cf9);\n\n    ///@notice Chainlink is not yet supported on Aurora.\n    function getAssetPrice(address asset) public virtual override view returns (uint price, uint8 decimals) {\n        if (asset == AuroraConstant.USDT || asset == AuroraConstant.USDC) {\n            return (1e8, 8);\n        } else if (asset == AuroraConstant.WNEAR) {\n            return getWNEARPrice();\n        } else if (asset == AuroraConstant.BSTN) {\n            return getPriceFromWNEARPair(BSTNWNEAR, AuroraConstant.BSTN);\n        } else if (asset == AuroraConstant.META) {\n            return getPriceFromWNEARPair(METAWNEAR, AuroraConstant.META);\n        } else if (asset == AuroraConstant.stNEAR) {\n            return getStNEARPrice();\n        }\n        return super.getAssetPrice(asset);\n    }\n\n    function getWNEARPrice() public view virtual returns (uint price, uint8 decimals) {\n        uint priceInUSDT = getPriceFromPair(USDTWNEAR, AuroraConstant.WNEAR);\n        uint priceInUSDC = getPriceFromPair(USDCWNEAR, AuroraConstant.WNEAR);\n        return ((priceInUSDT + priceInUSDC) / 2, 18);\n    }\n\n    function getPriceFromWNEARPair(IUniPair pair, address token) internal view returns (uint price, uint8 decimals) {\n        uint priceInWNEAR = getPriceFromPair(pair, token);\n        (uint WNEARPriceInUSD, uint8 WNEARPriceDecimals) = getWNEARPrice();\n        price = WNEARPriceInUSD * priceInWNEAR / 1e18;\n        decimals = WNEARPriceDecimals;\n    }\n\n    ///@return the value denominated with other token. It's 18 decimals.\n    function getPriceFromPair(IUniPair pair, address token) internal view returns (uint) {\n        (uint _reserve0, uint _reserve1) = pair.getReserves();\n        address token0 = pair.token0();\n        address token1 = pair.token1();\n        uint8 decimals0 = IERC20UpgradeableExt(token0).decimals();\n        uint8 decimals1 = IERC20UpgradeableExt(token1).decimals();\n\n        uint numerator;\n        uint denominator;\n        if (token0 == token) {\n            numerator = _reserve1 * (10 ** (18 + decimals0));\n            denominator = _reserve0 * (10 ** (decimals1));\n        } else if (token1 == token) {\n            numerator = _reserve0 * (10 ** (18 + decimals1));\n            denominator = _reserve1 * (10 ** (decimals0));\n        } else {\n            require(false, \"Invalid pair and token\");\n        }\n\n        return (numerator / denominator);\n    }\n\n    function getStNEARPrice() internal view virtual returns (uint price, uint8 decimals) {\n        uint wNearAmount = metaPool.stNearPrice() * (Const.DENOMINATOR - metaPool.wNearSwapFee()) / Const.DENOMINATOR;\n        (uint WNEARPriceInUSD, uint8 WNEARPriceDecimals) = getWNEARPrice();\n        price = WNEARPriceInUSD * wNearAmount / 1e24; // WNEAR decimals is 24;\n        decimals = WNEARPriceDecimals;\n    }\n\n}\n"
    },
    "contracts/bni/priceOracle/AuroraPriceOracleTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"./AuroraPriceOracle.sol\";\nimport \"../constant/AuroraConstantTest.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract AuroraPriceOracleTest is AuroraPriceOracle {\n\n    IMetaPool constant metaPoolTest = IMetaPool(0x0dF588AabDd4E031f1903326cC0d8E79DFBD3566);\n\n    ///@notice Chainlink is not yet supported on Aurora.\n    function getAssetPrice(address asset) public override view returns (uint price, uint8 decimals) {\n        if (asset == AuroraConstantTest.USDT || asset == AuroraConstantTest.USDC) {\n            return (1e8, 8);\n        } else if (asset == AuroraConstantTest.WNEAR) {\n            return getWNEARPrice();\n        } else if (asset == AuroraConstantTest.BSTN) {\n            return (34e14, 18);\n        } else if (asset == AuroraConstantTest.META) {\n            return (1e16, 18);\n        } else if (asset == AuroraConstantTest.stNEAR) {\n            return getStNEARPrice();\n        }\n        return super.getAssetPrice(asset);\n    }\n\n    function getWNEARPrice() public view override returns (uint price, uint8 decimals) {\n        return (423e16, 18);\n    }\n\n    function getStNEARPrice() internal view override returns (uint price, uint8 decimals) {\n        uint wNearAmount = metaPoolTest.stNearPrice() * (Const.DENOMINATOR - metaPoolTest.wNearSwapFee()) / Const.DENOMINATOR;\n        (uint WNEARPriceInUSD, uint8 WNEARPriceDecimals) = getWNEARPrice();\n        price = WNEARPriceInUSD * wNearAmount / 1e24; // WNEAR decimals is 24;\n        decimals = WNEARPriceDecimals;\n    }\n}"
    },
    "contracts/sti/strategy/AuroraSTIStrategyTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./BasicSTIStrategyTest.sol\";\nimport \"../../bni/constant/AuroraConstantTest.sol\";\nimport \"../../../interfaces/IStVault.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract AuroraSTIStrategyTest is BasicSTIStrategyTest {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IStVault public WNEARVault;\n\n    function initialize1(\n        address _admin,\n        address _priceOracle,\n        IStVault _WNEARVault\n    ) public initializer {\n        super.initialize(\n            _admin,\n            _priceOracle,\n            0x2CB45Edb4517d5947aFdE3BEAbF95A582506858B, // Trisolaris\n            AuroraConstantTest.WNEAR,\n            AuroraConstantTest.USDT,\n            AuroraConstantTest.WNEAR\n        );\n\n        WNEARVault = _WNEARVault;\n\n        // IERC20Upgradeable(AuroraConstantTest.WNEAR).safeApprove(address(WNEARVault), type(uint).max);\n    }\n\n    function setStVault(IStVault _WNEARVault) external onlyOwner {\n        WNEARVault = _WNEARVault;\n\n        // if (IERC20Upgradeable(AuroraConstantTest.WNEAR).allowance(address(this), address(WNEARVault)) == 0) {\n        //     IERC20Upgradeable(AuroraConstantTest.WNEAR).safeApprove(address(WNEARVault), type(uint).max);\n        // }\n    }\n\n    function getStVault(address _token) internal view override returns (IStVault stVault) {\n        if (_token == AuroraConstantTest.WNEAR) {\n            stVault = WNEARVault;\n        }\n    }\n\n}\n"
    },
    "contracts/sti/strategy/AuroraSTIStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./BasicSTIStrategy.sol\";\nimport \"../../bni/constant/AuroraConstant.sol\";\nimport \"../../../interfaces/IStVault.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract AuroraSTIStrategy is BasicSTIStrategy {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IStVault public WNEARVault;\n\n    function initialize1(\n        address _admin,\n        address _priceOracle,\n        IStVault _WNEARVault\n    ) public initializer {\n        super.initialize(\n            _admin,\n            _priceOracle,\n            0x2CB45Edb4517d5947aFdE3BEAbF95A582506858B, // Trisolaris\n            AuroraConstant.WNEAR,\n            AuroraConstant.USDT,\n            AuroraConstant.WNEAR\n        );\n\n        WNEARVault = _WNEARVault;\n\n        IERC20Upgradeable(AuroraConstant.WNEAR).safeApprove(address(WNEARVault), type(uint).max);\n    }\n\n    function setStVault(IStVault _WNEARVault) external onlyOwner {\n        WNEARVault = _WNEARVault;\n\n        if (IERC20Upgradeable(AuroraConstant.WNEAR).allowance(address(this), address(WNEARVault)) == 0) {\n            IERC20Upgradeable(AuroraConstant.WNEAR).safeApprove(address(WNEARVault), type(uint).max);\n        }\n    }\n\n    function getStVault(address _token) internal view override returns (IStVault stVault) {\n        if (_token == AuroraConstant.WNEAR) {\n            stVault = WNEARVault;\n        }\n    }\n\n}\n"
    },
    "contracts/l2Vaults/compound/AuroraBastionVault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"./BasicCompoundVault.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../interfaces/IUniRouter.sol\";\nimport \"../../../libs/Const.sol\";\n\ninterface IBastionComptroller {\n    function rewardDistributor() external view returns (address);\n}\n\nstruct RewardMarketState {\n    /// @notice The market's last updated borrowIndex or supplyIndex\n    uint224 index;\n    /// @notice The timestamp number the index was last updated at\n    uint32 timestamp;\n}\n\ninterface IRewardDistributor {\n    function getRewardAddress(uint rewardType) external view returns (address);\n    function rewardSupplySpeeds(uint8 rewardType, address cToken) external view returns (uint);\n    function rewardSupplyState(uint8 rewardType,  address cToken) external view returns (RewardMarketState memory);\n    function rewardSupplierIndex(uint8 rewardType, address cToken, address supplier) external view returns(uint);\n    function rewardAccrued(uint8 rewardType, address supplyer) external view returns(uint);\n\n    function claimReward(uint8 rewardType, address holder, address[] memory cTokens) external;\n}\n\ncontract AuroraBastionVault is BasicCompoundVault {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant WNEAR = IERC20Upgradeable(0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d);\n\n    IUniRouter public constant Router = IUniRouter(0x2CB45Edb4517d5947aFdE3BEAbF95A582506858B); // Trisolaris\n\n    uint constant REWARD_COUNT = 2;\n    uint constant doubleScale = 1e36;\n    uint constant rewardInitialIndex = 1e36;\n    IRewardDistributor public rewardDistributor;\n\n    event YieldFee(uint _amount);\n    event Yield(uint _amount);\n\n    function initialize(string memory _name, string memory _symbol, \n        address _treasury, address _admin,\n        address _priceOracle,\n        ICToken _cToken\n    ) public virtual override initializer {\n        super.initialize(_name, _symbol, _treasury, _admin, _priceOracle, _cToken);\n\n        _updateRewardDistributor();\n    }\n\n    function _updateRewardDistributor() private {\n        rewardDistributor = IRewardDistributor(IBastionComptroller(address(comptroller)).rewardDistributor());\n        // It needs to approve router for reward token\n        for (uint8 rewardType = 0; rewardType < REWARD_COUNT; rewardType ++) {\n            address reward = rewardDistributor.getRewardAddress(rewardType);\n            IERC20Upgradeable(reward).safeApprove(address(Router), type(uint).max);\n        }\n    }\n    function updateRewardDistributor() external onlyOwner {\n        _updateRewardDistributor();\n    }\n\n    function _yield() internal override {\n        address[] memory cTokens = new address[](1);\n        cTokens[0] = address(cToken);\n\n        for (uint8 rewardType = 0; rewardType < REWARD_COUNT; rewardType ++) {\n            rewardDistributor.claimReward(rewardType, address(this), cTokens);\n            address reward = rewardDistributor.getRewardAddress(rewardType);\n            uint amount = IERC20Upgradeable(reward).balanceOf(address(this));\n            if (0 < amount) {\n                uint fee = amount * yieldFee / Const.DENOMINATOR; //yield fee\n                IERC20Upgradeable(reward).safeTransfer(treasuryWallet, fee);\n                amount -= fee;\n\n                if (address(token) != reward) {\n                    if (token == WNEAR || reward == address(WNEAR)) {\n                        _swap(reward, address(token), amount);\n                    } else {\n                        _swap2(reward, address(token), amount);\n                    }\n                }\n                uint rewardInUSD = getValueInUSD(reward, amount+fee);\n                emit Yield(rewardInUSD);\n                emit YieldFee(rewardInUSD * yieldFee / Const.DENOMINATOR);\n            }\n        }\n\n        _invest();\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt) private returns (uint){\n        address[] memory path = new address[](2);\n        path[0] = address(_tokenA);\n        path[1] = address(_tokenB);\n        return Router.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp)[1];\n    }\n\n    function _swap2(address _tokenA, address _tokenB, uint _amt) private returns (uint){\n        address[] memory path = new address[](3);\n        path[0] = address(_tokenA);\n        path[1] = address(WNEAR);\n        path[2] = address(_tokenB);\n        return Router.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp)[2];\n    }\n\n    function getPendingRewards() public view override returns (uint) {\n        uint pending;\n        for (uint8 rewardType = 0; rewardType < REWARD_COUNT; rewardType ++) {\n            uint amount = _getPendingRewardAmount(rewardType);\n            if (amount > 0) {\n                address reward = rewardDistributor.getRewardAddress(rewardType);\n                pending += getValueInUSD(reward, amount);\n            }\n        }\n        return pending;\n    }\n\n    function _getPendingRewardAmount(uint8 rewardType) private view returns (uint supplierAccrued) {\n        RewardMarketState memory supplyState = rewardDistributor.rewardSupplyState(rewardType, address(cToken));\n        uint supplySpeed = rewardDistributor.rewardSupplySpeeds(rewardType, address(cToken));\n        uint256 deltaTimestamps = block.timestamp - uint(supplyState.timestamp);\n        if (deltaTimestamps > 0 && supplySpeed > 0) {\n            uint supplyTokens = cToken.totalSupply();\n            uint _rewardAccrued = deltaTimestamps * supplySpeed;\n            uint ratio = supplyTokens > 0\n                ? _rewardAccrued * doubleScale / supplyTokens\n                : 0;\n            uint supplyIndex = uint(supplyState.index) + ratio;\n            uint supplierIndex = rewardDistributor.rewardSupplierIndex(rewardType, address(cToken), address(this));\n            if (supplierIndex == 0 && supplyIndex > 0) {\n                supplierIndex = rewardInitialIndex;\n            }\n            uint deltaIndex = supplyIndex - supplierIndex;\n            uint supplierDelta = cToken.balanceOf(address(this)) * deltaIndex / doubleScale;\n            supplierAccrued = rewardDistributor.rewardAccrued(rewardType, address(this)) + supplierDelta;\n        }\n    }\n\n    function getBlocksPerYear() public view override returns (uint) {\n        return 28_908_000; //55 * 60 * 24 * 365;\n    }\n\n    function getAPR() public view virtual override returns (uint) {\n        uint rewardsPerYear;\n        for (uint rewardType = 0; rewardType < REWARD_COUNT; rewardType ++) {\n            uint supplySpeed = rewardDistributor.rewardSupplySpeeds(uint8(rewardType), address(cToken));\n            if (supplySpeed > 0) {\n                address reward = rewardDistributor.getRewardAddress(rewardType);\n                rewardsPerYear += getValueInUSD(reward, supplySpeed * Const.YEAR_IN_SEC);\n            }\n        }\n        if (rewardsPerYear > 0) {\n            uint underlyingSupply = (cToken.totalSupply() * cToken.exchangeRateStored()) / MANTISSA_ONE;\n            uint rewardsApr = rewardsPerYear * 1e18 / getValueInUSD(address(token), underlyingSupply);\n            return super.getAPR() + (rewardsApr * (Const.DENOMINATOR-yieldFee) / Const.DENOMINATOR);\n        } else {\n            return super.getAPR();\n        }\n    }\n}\n"
    },
    "contracts/l2Vaults/aave3/MaticAave3Vault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"./BasicAave3Vault.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../interfaces/IUniRouter.sol\";\n\ncontract MaticAave3Vault is BasicAave3Vault {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant WMATIC = IERC20Upgradeable(0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270);\n\n    IUniRouter public constant Router = IUniRouter(0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff);\n\n    event YieldFee(uint _amount);\n    event Yield(uint _amount);\n\n    function initialize(string memory _name, string memory _symbol, \n        address _treasury, address _admin,\n        address _priceOracle,\n        IAToken _aToken\n    ) public virtual override initializer {\n        super.initialize(_name, _symbol, _treasury, _admin, _priceOracle, _aToken);\n\n        // It needs to approve router for reward token\n    }\n\n    function _yield() internal override {\n        address[] memory assets = new address[](1);\n        assets[0] = address(aToken);\n        (address[] memory rewards, uint[] memory amounts) = aRewardsController.claimAllRewardsToSelf(assets);\n\n        uint rewardsCount = rewards.length;\n        for (uint i = 0; i < rewardsCount; i ++) {\n            address reward = rewards[i];\n            uint amount = amounts[i];\n            if (0 < amount) {\n                uint fee = amount * yieldFee / DENOMINATOR; //yield fee\n                IERC20Upgradeable(reward).safeTransfer(treasuryWallet, fee);\n                amount -= fee;\n\n                // It needs to safeApprove router for reward token\n                if (IERC20Upgradeable(reward).allowance(address(this), address(Router)) < amount) {\n                    IERC20Upgradeable(reward).safeApprove(address(Router), type(uint).max);\n                }\n\n                if (address(token) != reward) {\n                    if (token == WMATIC || reward == address(WMATIC)) {\n                        _swap(reward, address(token), amount);\n                    } else {\n                        _swap2(reward, address(token), amount);\n                    }\n                }\n                uint rewardInUSD = getValueInUSD(reward, amount+fee);\n                emit Yield(rewardInUSD);\n                emit YieldFee(rewardInUSD * yieldFee / DENOMINATOR);\n            }\n        }\n\n        _invest();\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt) private returns (uint){\n        address[] memory path = new address[](2);\n        path[0] = address(_tokenA);\n        path[1] = address(_tokenB);\n        return Router.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp)[1];\n    }\n\n    function _swap2(address _tokenA, address _tokenB, uint _amt) private returns (uint){\n        address[] memory path = new address[](3);\n        path[0] = address(_tokenA);\n        path[1] = address(WMATIC);\n        path[2] = address(_tokenB);\n        return Router.swapExactTokensForTokens(_amt, 0, path, address(this), block.timestamp)[2];\n    }\n}\n"
    },
    "contracts/l2Vaults/aave3/BasicAave3Vault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"./Aave3DataTypes.sol\";\nimport \"../../bni/priceOracle/IPriceOracle.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../libs/Token.sol\";\n\ninterface IAToken is IERC20Upgradeable {\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n    function POOL() external view returns (address);\n    function getIncentivesController() external view returns (address);\n}\n\ninterface IPool {\n    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n    function withdraw(address asset, uint256 amount, address to ) external returns (uint256);\n    function getReserveData(address asset) external view returns (Aave3DataTypes.ReserveData memory);\n}\n\ninterface IRewardsController {\n    /// @dev asset The incentivized asset. It should be address of AToken\n    function getRewardsByAsset(address asset) external view returns (address[] memory);\n    function getRewardsData(address asset, address reward) external view returns (\n      uint256 index,\n      uint256 emissionPerSecond,\n      uint256 lastUpdateTimestamp,\n      uint256 distributionEnd\n    );\n    function getAllUserRewards(address[] calldata assets, address user) external view returns (address[] memory, uint256[] memory);\n    function getUserRewards(address[] calldata assets, address user, address reward) external view returns (uint256);\n    function claimAllRewards(address[] calldata assets, address to) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n    function claimAllRewardsToSelf(address[] calldata assets) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n}\n\ncontract BasicAave3Vault is Initializable, ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using SafeERC20Upgradeable for IAToken;\n\n    uint constant DENOMINATOR = 10000;\n    uint public yieldFee;\n\n    IAToken public aToken;\n    IERC20Upgradeable public token;\n    uint8 private tokenDecimals;\n    IPool public aPool;\n    IRewardsController public aRewardsController;\n\n    address public treasuryWallet;\n    address public admin;\n    IPriceOracle public priceOracle;\n\n    mapping(address => uint) private depositedBlock;\n\n    uint constant DAY_IN_SEC = 86400; // 3600 * 24\n    uint constant YEAR_IN_SEC = 365 * DAY_IN_SEC;\n\n    event Deposit(address _user, uint _amount, uint _shares);\n    event EmergencyWithdraw(uint _amount);\n    event Invest(uint _amount);\n    event SetAdmin(address _oldAdmin, address _newAdmin);\n    event SetYieldFeePerc(uint _fee);\n    event SetTreasuryWallet(address _wallet);\n    event Withdraw(address _user, uint _amount, uint _shares);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(string memory _name, string memory _symbol, \n        address _treasury, address _admin,\n        address _priceOracle,\n        IAToken _aToken\n    ) public virtual initializer {\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        treasuryWallet = _treasury;\n        admin = _admin;\n        priceOracle = IPriceOracle(_priceOracle);\n\n        yieldFee = 2000; //20%\n        aToken = _aToken;\n\n        token = IERC20Upgradeable(aToken.UNDERLYING_ASSET_ADDRESS());\n        tokenDecimals = IERC20UpgradeableExt(address(token)).decimals();\n        aPool = IPool(aToken.POOL());\n        aRewardsController = IRewardsController(aToken.getIncentivesController());\n        \n        token.safeApprove(address(aPool), type(uint).max);\n        aToken.safeApprove(address(aPool), type(uint).max);\n    }\n    \n    /**\n     *@param _amount amount of lptokens to deposit\n    */\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        require(_amount > 0, \"Invalid amount\");\n\n        uint _pool = getAllPool();\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n\n        depositedBlock[msg.sender] = block.number;\n\n        aPool.supply(address(token), token.balanceOf(address(this)), address(this), 0);\n\n        uint _totalSupply = totalSupply();\n        uint _shares = (_pool == 0 || _totalSupply == 0) ? _amount : _amount * _totalSupply / _pool;\n        _mint(msg.sender, _shares);\n\n        emit Deposit(msg.sender, _amount, _shares);\n    }\n\n    /**\n     *@param _shares amount of shares to burn\n    */\n    function withdraw(uint _shares) external nonReentrant{\n        require(_shares > 0, \"Invalid Amount\");\n        require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        uint _amountToWithdraw = getAllPool() * _shares / totalSupply(); \n\n        uint available = token.balanceOf(address(this));\n        if(available < _amountToWithdraw) {\n            aPool.withdraw(address(token), _amountToWithdraw - available, address(this));\n            _amountToWithdraw = token.balanceOf(address(this));\n        }\n        _burn(msg.sender, _shares);\n\n        token.safeTransfer(msg.sender, _amountToWithdraw);\n        emit Withdraw(msg.sender, _amountToWithdraw, _shares);\n    }\n\n    function _invest() internal returns (uint available){\n        available = token.balanceOf(address(this));\n        if(available > 0) {\n            aPool.supply(address(token), available, address(this), 0);\n        }\n    }\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused{ \n        _pause();\n        _yield();\n        uint stakedTokens = aToken.balanceOf(address(this));\n        if(stakedTokens > 0 ) {\n            aPool.withdraw(address(token), stakedTokens, address(this));\n        }\n        emit EmergencyWithdraw(stakedTokens);\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        _invest();\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        address oldAdmin = admin;\n        admin = _newAdmin;\n\n        emit SetAdmin(oldAdmin, _newAdmin);\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < 3001, \"Yield Fee cannot > 30%\");\n        yieldFee = _yieldFeePerc;\n        emit SetYieldFeePerc(_yieldFeePerc);\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n        emit SetTreasuryWallet(_wallet);\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        _yield();\n    }\n\n    function _yield() internal virtual {\n    }\n\n    function getAllPool() public view returns (uint ) {\n        return token.balanceOf(address(this)) + aToken.balanceOf(address(this));\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint _pool = getAllPool();\n        return getValueInUSD(address(token), _pool);\n    }\n\n    function getPricePerFullShare(bool inUSD) external view returns (uint) {\n        uint _totalSupply = totalSupply();\n        if (_totalSupply == 0) return 1e18;\n        return inUSD == true ?\n            getAllPoolInUSD() * 1e18 / _totalSupply :\n            getAllPool() * 1e18 / _totalSupply;\n    }\n\n    function getValueInUSD(address asset, uint amount) internal view returns(uint) {\n        (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(asset);\n        uint8 _decimals = IERC20UpgradeableExt(asset).decimals();\n        return Token.changeDecimals(amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\n    }\n\n    ///@notice Returns the pending rewards in USD.\n    function getPendingRewards() public view returns (uint) {\n        address[] memory assets = new address[](1);\n        assets[0] = address(aToken);\n        (address[] memory rewards, uint[] memory amounts) = aRewardsController.getAllUserRewards(assets, address(this));\n\n        uint rewardsCount = rewards.length;\n        uint pending;\n        for (uint i = 0; i < rewardsCount; i ++) {\n            pending += getValueInUSD(rewards[i], amounts[i]);\n        }\n        return pending;\n    }\n\n    function getAPR() external view returns (uint) {\n        Aave3DataTypes.ReserveData memory reserveData = aPool.getReserveData(address(token));\n        uint liquidityApr = reserveData.currentLiquidityRate / 1e9; // currentLiquidityRate is expressed in ray, 1e27\n\n        address[] memory rewards = aRewardsController.getRewardsByAsset(address(aToken));\n        uint rewardsCount = rewards.length;\n        uint aTokenInUSD = getValueInUSD(address(token), aToken.totalSupply());\n        uint rewardsApr;\n        for (uint i = 0; i < rewardsCount; i ++) {\n            address reward = rewards[i];\n            (, uint emissionPerSecond,,) = aRewardsController.getRewardsData(address(aToken), reward);\n            rewardsApr += getValueInUSD(reward, YEAR_IN_SEC * emissionPerSecond) * 1e18 / aTokenInUSD;\n        }\n\n        return liquidityApr + (rewardsApr * (DENOMINATOR-yieldFee) / DENOMINATOR);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[40] private __gap;\n}\n"
    },
    "contracts/l2Vaults/aave3/Aave3DataTypes.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity  0.8.9;\r\n\r\nlibrary Aave3DataTypes {\r\n  struct ReserveData {\r\n    //stores the reserve configuration\r\n    ReserveConfigurationMap configuration;\r\n    //the liquidity index. Expressed in ray\r\n    uint128 liquidityIndex;\r\n    //the current supply rate. Expressed in ray\r\n    uint128 currentLiquidityRate;\r\n    //variable borrow index. Expressed in ray\r\n    uint128 variableBorrowIndex;\r\n    //the current variable borrow rate. Expressed in ray\r\n    uint128 currentVariableBorrowRate;\r\n    //the current stable borrow rate. Expressed in ray\r\n    uint128 currentStableBorrowRate;\r\n    //timestamp of last update\r\n    uint40 lastUpdateTimestamp;\r\n    //the id of the reserve. Represents the position in the list of the active reserves\r\n    uint16 id;\r\n    //aToken address\r\n    address aTokenAddress;\r\n    //stableDebtToken address\r\n    address stableDebtTokenAddress;\r\n    //variableDebtToken address\r\n    address variableDebtTokenAddress;\r\n    //address of the interest rate strategy\r\n    address interestRateStrategyAddress;\r\n    //the current treasury balance, scaled\r\n    uint128 accruedToTreasury;\r\n    //the outstanding unbacked aTokens minted through the bridging feature\r\n    uint128 unbacked;\r\n    //the outstanding debt borrowed against this asset in isolation mode\r\n    uint128 isolationModeTotalDebt;\r\n  }\r\n\r\n  struct ReserveConfigurationMap {\r\n    //bit 0-15: LTV\r\n    //bit 16-31: Liq. threshold\r\n    //bit 32-47: Liq. bonus\r\n    //bit 48-55: Decimals\r\n    //bit 56: reserve is active\r\n    //bit 57: reserve is frozen\r\n    //bit 58: borrowing is enabled\r\n    //bit 59: stable rate borrowing enabled\r\n    //bit 60: asset is paused\r\n    //bit 61: borrowing in isolation mode is enabled\r\n    //bit 62-63: reserved\r\n    //bit 64-79: reserve factor\r\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\r\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\r\n    //bit 152-167 liquidation protocol fee\r\n    //bit 168-175 eMode category\r\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\r\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\r\n    //bit 252-255 unused\r\n\r\n    uint256 data;\r\n  }\r\n}\r\n"
    },
    "contracts/l2Vaults/aave3/BasicAave3VaultTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"./Aave3DataTypes.sol\";\nimport \"../../bni/priceOracle/IPriceOracle.sol\";\nimport \"../../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../../libs/Token.sol\";\n\ninterface IAToken is IERC20Upgradeable {\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n    function POOL() external view returns (address);\n    function getIncentivesController() external view returns (address);\n}\n\ninterface IPool {\n    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n    function withdraw(address asset, uint256 amount, address to ) external returns (uint256);\n    function getReserveData(address asset) external view returns (Aave3DataTypes.ReserveData memory);\n}\n\ninterface IRewardsController {\n    /// @dev asset The incentivized asset. It should be address of AToken\n    function getRewardsByAsset(address asset) external view returns (address[] memory);\n    function getRewardsData(address asset, address reward) external view returns (\n      uint256 index,\n      uint256 emissionPerSecond,\n      uint256 lastUpdateTimestamp,\n      uint256 distributionEnd\n    );\n    function getAllUserRewards(address[] calldata assets, address user) external view returns (address[] memory, uint256[] memory);\n    function getUserRewards(address[] calldata assets, address user, address reward) external view returns (uint256);\n    function claimAllRewards(address[] calldata assets, address to) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n    function claimAllRewardsToSelf(address[] calldata assets) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n}\n\ncontract BasicAave3VaultTest is Initializable, ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint constant DENOMINATOR = 10000;\n    uint public yieldFee;\n\n    IAToken public aToken;\n    IERC20Upgradeable public token;\n    uint8 private tokenDecimals;\n    IPool public aPool;\n    IRewardsController public aRewardsController;\n\n    address public treasuryWallet;\n    address public admin;\n    IPriceOracle public priceOracle;\n\n    mapping(address => uint) private depositedBlock;\n\n    uint constant DAY_IN_SEC = 86400; // 3600 * 24\n    uint constant YEAR_IN_SEC = 365 * DAY_IN_SEC;\n\n    event Deposit(address _user, uint _amount, uint _shares);\n    event EmergencyWithdraw(uint _amount);\n    event Invest(uint _amount);\n    event SetAdmin(address _oldAdmin, address _newAdmin);\n    event SetYieldFeePerc(uint _fee);\n    event SetTreasuryWallet(address _wallet);\n    event Withdraw(address _user, uint _amount, uint _shares);\n\n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == admin, \"Only owner or admin\");\n        _;\n    }\n\n    function initialize(string memory _name, string memory _symbol, \n        address _treasury, address _admin,\n        address _priceOracle,\n        IAToken _aToken\n    ) public virtual initializer {\n\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n\n        treasuryWallet = _treasury;\n        admin = _admin;\n        priceOracle = IPriceOracle(_priceOracle);\n\n        yieldFee = 2000; //20%\n        aToken = _aToken;\n\n        token = IERC20Upgradeable(aToken.UNDERLYING_ASSET_ADDRESS());\n        tokenDecimals = IERC20UpgradeableExt(address(token)).decimals();\n        aPool = IPool(aToken.POOL());\n        aRewardsController = IRewardsController(aToken.getIncentivesController());\n        \n        // token.safeApprove(address(aPool), type(uint).max);\n        // aToken.safeApprove(address(aPool), type(uint).max);\n    }\n    \n    /**\n     *@param _amount amount of lptokens to deposit\n    */\n    function deposit(uint _amount) external nonReentrant whenNotPaused{\n        // require(_amount > 0, \"Invalid amount\");\n\n        // uint _pool = getAllPool();\n        // token.safeTransferFrom(msg.sender, address(this), _amount);\n\n        // depositedBlock[msg.sender] = block.number;\n\n        // // aPool.supply(address(token), token.balanceOf(address(this)), address(this), 0);\n\n        // uint _totalSupply = totalSupply();\n        // uint _shares = _totalSupply == 0 ? _amount : _amount * _totalSupply / _pool;\n        // _mint(msg.sender, _shares);\n\n        // emit Deposit(msg.sender, _amount, _shares);\n    }\n\n    /**\n     *@param _shares amount of shares to burn\n    */\n    function withdraw(uint _shares) external nonReentrant{\n        // require(_shares > 0, \"Invalid Amount\");\n        // require(balanceOf(msg.sender) >= _shares, \"Not enough balance\");\n        // require(depositedBlock[msg.sender] != block.number, \"Withdraw within same block\");\n\n        // uint _amountToWithdraw = getAllPool() * _shares / totalSupply(); \n\n        // uint available = token.balanceOf(address(this));\n        // if(available < _amountToWithdraw) {\n        //     aPool.withdraw(address(token), _amountToWithdraw - available, address(this));\n        //     _amountToWithdraw = token.balanceOf(address(this));\n        // }\n        // _burn(msg.sender, _shares);\n\n        // token.safeTransfer(msg.sender, _amountToWithdraw);\n        // emit Withdraw(msg.sender, _amountToWithdraw, _shares);\n    }\n\n    function _invest() internal returns (uint available){\n        available = token.balanceOf(address(this));\n        if(available > 0) {\n            aPool.supply(address(token), available, address(this), 0);\n        }\n    }\n\n    ///@notice Withdraws funds staked in mirror to this vault and pauses deposit, yield, invest functions\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused{ \n        _pause();\n        // _yield();\n        // uint stakedTokens = aToken.balanceOf(address(this));\n        // if(stakedTokens > 0 ) {\n        //     aPool.withdraw(address(token), stakedTokens, address(this));\n        // }\n        // emit EmergencyWithdraw(stakedTokens);\n    }\n\n    ///@notice Unpauses deposit, yield, invest functions, and invests funds.\n    function reinvest() external onlyOwnerOrAdmin whenPaused {\n        _unpause();\n        // _invest();\n    }\n\n    function setAdmin(address _newAdmin) external onlyOwner{\n        address oldAdmin = admin;\n        admin = _newAdmin;\n\n        emit SetAdmin(oldAdmin, _newAdmin);\n    }\n\n    ///@notice Function to set deposit and yield fee\n    ///@param _yieldFeePerc deposit fee percentage. 2000 for 20%\n    function setFee(uint _yieldFeePerc) external onlyOwner{\n        require(_yieldFeePerc < 3001, \"Yield Fee cannot > 30%\");\n        yieldFee = _yieldFeePerc;\n        emit SetYieldFeePerc(_yieldFeePerc);\n    }\n\n    function setTreasuryWallet(address _wallet) external onlyOwner {\n        require(_wallet != address(0), \"wallet invalid\");\n        treasuryWallet = _wallet;\n        emit SetTreasuryWallet(_wallet);\n    }\n\n    function yield() external onlyOwnerOrAdmin whenNotPaused {\n        _yield();\n    }\n\n    function _yield() internal virtual {\n    }\n\n    function getAllPool() public view returns (uint ) {\n        return token.balanceOf(address(this)) + aToken.balanceOf(address(this));\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        // uint _pool = getAllPool();\n        // return getValueInUSD(address(token), _pool);\n        return 0;\n    }\n\n    function getPricePerFullShare(bool inUSD) external view returns (uint) {\n        inUSD;\n        // uint _totalSupply = totalSupply();\n        // if (_totalSupply == 0) return 1e18;\n        // return inUSD == true ?\n        //     getAllPoolInUSD() * 1e18 / _totalSupply :\n        //     getAllPool() * 1e18 / _totalSupply;\n        return 1e18;\n    }\n\n    function getValueInUSD(address asset, uint amount) internal view returns(uint) {\n        (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(asset);\n        uint8 _decimals = IERC20UpgradeableExt(asset).decimals();\n        return Token.changeDecimals(amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\n    }\n\n    ///@notice Returns the pending rewards in USD.\n    function getPendingRewards() public view returns (uint) {\n        // address[] memory assets = new address[](1);\n        // assets[0] = address(aToken);\n        // (address[] memory rewards, uint[] memory amounts) = aRewardsController.getAllUserRewards(assets, address(this));\n\n        // uint rewardsCount = rewards.length;\n        // uint pending;\n        // for (uint i = 0; i < rewardsCount; i ++) {\n        //     pending += getValueInUSD(rewards[i], amounts[i]);\n        // }\n        // return pending;\n        return 10e18;\n    }\n\n    function getAPR() external view returns (uint) {\n        // Aave3DataTypes.ReserveData memory reserveData = aPool.getReserveData(address(token));\n        // uint liquidityApr = reserveData.currentLiquidityRate / 1e9; // currentLiquidityRate is expressed in ray, 1e27\n\n        // address[] memory rewards = aRewardsController.getRewardsByAsset(address(aToken));\n        // uint rewardsCount = rewards.length;\n        // uint aTokenInUSD = getValueInUSD(address(token), aToken.totalSupply());\n        // uint rewardsApr;\n        // for (uint i = 0; i < rewardsCount; i ++) {\n        //     address reward = rewards[i];\n        //     (, uint emissionPerSecond,,) = aRewardsController.getRewardsData(address(aToken), reward);\n        //     rewardsApr += getValueInUSD(reward, YEAR_IN_SEC * emissionPerSecond) * 1e18 / aTokenInUSD;\n        // }\n\n        // return liquidityApr + (rewardsApr * (DENOMINATOR-yieldFee) / DENOMINATOR);\n        return 8e15;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[40] private __gap;\n}\n"
    },
    "contracts/bni/BNIVault.sol": {
      "content": " // SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./priceOracle/IPriceOracle.sol\";\nimport \"../../interfaces/IERC20UpgradeableExt.sol\";\nimport \"../../libs/Const.sol\";\nimport \"../../libs/Token.sol\";\nimport \"./IBNIVault.sol\";\n\ninterface IStrategy {\n    function invest(address[] memory tokens, uint[] memory USDTAmts) external;\n    function withdrawPerc(uint sharePerc) external;\n    function withdrawFromPool(uint pid, uint sharePerc) external returns (uint);\n    function emergencyWithdraw() external;\n    function getEachPoolInUSD() external view returns (address[] memory tokens, uint[] memory pools);\n    function getAllPoolInUSD() external view returns (uint);\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages);\n    function getAPR() external view returns (uint);\n}\n\ncontract BNIVault is\n    IBNIVault,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable,\n    OwnableUpgradeable\n{\n    using SafeERC20Upgradeable for IERC20UpgradeableExt;\n\n    struct PoolSnapshot {\n        uint poolInUSD;\n        uint ts;\n    }\n\n    IERC20UpgradeableExt public USDT;\n    uint8 usdtDecimals;\n\n    address public admin;\n    IStrategy public strategy;\n    IPriceOracle public priceOracle;\n\n    uint public profitFeePerc;\n    address public treasuryWallet;\n    uint public watermark; // In USD (18 decimals)\n    uint public fees; // In USD (18 decimals)\n\n    address public trustedForwarder;\n\n    uint public firstOperationNonce;\n    uint public lastOperationNonce;\n    mapping(uint => PoolSnapshot) public poolAtNonce;\n    mapping(address => uint) public userLastOperationNonce;\n    mapping(uint => uint) public operationAmounts; // value in USD scaled by 10^18\n\n    uint public version;\n    address public userAgent;\n\n    event Deposit(address indexed account, address from, uint indexed amtDeposit, address indexed tokenDeposit);\n    event Withdraw(address indexed account, address to, uint indexed amtWithdraw, address indexed tokenWithdraw, uint sharePerc);\n    event Rebalance(uint indexed pid, uint sharePerc, uint indexed amount, address indexed target);\n    event Reinvest(uint indexed amount);\n    event CollectProfitAndUpdateWatermark(uint indexed currentWatermark, uint indexed lastWatermark, uint indexed fee);\n    event AdjustWatermark(uint indexed currentWatermark, uint indexed lastWatermark);\n    event TransferredOutFees(uint indexed fees, address indexed token);\n    \n    modifier onlyOwnerOrAdmin {\n        require(msg.sender == owner() || msg.sender == address(admin), \"Only owner or admin\");\n        _;\n    }\n\n    modifier onlyAgent {\n        require(msg.sender == address(userAgent), \"Only agent\");\n        _;\n    }\n\n    function initialize(\n        address _treasuryWallet, address _admin,\n        address _strategy, address _priceOracle,\n        address _USDT\n    ) external initializer {\n        __Ownable_init();\n\n        treasuryWallet = _treasuryWallet;\n        admin = _admin;\n        strategy = IStrategy(_strategy);\n        priceOracle = IPriceOracle(_priceOracle);\n\n        profitFeePerc = 2000;\n\n        USDT = IERC20UpgradeableExt(_USDT);\n        usdtDecimals = USDT.decimals();\n        require(6 <= usdtDecimals, \"USDT decimals must >= 6\");\n\n        USDT.safeApprove(address(strategy), type(uint).max);\n    }\n\n    function initialize2(address _userAgent, address _biconomy) external onlyOwner {\n        require(version < 2, \"Already called\");\n        version = 2;\n\n        userAgent = _userAgent;\n        trustedForwarder = _biconomy;\n    }\n\n    /// @notice The length of array is based on token count. And the lengths should be same on the arraies.\n    /// @param _USDT6Amts amounts of USDT should be deposited to each pools. It's 6 decimals\n    function depositByAdmin(\n        address _account, address[] memory _tokens, uint[] memory _USDT6Amts, uint _nonce\n    ) external onlyOwnerOrAdmin nonReentrant whenNotPaused {\n        _deposit(_account, _account, _tokens, _USDT6Amts, _nonce);\n    }\n\n    function depositByAgent(\n        address _account, address[] memory _tokens, uint[] memory _USDT6Amts, uint _nonce\n    ) external onlyAgent nonReentrant whenNotPaused {\n        _deposit(_account, _msgSender(), _tokens, _USDT6Amts, _nonce);\n    }\n\n    function _deposit(\n        address _account, address _from, address[] memory _tokens, uint[] memory _USDT6Amts, uint _nonce\n    ) private {\n        require(_account != address(0), \"Invalid account\");\n        uint poolCnt = _tokens.length;\n        require(poolCnt == _USDT6Amts.length, \"Not match array length\");\n\n        uint k = 10 ** (usdtDecimals - 6);\n        uint USDTAmt;\n        for (uint i = 0; i < poolCnt; i ++) {\n            _USDT6Amts[i] = _USDT6Amts[i] * k;\n            USDTAmt += _USDT6Amts[i];\n        }\n        require(0 < USDTAmt, \"Amounts must > 0\");\n\n        require(userLastOperationNonce[_account] < _nonce, \"Nonce is behind\");\n        userLastOperationNonce[_account] = _nonce;\n        operationAmounts[_nonce] = getValueInUSD(address(USDT), USDTAmt);\n        _snapshotPool(_nonce, getAllPoolInUSD());\n\n        USDT.safeTransferFrom(_from, address(this), USDTAmt);\n\n        (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n        uint amtDeposit = USDTAmt * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\n\n        if (watermark > 0) _collectProfitAndUpdateWatermark();\n        (uint newUSDTAmt, uint[] memory newUSDTAmts) = _transferOutFees(USDTAmt, _USDT6Amts);\n        if (newUSDTAmt > 0) {\n            strategy.invest(_tokens, newUSDTAmts);\n        }\n        adjustWatermark(amtDeposit, true);\n\n        emit Deposit(_account, _from, USDTAmt, address(USDT));\n    }\n\n    /// @param _sharePerc percentage of assets which should be withdrawn. It's 18 decimals\n    function withdrawPercByAdmin(\n        address _account, uint _sharePerc, uint _nonce\n    ) external onlyOwnerOrAdmin nonReentrant {\n        _withdraw(_account, _account, _sharePerc, _nonce);\n    }\n\n    function withdrawPercByAgent(\n        address _account, uint _sharePerc, uint _nonce\n    ) external onlyAgent nonReentrant {\n        _withdraw(_account, _msgSender(), _sharePerc, _nonce);\n    }\n\n    function _withdraw(\n        address _account, address _to, uint _sharePerc, uint _nonce\n    ) private {\n        require(_sharePerc > 0, \"SharePerc must > 0\");\n        require(_sharePerc <= 1e18, \"Over 100%\");\n\n        uint pool = getAllPoolInUSD();\n        uint withdrawAmt = pool * _sharePerc / 1e18;\n\n        require(userLastOperationNonce[_account] < _nonce, \"Nonce is behind\");\n        userLastOperationNonce[_account] = _nonce;\n        operationAmounts[_nonce] = withdrawAmt;\n        _snapshotPool(_nonce, pool);\n\n        // calculate sharePerc to withdraw from strategy\n        uint sharePerc = withdrawAmt * 1e18 / (pool + fees);\n        uint USDTAmt;\n        if (!paused()) {\n            strategy.withdrawPerc(sharePerc);\n            USDTAmt = USDT.balanceOf(address(this));\n            adjustWatermark(withdrawAmt, false);\n        } else {\n            USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\n        }\n        USDT.safeTransfer(_to, USDTAmt);\n        emit Withdraw(_account, _to, withdrawAmt, address(USDT), _sharePerc);\n    }\n\n    function _snapshotPool(uint _nonce, uint _pool) internal {\n        poolAtNonce[_nonce] = PoolSnapshot({\n            poolInUSD: _pool,\n            ts: block.timestamp\n        });\n\n        if (firstOperationNonce == 0) {\n            firstOperationNonce = _nonce;\n        }\n        if (lastOperationNonce < _nonce) {\n            lastOperationNonce = _nonce;\n        }\n    }\n\n    function rebalance(uint _pid, uint _sharePerc, address _target) external onlyOwnerOrAdmin {\n        uint USDTAmt = strategy.withdrawFromPool(_pid, _sharePerc);\n        if (0 < USDTAmt) {\n            address[] memory targets = new address[](1);\n            targets[0] = _target;\n            uint[] memory USDTAmts = new uint[](1);\n            USDTAmts[0] = USDTAmt;\n            strategy.invest(targets, USDTAmts);\n            emit Rebalance(_pid, _sharePerc, USDTAmt, _target);\n        }\n    }\n\n    function emergencyWithdraw() external onlyOwnerOrAdmin whenNotPaused {\n        _pause();\n        strategy.emergencyWithdraw();\n        watermark = 0;\n    }\n\n    function reinvest(address[] memory _tokens, uint[] memory _perc) external onlyOwnerOrAdmin whenPaused {\n        uint poolCnt = _tokens.length;\n        require(poolCnt == _perc.length, \"Not match array length\");\n\n        _unpause();\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n            uint amtDeposit = USDTAmt * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\n            uint totalPerc;\n            for (uint i = 0; i < poolCnt; i ++) {\n                totalPerc = _perc[i];\n            }\n\n            uint[] memory USMTAmts = new uint[](poolCnt);\n            for (uint i = 0; i < poolCnt; i ++) {\n                USMTAmts[i] = _perc[i] * USDTAmt / totalPerc;\n            }\n\n            strategy.invest(_tokens, USMTAmts);\n            adjustWatermark(amtDeposit, true);\n            emit Reinvest(USDTAmt);\n        }\n    }\n\n    function collectProfitAndUpdateWatermark() external onlyOwnerOrAdmin whenNotPaused {\n        _collectProfitAndUpdateWatermark();\n    }\n    function _collectProfitAndUpdateWatermark() private {\n        uint currentWatermark = strategy.getAllPoolInUSD();\n        uint lastWatermark = watermark;\n        uint fee;\n        if (currentWatermark > lastWatermark) {\n            uint profit = currentWatermark - lastWatermark;\n            fee = profit * profitFeePerc / Const.DENOMINATOR;\n            fees += fee;\n            watermark = currentWatermark;\n        }\n        emit CollectProfitAndUpdateWatermark(currentWatermark, lastWatermark, fee);\n    }\n\n    /// @param signs True for positive, false for negative\n    function adjustWatermark(uint amount, bool signs) private {\n        uint lastWatermark = watermark;\n        watermark = signs == true\n                    ? watermark + amount\n                    : (watermark > amount) ? watermark - amount : 0;\n        emit AdjustWatermark(watermark, lastWatermark);\n    }\n\n    function withdrawFees() external onlyOwnerOrAdmin {\n        if (!paused()) {\n            uint pool = strategy.getAllPoolInUSD();\n            uint _fees = fees;\n            uint sharePerc = _fees < pool ? _fees * 1e18 / pool : 1e18;\n            strategy.withdrawPerc(sharePerc);\n        }\n        _transferOutFees(USDT.balanceOf(address(this)), new uint[](0));\n    }\n\n    function _transferOutFees(uint _USDTAmt, uint[] memory _USDTAmts) private returns (uint, uint[] memory) {\n        uint _fees = fees;\n        if (_fees != 0) {\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n            uint FeeAmt = _fees * (10 ** USDTPriceDecimals) / ((10 ** (18-usdtDecimals)) * USDTPriceInUSD);\n\n            uint prevUSDTAmt = _USDTAmt;\n            uint poolCnt = _USDTAmts.length;\n            if (FeeAmt < _USDTAmt) {\n                _fees = 0;\n                _USDTAmt -= FeeAmt;\n            } else {\n                _fees -= (_USDTAmt * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals));\n                FeeAmt = _USDTAmt;\n                _USDTAmt = 0;\n            }\n            fees = _fees;\n\n            for (uint i = 0; i < poolCnt; i ++) {\n                _USDTAmts[i] = _USDTAmts[i] * _USDTAmt / prevUSDTAmt;\n            }\n\n            USDT.safeTransfer(treasuryWallet, FeeAmt);\n            emit TransferredOutFees(FeeAmt, address(USDT)); // Decimal follow _token\n        }\n        return (_USDTAmt, _USDTAmts);\n    }\n\n    function setStrategy(address _strategy) external onlyOwner {\n        strategy = IStrategy(_strategy);\n\n        if (USDT.allowance(address(this), address(strategy)) == 0) {\n            USDT.safeApprove(address(strategy), type(uint).max);\n        }\n    }\n\n    function setProfitFeePerc(uint _profitFeePerc) external onlyOwner {\n        require(profitFeePerc < 3001, \"Profit fee cannot > 30%\");\n        profitFeePerc = _profitFeePerc;\n    }\n\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\n        treasuryWallet = _treasuryWallet;\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        admin = _admin;\n    }\n\n    function setUserAgent(address _userAgent) external onlyOwner {\n        userAgent = _userAgent;\n    }\n\n    function setBiconomy(address _biconomy) external onlyOwner {\n        trustedForwarder = _biconomy;\n    }\n\n    function isTrustedForwarder(address forwarder) public view returns(bool) {\n        return forwarder == trustedForwarder;\n    }\n\n    function _msgSender() internal override(ContextUpgradeable) view returns (address ret) {\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            assembly {\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\n            }\n        } else {\n            return msg.sender;\n        }\n    }\n\n    function versionRecipient() external pure returns (string memory) {\n        return \"1\";\n    }\n\n    /// @return the price of USDT in USD.\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\n        return priceOracle.getAssetPrice(address(USDT));\n    }\n\n    ///@return the value in USD. it's scaled by 1e18;\n    function getValueInUSD(address _asset, uint _amount) internal view returns (uint) {\n        (uint priceInUSD, uint8 priceDecimals) = priceOracle.getAssetPrice(_asset);\n        uint8 _decimals = IERC20UpgradeableExt(_asset).decimals();\n        return Token.changeDecimals(_amount, _decimals, 18) * priceInUSD / (10 ** (priceDecimals));\n    }\n\n    function getEachPoolInUSD() public view returns (uint[] memory chainIDs, address[] memory tokens, uint[] memory pools) {\n        (tokens, pools) = strategy.getEachPoolInUSD();\n        uint poolCnt = pools.length;\n        uint chainID = Token.getChainID();\n        chainIDs = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            chainIDs[i] = chainID;\n        }\n\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if(USDTAmt > 0 && poolCnt > 0) {\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n            uint _pool = USDT.balanceOf(address(this)) * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\n            pools[0] += _pool;\n        }\n        return (chainIDs, tokens, pools);\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint pool;\n        if (paused()) {\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n            pool = USDT.balanceOf(address(this)) * (10 ** (18-usdtDecimals)) * USDTPriceInUSD / (10 ** USDTPriceDecimals);\n        } else {\n            pool = strategy.getAllPoolInUSD();\n        }\n        return (pool > fees ? pool - fees : 0);\n    }\n\n    function getAllPoolInUSDAtNonce(uint _nonce) public view returns (uint) {\n        if (firstOperationNonce != 0) {\n            if (_nonce < firstOperationNonce) {\n                return 0;\n            }\n            if (_nonce <= lastOperationNonce) {\n                for (uint i = _nonce; i >= firstOperationNonce; i --) {\n                    PoolSnapshot memory snapshot = poolAtNonce[i];\n                    if (snapshot.ts > 0) {\n                        return snapshot.poolInUSD;\n                    }\n                }\n            }\n        }\n        return getAllPoolInUSD();\n    }\n\n    function getCurrentCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        return strategy.getCurrentTokenCompositionPerc();\n    }\n\n    function getAPR() external view returns (uint) {\n        return strategy.getAPR();\n    }\n}\n"
    },
    "contracts/bni/BNIVaultTest.sol": {
      "content": " // SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./priceOracle/IPriceOracle.sol\";\nimport \"./BNIVault.sol\";\n\ncontract BNIVaultTest is BNIVault {\n\n    function setPriceOracle(address _priceOracle) external onlyOwner {\n        priceOracle = IPriceOracle(_priceOracle);\n    }\n}\n"
    },
    "contracts/bni/strategy/BNIStrategyTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../priceOracle/IPriceOracle.sol\";\n\ninterface IRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n}\n\ninterface IERC20UpgradeableExt is IERC20Upgradeable {\n    function decimals() external view returns (uint8);\n}\n\ncontract BNIStrategyTest is OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20UpgradeableExt;\n\n    IRouter public router;\n    IERC20UpgradeableExt public SWAP_BASE_TOKEN; // It has same role with WETH on Ethereum Swaps. Most of tokens have been paired with this token.\n    IERC20UpgradeableExt public USDT;\n    uint8 usdtDecimals;\n\n    uint constant DENOMINATOR = 10000;\n\n    address public treasuryWallet;\n    address public admin;\n    address public vault;\n    IPriceOracle public priceOracle;\n\n    address[] public tokens;\n    mapping(address => uint) public pid; // Pool indices in tokens array\n\n    event AddToken(address token, uint pid);\n    event RemoveToken(address token, uint pid);\n    event Withdraw(uint sharePerc, uint USDTAmt);\n    event EmergencyWithdraw(uint USDTAmt);\n    event SetTreasuryWallet(address oldTreasuryWallet, address newTreasuryWallet);\n    event SetAdminWallet(address oldAdmin, address newAdmin);\n\n    modifier onlyVault {\n        require(msg.sender == vault, \"Only vault\");\n        _;\n    }\n\n    function initialize(\n        address _treasuryWallet, address _admin,\n        address _priceOracle,\n        address _router, address _SWAP_BASE_TOKEN,\n        address _USDT, address _token0\n    ) external initializer {\n        require(_router != address(0), \"Invalid router\");\n        require(_SWAP_BASE_TOKEN != address(0), \"Invalid SWAP_BASE_TOKEN\");\n        require(_USDT != address(0), \"Invalid USDT\");\n        require(_token0 != address(0), \"Invalid token0\");\n        __Ownable_init();\n\n        treasuryWallet = _treasuryWallet;\n        admin = _admin;\n        priceOracle = IPriceOracle(_priceOracle);\n        router = IRouter(_router);\n        SWAP_BASE_TOKEN = IERC20UpgradeableExt(_SWAP_BASE_TOKEN);\n\n        USDT = IERC20UpgradeableExt(_USDT);\n        usdtDecimals = USDT.decimals();\n        require(6 <= usdtDecimals, \"USDT decimals must >= 6\");\n\n        tokens.push(_token0);\n        updatePid();\n\n        // USDT.safeApprove(address(router), type(uint).max);\n        // IERC20UpgradeableExt(_token0).safeApprove(address(router), type(uint).max);\n    }\n\n    function updatePid() internal {\n        address[] memory _tokens = tokens;\n\n        uint tokenCnt = _tokens.length;\n        for (uint i = 0; i < tokenCnt; i ++) {\n            pid[_tokens[i]] = i;\n        }\n    }\n\n    function addToken(address _token) external onlyOwner {\n        uint _pid = pid[_token];\n        require ((_pid == 0 && _token != tokens[0]), \"Already added\");\n\n        tokens.push(_token);\n        _pid = tokens.length-1;\n        pid[_token] = _pid;\n\n        // if (IERC20UpgradeableExt(_token).allowance(address(this), address(router)) == 0) {\n        //     IERC20UpgradeableExt(_token).safeApprove(address(router), type(uint).max);\n        // }\n        emit AddToken(_token, _pid);\n    }\n\n    function removeToken(uint _pid) external onlyOwner {\n        uint tokenCnt = tokens.length;\n        require(_pid < tokenCnt, \"Invalid pid\");\n        uint pool = _getPoolInUSD(_pid);\n        require(pool == 0, \"Pool is not empty\");\n\n        address _token = tokens[_pid];\n        tokens[_pid] = tokens[tokenCnt-1];\n        tokens.pop();\n\n        pid[_token] = 0;\n        updatePid();\n\n        emit RemoveToken(_token, _pid);\n    }\n\n    /// @param _USDTAmts amounts of USDT should be deposited to each pools. They have been denominated in USDT decimals\n    function invest(address[] memory _tokens, uint[] memory _USDTAmts) external onlyVault {\n        uint poolCnt = _tokens.length;\n        uint USDTAmt;\n        uint[] memory USDTAmts = new uint[](tokens.length);\n        for (uint i = 0; i < poolCnt; i ++) {\n            uint amount = _USDTAmts[i];\n            USDTAmt += amount;\n            uint _pid = pid[_tokens[i]];\n            USDTAmts[_pid] += amount;\n        }\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\n\n        // _invest(USDTAmts);\n    }\n\n    function _invest(uint[] memory _USDTAmts) internal virtual {\n        uint poolCnt = _USDTAmts.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            address token = tokens[i];\n            if (token == address(USDT)) continue;\n\n            uint USDTAmt = _USDTAmts[i];\n            (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n            (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(token);\n            uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\n            uint numerator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\n            uint denominator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\n            uint amountOutMin = USDTAmt * numerator * 95 / (denominator * 100);\n\n            if (token == address(SWAP_BASE_TOKEN)) {\n                _swap(address(USDT), token, USDTAmt, amountOutMin);\n            } else {\n                _swap2(address(USDT), token, USDTAmt, amountOutMin);\n            }\n        }\n    }\n\n    function withdrawPerc(uint _sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(_sharePerc <= 1e18, \"Over 100%\");\n        // USDTAmt = _withdraw(_sharePerc);\n        USDTAmt = USDT.balanceOf(address(this)) * _sharePerc / 1e18;\n        USDT.safeTransfer(vault, USDTAmt);\n        emit Withdraw(_sharePerc, USDTAmt);\n    }\n\n    function _withdraw(uint _sharePerc) internal virtual returns (uint USDTAmt) {\n        uint poolCnt = tokens.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            USDTAmt += _withdrawFromPool(i, _sharePerc);\n        }\n    }\n\n    function _withdrawFromPool(uint _pid, uint _sharePerc) internal virtual returns (uint USDTAmt) {\n        IERC20UpgradeableExt token = IERC20UpgradeableExt(tokens[_pid]);\n        uint amount = token.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            if (address(token) == address(USDT)) {\n                USDTAmt = amount;\n            } else {\n                (uint USDTPriceInUSD, uint8 USDTPriceDecimals) = getUSDTPriceInUSD();\n                (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(address(token));\n                uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\n                uint numerator = TOKENPriceInUSD * (10 ** (USDTPriceDecimals + usdtDecimals));\n                uint denominator = USDTPriceInUSD * (10 ** (TOKENPriceDecimals + tokenDecimals));\n                uint amountOutMin = amount * numerator * 95 / (denominator * 100);\n\n                if (address(token) == address(SWAP_BASE_TOKEN)) {\n                    USDTAmt = _swap(address(token), address(USDT), amount, amountOutMin);\n                } else{\n                    USDTAmt = _swap2(address(token), address(USDT), amount, amountOutMin);\n                }\n            }\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = _tokenB;\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function _swap2(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](3);\n        path[0] = _tokenA;\n        path[1] = address(SWAP_BASE_TOKEN);\n        path[2] = _tokenB;\n        return (router.swapExactTokensForTokens(_amt, _minAmount, path, address(this), block.timestamp))[2];\n    }\n\n    function withdrawFromPool(uint _pid, uint _sharePerc) external onlyVault returns (uint USDTAmt) {\n        _pid;\n        require(_sharePerc <= 1e18, \"Over 100%\");\n        // USDTAmt = _withdrawFromPool(_pid, _sharePerc);\n        USDTAmt = USDT.balanceOf(address(this)) * _sharePerc / 1e18;\n        USDT.safeTransfer(vault, USDTAmt);\n    }\n\n    function emergencyWithdraw() external onlyVault {\n        // 1e18 == 100% of share\n        // uint USDTAmt = _withdraw(1e18);\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            USDT.safeTransfer(vault, USDTAmt);\n        }\n        emit EmergencyWithdraw(USDTAmt);\n    }\n\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\n        address oldTreasuryWallet = treasuryWallet;\n        treasuryWallet = _treasuryWallet;\n        emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);\n    }\n\n    function setAdmin(address _admin) external onlyOwner {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit SetAdminWallet(oldAdmin, _admin);\n    }\n\n    function setVault(address _vault) external onlyOwner {\n        require(vault == address(0), \"Vault set\");\n        vault = _vault;\n    }\n\n    /// @return the price of USDT in USD.\n    function getUSDTPriceInUSD() public view returns(uint, uint8) {\n        // return priceOracle.getAssetPrice(address(USDT));\n        return (1e8, 8);\n    }\n\n    function getEachPoolInUSD() public view returns (address[] memory, uint[] memory pools) {\n        return (tokens, _getEachPoolInUSD());\n    }\n\n    function _getEachPoolInUSD() private view returns (uint[] memory pools) {\n        uint poolCnt = tokens.length;\n        pools = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            pools[i] = _getPoolInUSD(i);\n        }\n    }\n\n    function _getPoolInUSD(uint _pid) private view returns (uint pool) {\n        _pid;\n        // IERC20UpgradeableExt token = IERC20UpgradeableExt(tokens[_pid]);\n        // uint amount = token.balanceOf(address(this));\n        // if (0 < amount) {\n        //     (uint TOKENPriceInUSD, uint8 TOKENPriceDecimals) = priceOracle.getAssetPrice(address(token));\n        //     uint8 tokenDecimals = IERC20UpgradeableExt(token).decimals();\n        //     pool = amount * TOKENPriceInUSD * (10 ** (18-tokenDecimals)) / (10 ** (TOKENPriceDecimals));\n        // }\n        uint amount = USDT.balanceOf(address(this));\n        pool = amount * (10 ** (18-usdtDecimals));\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        uint[] memory pools = _getEachPoolInUSD();\n        uint poolCnt = pools.length;\n        uint allPool;\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n        return allPool;\n    }\n\n    function getCurrentTokenCompositionPerc() public view returns (address[] memory, uint[] memory percentages) {\n        uint[] memory pools = _getEachPoolInUSD();\n        uint poolCnt = pools.length;\n        uint allPool;\n        for (uint i = 0; i < poolCnt; i ++) {\n            allPool += pools[i];\n        }\n\n        uint defaultTargetPerc = poolCnt == 0 ? 0 : DENOMINATOR / poolCnt;\n        percentages = new uint[](poolCnt);\n        for (uint i = 0; i < poolCnt; i ++) {\n            percentages[i] = allPool == 0 ? defaultTargetPerc : pools[i] * DENOMINATOR / allPool;\n        }\n        return (tokens, percentages);\n    }\n\n    function getAPR() external view virtual returns (uint) {\n        return 0;\n    }\n\n}\n"
    },
    "contracts/stVaults/StVaultNFT.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\n\nimport \"../../interfaces/IStVaultNFT.sol\";\n\ncontract StVaultNFT is IStVaultNFT,\n    ERC721Upgradeable,\n    OwnableUpgradeable\n{\n    address public stVault;\n    uint public tokenIdIndex;\n    uint public totalSupply;\n\n    modifier isStVault() {\n        require(msg.sender == stVault, \"Caller is not stVault contract\");\n        _;\n    }\n\n    function initialize(\n        string memory _name, string memory _symbol, address _stVault\n    ) public initializer {\n        __Ownable_init_unchained();\n        __ERC721_init_unchained(_name, _symbol);\n\n        stVault = _stVault;\n    }\n\n    /**\n     * @dev Increments the token supply and mints the token based on that index\n     * @param _to - Address that will be the owner of minted token\n     * @return Index of the minted token\n     */\n    function mint(address _to) external override isStVault returns (uint) {\n        uint currentIndex = tokenIdIndex;\n        currentIndex++;\n\n        _mint(_to, currentIndex);\n\n        tokenIdIndex = currentIndex;\n        return currentIndex;\n    }\n\n    /**\n     * @dev Burn the token with specified _tokenId\n     * @param _tokenId - Id of the token that will be burned\n     */\n    function burn(uint _tokenId) external override isStVault {\n        _burn(_tokenId);\n    }\n\n    function _afterTokenTransfer(address from, address to, uint256 tokenId) internal override {\n        tokenId;\n        if (from == address(0)) {\n            totalSupply ++;\n        } else if (to == address(0)) {\n            totalSupply --;\n        }\n    }\n\n    function isApprovedOrOwner(address _spender, uint _tokenId) external view returns (bool) {\n        return _isApprovedOrOwner(_spender, _tokenId);\n    }\n\n    function exists(uint _tokenId) external view returns (bool) {\n        return _exists(_tokenId);\n    }\n\n    /**\n     * @dev Set stVault contract address\n     * @param _stVault - address of the stVault contract\n     */\n    function setStVault(address _stVault) external override onlyOwner {\n        stVault = _stVault;\n    }\n}\n"
    },
    "contracts/stVaults/lido/EthStETHVaultTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\n//\n///@notice The EthStETHVault contract stakes ETH tokens into stETH on Ethereum.\n///@dev https://docs.polkadot.lido.fi/fundamentals/liquid-staking\n//\npragma solidity  0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../BasicStVaultTest.sol\";\nimport \"../../bni/constant/EthConstantTest.sol\";\nimport \"../../../libs/Const.sol\";\n\ncontract EthStETHVaultTest is BasicStVaultTest {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    function initialize1(\n        address _treasury, address _admin,\n        address _priceOracle\n    ) public initializer {\n        super.initialize(\n            \"STI Staking ETH\", \"stiStETH\",\n            _treasury, _admin,\n            _priceOracle,\n            Const.NATIVE_ASSET, // ETH\n            EthConstantTest.stETH\n        );\n\n        oneEpoch = 24 hours;\n\n        // stToken.safeApprove(address(curveStEth), type(uint).max);\n    }\n}\n"
    },
    "contracts/lci/LCIStrategyTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ninterface IRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n}\n\ninterface IL2Vault is IERC20Upgradeable {\n    function deposit(uint amount) external;\n    function withdraw(uint share) external;\n    function getAllPoolInUSD() external view returns (uint);\n    function getAPR() external view returns (uint);\n}\n\ncontract LCIStrategyTest is OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant USDT = IERC20Upgradeable(0x1F326a8CA5399418a76eA0efa0403Cbb00790C67);\n    IERC20Upgradeable public constant USDC = IERC20Upgradeable(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);\n    IERC20Upgradeable public constant BUSD = IERC20Upgradeable(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\n    IERC20Upgradeable public constant USDT_MAIN = IERC20Upgradeable(0x55d398326f99059fF775485246999027B3197955);\n    IERC20Upgradeable public constant USDC_MAIN = IERC20Upgradeable(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);\n    IERC20Upgradeable public constant BUSD_MAIN = IERC20Upgradeable(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\n\n    IERC20Upgradeable public constant USDTUSDC = IERC20Upgradeable(0xEc6557348085Aa57C72514D67070dC863C0a5A8c);\n    IERC20Upgradeable public constant USDTBUSD = IERC20Upgradeable(0x7EFaEf62fDdCCa950418312c6C91Aef321375A00);\n    IERC20Upgradeable public constant USDCBUSD = IERC20Upgradeable(0x2354ef4DF11afacb85a5C7f98B624072ECcddbB1);\n\n    IRouter public constant PnckRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n\n    IL2Vault public USDTUSDCVault;\n    IL2Vault public USDTBUSDVault;\n    IL2Vault public USDCBUSDVault;\n    \n    uint constant DENOMINATOR = 10000;\n    uint constant USDTUSDCTargetPerc = 6000; // 60%\n    uint constant USDTBUSDTargetPerc = 2000; // 20%\n    uint constant USDCBUSDTargetPerc = 2000; // 20%\n\n    address public vault;\n\n    event TargetComposition (uint USDTUSDCTargetPool, uint USDTBUSDTargetPool, uint USDCBUSDTargetPool);\n    event CurrentComposition (uint USDTUSDCTargetPool, uint USDTBUSDTargetPool, uint USDCBUSDCurrentPool);\n    event InvestUSDTUSDC(uint USDTAmt, uint USDTUSDCAmt);\n    event InvestUSDTBUSD(uint USDTAmt, uint USDTBUSDAmt);\n    event InvestUSDCBUSD(uint USDTAmt, uint USDCBUSDAmt);\n    event Withdraw(uint sharePerc, uint USDTAmt);\n    event WithdrawUSDTUSDC(uint lpTokenAmt, uint USDTAmt);\n    event WithdrawUSDTBUSD(uint lpTokenAmt, uint USDTAmt);\n    event WithdrawUSDCBUSD(uint lpTokenAmt, uint USDTAmt);\n    event EmergencyWithdraw(uint USDTAmt);\n\n    modifier onlyVault {\n        require(msg.sender == vault, \"Only vault\");\n        _;\n    }\n\n    function initialize(IL2Vault _USDTUSDCVault, IL2Vault _USDTBUSDVault, IL2Vault _USDCBUSDVault) external initializer {\n        __Ownable_init();\n\n        USDTUSDCVault = _USDTUSDCVault;\n        USDTBUSDVault = _USDTBUSDVault;\n        USDCBUSDVault = _USDCBUSDVault;\n\n        // USDT.safeApprove(address(PnckRouter), type(uint).max);\n        // USDC.safeApprove(address(PnckRouter), type(uint).max);\n        // BUSD.safeApprove(address(PnckRouter), type(uint).max);\n\n        // USDTUSDC.safeApprove(address(USDTUSDCVault), type(uint).max);\n        // USDTBUSD.safeApprove(address(USDTBUSDVault), type(uint).max);\n        // USDCBUSD.safeApprove(address(USDCBUSDVault), type(uint).max);\n\n        // USDTUSDC.safeApprove(address(PnckRouter), type(uint).max);\n        // USDTBUSD.safeApprove(address(PnckRouter), type(uint).max);\n        // USDCBUSD.safeApprove(address(PnckRouter), type(uint).max);\n    }\n\n    function invest(uint USDTAmt) external onlyVault {\n        USDT.safeTransferFrom(vault, address(this), USDTAmt);\n        // USDTAmt = USDT.balanceOf(address(this));\n        \n        // uint[] memory pools = getEachPoolInUSD();\n        // uint pool = pools[0] + pools[1] + pools[2] + USDTAmt; // USDT's decimals is 18\n        // uint USDTUSDCTargetPool = pool * USDTUSDCTargetPerc / DENOMINATOR;\n        // uint USDTBUSDTargetPool = pool * USDTBUSDTargetPerc / DENOMINATOR;\n        // uint USDCBUSDTargetPool = pool * USDCBUSDTargetPerc / DENOMINATOR;\n\n        // // Rebalancing invest\n        // if (\n        //     USDTUSDCTargetPool > pools[0] &&\n        //     USDTBUSDTargetPool > pools[1] &&\n        //     USDCBUSDTargetPool > pools[2]\n        // ) {\n        //     _investUSDTUSDC(USDTUSDCTargetPool - pools[0]);\n        //     _investUSDTBUSD(USDTBUSDTargetPool - pools[1]);\n        //     _investUSDCBUSD(USDCBUSDTargetPool - pools[2]);\n        // } else {\n        //     uint furthest;\n        //     uint farmIndex;\n        //     uint diff;\n\n        //     if (USDTUSDCTargetPool > pools[0]) {\n        //         diff = USDTUSDCTargetPool - pools[0];\n        //         furthest = diff;\n        //         farmIndex = 0;\n        //     }\n        //     if (USDTBUSDTargetPool > pools[1]) {\n        //         diff = USDTBUSDTargetPool - pools[1];\n        //         if (diff > furthest) {\n        //             furthest = diff;\n        //             farmIndex = 1;\n        //         }\n        //     }\n        //     if (USDTBUSDTargetPool > pools[2]) {\n        //         diff = USDTBUSDTargetPool - pools[2];\n        //         if (diff > furthest) {\n        //             farmIndex = 2;\n        //         }\n        //     }\n\n        //     if (farmIndex == 0) _investUSDTUSDC(USDTAmt);\n        //     else if (farmIndex == 1) _investUSDTBUSD(USDTAmt);\n        //     else _investUSDCBUSD(USDTAmt);\n        // }\n\n        // emit TargetComposition(USDTUSDCTargetPool, USDTBUSDTargetPool, USDCBUSDTargetPool);\n        // emit CurrentComposition(pools[0], pools[1], pools[2]);\n    }\n\n\n    function _investUSDTUSDC(uint _usdtAmt) private {\n        uint _amt = _usdtAmt/2;\n        _swap(address(USDT), address(USDC), _amt, _amt*98/100);\n\n        uint _USDCAmt = USDC.balanceOf(address(this));\n        uint lpTokens = _addLiquidity(address(USDT), address(USDC), _amt, _USDCAmt);\n\n        USDTUSDCVault.deposit(lpTokens);\n        emit InvestUSDTUSDC(_usdtAmt, lpTokens);\n    }\n\n    function _investUSDTBUSD(uint _usdtAmt) private {\n        uint _amt = _usdtAmt / 2 ;\n        _swap(address(USDT), address(BUSD), _amt, _amt*98/100);\n\n        uint _BUSDAmt = BUSD.balanceOf(address(this));\n        uint lpTokens = _addLiquidity(address(USDT), address(BUSD), _amt, _BUSDAmt);\n\n        USDTBUSDVault.deposit(lpTokens);\n        emit InvestUSDTBUSD(_usdtAmt, lpTokens);\n    }\n\n    function _investUSDCBUSD(uint _usdtAmt) private {\n        uint _amt = _usdtAmt / 2 ;\n        _swap(address(USDT), address(USDC), _amt, _amt*98/100);\n        _swap(address(USDT), address(BUSD), _amt, _amt*98/100);\n\n        uint _USDCAmt = USDC.balanceOf(address(this));\n        uint _BUSDAmt = BUSD.balanceOf(address(this));\n\n        uint lpTokens = _addLiquidity(address(USDC), address(BUSD), _USDCAmt, _BUSDAmt);\n\n        USDCBUSDVault.deposit(lpTokens);\n        emit InvestUSDCBUSD(_usdtAmt, lpTokens);\n    }\n\n    function withdrawPerc(uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        require(sharePerc <= 1e18, \"Over 100%\");\n        \n        // uint USDTAmtBefore = USDT.balanceOf(address(this));\n        // _withdrawUSDTUSDC(sharePerc);\n        // _withdrawUSDTBUSD(sharePerc);\n        // _withdrawUSDCBUSD(sharePerc);\n        // USDTAmt = USDT.balanceOf(address(this)) - USDTAmtBefore;\n        USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\n        USDT.safeTransfer(vault, USDTAmt);\n\n        emit Withdraw(sharePerc, USDTAmt);\n    }\n\n    function _withdrawUSDTUSDC(uint _sharePerc) private {\n        uint amount = USDTUSDCVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDTUSDCVault.withdraw(amount);\n\n            uint _amt = USDTUSDC.balanceOf(address(this));\n            (uint _amtUSDT, uint _amtUSDC) = _removeLiquidity(address(USDT), address(USDC), _amt);\n            _amtUSDT += _swap(address(USDC), address(USDT), _amtUSDC, _amtUSDC*98/100);\n\n            emit WithdrawUSDTUSDC(_amt, _amtUSDT);\n        }\n    }\n\n    function _withdrawUSDTBUSD(uint _sharePerc) private {\n        uint amount = USDTBUSDVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDTBUSDVault.withdraw(amount);\n\n            uint _amt = USDTBUSD.balanceOf(address(this));\n            (uint _amtUSDT, uint _amtBUSD) = _removeLiquidity(address(USDT), address(BUSD), _amt);\n            _amtUSDT += _swap(address(BUSD), address(USDT), _amtBUSD, _amtBUSD*98/100);\n\n            emit WithdrawUSDTBUSD(_amt, _amtUSDT);\n        }\n    }\n\n    function _withdrawUSDCBUSD(uint _sharePerc) private {\n        uint amount = USDCBUSDVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            USDCBUSDVault.withdraw(amount);\n\n            uint _amt = USDCBUSD.balanceOf(address(this));\n            (uint _amtUSDC, uint _amtBUSD) = _removeLiquidity(address(USDC), address(BUSD), _amt);\n            uint _usdtAmt = _swap(address(USDC), address(USDT), _amtUSDC, _amtUSDC*98/100);\n            _usdtAmt += _swap(address(BUSD), address(USDT), _amtBUSD, _amtBUSD*98/100);\n\n            emit WithdrawUSDCBUSD(_amt, _usdtAmt);\n        }\n    }\n\n    function _swap(address _tokenA, address _tokenB, uint _amt, uint _minAmount) private returns (uint) {\n        address[] memory path = new address[](2);\n        path[0] = _tokenA;\n        path[1] = _tokenB;\n        return (PnckRouter.swapExactTokensForTokens(_amt , _minAmount, path, address(this), block.timestamp))[1];\n    }\n\n    function _addLiquidity(address _tokenA, address _tokenB, uint _amtA, uint _amtB) private returns (uint liquidity) {\n        (,,liquidity) = PnckRouter.addLiquidity(_tokenA, _tokenB, _amtA, _amtB, 0, 0, address(this), block.timestamp);\n    }\n\n    function _removeLiquidity(address _tokenA, address _tokenB, uint _amt) private returns (uint _amtA, uint _amtB) {\n        (_amtA, _amtB) = PnckRouter.removeLiquidity(_tokenA, _tokenB, _amt, 0, 0, address(this), block.timestamp);\n    }\n\n    function withdrawFromFarm(uint farmIndex, uint sharePerc) external onlyVault returns (uint USDTAmt) {\n        farmIndex;\n        // require(sharePerc <= 1e18, \"Over 100%\");\n        // if (farmIndex == 0) _withdrawUSDTUSDC(sharePerc); \n        // else if (farmIndex == 1) _withdrawUSDTBUSD(sharePerc);\n        // else if (farmIndex == 2) _withdrawUSDCBUSD(sharePerc);\n        // USDTAmt = USDT.balanceOf(address(this));\n        USDTAmt = USDT.balanceOf(address(this)) * sharePerc / 1e18;\n        USDT.safeTransfer(vault, USDTAmt);\n    }\n\n    function setVault(address _vault) external onlyOwner {\n        require(vault == address(0), \"Vault set\");\n        vault = _vault;\n    }\n\n    function emergencyWithdraw() external onlyVault {\n        // 1e18 == 100% of share\n        // _withdrawUSDTUSDC(1e18);\n        // _withdrawUSDTBUSD(1e18);\n        // _withdrawUSDCBUSD(1e18);\n        uint USDTAmt = USDT.balanceOf(address(this));\n        if (0 < USDTAmt) {\n            USDT.safeTransfer(vault, USDTAmt);\n        }\n        emit EmergencyWithdraw(USDTAmt);\n    }\n\n    function getUSDTUSDCPoolInUSD() private view  returns (uint) {\n        uint amt = USDTUSDCVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDTUSDCVault.balanceOf(address(this)) / USDTUSDCVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function getUSDTBUSDPoolInUSD() private view returns (uint) {\n        uint amt = USDTBUSDVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDTBUSDVault.balanceOf(address(this)) / USDTBUSDVault.totalSupply();\n    }\n\n    function getUSDCBUSDPoolInUSD() private view returns (uint) {\n        uint amt = USDCBUSDVault.getAllPoolInUSD();\n        return amt == 0 ? 0 : amt * USDCBUSDVault.balanceOf(address(this)) / USDCBUSDVault.totalSupply();\n    }\n\n    function getEachPoolInUSD() private view returns (uint[] memory pools) {\n        pools = new uint[](3);\n        // pools[0] = getUSDTUSDCPoolInUSD();\n        // pools[1] = getUSDTBUSDPoolInUSD();\n        // pools[2] = getUSDCBUSDPoolInUSD();\n    }\n\n    function getAllPoolInUSD() public view returns (uint) {\n        // uint[] memory pools = getEachPoolInUSD();\n        // return pools[0] + pools[1] + pools[2];\n        return USDT.balanceOf(address(this));\n    }\n\n    function getCurrentLPCompositionPerc() public view returns (uint[] memory percentages) {\n        uint[] memory pools = getEachPoolInUSD();\n        uint allPool = pools[0] + pools[1] + pools[2];\n        percentages = new uint[](3);\n        percentages[0] = allPool == 0 ? USDTUSDCTargetPerc : pools[0] * DENOMINATOR / allPool;\n        percentages[1] = allPool == 0 ? USDTBUSDTargetPerc : pools[1] * DENOMINATOR / allPool;\n        percentages[2] = allPool == 0 ? USDCBUSDTargetPerc : pools[2] * DENOMINATOR / allPool;\n    }\n\n    function getCurrentTokenCompositionPerc() external view returns (address[] memory tokens, uint[] memory percentages) {\n        uint[] memory lpPerc = getCurrentLPCompositionPerc();\n        tokens = new address[](3);\n        tokens[0] = address(USDT_MAIN);\n        tokens[1] = address(USDC_MAIN);\n        tokens[2] = address(BUSD_MAIN);\n        percentages = new uint[](3);\n        percentages[0] = (lpPerc[0] + lpPerc[1]) / 2;\n        percentages[1] = (lpPerc[0] + lpPerc[2]) / 2;\n        percentages[2] = (lpPerc[1] + lpPerc[2]) / 2;\n    }\n\n    function getAPR() external view returns (uint) {\n        uint[] memory lpPerc = getCurrentLPCompositionPerc();\n        uint allApr = USDTUSDCVault.getAPR() * lpPerc[0]\n                    + USDTBUSDVault.getAPR() * lpPerc[1]\n                    + USDCBUSDVault.getAPR() * lpPerc[2];\n        return (allApr / DENOMINATOR);\n    }\n\n}\n"
    },
    "contracts/bni/strategy/AuroraBNIStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./BNIStrategy.sol\";\nimport \"../../../interfaces/IL2Vault.sol\";\n\ncontract AuroraBNIStrategy is BNIStrategy {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IERC20Upgradeable public constant WNEAR = IERC20Upgradeable(0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d);\n\n    IL2Vault public WNEARVault;\n\n    event InvestWNEAR(uint USDTAmt, uint WNEARAmt);\n    event WithdrawWNEAR(uint WNEARAmt, uint USDTAmt);\n\n    function setWNEARVault(IL2Vault _WNEARVault) external onlyOwner {\n        WNEARVault = _WNEARVault;\n        if (WNEAR.allowance(address(this), address(WNEARVault)) == 0) {\n            WNEAR.safeApprove(address(WNEARVault), type(uint).max);\n        }\n    }\n\n    function _investWNEAR(uint USDTAmt) private {\n        uint WNEARAmt = WNEAR.balanceOf(address(this));\n        if (WNEARAmt > 0) {\n            WNEARVault.deposit(WNEARAmt);\n            emit InvestWNEAR(USDTAmt, WNEARAmt);\n        }\n    }\n\n    function _invest(uint[] memory _USDTAmts) internal virtual override {\n        super._invest(_USDTAmts);\n\n        uint poolCnt = _USDTAmts.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            address token = tokens[i];\n            if (token == address(WNEAR)) {\n                _investWNEAR(_USDTAmts[i]);\n            }\n        }\n    }\n\n    function _withdrawWNEAR(uint _sharePerc) private returns (uint USDTAmt) {\n        uint amount = WNEARVault.balanceOf(address(this)) * _sharePerc / 1e18;\n        if (0 < amount) {\n            WNEARVault.withdraw(amount);\n            uint WNEARAmt = WNEAR.balanceOf(address(this));\n            USDTAmt = _swapForUSDT(address(WNEAR), WNEARAmt);\n            emit WithdrawWNEAR(WNEARAmt, USDTAmt);\n        }\n    }\n\n    function _withdrawFromPool(uint _pid, uint _sharePerc) internal virtual override returns (uint USDTAmt) {\n        address token = tokens[_pid];\n        if (token == address(WNEAR)) {\n            USDTAmt = _withdrawWNEAR(_sharePerc);\n        } else {\n            USDTAmt = super._withdrawFromPool(_pid, _sharePerc);\n        }\n    }\n\n    function getWNEARPoolInUSD() private view  returns (uint) {\n        uint balance = WNEARVault.balanceOf(address(this));\n        return balance == 0 ? 0 : WNEARVault.getAllPoolInUSD() * balance / WNEARVault.totalSupply(); //to exclude L1 deposits from other addresses\n    }\n\n    function _getPoolInUSD(uint _pid) internal view virtual override returns (uint pool) {\n        address token = tokens[_pid];\n        if (token == address(WNEAR)) {\n            pool = getWNEARPoolInUSD();\n        } else {\n            pool = super._getPoolInUSD(_pid);\n        }\n    }\n\n    function getAPR() public view override returns (uint) {\n        (address[] memory _tokens, uint[] memory perc) = getCurrentTokenCompositionPerc();\n        uint allApr;\n        uint poolCnt = _tokens.length;\n        for (uint i = 0; i < poolCnt; i ++) {\n            address token = _tokens[i];\n            if (token == address(WNEAR)) {\n                allApr += WNEARVault.getAPR() * perc[i];\n            }\n        }\n        return (allApr / DENOMINATOR);\n    }\n\n}\n"
    },
    "contracts/swap/AuroraSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./BasicSwap.sol\";\n\ncontract AuroraSwap is BasicSwap {\n}\n"
    },
    "contracts/swap/AuroraSwapTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./AuroraSwap.sol\";\n\ncontract AuroraSwapTest is AuroraSwap {\n}\n"
    },
    "contracts/sti/STI.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.8.9;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\n\r\ncontract STI is ERC20Upgradeable, OwnableUpgradeable {\r\n\r\n  address private _minter;\r\n\r\n  function initialize() external initializer {\r\n    __Ownable_init();\r\n    __ERC20_init(\"Staking Index Fund\", \"STI\");\r\n  }\r\n\r\n  modifier onlyMinter() {\r\n    require(_minter == msg.sender, \"Mintable: caller is not the minter\");\r\n    _;\r\n  }\r\n\r\n  function setMinter( address minter_ ) external onlyOwner() returns ( bool ) {\r\n    _minter = minter_;\r\n    return true;\r\n  }\r\n\r\n  function minter() public view returns (address) {\r\n    return _minter;\r\n  }\r\n\r\n  function mint(address account_, uint256 amount_) external onlyMinter() {\r\n    _mint(account_, amount_);\r\n  }\r\n\r\n  function burn(uint256 amount) public virtual {\r\n    _burn(msg.sender, amount);\r\n  }\r\n\r\n  function burnFrom(address account, uint256 amount) public virtual {\r\n    if (msg.sender != _minter) {\r\n      _spendAllowance(account, msg.sender, amount);\r\n    }\r\n    _burn(account, amount);\r\n  }\r\n}\r\n"
    },
    "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/stVaults/StVaultNFTFactory.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface Logic {\n    function transferOwnership(address _newOwner) external;\n}\n\ncontract StVaultNFTFactory is Ownable {\n    UpgradeableBeacon immutable upgradeableBeacon;\n\n    address[] public nfts;\n    mapping(address=>uint) private indices;\n\n    constructor(address _logic) {\n        upgradeableBeacon = new UpgradeableBeacon(_logic);\n    }\n\n    function getBeacon() external view returns (address) {\n        return address(upgradeableBeacon);\n    }\n\n    function updateLogic(address _newImpl) onlyOwner public{\n        upgradeableBeacon.upgradeTo(_newImpl);\n    }\n\n    /// @param vault is the StVault address\n    function createNFT(address vault, bytes calldata _data) external onlyOwner returns (address _proxyAddress){\n        require(vault != address(0), \"Invalid vault\");\n        \n        BeaconProxy proxy = new BeaconProxy(\n           address(upgradeableBeacon),\n            _data\n        );\n\n        _proxyAddress = address(proxy);\n\n        Logic(_proxyAddress).transferOwnership(owner());\n\n        nfts.push(address(proxy));\n        indices[vault] = nfts.length;\n    }\n\n    function totalNFTs() external view returns (uint) {\n        return nfts.length;\n    }\n\n    function getNFT(uint _index) external view returns (address) {\n        return nfts[_index];\n    }\n\n    function getIndex(address vault) external view returns (uint) {\n        uint index = indices[vault];\n        return (index != 0) ? index - 1 : type(uint).max;\n    }\n\n    function getNFTByVault(address vault) external view returns (address) {\n        uint index = indices[vault];\n        return (index != 0) ? nfts[index-1] : address(0);\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/mwi/deps/Aave3VaultFactory.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface Logic {\n    function transferOwnership(address _newOwner) external;\n}\n\ncontract Aave3VaultFactory is Ownable {\n    UpgradeableBeacon immutable upgradeableBeacon;\n\n    address[] public vaults;\n    mapping(address=>uint) private indices;\n\n    constructor(address _logic) {\n        upgradeableBeacon = new UpgradeableBeacon(_logic);\n    }\n\n    function getBeacon() external view returns (address) {\n        return address(upgradeableBeacon);\n    }\n\n    function updateLogic(address _newImpl) onlyOwner public{\n        upgradeableBeacon.upgradeTo(_newImpl);\n    }\n\n    /// @param underlying is the underlying token of the Aav3 aToken\n    function createVault(address underlying, bytes calldata _data) external onlyOwner returns (address _proxyAddress){\n        require(underlying != address(0), \"Invalid underlying\");\n        \n        BeaconProxy proxy = new BeaconProxy(\n           address(upgradeableBeacon),\n            _data\n        );\n\n        _proxyAddress = address(proxy);\n\n        Logic(_proxyAddress).transferOwnership(owner());\n\n        vaults.push(address(proxy));\n        indices[underlying] = vaults.length;\n    }\n\n    function totalVaults() external view returns (uint) {\n        return vaults.length;\n    }\n\n    function getVault(uint _index) external view returns (address) {\n        return vaults[_index];\n    }\n\n    function getIndex(address underlying) external view returns (uint) {\n        uint index = indices[underlying];\n        return (index != 0) ? index - 1 : type(uint).max;\n    }\n\n    function getVaultByUnderlying(address underlying) external view returns (address) {\n        uint index = indices[underlying];\n        return (index != 0) ? vaults[index-1] : address(0);\n    }\n\n}\n"
    },
    "contracts/lci/deps/PckFarm2VaultFactory.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface Logic {\n    function transferOwnership(address _newOwner) external;\n}\n\ncontract PckFarm2VaultFactory is Ownable {\n    UpgradeableBeacon immutable upgradeableBeacon;\n\n    address[] public vaults;\n    mapping(uint=>uint) private indices;\n\n    constructor(address _logic) {\n        upgradeableBeacon = new UpgradeableBeacon(_logic);\n    }\n\n    function getBeacon() external view returns (address) {\n        return address(upgradeableBeacon);\n    }\n\n    function updateLogic(address _newImpl) onlyOwner public{\n        upgradeableBeacon.upgradeTo(_newImpl);\n    }\n\n    /// @param pid is the pool id in PancakeSwap MasterChef2\n    function createVault(uint pid, bytes calldata _data) external onlyOwner returns (address _proxyAddress){\n        \n        BeaconProxy proxy = new BeaconProxy(\n           address(upgradeableBeacon),\n            _data\n        );\n\n        _proxyAddress = address(proxy);\n\n        Logic(_proxyAddress).transferOwnership(owner());\n\n        vaults.push(address(proxy));\n        indices[pid] = vaults.length;\n    }\n\n    function totalVaults() external view returns (uint) {\n        return vaults.length;\n    }\n\n    function getVault(uint _index) external view returns (address) {\n        return vaults[_index];\n    }\n\n    function getIndex(uint pid) external view returns (uint) {\n        uint index = indices[pid];\n        return (index != 0) ? index - 1 : type(uint).max;\n    }\n\n    function getVaultByPid(uint pid) external view returns (address) {\n        uint index = indices[pid];\n        return (index != 0) ? vaults[index-1] : address(0);\n    }\n\n}\n\n"
    },
    "contracts/l2Vaults/compound/CompoundVaultFactory.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface Logic {\n    function transferOwnership(address _newOwner) external;\n}\n\ncontract CompoundVaultFactory is Ownable {\n    UpgradeableBeacon immutable upgradeableBeacon;\n\n    address[] public vaults;\n    mapping(address=>uint) private indices;\n\n    constructor(address _logic) {\n        upgradeableBeacon = new UpgradeableBeacon(_logic);\n    }\n\n    function getBeacon() external view returns (address) {\n        return address(upgradeableBeacon);\n    }\n\n    function updateLogic(address _newImpl) onlyOwner public{\n        upgradeableBeacon.upgradeTo(_newImpl);\n    }\n\n    /// @param underlying is the underlying token of the Aav3 aToken\n    function createVault(address underlying, bytes calldata _data) external onlyOwner returns (address _proxyAddress){\n        require(underlying != address(0), \"Invalid underlying\");\n        \n        BeaconProxy proxy = new BeaconProxy(\n           address(upgradeableBeacon),\n            _data\n        );\n\n        _proxyAddress = address(proxy);\n\n        Logic(_proxyAddress).transferOwnership(owner());\n\n        vaults.push(address(proxy));\n        indices[underlying] = vaults.length;\n    }\n\n    function totalVaults() external view returns (uint) {\n        return vaults.length;\n    }\n\n    function getVault(uint _index) external view returns (address) {\n        return vaults[_index];\n    }\n\n    function getIndex(address underlying) external view returns (uint) {\n        uint index = indices[underlying];\n        return (index != 0) ? index - 1 : type(uint).max;\n    }\n\n    function getVaultByUnderlying(address underlying) external view returns (address) {\n        uint index = indices[underlying];\n        return (index != 0) ? vaults[index-1] : address(0);\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}